/***********************************************************************************
*                                                                                  *
* Copyright 2013-2015 Altera Corporation. All Rights Reserved.                     *
*                                                                                  *
* Redistribution and use in source and binary forms, with or without               *
* modification, are permitted provided that the following conditions are met:      *
*                                                                                  *
* 1. Redistributions of source code must retain the above copyright notice,        *
*    this list of conditions and the following disclaimer.                         *
*                                                                                  *
* 2. Redistributions in binary form must reproduce the above copyright notice,     *
*    this list of conditions and the following disclaimer in the documentation     *
*    and/or other materials provided with the distribution.                        *
*                                                                                  *
* 3. Neither the name of the copyright holder nor the names of its contributors    *
*    may be used to endorse or promote products derived from this software without *
*    specific prior written permission.                                            *
*                                                                                  *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"      *
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE        *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE       *
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE        *
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR              *
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF             *
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS         *
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN          *
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)          *
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                      *
*                                                                                  *
***********************************************************************************/

/* Altera - ALT_MPFE_DDR_MAIN_PRB */

#ifndef __ALT_SOCAL_MPFE_H__
#define __ALT_SOCAL_MPFE_H__

#ifndef __ASSEMBLY__
#ifdef __cplusplus
#include <cstdint>
extern "C"
{
#else   /* __cplusplus */
#include <stdint.h>
#endif  /* __cplusplus */
#endif  /* __ASSEMBLY__ */

/*
 * Component : MPFE_DDR_MAIN_PRB
 * 
 */
/*
 * Register : ddr_T_main_Probe_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                  
 * :-------|:-------|:---------|:--------------------------------------------------------------
 *  [7:0]  | R      | 0x6      | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x298113 | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_RESET      0x6
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_RESET      0x298113
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_RESET       0x29811306
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_OFST        0x0

/*
 * Register : ddr_T_main_Probe_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                   
 * :-------|:-------|:------|:---------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_OFST        0x4

/*
 * Register : ddr_T_main_Probe_MainCtl
 * 
 * Register MainCtl contains probe global control bits. The register has seven bit
 * fields:
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                             
 * :-------|:-------|:--------|:-------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN                    
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN                  
 *  [2]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN                
 *  [3]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN                   
 *  [4]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN                  
 *  [5]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP             
 *  [6]    | R      | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE            
 *  [7]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN
 *  [31:8] | ???    | Unknown | *UNDEFINED*                                                             
 * 
 */
/*
 * Field : ERREN
 * 
 * Register field ErrEn enables the probe to send on the ObsTx output any packet
 * with Error status, independently of filtering mechanisms, thus constituting a
 * simple supplementary global filter.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : TRACEEN
 * 
 * Register field TraceEn enables the probe to send filtered packets (Trace) on the
 * ObsTx observation output.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : PAYLOADEN
 * 
 * Register field PayloadEn, when set to 1, enables traces to contain headers and
 * payload. When set ot 0, only headers are reported.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_MSB        2
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : STATEN
 * 
 * When set to 1, register field StatEn enables statistics profiling. The probe
 * sendS statistics results to the output for signal ObsTx. All statistics counters
 * are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are
 * disabled.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : ALARMEN
 * 
 * When set, register field AlarmEn enables the probe to collect alarm-related
 * information. When the register field bit is null, both TraceAlarm and StatAlarm
 * outputs are driven to 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : STATCONDDUMP
 * 
 * When set, register field StatCondDump enables the dump of a statistics frame to
 * the range of counter values set for registers StatAlarmMin, StatAlarmMax, and
 * AlarmMode. This field also renders register StatAlarmStatus inoperative. When
 * parameter statisticsCounterAlarm is set to False, the StatCondDump register bit
 * is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_MSB        5
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : INTRUSIVEMODE
 * 
 * When set to 1, register field IntrusiveMode enables trace operation in Intrusive
 * flow-control mode. When set to 0, the register  enables trace operation in
 * Overflow flow-control mode
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_MSB        6
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : FILTBYTEALWAYSCHAINABLEEN
 * 
 * When set to 0, filters are mapped to all statistic counters when counting bytes
 * or enabled bytes. Therefore, only filter events mapped to even counters can be
 * counted using a pair of chained counters.When set to 1, filters are mapped only
 * to even statistic counters when counting bytes or enabled bytes. Thus events
 * from any filter can be counted using a pair of chained counters.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_MSB        7
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN_SET(value) (((value) << 7) & 0x00000080)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_s
{
    volatile uint32_t        ERREN                     :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ERREN */
    volatile uint32_t        TRACEEN                   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_TRACEEN */
    volatile uint32_t        PAYLOADEN                 :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_PAYLOADEN */
    volatile uint32_t        STATEN                    :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATEN */
    volatile uint32_t        ALARMEN                   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_ALARMEN */
    volatile uint32_t        STATCONDDUMP              :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_STATCONDDUMP */
    const volatile uint32_t  INTRUSIVEMODE             :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_INTRUSIVEMODE */
    volatile uint32_t        FILTBYTEALWAYSCHAINABLEEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_FILTBYTEALWAYSCHAINABLEEN */
    uint32_t                                           : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_OFST        0x8

/*
 * Register : ddr_T_main_Probe_CfgCtl
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                           
 * :-------|:-------|:--------|:-------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN
 *  [1]    | R      | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE  
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                           
 * 
 */
/*
 * Field : GLOBALEN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : ACTIVE
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_s
{
    volatile uint32_t        GLOBALEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_GLOBALEN */
    const volatile uint32_t  ACTIVE   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_ACTIVE */
    uint32_t                          : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_OFST        0xc

/*
 * Register : ddr_T_main_Probe_FilterLut
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                               
 * :--------|:-------|:--------|:-----------------------------------------------------------
 *  [15:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT
 *  [31:16] | ???    | Unknown | *UNDEFINED*                                               
 * 
 */
/*
 * Field : FILTERLUT
 * 
 * Register FilterLut contains a look-up table that is used to combine filter
 * outputs in order to trace packets. Packet tracing is enabled when the FilterLut
 * bit of index (FNout ... F0out) is equal to 1.The number of bits in register
 * FilterLut is determined by the setting for parameter nFilter, calculated as
 * 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_MSB        15
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_WIDTH      16
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_s
{
    volatile uint32_t  FILTERLUT : 16;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_FILTERLUT */
    uint32_t                     : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_OFST        0x14

/*
 * Register : ddr_T_main_Probe_TraceAlarmEn
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                     
 * :-------|:-------|:--------|:-----------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                     
 * 
 */
/*
 * Field : TRACEALARMEN
 * 
 * Register TraceAlarmEn controls which lookup table or filter can set the
 * TraceAlarm signal output once the trace alarm status is set. The number of bits
 * in register TraceAlarmEn is determined by the value set for parameter nFilter +
 * 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the
 * corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn
 * is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_s
{
    volatile uint32_t  TRACEALARMEN :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_TRACEALARMEN */
    uint32_t                        : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_OFST        0x18

/*
 * Register : ddr_T_main_Probe_TraceAlarmStatus
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                             
 * :-------|:-------|:--------|:-------------------------------------------------------------------------
 *  [4:0]  | R      | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                             
 * 
 */
/*
 * Field : TRACEALARMSTATUS
 * 
 * Register TraceAlarmStatus is a read-only register that indicates which lookup
 * table or filter has been matched by a packet, independently of register
 * TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is
 * determined by the value set for parameter nFilter + 1.When nFilter is set to
 * None, TraceAlarmStatus is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_s
{
    const volatile uint32_t  TRACEALARMSTATUS :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_TRACEALARMSTATUS */
    uint32_t                                  : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_OFST        0x1c

/*
 * Register : ddr_T_main_Probe_TraceAlarmClr
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                       
 * :-------|:-------|:--------|:-------------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                       
 * 
 */
/*
 * Field : TRACEALARMCLR
 * 
 * Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in
 * register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal
 * to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The
 * written value is not stored in TraceAlarmClr. A read always returns 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_s
{
    volatile uint32_t  TRACEALARMCLR :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_TRACEALARMCLR */
    uint32_t                         : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_OFST        0x20

/*
 * Register : ddr_T_main_Probe_StatPeriod
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                 
 * :-------|:-------|:--------|:-------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                 
 * 
 */
/*
 * Field : STATPERIOD
 * 
 * Register StatPeriod is a 5-bit register that sets a period, within a range of 2
 * cycles to 2 gigacycles, during which statistics are collected before being
 * dumped automatically. Setting the register implicitly enables automatic mode
 * operation for statistics collection. The period is calculated with the formula:
 * N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0,
 * automatic dump mode is disabled, and register StatGo is activated for manual
 * mode operation. Note: When parameter statisticsCollection is set to False,
 * StatPeriod is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_s
{
    volatile uint32_t  STATPERIOD :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_STATPERIOD */
    uint32_t                      : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_OFST        0x24

/*
 * Register : ddr_T_main_Probe_StatGo
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                         
 * :-------|:-------|:--------|:-----------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                         
 * 
 */
/*
 * Field : STATGO
 * 
 * Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The
 * register is active when statistics collection operates in manual mode, that is,
 * when register StatPeriod is set to 0.NOTE  The written value is not stored in
 * StatGo. A read always returns 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_s
{
    volatile uint32_t  STATGO :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_STATGO */
    uint32_t                  : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_OFST        0x28

/*
 * Register : ddr_T_main_Probe_StatAlarmMin
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                     
 * :-------|:-------|:------|:-----------------------------------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN
 * 
 */
/*
 * Field : STATALARMMIN
 * 
 * Register StatAlarmMin contains the minimum count value used in statistics alarm
 * comparisons. The number of bits is equal to twice the value set forparameter
 * wStatisticsCounter. When parameter statisticsCounterAlarm is set to False,
 * StatAlarmMin is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_WIDTH      32
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_s
{
    volatile uint32_t  STATALARMMIN : 32;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_STATALARMMIN */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_OFST        0x2c

/*
 * Register : ddr_T_main_Probe_StatAlarmMax
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                     
 * :-------|:-------|:------|:-----------------------------------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX
 * 
 */
/*
 * Field : STATALARMMAX
 * 
 * Register StatAlarmMax contains the maximum count value used in statistics alarm
 * comparisons.The number of bits is equal to twice the value set for parameter
 * wStatisticsCounter. When parameter statisticsCounterAlarm is set to False,
 * StatAlarmMax is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_WIDTH      32
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_s
{
    volatile uint32_t  STATALARMMAX : 32;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_STATALARMMAX */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_OFST        0x30

/*
 * Register : ddr_T_main_Probe_StatAlarmStatus
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                           
 * :-------|:-------|:--------|:-----------------------------------------------------------------------
 *  [0]    | R      | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                                           
 * 
 */
/*
 * Field : STATALARMSTATUS
 * 
 * Register StatAlarmStatus is a read-only 1-bit register indicating that at least
 * one statistics counter has exceeded the programmed values for registers
 * StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values
 * stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter
 * statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_s
{
    const volatile uint32_t  STATALARMSTATUS :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_STATALARMSTATUS */
    uint32_t                                 : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_OFST        0x34

/*
 * Register : ddr_T_main_Probe_StatAlarmClr
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                     
 * :-------|:-------|:--------|:-----------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                                     
 * 
 */
/*
 * Field : STATALARMCLR
 * 
 * Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears
 * the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to
 * False, StatAlarmClr is reserved.NOTE  The written value is not stored in
 * StatAlarmClr. A read always returns 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_s
{
    volatile uint32_t  STATALARMCLR :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_STATALARMCLR */
    uint32_t                        : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_OFST        0x38

/*
 * Register : ddr_T_main_Probe_StatAlarmEn
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                   
 * :-------|:-------|:--------|:---------------------------------------------------------------
 *  [0]    | RW     | 0x1     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : STATALARMEN
 * 
 * Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and
 * CtiTrigOut(1) signal interrupts.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_RESET      0x1
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_s
{
    volatile uint32_t  STATALARMEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_STATALARMEN */
    uint32_t                       : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_RESET       0x00000001
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_OFST        0x3c

/*
 * Register : ddr_T_main_Probe_Filters_0_RouteIdBase
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_0_ROUTEIDBASE
 * 
 * Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to
 * filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_s
{
    volatile uint32_t  FILTERS_0_ROUTEIDBASE : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_FILTERS_0_ROUTEIDBASE */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_OFST        0x44

/*
 * Register : ddr_T_main_Probe_Filters_0_RouteIdMask
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_0_ROUTEIDMASK
 * 
 * Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter
 * packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId &
 * RouteIdMask = RouteIdBase & RouteIdMask.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_s
{
    volatile uint32_t  FILTERS_0_ROUTEIDMASK : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_FILTERS_0_ROUTEIDMASK */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_OFST        0x48

/*
 * Register : ddr_T_main_Probe_Filters_0_AddrBase_Low
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                         
 * :-------|:-------|:------|:-------------------------------------------------------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW
 * 
 */
/*
 * Field : FILTERS_0_ADDRBASE_LOW
 * 
 * Address LSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_WIDTH      32
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_s
{
    volatile uint32_t  FILTERS_0_ADDRBASE_LOW : 32;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_FILTERS_0_ADDRBASE_LOW */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_OFST        0x4c

/*
 * Register : ddr_T_main_Probe_Filters_0_AddrBase_High
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : FILTERS_0_ADDRBASE_HIGH
 * 
 * Address MSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_s
{
    volatile uint32_t  FILTERS_0_ADDRBASE_HIGH :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_FILTERS_0_ADDRBASE_HIGH */
    uint32_t                                   : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_OFST        0x50

/*
 * Register : ddr_T_main_Probe_Filters_0_WindowSize
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                     
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------
 *  [5:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE
 *  [31:6] | ???    | Unknown | *UNDEFINED*                                                                     
 * 
 */
/*
 * Field : FILTERS_0_WINDOWSIZE
 * 
 * Register WindowSize contains the encoded address mask used to filter packets.
 * The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A
 * packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows
 * filteringof packets having an intersection with the AddrBase/WindowSize burst
 * aligned region, even if the region is smaller than the packet.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_MSB        5
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE_SET(value) (((value) << 0) & 0x0000003f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_s
{
    volatile uint32_t  FILTERS_0_WINDOWSIZE :  6;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_FILTERS_0_WINDOWSIZE */
    uint32_t                                : 26;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_OFST        0x54

/*
 * Register : ddr_T_main_Probe_Filters_0_SecurityBase
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_0_SECURITYBASE
 * 
 * Register SecurityBase contains the security base used to filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_s
{
    volatile uint32_t  FILTERS_0_SECURITYBASE :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_FILTERS_0_SECURITYBASE */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_OFST        0x58

/*
 * Register : ddr_T_main_Probe_Filters_0_SecurityMask
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_0_SECURITYMASK
 * 
 * Register SecurityMask is contains the security mask used to filter packets. A
 * packet is a candidate when: packet.Security & SecurityMask = SecurityBase &
 * SecurityMasks.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_s
{
    volatile uint32_t  FILTERS_0_SECURITYMASK :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_FILTERS_0_SECURITYMASK */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_OFST        0x5c

/*
 * Register : ddr_T_main_Probe_Filters_0_Opcode
 * 
 * Packet Probe register Opcode is a 4-bit register that selects candidate packets
 * based on packet opcodes (0 disables the filter):
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                   
 * :-------|:-------|:--------|:---------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN  
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN  
 *  [2]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN
 *  [3]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN 
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : RDEN
 * 
 * Selects RD packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : WREN
 * 
 * Selects WR packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : LOCKEN
 * 
 * Selects RDX-WR, RDL, WRC and Linked sequence.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_MSB        2
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : URGEN
 * 
 * Selects URG packets (urgency).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_s
{
    volatile uint32_t  RDEN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RDEN */
    volatile uint32_t  WREN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_WREN */
    volatile uint32_t  LOCKEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_LOCKEN */
    volatile uint32_t  URGEN  :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_URGEN */
    uint32_t                  : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_OFST        0x60

/*
 * Register : ddr_T_main_Probe_Filters_0_Status
 * 
 * Register Status is 2-bit register that selects candidate packets based on packet
 * status.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                  
 * :-------|:-------|:--------|:--------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                  
 * 
 */
/*
 * Field : REQEN
 * 
 * Selects REQ status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : RSPEN
 * 
 * Selects RSP and FAIL-CONT status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_s
{
    volatile uint32_t  REQEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_REQEN */
    volatile uint32_t  RSPEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RSPEN */
    uint32_t                 : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_OFST        0x64

/*
 * Register : ddr_T_main_Probe_Filters_0_Length
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                             
 * :-------|:-------|:--------|:-------------------------------------------------------------------------
 *  [3:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                             
 * 
 */
/*
 * Field : FILTERS_0_LENGTH
 * 
 * Register Length is 4-bit register that selects candidate packets if their number
 * of bytes is less than or equal to 2**Length.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_WIDTH      4
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH_SET(value) (((value) << 0) & 0x0000000f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_s
{
    volatile uint32_t  FILTERS_0_LENGTH :  4;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_FILTERS_0_LENGTH */
    uint32_t                            : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_OFST        0x68

/*
 * Register : ddr_T_main_Probe_Filters_0_Urgency
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                               
 * :-------|:-------|:--------|:---------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                               
 * 
 */
/*
 * Field : FILTERS_0_URGENCY
 * 
 * Register Urgency contains the minimum urgency level used to filter packets. A
 * packet is a candidate when its socket urgency is greater than or equal to the
 * urgency specified in the register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_s
{
    volatile uint32_t  FILTERS_0_URGENCY :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_FILTERS_0_URGENCY */
    uint32_t                             : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_OFST        0x6c

/*
 * Register : ddr_T_main_Probe_Filters_1_RouteIdBase
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_1_ROUTEIDBASE
 * 
 * Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to
 * filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_s
{
    volatile uint32_t  FILTERS_1_ROUTEIDBASE : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_FILTERS_1_ROUTEIDBASE */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_OFST        0x80

/*
 * Register : ddr_T_main_Probe_Filters_1_RouteIdMask
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_1_ROUTEIDMASK
 * 
 * Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter
 * packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId &
 * RouteIdMask = RouteIdBase & RouteIdMask.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_s
{
    volatile uint32_t  FILTERS_1_ROUTEIDMASK : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_FILTERS_1_ROUTEIDMASK */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_OFST        0x84

/*
 * Register : ddr_T_main_Probe_Filters_1_AddrBase_Low
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                         
 * :-------|:-------|:------|:-------------------------------------------------------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW
 * 
 */
/*
 * Field : FILTERS_1_ADDRBASE_LOW
 * 
 * Address LSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_WIDTH      32
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_s
{
    volatile uint32_t  FILTERS_1_ADDRBASE_LOW : 32;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_FILTERS_1_ADDRBASE_LOW */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_OFST        0x88

/*
 * Register : ddr_T_main_Probe_Filters_1_AddrBase_High
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : FILTERS_1_ADDRBASE_HIGH
 * 
 * Address MSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_s
{
    volatile uint32_t  FILTERS_1_ADDRBASE_HIGH :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_FILTERS_1_ADDRBASE_HIGH */
    uint32_t                                   : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_OFST        0x8c

/*
 * Register : ddr_T_main_Probe_Filters_1_WindowSize
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                     
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------
 *  [5:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE
 *  [31:6] | ???    | Unknown | *UNDEFINED*                                                                     
 * 
 */
/*
 * Field : FILTERS_1_WINDOWSIZE
 * 
 * Register WindowSize contains the encoded address mask used to filter packets.
 * The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A
 * packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows
 * filteringof packets having an intersection with the AddrBase/WindowSize burst
 * aligned region, even if the region is smaller than the packet.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_MSB        5
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE_SET(value) (((value) << 0) & 0x0000003f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_s
{
    volatile uint32_t  FILTERS_1_WINDOWSIZE :  6;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_FILTERS_1_WINDOWSIZE */
    uint32_t                                : 26;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_OFST        0x90

/*
 * Register : ddr_T_main_Probe_Filters_1_SecurityBase
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_1_SECURITYBASE
 * 
 * Register SecurityBase contains the security base used to filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_s
{
    volatile uint32_t  FILTERS_1_SECURITYBASE :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_FILTERS_1_SECURITYBASE */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_OFST        0x94

/*
 * Register : ddr_T_main_Probe_Filters_1_SecurityMask
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_1_SECURITYMASK
 * 
 * Register SecurityMask is contains the security mask used to filter packets. A
 * packet is a candidate when: packet.Security & SecurityMask = SecurityBase &
 * SecurityMasks.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_s
{
    volatile uint32_t  FILTERS_1_SECURITYMASK :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_FILTERS_1_SECURITYMASK */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_OFST        0x98

/*
 * Register : ddr_T_main_Probe_Filters_1_Opcode
 * 
 * Packet Probe register Opcode is a 4-bit register that selects candidate packets
 * based on packet opcodes (0 disables the filter):
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                   
 * :-------|:-------|:--------|:---------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN  
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN  
 *  [2]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN
 *  [3]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN 
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : RDEN
 * 
 * Selects RD packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : WREN
 * 
 * Selects WR packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : LOCKEN
 * 
 * Selects RDX-WR, RDL, WRC and Linked sequence.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_MSB        2
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : URGEN
 * 
 * Selects URG packets (urgency).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_s
{
    volatile uint32_t  RDEN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RDEN */
    volatile uint32_t  WREN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_WREN */
    volatile uint32_t  LOCKEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_LOCKEN */
    volatile uint32_t  URGEN  :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_URGEN */
    uint32_t                  : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_OFST        0x9c

/*
 * Register : ddr_T_main_Probe_Filters_1_Status
 * 
 * Register Status is 2-bit register that selects candidate packets based on packet
 * status.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                  
 * :-------|:-------|:--------|:--------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                  
 * 
 */
/*
 * Field : REQEN
 * 
 * Selects REQ status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : RSPEN
 * 
 * Selects RSP and FAIL-CONT status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_s
{
    volatile uint32_t  REQEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_REQEN */
    volatile uint32_t  RSPEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RSPEN */
    uint32_t                 : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_OFST        0xa0

/*
 * Register : ddr_T_main_Probe_Filters_1_Length
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                             
 * :-------|:-------|:--------|:-------------------------------------------------------------------------
 *  [3:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                             
 * 
 */
/*
 * Field : FILTERS_1_LENGTH
 * 
 * Register Length is 4-bit register that selects candidate packets if their number
 * of bytes is less than or equal to 2**Length.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_WIDTH      4
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH_SET(value) (((value) << 0) & 0x0000000f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_s
{
    volatile uint32_t  FILTERS_1_LENGTH :  4;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_FILTERS_1_LENGTH */
    uint32_t                            : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_OFST        0xa4

/*
 * Register : ddr_T_main_Probe_Filters_1_Urgency
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                               
 * :-------|:-------|:--------|:---------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                               
 * 
 */
/*
 * Field : FILTERS_1_URGENCY
 * 
 * Register Urgency contains the minimum urgency level used to filter packets. A
 * packet is a candidate when its socket urgency is greater than or equal to the
 * urgency specified in the register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_s
{
    volatile uint32_t  FILTERS_1_URGENCY :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_FILTERS_1_URGENCY */
    uint32_t                             : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_OFST        0xa8

/*
 * Register : ddr_T_main_Probe_Filters_2_RouteIdBase
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_2_ROUTEIDBASE
 * 
 * Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to
 * filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_s
{
    volatile uint32_t  FILTERS_2_ROUTEIDBASE : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_FILTERS_2_ROUTEIDBASE */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_OFST        0xbc

/*
 * Register : ddr_T_main_Probe_Filters_2_RouteIdMask
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_2_ROUTEIDMASK
 * 
 * Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter
 * packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId &
 * RouteIdMask = RouteIdBase & RouteIdMask.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_s
{
    volatile uint32_t  FILTERS_2_ROUTEIDMASK : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_FILTERS_2_ROUTEIDMASK */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_OFST        0xc0

/*
 * Register : ddr_T_main_Probe_Filters_2_AddrBase_Low
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                         
 * :-------|:-------|:------|:-------------------------------------------------------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW
 * 
 */
/*
 * Field : FILTERS_2_ADDRBASE_LOW
 * 
 * Address LSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_WIDTH      32
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_s
{
    volatile uint32_t  FILTERS_2_ADDRBASE_LOW : 32;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_FILTERS_2_ADDRBASE_LOW */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_OFST        0xc4

/*
 * Register : ddr_T_main_Probe_Filters_2_AddrBase_High
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : FILTERS_2_ADDRBASE_HIGH
 * 
 * Address MSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_s
{
    volatile uint32_t  FILTERS_2_ADDRBASE_HIGH :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_FILTERS_2_ADDRBASE_HIGH */
    uint32_t                                   : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_OFST        0xc8

/*
 * Register : ddr_T_main_Probe_Filters_2_WindowSize
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                     
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------
 *  [5:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE
 *  [31:6] | ???    | Unknown | *UNDEFINED*                                                                     
 * 
 */
/*
 * Field : FILTERS_2_WINDOWSIZE
 * 
 * Register WindowSize contains the encoded address mask used to filter packets.
 * The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A
 * packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows
 * filteringof packets having an intersection with the AddrBase/WindowSize burst
 * aligned region, even if the region is smaller than the packet.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_MSB        5
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE_SET(value) (((value) << 0) & 0x0000003f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_s
{
    volatile uint32_t  FILTERS_2_WINDOWSIZE :  6;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_FILTERS_2_WINDOWSIZE */
    uint32_t                                : 26;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_OFST        0xcc

/*
 * Register : ddr_T_main_Probe_Filters_2_SecurityBase
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_2_SECURITYBASE
 * 
 * Register SecurityBase contains the security base used to filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_s
{
    volatile uint32_t  FILTERS_2_SECURITYBASE :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_FILTERS_2_SECURITYBASE */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_OFST        0xd0

/*
 * Register : ddr_T_main_Probe_Filters_2_SecurityMask
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_2_SECURITYMASK
 * 
 * Register SecurityMask is contains the security mask used to filter packets. A
 * packet is a candidate when: packet.Security & SecurityMask = SecurityBase &
 * SecurityMasks.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_s
{
    volatile uint32_t  FILTERS_2_SECURITYMASK :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_FILTERS_2_SECURITYMASK */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_OFST        0xd4

/*
 * Register : ddr_T_main_Probe_Filters_2_Opcode
 * 
 * Packet Probe register Opcode is a 4-bit register that selects candidate packets
 * based on packet opcodes (0 disables the filter):
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                   
 * :-------|:-------|:--------|:---------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN  
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN  
 *  [2]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN
 *  [3]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN 
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : RDEN
 * 
 * Selects RD packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : WREN
 * 
 * Selects WR packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : LOCKEN
 * 
 * Selects RDX-WR, RDL, WRC and Linked sequence.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_MSB        2
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : URGEN
 * 
 * Selects URG packets (urgency).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_s
{
    volatile uint32_t  RDEN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RDEN */
    volatile uint32_t  WREN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_WREN */
    volatile uint32_t  LOCKEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_LOCKEN */
    volatile uint32_t  URGEN  :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_URGEN */
    uint32_t                  : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_OFST        0xd8

/*
 * Register : ddr_T_main_Probe_Filters_2_Status
 * 
 * Register Status is 2-bit register that selects candidate packets based on packet
 * status.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                  
 * :-------|:-------|:--------|:--------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                  
 * 
 */
/*
 * Field : REQEN
 * 
 * Selects REQ status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : RSPEN
 * 
 * Selects RSP and FAIL-CONT status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_s
{
    volatile uint32_t  REQEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_REQEN */
    volatile uint32_t  RSPEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RSPEN */
    uint32_t                 : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_OFST        0xdc

/*
 * Register : ddr_T_main_Probe_Filters_2_Length
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                             
 * :-------|:-------|:--------|:-------------------------------------------------------------------------
 *  [3:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                             
 * 
 */
/*
 * Field : FILTERS_2_LENGTH
 * 
 * Register Length is 4-bit register that selects candidate packets if their number
 * of bytes is less than or equal to 2**Length.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_WIDTH      4
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH_SET(value) (((value) << 0) & 0x0000000f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_s
{
    volatile uint32_t  FILTERS_2_LENGTH :  4;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_FILTERS_2_LENGTH */
    uint32_t                            : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_OFST        0xe0

/*
 * Register : ddr_T_main_Probe_Filters_2_Urgency
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                               
 * :-------|:-------|:--------|:---------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                               
 * 
 */
/*
 * Field : FILTERS_2_URGENCY
 * 
 * Register Urgency contains the minimum urgency level used to filter packets. A
 * packet is a candidate when its socket urgency is greater than or equal to the
 * urgency specified in the register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_s
{
    volatile uint32_t  FILTERS_2_URGENCY :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_FILTERS_2_URGENCY */
    uint32_t                             : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_OFST        0xe4

/*
 * Register : ddr_T_main_Probe_Filters_3_RouteIdBase
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_3_ROUTEIDBASE
 * 
 * Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to
 * filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_s
{
    volatile uint32_t  FILTERS_3_ROUTEIDBASE : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_FILTERS_3_ROUTEIDBASE */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_OFST        0xf8

/*
 * Register : ddr_T_main_Probe_Filters_3_RouteIdMask
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                       
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------
 *  [13:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK
 *  [31:14] | ???    | Unknown | *UNDEFINED*                                                                       
 * 
 */
/*
 * Field : FILTERS_3_ROUTEIDMASK
 * 
 * Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter
 * packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId &
 * RouteIdMask = RouteIdBase & RouteIdMask.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_MSB        13
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_WIDTH      14
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_SET_MSK    0x00003fff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_CLR_MSK    0xffffc000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK_SET(value) (((value) << 0) & 0x00003fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_s
{
    volatile uint32_t  FILTERS_3_ROUTEIDMASK : 14;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_FILTERS_3_ROUTEIDMASK */
    uint32_t                                 : 18;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_OFST        0xfc

/*
 * Register : ddr_T_main_Probe_Filters_3_AddrBase_Low
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                         
 * :-------|:-------|:------|:-------------------------------------------------------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW
 * 
 */
/*
 * Field : FILTERS_3_ADDRBASE_LOW
 * 
 * Address LSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_WIDTH      32
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_s
{
    volatile uint32_t  FILTERS_3_ADDRBASE_LOW : 32;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_FILTERS_3_ADDRBASE_LOW */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_OFST        0x100

/*
 * Register : ddr_T_main_Probe_Filters_3_AddrBase_High
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : FILTERS_3_ADDRBASE_HIGH
 * 
 * Address MSB register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_s
{
    volatile uint32_t  FILTERS_3_ADDRBASE_HIGH :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_FILTERS_3_ADDRBASE_HIGH */
    uint32_t                                   : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_OFST        0x104

/*
 * Register : ddr_T_main_Probe_Filters_3_WindowSize
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                     
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------
 *  [5:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE
 *  [31:6] | ???    | Unknown | *UNDEFINED*                                                                     
 * 
 */
/*
 * Field : FILTERS_3_WINDOWSIZE
 * 
 * Register WindowSize contains the encoded address mask used to filter packets.
 * The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A
 * packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows
 * filteringof packets having an intersection with the AddrBase/WindowSize burst
 * aligned region, even if the region is smaller than the packet.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_MSB        5
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE_SET(value) (((value) << 0) & 0x0000003f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_s
{
    volatile uint32_t  FILTERS_3_WINDOWSIZE :  6;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_FILTERS_3_WINDOWSIZE */
    uint32_t                                : 26;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_OFST        0x108

/*
 * Register : ddr_T_main_Probe_Filters_3_SecurityBase
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_3_SECURITYBASE
 * 
 * Register SecurityBase contains the security base used to filter packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_s
{
    volatile uint32_t  FILTERS_3_SECURITYBASE :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_FILTERS_3_SECURITYBASE */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_OFST        0x10c

/*
 * Register : ddr_T_main_Probe_Filters_3_SecurityMask
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                         
 * :-------|:-------|:--------|:-------------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                         
 * 
 */
/*
 * Field : FILTERS_3_SECURITYMASK
 * 
 * Register SecurityMask is contains the security mask used to filter packets. A
 * packet is a candidate when: packet.Security & SecurityMask = SecurityBase &
 * SecurityMasks.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_s
{
    volatile uint32_t  FILTERS_3_SECURITYMASK :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_FILTERS_3_SECURITYMASK */
    uint32_t                                  : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_OFST        0x110

/*
 * Register : ddr_T_main_Probe_Filters_3_Opcode
 * 
 * Packet Probe register Opcode is a 4-bit register that selects candidate packets
 * based on packet opcodes (0 disables the filter):
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                   
 * :-------|:-------|:--------|:---------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN  
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN  
 *  [2]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN
 *  [3]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN 
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : RDEN
 * 
 * Selects RD packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : WREN
 * 
 * Selects WR packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : LOCKEN
 * 
 * Selects RDX-WR, RDL, WRC and Linked sequence.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_MSB        2
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : URGEN
 * 
 * Selects URG packets (urgency).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_s
{
    volatile uint32_t  RDEN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RDEN */
    volatile uint32_t  WREN   :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_WREN */
    volatile uint32_t  LOCKEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_LOCKEN */
    volatile uint32_t  URGEN  :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_URGEN */
    uint32_t                  : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_OFST        0x114

/*
 * Register : ddr_T_main_Probe_Filters_3_Status
 * 
 * Register Status is 2-bit register that selects candidate packets based on packet
 * status.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                  
 * :-------|:-------|:--------|:--------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                  
 * 
 */
/*
 * Field : REQEN
 * 
 * Selects REQ status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : RSPEN
 * 
 * Selects RSP and FAIL-CONT status packets.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_s
{
    volatile uint32_t  REQEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_REQEN */
    volatile uint32_t  RSPEN :  1;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RSPEN */
    uint32_t                 : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_OFST        0x118

/*
 * Register : ddr_T_main_Probe_Filters_3_Length
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                             
 * :-------|:-------|:--------|:-------------------------------------------------------------------------
 *  [3:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                                             
 * 
 */
/*
 * Field : FILTERS_3_LENGTH
 * 
 * Register Length is 4-bit register that selects candidate packets if their number
 * of bytes is less than or equal to 2**Length.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_WIDTH      4
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH_SET(value) (((value) << 0) & 0x0000000f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_s
{
    volatile uint32_t  FILTERS_3_LENGTH :  4;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_FILTERS_3_LENGTH */
    uint32_t                            : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_OFST        0x11c

/*
 * Register : ddr_T_main_Probe_Filters_3_Urgency
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                               
 * :-------|:-------|:--------|:---------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                               
 * 
 */
/*
 * Field : FILTERS_3_URGENCY
 * 
 * Register Urgency contains the minimum urgency level used to filter packets. A
 * packet is a candidate when its socket urgency is greater than or equal to the
 * urgency specified in the register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_s
{
    volatile uint32_t  FILTERS_3_URGENCY :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_FILTERS_3_URGENCY */
    uint32_t                             : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_OFST        0x120

/*
 * Register : ddr_T_main_Probe_Counters_0_Src
 * 
 * Register CntSrc indicates the event source used to increment the counter.
 * Unassigned values (non-existing Press level or ExtEvent index, or unimplemented
 * Filter) are equivalent to OFF.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                   
 * :-------|:-------|:--------|:---------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : INTEVENT
 * 
 * Internal packet event
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_s
{
    volatile uint32_t  INTEVENT :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_INTEVENT */
    uint32_t                    : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_OFST        0x138

/*
 * Register : ddr_T_main_Probe_Counters_0_AlarmMode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                     
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                     
 * 
 */
/*
 * Field : COUNTERS_0_ALARMMODE
 * 
 * Register AlarmMode is a 2-bit register that is present when parameter
 * statisticsCounterAlarm is set to True. The register defines the statistics-alarm
 * behavior of the counter.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_s
{
    volatile uint32_t  COUNTERS_0_ALARMMODE :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_COUNTERS_0_ALARMMODE */
    uint32_t                                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_OFST        0x13c

/*
 * Register : ddr_T_main_Probe_Counters_0_Val
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                         
 * :--------|:-------|:--------|:---------------------------------------------------------------------
 *  [15:0]  | R      | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL
 *  [31:16] | ???    | Unknown | *UNDEFINED*                                                         
 * 
 */
/*
 * Field : COUNTERS_0_VAL
 * 
 * Register Val is a read-only register that is always present. The register
 * containsthe statistics counter value either pending StatAlarm output, or when
 * statisticscollection is suspended subsequent to triggers or signal statSuspend.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_MSB        15
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_WIDTH      16
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_s
{
    const volatile uint32_t  COUNTERS_0_VAL : 16;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_COUNTERS_0_VAL */
    uint32_t                                : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_OFST        0x140

/*
 * Register : ddr_T_main_Probe_Counters_1_Src
 * 
 * Register CntSrc indicates the event source used to increment the counter.
 * Unassigned values (non-existing Press level or ExtEvent index, or unimplemented
 * Filter) are equivalent to OFF.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                   
 * :-------|:-------|:--------|:---------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : INTEVENT
 * 
 * Internal packet event
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_s
{
    volatile uint32_t  INTEVENT :  5;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_INTEVENT */
    uint32_t                    : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_OFST        0x14c

/*
 * Register : ddr_T_main_Probe_Counters_1_AlarmMode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                     
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                     
 * 
 */
/*
 * Field : COUNTERS_1_ALARMMODE
 * 
 * Register AlarmMode is a 2-bit register that is present when parameter
 * statisticsCounterAlarm is set to True. The register defines the statistics-alarm
 * behavior of the counter.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_s
{
    volatile uint32_t  COUNTERS_1_ALARMMODE :  2;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_COUNTERS_1_ALARMMODE */
    uint32_t                                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_OFST        0x150

/*
 * Register : ddr_T_main_Probe_Counters_1_Val
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                         
 * :--------|:-------|:--------|:---------------------------------------------------------------------
 *  [15:0]  | R      | 0x0     | ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL
 *  [31:16] | ???    | Unknown | *UNDEFINED*                                                         
 * 
 */
/*
 * Field : COUNTERS_1_VAL
 * 
 * Register Val is a read-only register that is always present. The register
 * containsthe statistics counter value either pending StatAlarm output, or when
 * statisticscollection is suspended subsequent to triggers or signal statSuspend.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_MSB        15
/* The width in bits of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_WIDTH      16
/* The mask used to set the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL register field value. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL register field. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL field value from a register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL.
 */
struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_s
{
    const volatile uint32_t  COUNTERS_1_VAL : 16;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_COUNTERS_1_VAL */
    uint32_t                                : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_s  ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL register. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_OFST        0x154

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_DDR_MAIN_PRB.
 */
struct ALT_MPFE_DDR_MAIN_PRB_s
{
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID_t                ddr_T_main_Probe_Id_CoreId;                /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID_t            ddr_T_main_Probe_Id_RevisionId;            /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL_t                  ddr_T_main_Probe_MainCtl;                  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL_t                   ddr_T_main_Probe_CfgCtl;                   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL */
    volatile uint32_t                                                          _pad_0x10_0x13;                            /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT_t                ddr_T_main_Probe_FilterLut;                /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN_t             ddr_T_main_Probe_TraceAlarmEn;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS_t         ddr_T_main_Probe_TraceAlarmStatus;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR_t            ddr_T_main_Probe_TraceAlarmClr;            /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD_t               ddr_T_main_Probe_StatPeriod;               /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO_t                   ddr_T_main_Probe_StatGo;                   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN_t             ddr_T_main_Probe_StatAlarmMin;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX_t             ddr_T_main_Probe_StatAlarmMax;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS_t          ddr_T_main_Probe_StatAlarmStatus;          /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR_t             ddr_T_main_Probe_StatAlarmClr;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN_t              ddr_T_main_Probe_StatAlarmEn;              /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN */
    volatile uint32_t                                                          _pad_0x40_0x43;                            /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE_t    ddr_T_main_Probe_Filters_0_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK_t    ddr_T_main_Probe_Filters_0_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW_t   ddr_T_main_Probe_Filters_0_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH_t  ddr_T_main_Probe_Filters_0_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE_t     ddr_T_main_Probe_Filters_0_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE_t   ddr_T_main_Probe_Filters_0_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK_t   ddr_T_main_Probe_Filters_0_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE_t         ddr_T_main_Probe_Filters_0_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS_t         ddr_T_main_Probe_Filters_0_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH_t         ddr_T_main_Probe_Filters_0_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY_t        ddr_T_main_Probe_Filters_0_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY */
    volatile uint32_t                                                          _pad_0x70_0x7f[4];                         /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE_t    ddr_T_main_Probe_Filters_1_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK_t    ddr_T_main_Probe_Filters_1_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW_t   ddr_T_main_Probe_Filters_1_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH_t  ddr_T_main_Probe_Filters_1_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE_t     ddr_T_main_Probe_Filters_1_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE_t   ddr_T_main_Probe_Filters_1_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK_t   ddr_T_main_Probe_Filters_1_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE_t         ddr_T_main_Probe_Filters_1_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS_t         ddr_T_main_Probe_Filters_1_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH_t         ddr_T_main_Probe_Filters_1_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY_t        ddr_T_main_Probe_Filters_1_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY */
    volatile uint32_t                                                          _pad_0xac_0xbb[4];                         /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE_t    ddr_T_main_Probe_Filters_2_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK_t    ddr_T_main_Probe_Filters_2_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW_t   ddr_T_main_Probe_Filters_2_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH_t  ddr_T_main_Probe_Filters_2_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE_t     ddr_T_main_Probe_Filters_2_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE_t   ddr_T_main_Probe_Filters_2_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK_t   ddr_T_main_Probe_Filters_2_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE_t         ddr_T_main_Probe_Filters_2_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS_t         ddr_T_main_Probe_Filters_2_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH_t         ddr_T_main_Probe_Filters_2_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY_t        ddr_T_main_Probe_Filters_2_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY */
    volatile uint32_t                                                          _pad_0xe8_0xf7[4];                         /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE_t    ddr_T_main_Probe_Filters_3_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK_t    ddr_T_main_Probe_Filters_3_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW_t   ddr_T_main_Probe_Filters_3_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH_t  ddr_T_main_Probe_Filters_3_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE_t     ddr_T_main_Probe_Filters_3_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE_t   ddr_T_main_Probe_Filters_3_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK_t   ddr_T_main_Probe_Filters_3_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE_t         ddr_T_main_Probe_Filters_3_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS_t         ddr_T_main_Probe_Filters_3_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH_t         ddr_T_main_Probe_Filters_3_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY_t        ddr_T_main_Probe_Filters_3_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY */
    volatile uint32_t                                                          _pad_0x124_0x137[5];                       /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC_t           ddr_T_main_Probe_Counters_0_Src;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE_t     ddr_T_main_Probe_Counters_0_AlarmMode;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL_t           ddr_T_main_Probe_Counters_0_Val;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL */
    volatile uint32_t                                                          _pad_0x144_0x14b[2];                       /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC_t           ddr_T_main_Probe_Counters_1_Src;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE_t     ddr_T_main_Probe_Counters_1_AlarmMode;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE */
    volatile ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL_t           ddr_T_main_Probe_Counters_1_Val;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL */
    volatile uint32_t                                                          _pad_0x158_0x400[170];                     /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_DDR_MAIN_PRB. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_s  ALT_MPFE_DDR_MAIN_PRB_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_DDR_MAIN_PRB. */
struct ALT_MPFE_DDR_MAIN_PRB_raw_s
{
    volatile uint32_t  ddr_T_main_Probe_Id_CoreId;                /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_COREID */
    volatile uint32_t  ddr_T_main_Probe_Id_RevisionId;            /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_ID_REVISIONID */
    volatile uint32_t  ddr_T_main_Probe_MainCtl;                  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_MAINCTL */
    volatile uint32_t  ddr_T_main_Probe_CfgCtl;                   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_CFGCTL */
    volatile uint32_t  _pad_0x10_0x13;                            /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Probe_FilterLut;                /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERLUT */
    volatile uint32_t  ddr_T_main_Probe_TraceAlarmEn;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMEN */
    volatile uint32_t  ddr_T_main_Probe_TraceAlarmStatus;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMSTATUS */
    volatile uint32_t  ddr_T_main_Probe_TraceAlarmClr;            /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_TRACEALARMCLR */
    volatile uint32_t  ddr_T_main_Probe_StatPeriod;               /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATPERIOD */
    volatile uint32_t  ddr_T_main_Probe_StatGo;                   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATGO */
    volatile uint32_t  ddr_T_main_Probe_StatAlarmMin;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMIN */
    volatile uint32_t  ddr_T_main_Probe_StatAlarmMax;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMMAX */
    volatile uint32_t  ddr_T_main_Probe_StatAlarmStatus;          /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMSTATUS */
    volatile uint32_t  ddr_T_main_Probe_StatAlarmClr;             /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMCLR */
    volatile uint32_t  ddr_T_main_Probe_StatAlarmEn;              /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_STATALARMEN */
    volatile uint32_t  _pad_0x40_0x43;                            /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ROUTEIDMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_LOW */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_ADDRBASE_HIGH */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_WINDOWSIZE */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_SECURITYMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_OPCODE */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_STATUS */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_LENGTH */
    volatile uint32_t  ddr_T_main_Probe_Filters_0_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_0_URGENCY */
    volatile uint32_t  _pad_0x70_0x7f[4];                         /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ROUTEIDMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_LOW */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_ADDRBASE_HIGH */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_WINDOWSIZE */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_SECURITYMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_OPCODE */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_STATUS */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_LENGTH */
    volatile uint32_t  ddr_T_main_Probe_Filters_1_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_1_URGENCY */
    volatile uint32_t  _pad_0xac_0xbb[4];                         /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ROUTEIDMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_LOW */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_ADDRBASE_HIGH */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_WINDOWSIZE */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_SECURITYMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_OPCODE */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_STATUS */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_LENGTH */
    volatile uint32_t  ddr_T_main_Probe_Filters_2_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_2_URGENCY */
    volatile uint32_t  _pad_0xe8_0xf7[4];                         /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_RouteIdBase;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_RouteIdMask;    /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ROUTEIDMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_AddrBase_Low;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_LOW */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_AddrBase_High;  /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_ADDRBASE_HIGH */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_WindowSize;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_WINDOWSIZE */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_SecurityBase;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYBASE */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_SecurityMask;   /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_SECURITYMASK */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_Opcode;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_OPCODE */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_Status;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_STATUS */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_Length;         /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_LENGTH */
    volatile uint32_t  ddr_T_main_Probe_Filters_3_Urgency;        /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_FILTERS_3_URGENCY */
    volatile uint32_t  _pad_0x124_0x137[5];                       /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Probe_Counters_0_Src;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_SRC */
    volatile uint32_t  ddr_T_main_Probe_Counters_0_AlarmMode;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_ALARMMODE */
    volatile uint32_t  ddr_T_main_Probe_Counters_0_Val;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_0_VAL */
    volatile uint32_t  _pad_0x144_0x14b[2];                       /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Probe_Counters_1_Src;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_SRC */
    volatile uint32_t  ddr_T_main_Probe_Counters_1_AlarmMode;     /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_ALARMMODE */
    volatile uint32_t  ddr_T_main_Probe_Counters_1_Val;           /* ALT_MPFE_DDR_MAIN_PRB_DDR_T_MAIN_PROBE_COUNTERS_1_VAL */
    volatile uint32_t  _pad_0x158_0x400[170];                     /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_DDR_MAIN_PRB. */
typedef struct ALT_MPFE_DDR_MAIN_PRB_raw_s  ALT_MPFE_DDR_MAIN_PRB_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_DDR_MAIN_SCHED
 * 
 */
/*
 * Register : ddr_T_main_Scheduler_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                        
 * :-------|:-------|:---------|:--------------------------------------------------------------------
 *  [7:0]  | R      | 0x2      | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x6471be | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_RESET      0x2
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_RESET      0x6471be
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_RESET       0x6471be02
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_OFST        0x0

/*
 * Register : ddr_T_main_Scheduler_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                         
 * :-------|:-------|:------|:---------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_OFST        0x4

/*
 * Register : ddr_T_main_Scheduler_DdrConf
 * 
 * ddr configuration definition.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                 
 * :-------|:-------|:--------|:-------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                 
 * 
 */
/*
 * Field : DDRCONF
 * 
 * Selection of a configuration of mappings of address bits to memory device, bank,
 * row, and column. <See SoC-specific DDR Conf documentation>
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                      | Value | Description
 * :--------------------------------------------------------------------------|:------|:------------
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R12_B3_C10 | 0x00  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R13_B3_C9  | 0x01  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R13_B3_C10 | 0x02  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R14_B3_C9  | 0x03  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R14_B3_C10 | 0x04  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R15_B3_C10 | 0x05  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R14_B3_C11 | 0x06  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R15_B3_C11 | 0x07  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R16_B3_C10 | 0x08  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R16_B3_C11 | 0x09  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R15_B3_C12 | 0x0A  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R14_C10 | 0x0B  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R14_C10 | 0x0C  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R15_C10 | 0x0D  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R15_C10 | 0x0E  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R16_C10 | 0x0F  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R16_C10 | 0x10  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R17_C10 | 0x11  |            
 *  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R17_C10 | 0x12  |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R12_B3_C10   0x00
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R13_B3_C9    0x01
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R13_B3_C10   0x02
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R14_B3_C9    0x03
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R14_B3_C10   0x04
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R15_B3_C10   0x05
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R14_B3_C11   0x06
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R15_B3_C11   0x07
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R16_B3_C10   0x08
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R16_B3_C11   0x09
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR3 or LPDDR3
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_R15_B3_C12   0x0A
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R14_C10   0x0B
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R14_C10   0x0C
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R15_C10   0x0D
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R15_C10   0x0E
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R16_C10   0x0F
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R16_C10   0x10
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B3_R17_C10   0x11
/*
 * Enumerated value for register field ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF
 * 
 * DDR4 only
 */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_E_B4_R17_C10   0x12

/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_MSB        4
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_s
{
    volatile uint32_t  DDRCONF :  5;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_DDRCONF */
    uint32_t                   : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_OFST        0x8

/*
 * Register : ddr_T_main_Scheduler_DdrTiming
 * 
 * ddr timing definition.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                                    
 * :--------|:-------|:------|:----------------------------------------------------------------
 *  [5:0]   | RW     | 0x1f  | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT
 *  [11:6]  | RW     | 0x15  | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS
 *  [17:12] | RW     | 0x25  | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS
 *  [20:18] | RW     | 0x3   | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN
 *  [25:21] | RW     | 0x2   | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR  
 *  [30:26] | RW     | 0xc   | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD  
 *  [31]    | RW     | 0x1   | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO 
 * 
 */
/*
 * Field : ACTTOACT
 * 
 * The minimum number of scheduler clock cycles between two consecutive DRAM
 * Activate commands on the same bank (tRC/ tCkG). tCkG is the clock period of the
 * SoC DRAM scheduler.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_MSB        5
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_RESET      0x1f
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT_SET(value) (((value) << 0) & 0x0000003f)

/*
 * Field : RDTOMISS
 * 
 * The minimum number of scheduler clock cycles between the last DRAM Read command
 * and a new Read or Write command in another page of the same bank (tRTP + tRP +
 * tRCD - BL x tCkD / 2). tCkD is the DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_MSB        11
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_SET_MSK    0x00000fc0
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_CLR_MSK    0xfffff03f
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_RESET      0x15
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_GET(value) (((value) & 0x00000fc0) >> 6)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS_SET(value) (((value) << 6) & 0x00000fc0)

/*
 * Field : WRTOMISS
 * 
 * The minimum number of scheduler clock cycles between the last DRAM Write command
 * and a new Read or Write command in another page of the same bank (WL x tCkD +
 * tWR + tRP + tRCD). tCkD is the DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_MSB        17
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_SET_MSK    0x0003f000
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_CLR_MSK    0xfffc0fff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_RESET      0x25
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_GET(value) (((value) & 0x0003f000) >> 12)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS_SET(value) (((value) << 12) & 0x0003f000)

/*
 * Field : BURSTLEN
 * 
 * The DRAM burst duration on the DRAM data bus in scheduler clock cycles. Also
 * equal to scheduler clock cycles between two DRAM commands (BL / 2 x tCkD). tCkD
 * is the DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_MSB        20
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_WIDTH      3
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_SET_MSK    0x001c0000
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_CLR_MSK    0xffe3ffff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_RESET      0x3
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_GET(value) (((value) & 0x001c0000) >> 18)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN_SET(value) (((value) << 18) & 0x001c0000)

/*
 * Field : RDTOWR
 * 
 * The minimum number of scheduler clock cycles between the last DRAM Read command
 * and a Write command (DDR2: 2 x tCkD, DDR3: (RL - WL + 2) x tCkD). tCkD is the
 * DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_MSB        25
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_SET_MSK    0x03e00000
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_CLR_MSK    0xfc1fffff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_RESET      0x2
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_GET(value) (((value) & 0x03e00000) >> 21)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR_SET(value) (((value) << 21) & 0x03e00000)

/*
 * Field : WRTORD
 * 
 * The minimum number of scheduler clock cycles between the last DRAM Write command
 * and a Read command (WL x tCkD + tWTR). tCkD is the DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_MSB        30
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_SET_MSK    0x7c000000
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_CLR_MSK    0x83ffffff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_RESET      0xc
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_GET(value) (((value) & 0x7c000000) >> 26)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD_SET(value) (((value) << 26) & 0x7c000000)

/*
 * Field : BWRATIO
 * 
 * When set to zero, one DRAM clock cycle (two DDR transfers) is used to transfer
 * each word of data. When set to one, two DRAM clock cycles (four DDR transfers)
 * are used to transfer each word of data. This is applicable when half of a DRAM
 * data bus width is used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_MSB        31
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_RESET      0x1
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_s
{
    volatile uint32_t  ACTTOACT :  6;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_ACTTOACT */
    volatile uint32_t  RDTOMISS :  6;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOMISS */
    volatile uint32_t  WRTOMISS :  6;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTOMISS */
    volatile uint32_t  BURSTLEN :  3;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BURSTLEN */
    volatile uint32_t  RDTOWR   :  5;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RDTOWR */
    volatile uint32_t  WRTORD   :  5;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_WRTORD */
    volatile uint32_t  BWRATIO  :  1;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_BWRATIO */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_RESET       0xb04e555f
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_OFST        0xc

/*
 * Register : ddr_T_main_Scheduler_DdrMode
 * 
 * ddr mode definition.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                         
 * :-------|:-------|:--------|:---------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE  
 *  [1]    | RW     | 0x0     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                         
 * 
 */
/*
 * Field : AUTOPRECHARGE
 * 
 * When set to one, pages are automatically closed after each access, when set to
 * zero, pages are left opened until an access in a different page occurs
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_MSB        0
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : BWRATIOEXTENDED
 * 
 * When set to 1, support for 4x Bwratio.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_RESET      0x0
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_s
{
    volatile uint32_t  AUTOPRECHARGE   :  1;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_AUTOPRECHARGE */
    volatile uint32_t  BWRATIOEXTENDED :  1;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_BWRATIOEXTENDED */
    uint32_t                           : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_OFST        0x10

/*
 * Register : ddr_T_main_Scheduler_ReadLatency
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                         
 * :-------|:-------|:--------|:---------------------------------------------------------------------
 *  [7:0]  | RW     | 0x3d    | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY
 *  [31:8] | ???    | Unknown | *UNDEFINED*                                                         
 * 
 */
/*
 * Field : READLATENCY
 * 
 * The DRAM type-specific number of cycles from a scheduler request to a protocol
 * controller response. This is a fixed value depending on the type of DRAM memory.
 * <See SoC-specific memory controller documentation>.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_MSB        7
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_WIDTH      8
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_RESET      0x3d
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY_SET(value) (((value) << 0) & 0x000000ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_s
{
    volatile uint32_t  READLATENCY :  8;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_READLATENCY */
    uint32_t                       : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_RESET       0x0000003d
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_OFST        0x14

/*
 * Register : ddr_T_main_Scheduler_Activate
 * 
 * timing values concerning Activate commands, in Generic clock unit.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                  
 * :--------|:-------|:--------|:--------------------------------------------------------------
 *  [3:0]   | RW     | 0x3     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD    
 *  [9:4]   | RW     | 0xf     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW    
 *  [10]    | RW     | 0x1     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK
 *  [31:11] | ???    | Unknown | *UNDEFINED*                                                  
 * 
 */
/*
 * Field : RRD
 * 
 * 'The number of cycles between two consecutive Activate commands on different
 * Banks of the same device (tRRD).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_WIDTH      4
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_RESET      0x3
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD_SET(value) (((value) << 0) & 0x0000000f)

/*
 * Field : FAW
 * 
 * The number of cycles for the four bank activate (FAW) period (tFAW).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_MSB        9
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_WIDTH      6
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_SET_MSK    0x000003f0
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_CLR_MSK    0xfffffc0f
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_RESET      0xf
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_GET(value) (((value) & 0x000003f0) >> 4)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW_SET(value) (((value) << 4) & 0x000003f0)

/*
 * Field : FAWBANK
 * 
 * The number of Banks of a given device involved in the FAW period. Set to zero
 * for 2-bank memories (WideIO). Set to one for memories with 4 banks or more
 * (DDR).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_MSB        10
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_WIDTH      1
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_RESET      0x1
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK_SET(value) (((value) << 10) & 0x00000400)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_s
{
    volatile uint32_t  RRD     :  4;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RRD */
    volatile uint32_t  FAW     :  6;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAW */
    volatile uint32_t  FAWBANK :  1;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_FAWBANK */
    uint32_t                   : 21;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_RESET       0x000004f3
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_OFST        0x38

/*
 * Register : ddr_T_main_Scheduler_DevToDev
 * 
 * timing values concerning device to device data bus ownership change, in Generic
 * clock unit.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                    
 * :-------|:-------|:--------|:----------------------------------------------------------------
 *  [1:0]  | RW     | 0x1     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD
 *  [3:2]  | RW     | 0x2     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR
 *  [5:4]  | RW     | 0x2     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD
 *  [31:6] | ???    | Unknown | *UNDEFINED*                                                    
 * 
 */
/*
 * Field : BUSRDTORD
 * 
 * The number of cycles between the last read data of a device and the first read
 * data of another device of a memory array with multiple ranks (tCkD). tCkD is the
 * DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_MSB        1
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_RESET      0x1
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : BUSRDTOWR
 * 
 * The number of cycles between the last read data of a device and the first write
 * data to another device of a memory array with multiple ranks (2 x tCkD). tCkD is
 * the DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_MSB        3
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_SET_MSK    0x0000000c
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_CLR_MSK    0xfffffff3
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_RESET      0x2
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_GET(value) (((value) & 0x0000000c) >> 2)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR_SET(value) (((value) << 2) & 0x0000000c)

/*
 * Field : BUSWRTORD
 * 
 * The number of cycles between the last write data to a device and the first read
 * data of another device of a memory array with multiple ranks (2 x tCkD). tCkD is
 * the DRAM clock period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_MSB        5
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_WIDTH      2
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_SET_MSK    0x00000030
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_CLR_MSK    0xffffffcf
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_RESET      0x2
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_GET(value) (((value) & 0x00000030) >> 4)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD_SET(value) (((value) << 4) & 0x00000030)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_s
{
    volatile uint32_t  BUSRDTORD :  2;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTORD */
    volatile uint32_t  BUSRDTOWR :  2;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSRDTOWR */
    volatile uint32_t  BUSWRTORD :  2;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_BUSWRTORD */
    uint32_t                     : 26;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_RESET       0x00000029
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_OFST        0x3c

/*
 * Register : ddr_T_main_Scheduler_Ddr4Timing
 * 
 * Long timing for DDR4 Bank Group support.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                    
 * :--------|:-------|:--------|:----------------------------------------------------------------
 *  [2:0]   | RW     | 0x7     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL   
 *  [7:3]   | RW     | 0xc     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL
 *  [11:8]  | RW     | 0x3     | ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL   
 *  [31:12] | ???    | Unknown | *UNDEFINED*                                                    
 * 
 */
/*
 * Field : CCDL
 * 
 * Project-Id-Version:  2.11.4
 * 
 * Report-Msgid-Bugs-To:
 * 
 * POT-Creation-Date: 2015-03-03 12:49+CET
 * 
 * PO-Revision-Date: 2009-01-19 17:46+0100
 * 
 * Last-Translator: ARTERIS <twt@arteris.com>
 * 
 * Language-Team: en_US <twt@arteris.com>
 * 
 * MIME-Version: 1.0
 * 
 * Content-Type: text/plain; charset=UTF-8
 * 
 * Content-Transfer-Encoding: 8bit
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_MSB        2
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_WIDTH      3
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_SET_MSK    0x00000007
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_CLR_MSK    0xfffffff8
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_RESET      0x7
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_GET(value) (((value) & 0x00000007) >> 0)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL_SET(value) (((value) << 0) & 0x00000007)

/*
 * Field : WRTORDL
 * 
 * Project-Id-Version:  2.11.4
 * 
 * Report-Msgid-Bugs-To:
 * 
 * POT-Creation-Date: 2015-03-03 12:49+CET
 * 
 * PO-Revision-Date: 2009-01-19 17:46+0100
 * 
 * Last-Translator: ARTERIS <twt@arteris.com>
 * 
 * Language-Team: en_US <twt@arteris.com>
 * 
 * MIME-Version: 1.0
 * 
 * Content-Type: text/plain; charset=UTF-8
 * 
 * Content-Transfer-Encoding: 8bit
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_MSB        7
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_WIDTH      5
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_SET_MSK    0x000000f8
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_CLR_MSK    0xffffff07
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_RESET      0xc
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_GET(value) (((value) & 0x000000f8) >> 3)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL_SET(value) (((value) << 3) & 0x000000f8)

/*
 * Field : RRDL
 * 
 * Project-Id-Version:  2.11.4
 * 
 * Report-Msgid-Bugs-To:
 * 
 * POT-Creation-Date: 2015-03-03 12:49+CET
 * 
 * PO-Revision-Date: 2009-01-19 17:46+0100
 * 
 * Last-Translator: ARTERIS <twt@arteris.com>
 * 
 * Language-Team: en_US <twt@arteris.com>
 * 
 * MIME-Version: 1.0
 * 
 * Content-Type: text/plain; charset=UTF-8
 * 
 * Content-Transfer-Encoding: 8bit
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_MSB        11
/* The width in bits of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_WIDTH      4
/* The mask used to set the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_SET_MSK    0x00000f00
/* The mask used to clear the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL register field value. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_CLR_MSK    0xfffff0ff
/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL register field. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_RESET      0x3
/* Extracts the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL field value from a register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_GET(value) (((value) & 0x00000f00) >> 8)
/* Produces a ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL register field value suitable for setting the register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL_SET(value) (((value) << 8) & 0x00000f00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_s
{
    volatile uint32_t  CCDL    :  3;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_CCDL */
    volatile uint32_t  WRTORDL :  5;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_WRTORDL */
    volatile uint32_t  RRDL    :  4;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RRDL */
    uint32_t                   : 20;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_s  ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING register. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_RESET       0x00000367
/* The byte offset of the ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING register from the beginning of the component. */
#define ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_OFST        0x40

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_DDR_MAIN_SCHED.
 */
struct ALT_MPFE_DDR_MAIN_SCHED_s
{
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID_t      ddr_T_main_Scheduler_Id_CoreId;      /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID_t  ddr_T_main_Scheduler_Id_RevisionId;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF_t        ddr_T_main_Scheduler_DdrConf;        /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING_t      ddr_T_main_Scheduler_DdrTiming;      /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE_t        ddr_T_main_Scheduler_DdrMode;        /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY_t    ddr_T_main_Scheduler_ReadLatency;    /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY */
    volatile uint32_t                                                      _pad_0x18_0x37[8];                   /* *UNDEFINED* */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE_t       ddr_T_main_Scheduler_Activate;       /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV_t       ddr_T_main_Scheduler_DevToDev;       /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV */
    volatile ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING_t     ddr_T_main_Scheduler_Ddr4Timing;     /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING */
    volatile uint32_t                                                      _pad_0x44_0x80[15];                  /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_DDR_MAIN_SCHED. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_s  ALT_MPFE_DDR_MAIN_SCHED_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_DDR_MAIN_SCHED. */
struct ALT_MPFE_DDR_MAIN_SCHED_raw_s
{
    volatile uint32_t  ddr_T_main_Scheduler_Id_CoreId;      /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_COREID */
    volatile uint32_t  ddr_T_main_Scheduler_Id_RevisionId;  /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ID_REVISIONID */
    volatile uint32_t  ddr_T_main_Scheduler_DdrConf;        /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRCONF */
    volatile uint32_t  ddr_T_main_Scheduler_DdrTiming;      /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRTIMING */
    volatile uint32_t  ddr_T_main_Scheduler_DdrMode;        /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDRMODE */
    volatile uint32_t  ddr_T_main_Scheduler_ReadLatency;    /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_READLATENCY */
    volatile uint32_t  _pad_0x18_0x37[8];                   /* *UNDEFINED* */
    volatile uint32_t  ddr_T_main_Scheduler_Activate;       /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_ACTIVATE */
    volatile uint32_t  ddr_T_main_Scheduler_DevToDev;       /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DEVTODEV */
    volatile uint32_t  ddr_T_main_Scheduler_Ddr4Timing;     /* ALT_MPFE_DDR_MAIN_SCHED_DDR_T_MAIN_SCHEDULER_DDR4TIMING */
    volatile uint32_t  _pad_0x44_0x80[15];                  /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_DDR_MAIN_SCHED. */
typedef struct ALT_MPFE_DDR_MAIN_SCHED_raw_s  ALT_MPFE_DDR_MAIN_SCHED_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_IOHMC
 * iohmc_ctrl_mmr_top_inst.register_control
 * 
 */
/*
 * Register : reg_dbgcfg0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                      
 * :-------|:-------|:--------|:--------------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL  
 *  [1]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL     
 *  [2]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N
 *  [3]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN       
 *  [4]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL    
 *  [8:5]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE          
 *  [31:9] | ???    | Unknown | *UNDEFINED*                                      
 * 
 */
/*
 * Field : cfg_wdata_driver_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_wdata_driver_sel
 * 
 * Name:Wr Data Driver Select
 * 
 * Description:1’b0 – write data from core, 1’b1 – write data from PRBS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : cfg_prbs_ctrl_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_prbs_ctrl_sel
 * 
 * Name:PRBS Control Select
 * 
 * Description:1’b0 – PRBS controlled by HMC, 1’b1 – PRBS controlled by
 * sequencer
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : cfg_cb_seq_en_fix_en_n
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_seq_en_fix_en_n
 * 
 * Name:Sequencer enable fix
 * 
 * Description:Chicken Bit for DBC Fix (DQS Tracking) in Sequencer Enable mode:
 * 1’b0 – Fix Enabled, 1’b1 – Fix Disabled
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_MSB        2
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : cfg_loopback_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_loopback_en
 * 
 * Name:Loopback Mode Enable
 * 
 * Description:1’b0 – Disable the loopback mode, 1’b1 – Enable the loopback
 * mode for testing
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : cfg_cmd_driver_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cmd_driver_sel
 * 
 * Name:Cmd Driver Select
 * 
 * Description:1’b0 – cmd interface driven by core, 1’b1 -  cmd interface
 * driven by MMR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_MSB        4
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : cfg_dbg_mode
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbg_mode[3:0]
 * 
 * Name:Debug Mode
 * 
 * Description:4’b0000 – functional mode, TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_SET_MSK    0x000001e0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_CLR_MSK    0xfffffe1f
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_GET(value) (((value) & 0x000001e0) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE_SET(value) (((value) << 5) & 0x000001e0)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGCFG0.
 */
struct ALT_MPFE_IOHMC_REG_DBGCFG0_s
{
    volatile uint32_t  cfg_wdata_driver_sel   :  1;  /* ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_WDATA_DRIVER_SEL */
    volatile uint32_t  cfg_prbs_ctrl_sel      :  1;  /* ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_PRBS_CTRL_SEL */
    volatile uint32_t  cfg_cb_seq_en_fix_en_n :  1;  /* ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CB_SEQ_EN_FIX_EN_N */
    volatile uint32_t  cfg_loopback_en        :  1;  /* ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_LOOPBACK_EN */
    volatile uint32_t  cfg_cmd_driver_sel     :  1;  /* ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_CMD_DRIVER_SEL */
    volatile uint32_t  cfg_dbg_mode           :  4;  /* ALT_MPFE_IOHMC_REG_DBGCFG0_CFG_DBG_MODE */
    uint32_t                                  : 23;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGCFG0. */
typedef struct ALT_MPFE_IOHMC_REG_DBGCFG0_s  ALT_MPFE_IOHMC_REG_DBGCFG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG0 register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGCFG0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGCFG0_OFST        0x0

/*
 * Register : reg_dbgcfg1
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                            
 * :-------|:-------|:--------|:----------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL
 * 
 */
/*
 * Field : cfg_dbg_ctrl
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbg_ctrl[31:0]
 * 
 * Name:Debug Control
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGCFG1.
 */
struct ALT_MPFE_IOHMC_REG_DBGCFG1_s
{
    volatile uint32_t  cfg_dbg_ctrl : 32;  /* ALT_MPFE_IOHMC_REG_DBGCFG1_CFG_DBG_CTRL */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGCFG1. */
typedef struct ALT_MPFE_IOHMC_REG_DBGCFG1_s  ALT_MPFE_IOHMC_REG_DBGCFG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG1 register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGCFG1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGCFG1_OFST        0x4

/*
 * Register : reg_dbgcfg2
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                               
 * :-------|:-------|:--------|:-------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U
 * 
 */
/*
 * Field : cfg_bist_cmd0_u
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_bist_cmd0_u[31:0]
 * 
 * Name:BIST mode cmd0 upper bits
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGCFG2.
 */
struct ALT_MPFE_IOHMC_REG_DBGCFG2_s
{
    volatile uint32_t  cfg_bist_cmd0_u : 32;  /* ALT_MPFE_IOHMC_REG_DBGCFG2_CFG_BIST_CMD0_U */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGCFG2. */
typedef struct ALT_MPFE_IOHMC_REG_DBGCFG2_s  ALT_MPFE_IOHMC_REG_DBGCFG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG2 register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGCFG2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGCFG2_OFST        0x8

/*
 * Register : reg_dbgcfg3
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                               
 * :-------|:-------|:--------|:-------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L
 * 
 */
/*
 * Field : cfg_bist_cmd0_l
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_bist_cmd0_l[31:0]
 * 
 * Name:BIST mode cmd0 lower bits
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGCFG3.
 */
struct ALT_MPFE_IOHMC_REG_DBGCFG3_s
{
    volatile uint32_t  cfg_bist_cmd0_l : 32;  /* ALT_MPFE_IOHMC_REG_DBGCFG3_CFG_BIST_CMD0_L */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGCFG3. */
typedef struct ALT_MPFE_IOHMC_REG_DBGCFG3_s  ALT_MPFE_IOHMC_REG_DBGCFG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG3 register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGCFG3 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGCFG3_OFST        0xc

/*
 * Register : reg_dbgcfg4
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                               
 * :-------|:-------|:--------|:-------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U
 * 
 */
/*
 * Field : cfg_bist_cmd1_u
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_bist_cmd1_u[31:0]
 * 
 * Name:BIST mode cmd1 upper bits
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGCFG4.
 */
struct ALT_MPFE_IOHMC_REG_DBGCFG4_s
{
    volatile uint32_t  cfg_bist_cmd1_u : 32;  /* ALT_MPFE_IOHMC_REG_DBGCFG4_CFG_BIST_CMD1_U */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGCFG4. */
typedef struct ALT_MPFE_IOHMC_REG_DBGCFG4_s  ALT_MPFE_IOHMC_REG_DBGCFG4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG4 register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGCFG4 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGCFG4_OFST        0x10

/*
 * Register : reg_dbgcfg5
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                               
 * :-------|:-------|:--------|:-------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L
 * 
 */
/*
 * Field : cfg_bist_cmd1_l
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_bist_cmd1_l[31:0]
 * 
 * Name:BIST mode cmd1 lower bits
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGCFG5.
 */
struct ALT_MPFE_IOHMC_REG_DBGCFG5_s
{
    volatile uint32_t  cfg_bist_cmd1_l : 32;  /* ALT_MPFE_IOHMC_REG_DBGCFG5_CFG_BIST_CMD1_L */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGCFG5. */
typedef struct ALT_MPFE_IOHMC_REG_DBGCFG5_s  ALT_MPFE_IOHMC_REG_DBGCFG5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG5 register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGCFG5 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGCFG5_OFST        0x14

/*
 * Register : reg_dbgcfg6
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                               
 * :--------|:-------|:--------|:-------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL
 *  [31:16] | ???    | Unknown | *UNDEFINED*                               
 * 
 */
/*
 * Field : cfg_dbg_out_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbg_out_sel[15:0]
 * 
 * Name:Debug Signal Output Select
 * 
 * Description:Select which debug signals sent out for observation
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL register field. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGCFG6.
 */
struct ALT_MPFE_IOHMC_REG_DBGCFG6_s
{
    volatile uint32_t  cfg_dbg_out_sel : 16;  /* ALT_MPFE_IOHMC_REG_DBGCFG6_CFG_DBG_OUT_SEL */
    uint32_t                           : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGCFG6. */
typedef struct ALT_MPFE_IOHMC_REG_DBGCFG6_s  ALT_MPFE_IOHMC_REG_DBGCFG6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGCFG6 register. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGCFG6 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGCFG6_OFST        0x18

/*
 * Register : reg_reserve0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                             
 * :--------|:-------|:--------|:-----------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0
 *  [31:16] | ???    | Unknown | *UNDEFINED*                             
 * 
 */
/*
 * Field : cfg_reserve0
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_reserve0[15:0]
 * 
 * Name:Reserve0
 * 
 * Description:General purpose reserve register
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 register field value. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 register field value. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 field value from a register. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_RESERVE0.
 */
struct ALT_MPFE_IOHMC_REG_RESERVE0_s
{
    volatile uint32_t  cfg_reserve0 : 16;  /* ALT_MPFE_IOHMC_REG_RESERVE0_CFG_RESERVE0 */
    uint32_t                        : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_RESERVE0. */
typedef struct ALT_MPFE_IOHMC_REG_RESERVE0_s  ALT_MPFE_IOHMC_REG_RESERVE0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_RESERVE0 register. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_RESERVE0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_RESERVE0_OFST        0x1c

/*
 * Register : reg_reserve1
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                             
 * :--------|:-------|:--------|:-----------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1
 *  [31:16] | ???    | Unknown | *UNDEFINED*                             
 * 
 */
/*
 * Field : cfg_reserve1
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_reserve1[15:0]
 * 
 * Name:Reserve1
 * 
 * Description:General purpose reserve register
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 register field value. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 register field value. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 field value from a register. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_RESERVE1.
 */
struct ALT_MPFE_IOHMC_REG_RESERVE1_s
{
    volatile uint32_t  cfg_reserve1 : 16;  /* ALT_MPFE_IOHMC_REG_RESERVE1_CFG_RESERVE1 */
    uint32_t                        : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_RESERVE1. */
typedef struct ALT_MPFE_IOHMC_REG_RESERVE1_s  ALT_MPFE_IOHMC_REG_RESERVE1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_RESERVE1 register. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_RESERVE1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_RESERVE1_OFST        0x20

/*
 * Register : reg_reserve2
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                             
 * :--------|:-------|:--------|:-----------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2
 *  [31:16] | ???    | Unknown | *UNDEFINED*                             
 * 
 */
/*
 * Field : cfg_reserve2
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_reserve2[15:0]
 * 
 * Name:Reserve2
 * 
 * Description:General purpose reserve register
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 register field. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 register field value. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 register field value. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 field value from a register. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_RESERVE2.
 */
struct ALT_MPFE_IOHMC_REG_RESERVE2_s
{
    volatile uint32_t  cfg_reserve2 : 16;  /* ALT_MPFE_IOHMC_REG_RESERVE2_CFG_RESERVE2 */
    uint32_t                        : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_RESERVE2. */
typedef struct ALT_MPFE_IOHMC_REG_RESERVE2_s  ALT_MPFE_IOHMC_REG_RESERVE2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_RESERVE2 register. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_RESERVE2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_RESERVE2_OFST        0x24

/*
 * Register : reg_ctrlcfg0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                      
 * :--------|:-------|:--------|:--------------------------------------------------
 *  [3:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE         
 *  [6:4]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE        
 *  [8:7]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS           
 *  [13:9]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH
 *  [18:14] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH
 *  [23:19] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH
 *  [28:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH
 *  [31:29] | ???    | Unknown | *UNDEFINED*                                      
 * 
 */
/*
 * Field : cfg_mem_type
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_mem_type[3:0]
 * 
 * Name:DRAM Memory Type
 * 
 * Description:Selects memory type. Program this field with one of the following
 * binary values, “0000” for DDR3 SDRAM, “0001” for DDR4 SDRAM and
 * “0010” for LPDDR3 SDRAM.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE_SET(value) (((value) << 0) & 0x0000000f)

/*
 * Field : cfg_dimm_type
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dimm_type[2:0]
 * 
 * Name:DIMM Type
 * 
 * Description:Selects dimm type. Program this field with one of the following
 * binary values, “3’b000” for Component, “3’b001” for UDIMM,
 * “3’b010” for RDIMM, “3’b011” for  LRDIMM and “3’b100” for
 * SODIMM.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_SET_MSK    0x00000070
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_CLR_MSK    0xffffff8f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_GET(value) (((value) & 0x00000070) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE_SET(value) (((value) << 4) & 0x00000070)

/*
 * Field : cfg_ac_pos
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ac_pos[1:0]
 * 
 * Name:A/C pin position
 * 
 * Description:Specify C/A (command/address) pin position. 2’b00 – three lanes
 * are used as C/A pins, Lane0, 1 and 2; 2’b01 -  three lanes are used as C/A
 * pins, Lane1, 2 and 3; 2’b10 -  All four lanes are used as C/A pins.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_SET_MSK    0x00000180
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_CLR_MSK    0xfffffe7f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_GET(value) (((value) & 0x00000180) >> 7)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS_SET(value) (((value) << 7) & 0x00000180)

/*
 * Field : cfg_ctrl_burst_length
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_burst_length[4:0]
 * 
 * Name:Control – DRAM Memory Burst Length
 * 
 * Description:Configures burst length for control path.  Legal values are valid
 * for JEDEC allowed DRAM values for the DRAM selected in cfg_type.  For DDR3, DDR4
 * and LPDDR3, this should be programmed with 8 (binary “01000”).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_MSB        13
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_SET_MSK    0x00003e00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_CLR_MSK    0xffffc1ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_GET(value) (((value) & 0x00003e00) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH_SET(value) (((value) << 9) & 0x00003e00)

/*
 * Field : cfg_dbc0_burst_length
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_burst_length[4:0]
 * 
 * Name:DBC0 – DRAM Memory Burst Length
 * 
 * Description:Configures burst length for DBC0.  Legal values are valid for JEDEC
 * allowed DRAM values for the DRAM selected in cfg_type.  For DDR3, DDR4 and
 * LPDDR3, this should be programmed with 8 (binary “01000”).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_MSB        18
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_SET_MSK    0x0007c000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_CLR_MSK    0xfff83fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_GET(value) (((value) & 0x0007c000) >> 14)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH_SET(value) (((value) << 14) & 0x0007c000)

/*
 * Field : cfg_dbc1_burst_length
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_burst_length[4:0]
 * 
 * Name:DBC1 – DRAM Memory Burst Length
 * 
 * Description:Configures burst length for DBC1.  Legal values are valid for JEDEC
 * allowed DRAM values for the DRAM selected in cfg_type.  For DDR3, DDR4 and
 * LPDDR3, this should be programmed with 8 (binary “01000”).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_SET_MSK    0x00f80000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_CLR_MSK    0xff07ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_GET(value) (((value) & 0x00f80000) >> 19)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH_SET(value) (((value) << 19) & 0x00f80000)

/*
 * Field : cfg_dbc2_burst_length
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_burst_length[4:0]
 * 
 * Name:DBC2 – DRAM Memory Burst Length
 * 
 * Description:Configures burst length for DBC2.  Legal values are valid for JEDEC
 * allowed DRAM values for the DRAM selected in cfg_type.  For DDR3, DDR4 and
 * LPDDR3, this should be programmed with 8 (binary “01000”).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_MSB        28
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_SET_MSK    0x1f000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_CLR_MSK    0xe0ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_GET(value) (((value) & 0x1f000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH_SET(value) (((value) << 24) & 0x1f000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG0.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG0_s
{
    volatile uint32_t  cfg_mem_type          :  4;  /* ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_MEM_TYPE */
    volatile uint32_t  cfg_dimm_type         :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DIMM_TYPE */
    volatile uint32_t  cfg_ac_pos            :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_AC_POS */
    volatile uint32_t  cfg_ctrl_burst_length :  5;  /* ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_CTRL_BURST_LENGTH */
    volatile uint32_t  cfg_dbc0_burst_length :  5;  /* ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC0_BURST_LENGTH */
    volatile uint32_t  cfg_dbc1_burst_length :  5;  /* ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC1_BURST_LENGTH */
    volatile uint32_t  cfg_dbc2_burst_length :  5;  /* ALT_MPFE_IOHMC_REG_CTRLCFG0_CFG_DBC2_BURST_LENGTH */
    uint32_t                                 :  3;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG0. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG0_s  ALT_MPFE_IOHMC_REG_CTRLCFG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG0 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG0_OFST        0x28

/*
 * Register : reg_ctrlcfg1
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                       
 * :--------|:-------|:--------|:---------------------------------------------------
 *  [4:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH 
 *  [6:5]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER        
 *  [7]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC   
 *  [8]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC   
 *  [9]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC   
 *  [10]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC   
 *  [11]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC   
 *  [12]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA      
 *  [13]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA
 *  [14]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA
 *  [15]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA
 *  [16]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA
 *  [17]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA
 *  [18]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ      
 *  [24:19] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT      
 *  [25]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN         
 *  [26]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM    
 *  [27]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM    
 *  [28]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM    
 *  [29]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM    
 *  [30]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM    
 *  [31]    | ???    | Unknown | *UNDEFINED*                                       
 * 
 */
/*
 * Field : cfg_dbc3_burst_length
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_burst_length[4:0]
 * 
 * Name:DBC3 – DRAM Memory Burst Length
 * 
 * Description:Configures burst length for DBC3.  Legal values are valid for JEDEC
 * allowed DRAM values for the DRAM selected in cfg_type.  For DDR3, DDR4 and
 * LPDDR3, this should be programmed with 8 (binary “01000”).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_MSB        4
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH_SET(value) (((value) << 0) & 0x0000001f)

/*
 * Field : cfg_addr_order
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_addr_order[1:0]
 * 
 * Name:Address Interleaving Order
 * 
 * Description:Selects the order for address interleaving.  Programming this field
 * with different values gives different mappings between the AXI or Avalon-MM
 * address and the SDRAM address. Program this field with the following binary
 * values to select the ordering. “00” – chip, row, bank, column; “01”
 * – chip, bank, row, column; “10”-row, chip, bank, column
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_SET_MSK    0x00000060
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_CLR_MSK    0xffffff9f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_GET(value) (((value) & 0x00000060) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER_SET(value) (((value) << 5) & 0x00000060)

/*
 * Field : cfg_ctrl_enable_ecc
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_enable_ecc
 * 
 * Name:Ctrl – ECC Enable
 * 
 * Description:Enable the generation and checking of ECC.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : cfg_dbc0_enable_ecc
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_enable_ecc
 * 
 * Name:DBC0 – ECC Enable
 * 
 * Description:Enable the generation and checking of ECC.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : cfg_dbc1_enable_ecc
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_enable_ecc
 * 
 * Name:DBC1 – ECC Enable
 * 
 * Description:Enable the generation and checking of ECC.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_MSB        9
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : cfg_dbc2_enable_ecc
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_enable_ecc
 * 
 * Name:DBC2 – ECC Enable
 * 
 * Description:Enable the generation and checking of ECC.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_MSB        10
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : cfg_dbc3_enable_ecc
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_enable_ecc
 * 
 * Name:DBC3 – ECC Enable
 * 
 * Description:Enable the generation and checking of ECC.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : cfg_reorder_data
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_reorder_data
 * 
 * Name:Column Command Reorder Enable
 * 
 * Description:This bit controls whether the controller can re-order operations to
 * optimize SDRAM bandwidth.  It should generally be set to a one.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_MSB        12
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_SET_MSK    0x00001000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_CLR_MSK    0xffffefff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : cfg_ctrl_reorder_rdata
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_reorder_rdata
 * 
 * Name:CTRL – Read  Data Reorder Enable
 * 
 * Description:This bit controls whether the controller need to re-order the read
 * return data.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_MSB        13
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_SET_MSK    0x00002000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_CLR_MSK    0xffffdfff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : cfg_dbc0_reorder_rdata
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_reorder_rdata
 * 
 * Name:DBC0 – Read  Data Reorder Enable
 * 
 * Description:This bit controls whether the controller need to re-order the read
 * return data.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_MSB        14
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_SET_MSK    0x00004000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_CLR_MSK    0xffffbfff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : cfg_dbc1_reorder_rdata
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_reorder_rdata
 * 
 * Name:DBC1 – Read  Data Reorder Enable
 * 
 * Description:This bit controls whether the controller need to re-order the read
 * return data.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_SET_MSK    0x00008000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_CLR_MSK    0xffff7fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : cfg_dbc2_reorder_rdata
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_reorder_rdata
 * 
 * Name:DBC2 – Read  Data Reorder Enable
 * 
 * Description:This bit controls whether the controller need to re-order the read
 * return data.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_MSB        16
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : cfg_dbc3_reorder_rdata
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_reorder_rdata
 * 
 * Name:DBC3 – Read  Data Reorder Enable
 * 
 * Description:This bit controls whether the controller need to re-order the read
 * return data.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_SET_MSK    0x00020000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_CLR_MSK    0xfffdffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : cfg_reorder_read
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_reorder_read
 * 
 * Name:Read Command Reorder Enable
 * 
 * Description:This bit controls whether the controller can re-order read command
 * to.  1’b0 – Disable, 1’b1 – Enable
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_MSB        18
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_SET_MSK    0x00040000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_CLR_MSK    0xfffbffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : cfg_starve_limit
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_starve_limit[5:0]
 * 
 * Name:Starvation Limit
 * 
 * Description:Specifies the number of DRAM burst transactions an individual
 * transaction will allow to reorder ahead of it before its priority is raised in
 * the memory controller.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_MSB        24
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_SET_MSK    0x01f80000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_CLR_MSK    0xfe07ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_GET(value) (((value) & 0x01f80000) >> 19)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT_SET(value) (((value) << 19) & 0x01f80000)

/*
 * Field : cfg_dqstrk_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dqstrk_en
 * 
 * Name:DQS Tracking Enable
 * 
 * Description:Enables DQS tracking in the PHY.
 * 
 * 1’b1 – Enable Long/Short DQS Tracking
 * 
 * Post-REFRESH-EXIT – Refer to cfg_short_dqstrk_ctrl_en
 * 
 * Post-SELFREFRESH-EXIT – IOPHYSEQ performs Long DQS Tracking
 * 
 * 1’b0 – Disable DQS Tracking
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_MSB        25
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_SET_MSK    0x02000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_CLR_MSK    0xfdffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : cfg_ctrl_enable_dm
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_enable_dm
 * 
 * Name:DM Pins Present
 * 
 * Description:Set to a one to enable DRAM operation if DM pins are connected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_MSB        26
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_SET_MSK    0x04000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_CLR_MSK    0xfbffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : cfg_dbc0_enable_dm
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_enable_dm
 * 
 * Name:DM Pins Present
 * 
 * Description:Set to a one to enable DRAM operation if DM pins are connected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_MSB        27
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_SET_MSK    0x08000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : cfg_dbc1_enable_dm
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_enable_dm
 * 
 * Name:DM Pins Present
 * 
 * Description:Set to a one to enable DRAM operation if DM pins are connected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_MSB        28
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_SET_MSK    0x10000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_CLR_MSK    0xefffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : cfg_dbc2_enable_dm
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_enable_dm
 * 
 * Name:DM Pins Present
 * 
 * Description:Set to a one to enable DRAM operation if DM pins are connected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_MSB        29
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_SET_MSK    0x20000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_CLR_MSK    0xdfffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : cfg_dbc3_enable_dm
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_enable_dm
 * 
 * Name:DM Pins Present
 * 
 * Description:Set to a one to enable DRAM operation if DM pins are connected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_MSB        30
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_SET_MSK    0x40000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_CLR_MSK    0xbfffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM_SET(value) (((value) << 30) & 0x40000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG1.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG1_s
{
    volatile uint32_t  cfg_dbc3_burst_length  :  5;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_BURST_LENGTH */
    volatile uint32_t  cfg_addr_order         :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_ADDR_ORDER */
    volatile uint32_t  cfg_ctrl_enable_ecc    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_ECC */
    volatile uint32_t  cfg_dbc0_enable_ecc    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_ECC */
    volatile uint32_t  cfg_dbc1_enable_ecc    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_ECC */
    volatile uint32_t  cfg_dbc2_enable_ecc    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_ECC */
    volatile uint32_t  cfg_dbc3_enable_ecc    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_ECC */
    volatile uint32_t  cfg_reorder_data       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_DATA */
    volatile uint32_t  cfg_ctrl_reorder_rdata :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_REORDER_RDATA */
    volatile uint32_t  cfg_dbc0_reorder_rdata :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_REORDER_RDATA */
    volatile uint32_t  cfg_dbc1_reorder_rdata :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_REORDER_RDATA */
    volatile uint32_t  cfg_dbc2_reorder_rdata :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_REORDER_RDATA */
    volatile uint32_t  cfg_dbc3_reorder_rdata :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_REORDER_RDATA */
    volatile uint32_t  cfg_reorder_read       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_REORDER_READ */
    volatile uint32_t  cfg_starve_limit       :  6;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_STARVE_LIMIT */
    volatile uint32_t  cfg_dqstrk_en          :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DQSTRK_EN */
    volatile uint32_t  cfg_ctrl_enable_dm     :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_CTRL_ENABLE_DM */
    volatile uint32_t  cfg_dbc0_enable_dm     :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC0_ENABLE_DM */
    volatile uint32_t  cfg_dbc1_enable_dm     :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC1_ENABLE_DM */
    volatile uint32_t  cfg_dbc2_enable_dm     :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC2_ENABLE_DM */
    volatile uint32_t  cfg_dbc3_enable_dm     :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG1_CFG_DBC3_ENABLE_DM */
    uint32_t                                  :  1;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG1. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG1_s  ALT_MPFE_IOHMC_REG_CTRLCFG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG1 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG1_OFST        0x2c

/*
 * Register : reg_ctrlcfg2
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                     
 * :--------|:-------|:--------|:-------------------------------------------------
 *  [0]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD
 *  [1]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD
 *  [2]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD
 *  [3]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD
 *  [4]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD
 *  [6:5]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0
 *  [8:7]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1
 *  [9]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL   
 *  [10]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL   
 *  [11]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL   
 *  [12]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL   
 *  [14:13] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL    
 *  [17:15] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT   
 *  [20:18] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT   
 *  [23:21] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT   
 *  [26:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT   
 *  [31:27] | ???    | Unknown | *UNDEFINED*                                     
 * 
 */
/*
 * Field : cfg_ctrl_output_regd
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_output_regd
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : cfg_dbc0_output_regd
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_output_regd
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : cfg_dbc1_output_regd
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_output_regd
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_MSB        2
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : cfg_dbc2_output_regd
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_output_regd
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : cfg_dbc3_output_regd
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_output_regd
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_MSB        4
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : cfg_ctrl2dbc_switch0
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl2dbc_switch0[1:0]
 * 
 * Name:Control source switch0 select
 * 
 * Description:Select of the MUX ctrl2dbc_switch0. 2’b00 – selects the control
 * path from upper tiles.  2’b01 – selects the local control path. 2’b10 –
 * selects the control path from lower tiles. 2’b11 – illegal selection.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_SET_MSK    0x00000060
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_CLR_MSK    0xffffff9f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_GET(value) (((value) & 0x00000060) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0_SET(value) (((value) << 5) & 0x00000060)

/*
 * Field : cfg_ctrl2dbc_switch1
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl2dbc_switch1[1:0]
 * 
 * Name:Control source switch1 select
 * 
 * Description:Select of the MUX ctrl2dbc_switch1. 2’b00 – selects the control
 * path from upper tiles.  2’b01 – selects the local control path. 2’b10 –
 * selects the control path from lower tiles. 2’b11 – illegal selection.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_SET_MSK    0x00000180
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_CLR_MSK    0xfffffe7f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_GET(value) (((value) & 0x00000180) >> 7)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1_SET(value) (((value) << 7) & 0x00000180)

/*
 * Field : cfg_dbc0_ctrl_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_ctrl_sel
 * 
 * Name:DBC0 – control path select
 * 
 * Description:DBC0 – control path select. 1’b0: The upper MUX in
 * io_hmc_dbc_switch is selected; 1’b1: The lower mux is selected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_MSB        9
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : cfg_dbc1_ctrl_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_ctrl_sel
 * 
 * Name:DBC1 – control path select
 * 
 * Description:DBC1 – control path select. 1’b0: The upper MUX in
 * io_hmc_dbc_switch is selected; 1’b1: The lower mux is selected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_MSB        10
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : cfg_dbc2_ctrl_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_ctrl_sel
 * 
 * Name:DBC2 – control path select
 * 
 * Description:DBC2 – control path select. 1’b0: The upper MUX in
 * io_hmc_dbc_switch is selected; 1’b1: The lower mux is selected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : cfg_dbc3_ctrl_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_ctrl_sel
 * 
 * Name:DBC3 – control path select
 * 
 * Description:DBC3 – control path select. 1’b0: The upper MUX in
 * io_hmc_dbc_switch is selected; 1’b1: The lower mux is selected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_MSB        12
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_SET_MSK    0x00001000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_CLR_MSK    0xffffefff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : cfg_dbc2ctrl_sel
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2ctrl_sel[1:0]
 * 
 * Name:Control path-DBC select
 * 
 * Description:Specifies which DBC is driven by the local control path. 2’b00:
 * DBC0; 2’b01: DBC1; 2’b10: DBC2; 2’b11: DBC3.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_MSB        14
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_SET_MSK    0x00006000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_CLR_MSK    0xffff9fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_GET(value) (((value) & 0x00006000) >> 13)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL_SET(value) (((value) << 13) & 0x00006000)

/*
 * Field : cfg_dbc0_pipe_lat
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_pipe_lat[2:0]
 * 
 * Name:DBC0 – pipeline latency
 * 
 * Description:Specifies in number of controller clock cycles the latency of
 * pipelining the signals from control path to DBC0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_SET_MSK    0x00038000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_CLR_MSK    0xfffc7fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_GET(value) (((value) & 0x00038000) >> 15)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT_SET(value) (((value) << 15) & 0x00038000)

/*
 * Field : cfg_dbc1_pipe_lat
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_pipe_lat[2:0]
 * 
 * Name:DBC1 – pipeline latency
 * 
 * Description:Specifies in number of controller clock cycles the latency of
 * pipelining the signals from control path to DBC1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_MSB        20
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_SET_MSK    0x001c0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_CLR_MSK    0xffe3ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_GET(value) (((value) & 0x001c0000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT_SET(value) (((value) << 18) & 0x001c0000)

/*
 * Field : cfg_dbc2_pipe_lat
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_pipe_lat[2:0]
 * 
 * Name:DBC2 – pipeline latency
 * 
 * Description:Specifies in number of controller clock cycles the latency of
 * pipelining the signals from control path to DBC2.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_SET_MSK    0x00e00000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_CLR_MSK    0xff1fffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_GET(value) (((value) & 0x00e00000) >> 21)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT_SET(value) (((value) << 21) & 0x00e00000)

/*
 * Field : cfg_dbc3_pipe_lat
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_pipe_lat[2:0]
 * 
 * Name:DBC3 – pipeline latency
 * 
 * Description:Specifies in number of controller clock cycles the latency of
 * pipelining the signals from control path to DBC3.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_MSB        26
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_SET_MSK    0x07000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_CLR_MSK    0xf8ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_GET(value) (((value) & 0x07000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT_SET(value) (((value) << 24) & 0x07000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG2.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG2_s
{
    volatile uint32_t  cfg_ctrl_output_regd :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL_OUTPUT_REGD */
    volatile uint32_t  cfg_dbc0_output_regd :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_OUTPUT_REGD */
    volatile uint32_t  cfg_dbc1_output_regd :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_OUTPUT_REGD */
    volatile uint32_t  cfg_dbc2_output_regd :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_OUTPUT_REGD */
    volatile uint32_t  cfg_dbc3_output_regd :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_OUTPUT_REGD */
    volatile uint32_t  cfg_ctrl2dbc_switch0 :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH0 */
    volatile uint32_t  cfg_ctrl2dbc_switch1 :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_CTRL2DBC_SWITCH1 */
    volatile uint32_t  cfg_dbc0_ctrl_sel    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_CTRL_SEL */
    volatile uint32_t  cfg_dbc1_ctrl_sel    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_CTRL_SEL */
    volatile uint32_t  cfg_dbc2_ctrl_sel    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_CTRL_SEL */
    volatile uint32_t  cfg_dbc3_ctrl_sel    :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_CTRL_SEL */
    volatile uint32_t  cfg_dbc2ctrl_sel     :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2CTRL_SEL */
    volatile uint32_t  cfg_dbc0_pipe_lat    :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC0_PIPE_LAT */
    volatile uint32_t  cfg_dbc1_pipe_lat    :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC1_PIPE_LAT */
    volatile uint32_t  cfg_dbc2_pipe_lat    :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC2_PIPE_LAT */
    volatile uint32_t  cfg_dbc3_pipe_lat    :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG2_CFG_DBC3_PIPE_LAT */
    uint32_t                                :  5;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG2. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG2_s  ALT_MPFE_IOHMC_REG_CTRLCFG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG2 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG2_OFST        0x30

/*
 * Register : reg_ctrlcfg3
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                           
 * :--------|:-------|:--------|:-------------------------------------------------------
 *  [2:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE         
 *  [5:3]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE         
 *  [8:6]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE         
 *  [11:9]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE         
 *  [14:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE         
 *  [15]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL      
 *  [16]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL      
 *  [17]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL      
 *  [18]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL      
 *  [19]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL      
 *  [20]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN      
 *  [21]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN      
 *  [22]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN      
 *  [23]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN      
 *  [24]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN      
 *  [25]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE          
 *  [26]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN          
 *  [27]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN             
 *  [28]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE    
 *  [29]    | ???    | Unknown | *UNDEFINED*                                           
 *  [30]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT
 *  [31]    | ???    | Unknown | *UNDEFINED*                                           
 * 
 */
/*
 * Field : cfg_ctrl_cmd_rate
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_cmd_rate[2:0]
 * 
 * Name:Control path – Command Rate
 * 
 * Description:3’b010 – HALF rate. 3’b100 – Quarter rate. The remaining
 * values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_MSB        2
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_SET_MSK    0x00000007
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_CLR_MSK    0xfffffff8
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_GET(value) (((value) & 0x00000007) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE_SET(value) (((value) << 0) & 0x00000007)

/*
 * Field : cfg_dbc0_cmd_rate
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_cmd_rate[2:0]
 * 
 * Name:DBC0 – Command Rate
 * 
 * Description:3’b010 – HALF rate. 3’b100 – Quarter rate. The remaining
 * values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_SET_MSK    0x00000038
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_CLR_MSK    0xffffffc7
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_GET(value) (((value) & 0x00000038) >> 3)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE_SET(value) (((value) << 3) & 0x00000038)

/*
 * Field : cfg_dbc1_cmd_rate
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_cmd_rate[2:0]
 * 
 * Name:DBC1 – Command Rate
 * 
 * Description:3’b010 – HALF rate. 3’b100 – Quarter rate. The remaining
 * values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_SET_MSK    0x000001c0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_CLR_MSK    0xfffffe3f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_GET(value) (((value) & 0x000001c0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE_SET(value) (((value) << 6) & 0x000001c0)

/*
 * Field : cfg_dbc2_cmd_rate
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_cmd_rate[2:0]
 * 
 * Name:DBC2 – Command Rate
 * 
 * Description:3’b010 – HALF rate. 3’b100 – Quarter rate. The remaining
 * values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_SET_MSK    0x00000e00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_CLR_MSK    0xfffff1ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_GET(value) (((value) & 0x00000e00) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE_SET(value) (((value) << 9) & 0x00000e00)

/*
 * Field : cfg_dbc3_cmd_rate
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_cmd_rate[2:0]
 * 
 * Name:DBC3 – Command Rate
 * 
 * Description:3’b010 – HALF rate. 3’b100 – Quarter rate. The remaining
 * values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_MSB        14
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_SET_MSK    0x00007000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_CLR_MSK    0xffff8fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_GET(value) (((value) & 0x00007000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE_SET(value) (((value) << 12) & 0x00007000)

/*
 * Field : cfg_ctrl_in_protocol
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_in_protocol
 * 
 * Name:Control path Input interface protocol
 * 
 * Description:1’b0 – AST , 1’b1 – AMM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_SET_MSK    0x00008000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_CLR_MSK    0xffff7fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : cfg_dbc0_in_protocol
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_in_protocol
 * 
 * Name:DBC0 Input interface protocol
 * 
 * Description:1’b0 – AST , 1’b1 – AMM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_MSB        16
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : cfg_dbc1_in_protocol
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_in_protocol
 * 
 * Name:DBC1 Input interface protocol
 * 
 * Description:1’b0 – AST , 1’b1 – AMM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_SET_MSK    0x00020000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_CLR_MSK    0xfffdffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : cfg_dbc2_in_protocol
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_in_protocol
 * 
 * Name:DBC2 Input interface protocol
 * 
 * Description:1’b0 – AST , 1’b1 – AMM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_MSB        18
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_SET_MSK    0x00040000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_CLR_MSK    0xfffbffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : cfg_dbc3_in_protocol
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_in_protocol
 * 
 * Name:DBC3 Input interface protocol
 * 
 * Description:1’b0 – AST , 1’b1 – AMM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_MSB        19
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_SET_MSK    0x00080000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : cfg_ctrl_dualport_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_dualport_en
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_MSB        20
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_SET_MSK    0x00100000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_CLR_MSK    0xffefffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : cfg_dbc0_dualport_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_dualport_en
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_MSB        21
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_SET_MSK    0x00200000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_CLR_MSK    0xffdfffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : cfg_dbc1_dualport_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_dualport_en
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_MSB        22
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_SET_MSK    0x00400000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_CLR_MSK    0xffbfffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : cfg_dbc2_dualport_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_dualport_en
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_SET_MSK    0x00800000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_CLR_MSK    0xff7fffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : cfg_dbc3_dualport_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_dualport_en
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_MSB        24
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_SET_MSK    0x01000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_CLR_MSK    0xfeffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : cfg_arbiter_type
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_arbiter_type
 * 
 * Name:Arbiter Type
 * 
 * Description:Indicates controller arbiter operating mode. Set this to:
 * 
 * * 1’b0 for non-quasi (single cmd) mode
 * 
 * * 1’b1 for quasi (dual cmd) mode
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_MSB        25
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_SET_MSK    0x02000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_CLR_MSK    0xfdffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : cfg_open_page_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_open_page_en
 * 
 * Name:Open Page Policy Enable
 * 
 * Description:Set to 1 to enable the open page policy when command reordering is
 * disabled (cfg_cmd_reorder=0). This bit does not matter when cfg_cmd_reorder is
 * 1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_MSB        26
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_SET_MSK    0x04000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_CLR_MSK    0xfbffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : cfg_geardn_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_geardn_en
 * 
 * Name:Gear Down Mode Enable
 * 
 * Description:Set to 1 to enable the gear down mode for DDR4
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_MSB        27
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_SET_MSK    0x08000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : cfg_3dsref_ack_on_done
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3dsref_ack_on_done
 * 
 * Name:3DS Refresh Ack on Done
 * 
 * Description:When set to 1, the ack pulse for 3DS Refresh is asserted when tRFC
 * has expired.
 * 
 * When set to 0, the ack pulse for 3DS Refresh is asserted on the launch of
 * Refresh command to DRAM.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_MSB        28
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_SET_MSK    0x10000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_CLR_MSK    0xefffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : cfg_cb_memclk_gate_default
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_memclk_gate_default
 * 
 * Name:Memory Clock Gating Default Value Chicken Bit
 * 
 * Description:When set to 0, both mem_ck/mem_ck_n are driven to LOW when clock
 * gating is enabled.
 * 
 * When set to 1, mem_ck is driven to LOW and mem_ck_n is driven to HIGH when clock
 * gating is enabled.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_MSB        30
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_SET_MSK    0x40000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_CLR_MSK    0xbfffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT_SET(value) (((value) << 30) & 0x40000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG3.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG3_s
{
    volatile uint32_t  cfg_ctrl_cmd_rate          :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_CMD_RATE */
    volatile uint32_t  cfg_dbc0_cmd_rate          :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_CMD_RATE */
    volatile uint32_t  cfg_dbc1_cmd_rate          :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_CMD_RATE */
    volatile uint32_t  cfg_dbc2_cmd_rate          :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_CMD_RATE */
    volatile uint32_t  cfg_dbc3_cmd_rate          :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_CMD_RATE */
    volatile uint32_t  cfg_ctrl_in_protocol       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_IN_PROTOCOL */
    volatile uint32_t  cfg_dbc0_in_protocol       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_IN_PROTOCOL */
    volatile uint32_t  cfg_dbc1_in_protocol       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_IN_PROTOCOL */
    volatile uint32_t  cfg_dbc2_in_protocol       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_IN_PROTOCOL */
    volatile uint32_t  cfg_dbc3_in_protocol       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_IN_PROTOCOL */
    volatile uint32_t  cfg_ctrl_dualport_en       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CTRL_DUALPORT_EN */
    volatile uint32_t  cfg_dbc0_dualport_en       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC0_DUALPORT_EN */
    volatile uint32_t  cfg_dbc1_dualport_en       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC1_DUALPORT_EN */
    volatile uint32_t  cfg_dbc2_dualport_en       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC2_DUALPORT_EN */
    volatile uint32_t  cfg_dbc3_dualport_en       :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_DBC3_DUALPORT_EN */
    volatile uint32_t  cfg_arbiter_type           :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_ARBITER_TYPE */
    volatile uint32_t  cfg_open_page_en           :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_OPEN_PAGE_EN */
    volatile uint32_t  cfg_geardn_en              :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_GEARDN_EN */
    volatile uint32_t  cfg_3dsref_ack_on_done     :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_3DSREF_ACK_ON_DONE */
    uint32_t                                      :  1;  /* *UNDEFINED* */
    volatile uint32_t  cfg_cb_memclk_gate_default :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG3_CFG_CB_MEMCLK_GATE_DEFAULT */
    uint32_t                                      :  1;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG3. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG3_s  ALT_MPFE_IOHMC_REG_CTRLCFG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG3 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG3 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG3_OFST        0x34

/*
 * Register : reg_ctrlcfg4
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                        
 * :--------|:-------|:--------|:----------------------------------------------------
 *  [4:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID            
 *  [6:5]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE      
 *  [9:7]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN
 *  [12:10] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN
 *  [15:13] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN
 *  [18:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN
 *  [21:19] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN
 *  [23:22] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET   
 *  [25:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET   
 *  [27:26] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET   
 *  [29:28] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET   
 *  [31:30] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET   
 * 
 */
/*
 * Field : cfg_tile_id
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_tile_id[4:0]
 * 
 * Name:Tile ID
 * 
 * Description:Tile ID
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_MSB        4
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID_SET(value) (((value) << 0) & 0x0000001f)

/*
 * Field : cfg_pingpong_mode
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_pingpong_mode[1:0]
 * 
 * Name:Ping Pong mode
 * 
 * Description:Ping Pong mode: 2’b00 – Ping Pong support off, 2’b01 – Ping
 * Pong master0 (driving C/A pins), 2’b10 – Ping Pong master1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_SET_MSK    0x00000060
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_CLR_MSK    0xffffff9f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_GET(value) (((value) & 0x00000060) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE_SET(value) (((value) << 5) & 0x00000060)

/*
 * Field : cfg_ctrl_slot_rotate_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_slot_rotate_en[2:0]
 * 
 * Name:Cmd Slot Rotate Enable
 * 
 * Description:Cmd slot rotate enable: Bit[0] controls write, 1’b0 – disable
 * (fixed slot), 1’b1 – enable (allow cmd slot rotation). Bit[1] controls read,
 * 1’b0 – disable (fixed slot), 1’b1 – enable (allow cmd slot rotation).
 * Bit[2] controls always rotate. 1’b0 disabled (fixed slot), 1’b1 – enable
 * (always rotate cmd)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_MSB        9
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_SET_MSK    0x00000380
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_CLR_MSK    0xfffffc7f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_GET(value) (((value) & 0x00000380) >> 7)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN_SET(value) (((value) << 7) & 0x00000380)

/*
 * Field : cfg_dbc0_slot_rotate_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_slot_rotate_en[2:0]
 * 
 * Name:DBC0 Slot Rotate Enable
 * 
 * Description:DBC0 slot rotate enable: Bit[0] controls write, 1’b0 – disable
 * (fixed slot), 1’b1 – enable (allow cmd slot rotation). Bit[1] controls read,
 * 1’b0 – disable (fixed slot), 1’b1 – enable (allow cmd slot rotation).
 * Bit[2] controls always rotate, 1’b0 disabled (fixed slot), 1’b1 – enable
 * (always rotate cmd)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_MSB        12
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_SET_MSK    0x00001c00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_CLR_MSK    0xffffe3ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_GET(value) (((value) & 0x00001c00) >> 10)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN_SET(value) (((value) << 10) & 0x00001c00)

/*
 * Field : cfg_dbc1_slot_rotate_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_slot_rotate_en[2:0]
 * 
 * Name:DBC1 Slot Rotate Enable
 * 
 * Description:DBC1 slot rotate enable: Bit[0] controls write, 1’b0 – disable
 * (fixed slot), 1’b1 – enable (allow cmd slot rotation). Bit[1] controls read,
 * 1’b0 – disable (fixed slot), 1’b1 – enable (allow cmd slot rotation).
 * Bit[2] controls always rotate, 1’b0 disabled (fixed slot), 1’b1 – enable
 * (always rotate cmd)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_SET_MSK    0x0000e000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_CLR_MSK    0xffff1fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_GET(value) (((value) & 0x0000e000) >> 13)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN_SET(value) (((value) << 13) & 0x0000e000)

/*
 * Field : cfg_dbc2_slot_rotate_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_slot_rotate_en[2:0]
 * 
 * Name:DBC2 Slot Rotate Enable
 * 
 * Description:DBC2 slot rotate enable: Bit[0] controls write, 1’b0 – disable
 * (fixed slot), 1’b1 – enable (allow cmd slot rotation). Bit[1] controls read,
 * 1’b0 – disable (fixed slot), 1’b1 – enable (allow cmd slot rotation).
 * Bit[2] controls always rotate, 1’b0 disabled (fixed slot), 1’b1 – enable
 * (always rotate cmd)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_MSB        18
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_SET_MSK    0x00070000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_CLR_MSK    0xfff8ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_GET(value) (((value) & 0x00070000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN_SET(value) (((value) << 16) & 0x00070000)

/*
 * Field : cfg_dbc3_slot_rotate_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_slot_rotate_en[2:0]
 * 
 * Name:DBC3 Slot Rotate Enable
 * 
 * Description:DBC3 slot rotate enable: Bit[0] controls write, 1’b0 – disable
 * (fixed slot), 1’b1 – enable (allow cmd slot rotation). Bit[1] controls read,
 * 1’b0 – disable (fixed slot), 1’b1 – enable (allow cmd slot rotation).
 * Bit[2] controls always rotate, 1’b0 disabled (fixed slot), 1’b1 – enable
 * (always rotate cmd)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_MSB        21
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_SET_MSK    0x00380000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_CLR_MSK    0xffc7ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_GET(value) (((value) & 0x00380000) >> 19)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN_SET(value) (((value) << 19) & 0x00380000)

/*
 * Field : cfg_ctrl_slot_offset
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_slot_offset[1:0]
 * 
 * Name:Cmd Slot Offset
 * 
 * Description:Enables afi information to be offset by numbers of FR cycles.
 * 
 * Affected afi signal is afi_rdata_en, afi_rdata_en_full, afi_wdata_valid,
 * afi_dqs_burst, afi_mrnk_write and afi_mrnk_read.
 * 
 * Set this to:
 * 
 * * 2’b00 to have 0 FR cycle offset in HR and QR.
 * 
 * * 2’b01 to have 1 FR cycle offset in QR.
 * 
 * * 2’b10 to have ½ FR cycle offset in HR/QR.
 * 
 * * 2’b11 to have 3 FR cycle offset in QR.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_SET_MSK    0x00c00000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_CLR_MSK    0xff3fffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_GET(value) (((value) & 0x00c00000) >> 22)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET_SET(value) (((value) << 22) & 0x00c00000)

/*
 * Field : cfg_dbc0_slot_offset
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_slot_offset[1:0]
 * 
 * Name:DBC0 Cmd Slot Offset
 * 
 * Description:Enables afi information to be offset by numbers of FR cycles.
 * 
 * Affected afi signal is afi_rdata_en, afi_rdata_en_full, afi_wdata_valid,
 * afi_dqs_burst, afi_mrnk_write and afi_mrnk_read.
 * 
 * Set this to:
 * 
 * * 2’b00 to have 0 FR cycle offset in HR and QR.
 * 
 * * 2’b01 to have 1 FR cycle offset in QR.
 * 
 * * 2’b10 to have ½ FR cycle offset in HR/QR.
 * 
 * * 2’b11 to have 3 FR cycle offset in QR.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_MSB        25
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_SET_MSK    0x03000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_CLR_MSK    0xfcffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_GET(value) (((value) & 0x03000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET_SET(value) (((value) << 24) & 0x03000000)

/*
 * Field : cfg_dbc1_slot_offset
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_slot_offset[1:0]
 * 
 * Name:DBC1 Cmd Slot Offset
 * 
 * Description:Enables afi information to be offset by numbers of FR cycles.
 * 
 * Affected afi signal is afi_rdata_en, afi_rdata_en_full, afi_wdata_valid,
 * afi_dqs_burst, afi_mrnk_write and afi_mrnk_read.
 * 
 * Set this to:
 * 
 * * 2’b00 to have 0 FR cycle offset in HR and QR.
 * 
 * * 2’b01 to have 1 FR cycle offset in QR.
 * 
 * * 2’b10 to have ½ FR cycle offset in HR/QR.
 * 
 * * 2’b11 to have 3 FR cycle offset in QR.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_MSB        27
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_SET_MSK    0x0c000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_CLR_MSK    0xf3ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_GET(value) (((value) & 0x0c000000) >> 26)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET_SET(value) (((value) << 26) & 0x0c000000)

/*
 * Field : cfg_dbc2_slot_offset
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_slot_offset[1:0]
 * 
 * Name:DBC2 Cmd Slot Offset
 * 
 * Description:Enables afi information to be offset by numbers of FR cycles.
 * 
 * Affected afi signal is afi_rdata_en, afi_rdata_en_full, afi_wdata_valid,
 * afi_dqs_burst, afi_mrnk_write and afi_mrnk_read.
 * 
 * Set this to:
 * 
 * * 2’b00 to have 0 FR cycle offset in HR and QR.
 * 
 * * 2’b01 to have 1 FR cycle offset in QR.
 * 
 * * 2’b10 to have ½ FR cycle offset in HR/QR.
 * 
 * * 2’b11 to have 3 FR cycle offset in QR.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_MSB        29
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_SET_MSK    0x30000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_CLR_MSK    0xcfffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_GET(value) (((value) & 0x30000000) >> 28)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET_SET(value) (((value) << 28) & 0x30000000)

/*
 * Field : cfg_dbc3_slot_offset
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_slot_offset[1:0]
 * 
 * Name:DBC3 Cmd Slot Offset
 * 
 * Description:Enables afi information to be offset by numbers of FR cycles.
 * 
 * Affected afi signal is afi_rdata_en, afi_rdata_en_full, afi_wdata_valid,
 * afi_dqs_burst, afi_mrnk_write and afi_mrnk_read.
 * 
 * Set this to:
 * 
 * * 2’b00 to have 0 FR cycle offset in HR and QR.
 * 
 * * 2’b01 to have 1 FR cycle offset in QR.
 * 
 * * 2’b10 to have ½ FR cycle offset in HR/QR.
 * 
 * * 2’b11 to have 3 FR cycle offset in QR.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_SET_MSK    0xc0000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_CLR_MSK    0x3fffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_GET(value) (((value) & 0xc0000000) >> 30)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET_SET(value) (((value) << 30) & 0xc0000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG4.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG4_s
{
    volatile uint32_t  cfg_tile_id             :  5;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_TILE_ID */
    volatile uint32_t  cfg_pingpong_mode       :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_PINGPONG_MODE */
    volatile uint32_t  cfg_ctrl_slot_rotate_en :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_ROTATE_EN */
    volatile uint32_t  cfg_dbc0_slot_rotate_en :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_ROTATE_EN */
    volatile uint32_t  cfg_dbc1_slot_rotate_en :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_ROTATE_EN */
    volatile uint32_t  cfg_dbc2_slot_rotate_en :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_ROTATE_EN */
    volatile uint32_t  cfg_dbc3_slot_rotate_en :  3;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_ROTATE_EN */
    volatile uint32_t  cfg_ctrl_slot_offset    :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_CTRL_SLOT_OFFSET */
    volatile uint32_t  cfg_dbc0_slot_offset    :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC0_SLOT_OFFSET */
    volatile uint32_t  cfg_dbc1_slot_offset    :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC1_SLOT_OFFSET */
    volatile uint32_t  cfg_dbc2_slot_offset    :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC2_SLOT_OFFSET */
    volatile uint32_t  cfg_dbc3_slot_offset    :  2;  /* ALT_MPFE_IOHMC_REG_CTRLCFG4_CFG_DBC3_SLOT_OFFSET */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG4. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG4_s  ALT_MPFE_IOHMC_REG_CTRLCFG4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG4 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG4 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG4_OFST        0x38

/*
 * Register : reg_ctrlcfg5
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                 
 * :--------|:-------|:--------|:---------------------------------------------
 *  [3:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT
 *  [7:4]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT
 *  [8]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN  
 *  [9]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN  
 *  [10]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN  
 *  [11]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN  
 *  [12]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN  
 *  [31:13] | ???    | Unknown | *UNDEFINED*                                 
 * 
 */
/*
 * Field : cfg_col_cmd_slot
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_col_cmd_slot[3:0]
 * 
 * Name:Column Cmd Slot
 * 
 * Description:Specify the col cmd slot. One hot encoding.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT_SET(value) (((value) << 0) & 0x0000000f)

/*
 * Field : cfg_row_cmd_slot
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_row_cmd_slot[3:0]
 * 
 * Name:Row Cmd Slot
 * 
 * Description:Specify the row cmd slot. One hot encoding.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_SET_MSK    0x000000f0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_CLR_MSK    0xffffff0f
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_GET(value) (((value) & 0x000000f0) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT_SET(value) (((value) << 4) & 0x000000f0)

/*
 * Field : cfg_ctrl_rc_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctrl_rc_en
 * 
 * Name:Control Path Rate Conversion Enable
 * 
 * Description:Set to 1 to enable the rate conversion. It converts QR input from
 * core to HR inside HMC
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : cfg_dbc0_rc_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc0_rc_en
 * 
 * Name:DBC0 Rate Conversion Enable
 * 
 * Description:Set to 1 to enable the rate conversion. It converts QR input from
 * core to HR inside HMC
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_MSB        9
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : cfg_dbc1_rc_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc1_rc_en
 * 
 * Name:DBC1 Rate Conversion Enable
 * 
 * Description:Set to 1 to enable the rate conversion. It converts QR input from
 * core to HR inside HMC
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_MSB        10
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : cfg_dbc2_rc_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc2_rc_en
 * 
 * Name:DBC2 Rate Conversion Enable
 * 
 * Description:Set to 1 to enable the rate conversion. It converts QR input from
 * core to HR inside HMC
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : cfg_dbc3_rc_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dbc3_rc_en
 * 
 * Name:DBC3 Rate Conversion Enable
 * 
 * Description:Set to 1 to enable the rate conversion. It converts QR input from
 * core to HR inside HMC
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_MSB        12
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_SET_MSK    0x00001000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_CLR_MSK    0xffffefff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN_SET(value) (((value) << 12) & 0x00001000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG5.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG5_s
{
    volatile uint32_t  cfg_col_cmd_slot :  4;  /* ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_COL_CMD_SLOT */
    volatile uint32_t  cfg_row_cmd_slot :  4;  /* ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_ROW_CMD_SLOT */
    volatile uint32_t  cfg_ctrl_rc_en   :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_CTRL_RC_EN */
    volatile uint32_t  cfg_dbc0_rc_en   :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC0_RC_EN */
    volatile uint32_t  cfg_dbc1_rc_en   :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC1_RC_EN */
    volatile uint32_t  cfg_dbc2_rc_en   :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC2_RC_EN */
    volatile uint32_t  cfg_dbc3_rc_en   :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG5_CFG_DBC3_RC_EN */
    uint32_t                            : 19;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG5. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG5_s  ALT_MPFE_IOHMC_REG_CTRLCFG5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG5 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG5 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG5_OFST        0x3c

/*
 * Register : reg_ctrlcfg6
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                            
 * :--------|:-------|:--------|:----------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP
 *  [31:16] | ???    | Unknown | *UNDEFINED*                            
 * 
 */
/*
 * Field : cfg_cs_chip
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cs_chip[15:0]
 * 
 * Name:CS to Chip Mapping
 * 
 * Description:Chip select mapping scheme.
 * 
 * Mapping separated into 4 sections: [CS3][CS2][CS1][CS0]
 * 
 * Each section consists of 4 bits to indicate which CS_n signal should be active
 * when command goes to current CS.
 * 
 * Eg: if we set to 16’b0000_0000_0010_0001, CS_n signal will be active on CS0
 * and CS1 when command occurs on CS0 and CS1 respectively.
 * 
 * Default value should be 16’b1000_0100_0010_0001, only change it for RDIMM
 * single rank design where each RDIMM have 2 CS_n signal but only one is used for
 * actual memory access, one more CS_n bit for RDIMM control word access.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG6.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG6_s
{
    volatile uint32_t  cfg_cs_chip : 16;  /* ALT_MPFE_IOHMC_REG_CTRLCFG6_CFG_CS_CHIP */
    uint32_t                       : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG6. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG6_s  ALT_MPFE_IOHMC_REG_CTRLCFG6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG6 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG6 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG6_OFST        0x40

/*
 * Register : reg_ctrlcfg7
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                    
 * :--------|:-------|:--------|:------------------------------------------------
 *  [0]     | ???    | Unknown | *UNDEFINED*                                    
 *  [7:1]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY
 *  [14:8]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY
 *  [31:15] | ???    | Unknown | *UNDEFINED*                                    
 * 
 */
/*
 * Field : cfg_rb_backup_entry
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rb_reserved_entry[6:0]
 * 
 * Name:Number of Reserved Entries in Read Buffer
 * 
 * Description:Specify how many entries are reserved in read buffer before almost
 * full is asserted.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_WIDTH      7
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_SET_MSK    0x000000fe
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_CLR_MSK    0xffffff01
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_GET(value) (((value) & 0x000000fe) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY_SET(value) (((value) << 1) & 0x000000fe)

/*
 * Field : cfg_wb_backup_entry
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_wb_reserved_entry[6:0]
 * 
 * Name:Number of Reserved Entries in Write Buffer
 * 
 * Description:Specify how many entries are reserved in write buffer before almost
 * full is asserted.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_MSB        14
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_WIDTH      7
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_SET_MSK    0x00007f00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_CLR_MSK    0xffff80ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_GET(value) (((value) & 0x00007f00) >> 8)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY_SET(value) (((value) << 8) & 0x00007f00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG7.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG7_s
{
    uint32_t                               :  1;  /* *UNDEFINED* */
    volatile uint32_t  cfg_rb_backup_entry :  7;  /* ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_RB_BACKUP_ENTRY */
    volatile uint32_t  cfg_wb_backup_entry :  7;  /* ALT_MPFE_IOHMC_REG_CTRLCFG7_CFG_WB_BACKUP_ENTRY */
    uint32_t                               : 17;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG7. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG7_s  ALT_MPFE_IOHMC_REG_CTRLCFG7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG7 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG7 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG7_OFST        0x44

/*
 * Register : reg_ctrlcfg8
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                           
 * :-------|:-------|:--------|:---------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN
 *  [1]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV
 *  [31:2] | ???    | Unknown | *UNDEFINED*                           
 * 
 */
/*
 * Field : cfg_3ds_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3ds_en
 * 
 * Name:3DS Mode Enable
 * 
 * Description:1’b0: Disable 3DS Logic
 * 
 * 1’b1: Enable 3DS Logic
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : cfg_ck_inv
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ck_inv
 * 
 * Name:Invert CK polarity
 * 
 * Description:Use to program CK polarity.
 * 
 * 1’b0: 10101010, 1’b1: 01010101
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG8.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG8_s
{
    volatile uint32_t  cfg_3ds_en :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_3DS_EN */
    volatile uint32_t  cfg_ck_inv :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG8_CFG_CK_INV */
    uint32_t                      : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG8. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG8_s  ALT_MPFE_IOHMC_REG_CTRLCFG8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG8 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG8 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG8_OFST        0x48

/*
 * Register : reg_ctrlcfg9
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                  
 * :-------|:-------|:--------|:----------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                  
 * 
 */
/*
 * Field : cfg_dfx_bypass_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_dfx_bypass_en
 * 
 * Name:DFX Bypass Mode Enable
 * 
 * Description:Used for dft and timing characterization only.
 * 
 * 1’b0: Normal functional mode, 1’b1: DFX bypass mode.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN register field. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN register field value. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG9.
 */
struct ALT_MPFE_IOHMC_REG_CTRLCFG9_s
{
    volatile uint32_t  cfg_dfx_bypass_en :  1;  /* ALT_MPFE_IOHMC_REG_CTRLCFG9_CFG_DFX_BYPASS_EN */
    uint32_t                             : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CTRLCFG9. */
typedef struct ALT_MPFE_IOHMC_REG_CTRLCFG9_s  ALT_MPFE_IOHMC_REG_CTRLCFG9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CTRLCFG9 register. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CTRLCFG9 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CTRLCFG9_OFST        0x4c

/*
 * Register : reg_dramtiming0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                    
 * :--------|:-------|:--------|:----------------------------------------------------------------
 *  [6:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL                         
 *  [12:7]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES    
 *  [18:13] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES
 *  [31:19] | ???    | Unknown | *UNDEFINED*                                                    
 * 
 */
/*
 * Field : cfg_tcl
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_tcl[6:0]
 * 
 * Name:CAS Read Latency
 * 
 * Description:Memory read latency.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_WIDTH      7
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_SET_MSK    0x0000007f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_CLR_MSK    0xffffff80
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_GET(value) (((value) & 0x0000007f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL_SET(value) (((value) << 0) & 0x0000007f)

/*
 * Field : cfg_power_saving_exit_cycles
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_power_saving_exit_cycles[5:0]
 * 
 * Name:Minimum Low Power State Cycles
 * 
 * Description:The minimum number of cycles to stay in a low power state. This
 * applies to both power down and self-refresh and should be set to the greater of
 * tPD and tCKESR.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_MSB        12
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_SET_MSK    0x00001f80
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_CLR_MSK    0xffffe07f
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_GET(value) (((value) & 0x00001f80) >> 7)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES_SET(value) (((value) << 7) & 0x00001f80)

/*
 * Field : cfg_mem_clk_disable_entry_cycles
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_mem_clk_disable_entry_cycles[5:0]
 * 
 * Name:Clock Disable Delay Cycles
 * 
 * Description:Set to a the number of clocks after the execution of an self-refresh
 * to stop the clock. This register is generally set based on PHY design latency
 * and should generally not be changed.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_MSB        18
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES register field. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_SET_MSK    0x0007e000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_CLR_MSK    0xfff81fff
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_GET(value) (((value) & 0x0007e000) >> 13)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES_SET(value) (((value) << 13) & 0x0007e000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DRAMTIMING0.
 */
struct ALT_MPFE_IOHMC_REG_DRAMTIMING0_s
{
    volatile uint32_t  cfg_tcl                          :  7;  /* ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_TCL */
    volatile uint32_t  cfg_power_saving_exit_cycles     :  6;  /* ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_POWER_SAVING_EXIT_CYCLES */
    volatile uint32_t  cfg_mem_clk_disable_entry_cycles :  6;  /* ALT_MPFE_IOHMC_REG_DRAMTIMING0_CFG_MEM_CLK_DISABLE_ENTRY_CYCLES */
    uint32_t                                            : 13;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DRAMTIMING0. */
typedef struct ALT_MPFE_IOHMC_REG_DRAMTIMING0_s  ALT_MPFE_IOHMC_REG_DRAMTIMING0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMTIMING0 register. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DRAMTIMING0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DRAMTIMING0_OFST        0x50

/*
 * Register : reg_dramodt0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                   
 * :--------|:-------|:--------|:-----------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP
 *  [31:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP 
 * 
 */
/*
 * Field : cfg_write_odt_chip
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_write_odt_chip[15:0]
 * 
 * Name:Write ODT Control
 * 
 * Description:ODT scheme setting for write command.
 * 
 * Setting separated into 4 sections: [CS3][CS2][CS1][CS0]
 * 
 * Each section consists of 4 bits to indicate which chip should ODT be asserted
 * when write occurs on current CS.
 * 
 * Eg: if we set to 16’b0000_0000_0010_0001, ODT will be asserted to chip0 and
 * chip1 when write occurs to CS0 and CS1 respectively.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : cfg_read_odt_chip
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_read_odt_chip[15:0]
 * 
 * Name:Read ODT Control
 * 
 * Description:ODT scheme setting for read command.
 * 
 * Setting separated into 4 sections: [CS3][CS2][CS1][CS0]
 * 
 * Each section consists of 4 bits to indicate which chip should ODT be asserted
 * when write occurs on current CS.
 * 
 * Eg: if we set to 16’b0000_0000_0010_0001, ODT will be asserted to chip0 and
 * chip1 when write occurs to CS0 and CS1 respectively.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_SET_MSK    0xffff0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_CLR_MSK    0x0000ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DRAMODT0.
 */
struct ALT_MPFE_IOHMC_REG_DRAMODT0_s
{
    volatile uint32_t  cfg_write_odt_chip : 16;  /* ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_WRITE_ODT_CHIP */
    volatile uint32_t  cfg_read_odt_chip  : 16;  /* ALT_MPFE_IOHMC_REG_DRAMODT0_CFG_READ_ODT_CHIP */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DRAMODT0. */
typedef struct ALT_MPFE_IOHMC_REG_DRAMODT0_s  ALT_MPFE_IOHMC_REG_DRAMODT0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT0 register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DRAMODT0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DRAMODT0_OFST        0x54

/*
 * Register : reg_dramodt1
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                  
 * :--------|:-------|:--------|:----------------------------------------------
 *  [5:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON    
 *  [11:6]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON    
 *  [17:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD
 *  [23:18] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD
 *  [31:24] | ???    | Unknown | *UNDEFINED*                                  
 * 
 */
/*
 * Field : cfg_wr_odt_on
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_wr_odt_on[5:0]
 * 
 * Name:Write ODT On Time
 * 
 * Description:Indicates number of memory clock cycle gap between write command and
 * ODT signal rising edge.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON_SET(value) (((value) << 0) & 0x0000003f)

/*
 * Field : cfg_rd_odt_on
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rd_odt_on[5:0]
 * 
 * Name:Read ODT On Time
 * 
 * Description:Indicates number of memory clock cycle gap between read command and
 * ODT signal rising edge.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_SET_MSK    0x00000fc0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_CLR_MSK    0xfffff03f
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_GET(value) (((value) & 0x00000fc0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON_SET(value) (((value) << 6) & 0x00000fc0)

/*
 * Field : cfg_wr_odt_period
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_wr_odt_period[5:0]
 * 
 * Name:Write ODT Period
 * 
 * Description:Indicates number of memory clock cycle write ODT signal should stay
 * asserted after rising edge.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_SET_MSK    0x0003f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_CLR_MSK    0xfffc0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_GET(value) (((value) & 0x0003f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD_SET(value) (((value) << 12) & 0x0003f000)

/*
 * Field : cfg_rd_odt_period
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rd_odt_period[5:0]
 * 
 * Name:Read ODT Period
 * 
 * Description:Indicates number of memory clock cycle read ODT signal should stay
 * asserted after rising edge.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_SET_MSK    0x00fc0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_CLR_MSK    0xff03ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_GET(value) (((value) & 0x00fc0000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD_SET(value) (((value) << 18) & 0x00fc0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DRAMODT1.
 */
struct ALT_MPFE_IOHMC_REG_DRAMODT1_s
{
    volatile uint32_t  cfg_wr_odt_on     :  6;  /* ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_ON */
    volatile uint32_t  cfg_rd_odt_on     :  6;  /* ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_ON */
    volatile uint32_t  cfg_wr_odt_period :  6;  /* ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_WR_ODT_PERIOD */
    volatile uint32_t  cfg_rd_odt_period :  6;  /* ALT_MPFE_IOHMC_REG_DRAMODT1_CFG_RD_ODT_PERIOD */
    uint32_t                             :  8;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DRAMODT1. */
typedef struct ALT_MPFE_IOHMC_REG_DRAMODT1_s  ALT_MPFE_IOHMC_REG_DRAMODT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMODT1 register. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DRAMODT1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DRAMODT1_OFST        0x58

/*
 * Register : reg_sbcfg0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                      
 * :--------|:-------|:--------|:------------------------------------------------------------------
 *  [3:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH            
 *  [4]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK                
 *  [5]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL                 
 *  [6]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX         
 *  [7]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE
 *  [8]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX                  
 *  [9]     | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX        
 *  [10]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE           
 *  [11]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN                
 *  [15:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0                  
 *  [31:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1                  
 * 
 */
/*
 * Field : cfg_no_of_ref_for_self_rfsh
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_no_of_ref_for_self_rfsh[3:0]
 * 
 * Name:No of Refresh prior to Self Refresh Entry
 * 
 * Description:Configure the number of Refresh prior to Self Refresh Entry.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH_SET(value) (((value) << 0) & 0x0000000f)

/*
 * Field : cfg_exit_pdn_for_dqstrk
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_exit_pdn_for_dqstrk
 * 
 * Name:Exit Power Down For Periodic DQS
 * 
 * Description:When asserted, Periodic DQS Tracking has higher priority compared to
 * Power Down.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_MSB        4
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : cfg_cb_revert_ref_qual
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_revert_ref_qual
 * 
 * Name:Refresh and Self Refresh Behaviour Chicken Bit
 * 
 * Description:When set to 0, do_refresh is ignored for Refresh state machine
 * transition.
 * 
 * When set to 1, do_refresh is considered for Refresh state machine transition
 * similar to Nightfury.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : cfg_cb_en_cmd_valid_ungate_fix
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_en_cmd_valid_ungate_fix
 * 
 * Name:Chicken bit for command valid ungated fix
 * 
 * Description:Set to 1’b1 to enable fix.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : cfg_cb_3ds_mixed_height_ref_ack_disable
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_3ds_mixed_height_ref_ack_disable
 * 
 * Name:3DS Mixed Height Physical Staggering Off Refresh Ack Chicken Bit
 * 
 * Description:When set to 0, enable fix for 3DS Mixed Height Physical Staggering
 * Off Refresh Ack where iohmc refers to respective cfg_lr_num* for Refresh Ack
 * assertion
 * 
 * When set to 1, disable fix for 3DS Mixed Height Physical Staggering Off Refresh
 * Ack where iohmc refers to cfg_lr_num0 for Refresh Ack assertion.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : cfg_cb_en_mrnk_rd_fix
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_en_mrnk_rd_fix
 * 
 * Name:Chicken bit for read mrnk fix
 * 
 * Description:Set to 1’b1 to enable fix.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : cfg_cb_3ds_mixed_height_req_fix
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_3ds_mixed_height_req_fix
 * 
 * Name:3DS Mixed Height Physical Staggering Off Disable Precharge to non-existent
 * Lower Logical Rank Chicken Bit
 * 
 * Description:When set to 0, enable fix where iohmc does not Precharge non
 * existent Logical Rank in Physical Staggering Off Mode
 * 
 * When set to 1, disable fix where iohm Precharge non existent Logical Rank in
 * Physical Staggering Off Mode.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_MSB        9
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : cfg_cb_pdqs_perf_fix_disable
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cb_pdqs_perf_fix_disable
 * 
 * Name:Periodic DQS Tracking Performance Chicken Bit
 * 
 * Description:When set to 0, enable fix where Periodic DQS Tracking is issued
 * earlier.
 * 
 * When set to 1, disable fix where Periodic DQS Tracking is issued after a fixed
 * delay.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_MSB        10
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : cfg_self_rfsh_dqstrk_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_self_rfsh_dqstrk_en
 * 
 * Name:Enable DQS Tracking After Self Refresh Exit
 * 
 * Description:When set to 1, enable DQS Tracking after Self Refresh exit.
 * 
 * When set to 0, disable DQS Tracking after Self Refresh exit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : cfg_rld3_refresh_seq0
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rld3_refresh_seq0[3:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_SET_MSK    0x0000f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_CLR_MSK    0xffff0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_GET(value) (((value) & 0x0000f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0_SET(value) (((value) << 12) & 0x0000f000)

/*
 * Field : cfg_rld3_refresh_seq1
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rld3_refresh_seq1[15:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_SET_MSK    0xffff0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_CLR_MSK    0x0000ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG0.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG0_s
{
    volatile uint32_t  cfg_no_of_ref_for_self_rfsh             :  4;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_NO_OF_REF_FOR_SELF_RFSH */
    volatile uint32_t  cfg_exit_pdn_for_dqstrk                 :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_EXIT_PDN_FOR_DQSTRK */
    volatile uint32_t  cfg_cb_revert_ref_qual                  :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_REVERT_REF_QUAL */
    volatile uint32_t  cfg_cb_en_cmd_valid_ungate_fix          :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_CMD_VALID_UNGATE_FIX */
    volatile uint32_t  cfg_cb_3ds_mixed_height_ref_ack_disable :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REF_ACK_DISABLE */
    volatile uint32_t  cfg_cb_en_mrnk_rd_fix                   :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_EN_MRNK_RD_FIX */
    volatile uint32_t  cfg_cb_3ds_mixed_height_req_fix         :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_3DS_MIXED_HEIGHT_REQ_FIX */
    volatile uint32_t  cfg_cb_pdqs_perf_fix_disable            :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_CB_PDQS_PERF_FIX_DISABLE */
    volatile uint32_t  cfg_self_rfsh_dqstrk_en                 :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_SELF_RFSH_DQSTRK_EN */
    volatile uint32_t  cfg_rld3_refresh_seq0                   :  4;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ0 */
    volatile uint32_t  cfg_rld3_refresh_seq1                   : 16;  /* ALT_MPFE_IOHMC_REG_SBCFG0_CFG_RLD3_REFRESH_SEQ1 */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG0. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG0_s  ALT_MPFE_IOHMC_REG_SBCFG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG0 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG0_OFST        0x5c

/*
 * Register : reg_sbcfg1
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                    
 * :--------|:-------|:--------|:------------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2
 *  [31:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3
 * 
 */
/*
 * Field : cfg_rld3_refresh_seq2
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rld3_refresh_seq2[15:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : cfg_rld3_refresh_seq3
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rld3_refresh_seq3[15:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_SET_MSK    0xffff0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_CLR_MSK    0x0000ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG1.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG1_s
{
    volatile uint32_t  cfg_rld3_refresh_seq2 : 16;  /* ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ2 */
    volatile uint32_t  cfg_rld3_refresh_seq3 : 16;  /* ALT_MPFE_IOHMC_REG_SBCFG1_CFG_RLD3_REFRESH_SEQ3 */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG1. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG1_s  ALT_MPFE_IOHMC_REG_SBCFG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG1 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG1_OFST        0x60

/*
 * Register : reg_sbcfg2
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                       
 * :-------|:-------|:--------|:---------------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE   
 *  [1]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE   
 *  [2]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE  
 *  [3]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE       
 *  [4]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN        
 *  [5]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN     
 *  [7:6]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK
 *  [31:8] | ???    | Unknown | *UNDEFINED*                                       
 * 
 */
/*
 * Field : cfg_srf_zqcal_disable
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_srf_zqcal_disable
 * 
 * Name:ZQCal after Self Refresh Disable
 * 
 * Description:Setting to 1 to disable ZQ Calibration after self refresh.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : cfg_mps_zqcal_disable
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_mps_zqcal_disable
 * 
 * Name:ZQCal after MPS Disable
 * 
 * Description:Setting to 1 to disable ZQ Calibration after Maximum Power Saving
 * exit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : cfg_mps_dqstrk_disable
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_mps_dqstrk_disable
 * 
 * Name:DQS Tracking after MPS Disable
 * 
 * Description:Setting to 1 to disable DQS Tracking after Maximum Power Saving exit
 * 
 * 1’b1 – Disable Reinitialization
 * 
 * 1’b0 – Enable Reinitialization
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_MSB        2
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : cfg_sb_cg_disable
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_sb_cg_disable
 * 
 * Name:Clock Gating Disable During Sideband Operations
 * 
 * Description:Setting to 1 to disable mem_ck gating  during self refresh and deep
 * power down.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : cfg_user_rfsh_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_user_rfsh_en
 * 
 * Name:User Refresh Enable
 * 
 * Description:Setting to 1 to enable user refresh.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_MSB        4
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : cfg_srf_autoexit_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_srf_autoexit_en
 * 
 * Name:Self Refresh Auto Exit Enable
 * 
 * Description:Setting to 1 to enable controller to exit Self Refresh when new
 * command is detected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : cfg_srf_entry_exit_block
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_srf_entry_exit_block[1:0]
 * 
 * Name:Pre/Post Self Refresh Block
 * 
 * Description:Blocking arbiter from issuing cmds for the 4 cases,
 * 
 * 2’b00 – Pre Self Refresh Enter
 * 
 * 2’b01 – Post Self Refresh Enter
 * 
 * 2’b10 – Pre Self Refresh Exit
 * 
 * 2’b11 Post Self Refresh Exit
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_SET_MSK    0x000000c0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_CLR_MSK    0xffffff3f
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_GET(value) (((value) & 0x000000c0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK_SET(value) (((value) << 6) & 0x000000c0)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG2.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG2_s
{
    volatile uint32_t  cfg_srf_zqcal_disable    :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ZQCAL_DISABLE */
    volatile uint32_t  cfg_mps_zqcal_disable    :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_ZQCAL_DISABLE */
    volatile uint32_t  cfg_mps_dqstrk_disable   :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG2_CFG_MPS_DQSTRK_DISABLE */
    volatile uint32_t  cfg_sb_cg_disable        :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SB_CG_DISABLE */
    volatile uint32_t  cfg_user_rfsh_en         :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG2_CFG_USER_RFSH_EN */
    volatile uint32_t  cfg_srf_autoexit_en      :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_AUTOEXIT_EN */
    volatile uint32_t  cfg_srf_entry_exit_block :  2;  /* ALT_MPFE_IOHMC_REG_SBCFG2_CFG_SRF_ENTRY_EXIT_BLOCK */
    uint32_t                                    : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG2. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG2_s  ALT_MPFE_IOHMC_REG_SBCFG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG2 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG2_OFST        0x64

/*
 * Register : reg_sbcfg3
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                              
 * :--------|:-------|:--------|:------------------------------------------
 *  [19:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3
 *  [31:20] | ???    | Unknown | *UNDEFINED*                              
 * 
 */
/*
 * Field : cfg_sb_ddr4_mr3
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_sb_ddr4_mr3[19:0]
 * 
 * Name:DDR4 MR3 content
 * 
 * Description:This register stores the DDR4 MR3 Content.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_MSB        19
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_WIDTH      20
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_SET_MSK    0x000fffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_CLR_MSK    0xfff00000
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_GET(value) (((value) & 0x000fffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3_SET(value) (((value) << 0) & 0x000fffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG3.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG3_s
{
    volatile uint32_t  cfg_sb_ddr4_mr3 : 20;  /* ALT_MPFE_IOHMC_REG_SBCFG3_CFG_SB_DDR4_MR3 */
    uint32_t                           : 12;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG3. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG3_s  ALT_MPFE_IOHMC_REG_SBCFG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG3 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG3 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG3_OFST        0x68

/*
 * Register : reg_sbcfg4
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                              
 * :--------|:-------|:--------|:------------------------------------------
 *  [19:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4
 *  [31:20] | ???    | Unknown | *UNDEFINED*                              
 * 
 */
/*
 * Field : cfg_sb_ddr4_mr4
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_sb_ddr4_mr4[19:0]
 * 
 * Name:DDR4 MR4 content
 * 
 * Description:This register stores the DDR4 MR4 Content.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_MSB        19
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_WIDTH      20
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_SET_MSK    0x000fffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_CLR_MSK    0xfff00000
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_GET(value) (((value) & 0x000fffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4_SET(value) (((value) << 0) & 0x000fffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG4.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG4_s
{
    volatile uint32_t  cfg_sb_ddr4_mr4 : 20;  /* ALT_MPFE_IOHMC_REG_SBCFG4_CFG_SB_DDR4_MR4 */
    uint32_t                           : 12;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG4. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG4_s  ALT_MPFE_IOHMC_REG_SBCFG4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG4 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG4 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG4_OFST        0x6c

/*
 * Register : reg_sbcfg5
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                        
 * :-------|:-------|:--------|:----------------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN 
 *  [1]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                        
 * 
 */
/*
 * Field : cfg_short_dqstrk_ctrl_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_short_dqstrk_ctrl_en
 * 
 * Name:Controller Controlled Short DQS Tracking Enable
 * 
 * Description:Set to 1 to enable controller controlled DQS short tracking,
 * 
 * Set to 0 to enable sequencer controlled DQS short tracking.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : cfg_period_dqstrk_ctrl_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_period_dqstrk_ctrl_en
 * 
 * Name:Controller Controlled Periodic DQS Tracking Enable
 * 
 * Description:Set to 1 to enable controller to issue periodic DQS tracking.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG5.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG5_s
{
    volatile uint32_t  cfg_short_dqstrk_ctrl_en  :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG5_CFG_SHORT_DQSTRK_CTRL_EN */
    volatile uint32_t  cfg_period_dqstrk_ctrl_en :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG5_CFG_PERIOD_DQSTRK_CTRL_EN */
    uint32_t                                     : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG5. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG5_s  ALT_MPFE_IOHMC_REG_SBCFG5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG5 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG5 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG5_OFST        0x70

/*
 * Register : reg_sbcfg6
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                               
 * :--------|:-------|:--------|:-----------------------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL      
 *  [23:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST
 *  [31:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID     
 * 
 */
/*
 * Field : cfg_period_dqstrk_interval
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_period_dqstrk_interval[15:0]
 * 
 * Name:Periodic DQS Tracking Interval
 * 
 * Description:Interval between two controller controlled periodic DQS tracking.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : cfg_t_param_dqstrk_to_valid_last
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_dqstrk_to_valid_last[7:0]
 * 
 * Name:DQS Tracking Rd to Valid timing for the last Rank
 * 
 * Description:DQS Tracking Rd to Valid timing for the last Rank.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_WIDTH      8
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : cfg_t_param_dqstrk_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_dqstrk_to_valid[7:0]
 * 
 * Name:DQS Tracking Rd to Valid timing for Ranks other than the Last
 * 
 * Description:DQS Tracking Rd to Valid timing for Ranks other than the Last.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_WIDTH      8
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG6.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG6_s
{
    volatile uint32_t  cfg_period_dqstrk_interval       : 16;  /* ALT_MPFE_IOHMC_REG_SBCFG6_CFG_PERIOD_DQSTRK_INTERVAL */
    volatile uint32_t  cfg_t_param_dqstrk_to_valid_last :  8;  /* ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID_LAST */
    volatile uint32_t  cfg_t_param_dqstrk_to_valid      :  8;  /* ALT_MPFE_IOHMC_REG_SBCFG6_CFG_T_PARAM_DQSTRK_TO_VALID */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG6. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG6_s  ALT_MPFE_IOHMC_REG_SBCFG6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG6 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG6 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG6_OFST        0x74

/*
 * Register : reg_sbcfg7
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                      
 * :-------|:-------|:--------|:--------------------------------------------------
 *  [6:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD
 *  [31:7] | ???    | Unknown | *UNDEFINED*                                      
 * 
 */
/*
 * Field : cfg_rfsh_warn_threshold
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rfsh_warn_threshold[6:0]
 * 
 * Name:Threshold to Warn Refresh is Coming
 * 
 * Description:Threshold to warn a refresh is needed within the number of
 * controller clock cycles specified by the threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_WIDTH      7
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_SET_MSK    0x0000007f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_CLR_MSK    0xffffff80
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_GET(value) (((value) & 0x0000007f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD_SET(value) (((value) << 0) & 0x0000007f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG7.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG7_s
{
    volatile uint32_t  cfg_rfsh_warn_threshold :  7;  /* ALT_MPFE_IOHMC_REG_SBCFG7_CFG_RFSH_WARN_THRESHOLD */
    uint32_t                                   : 25;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG7. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG7_s  ALT_MPFE_IOHMC_REG_SBCFG7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG7 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG7 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG7_OFST        0x78

/*
 * Register : reg_caltiming0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                   
 * :--------|:-------|:--------|:---------------------------------------------------------------
 *  [5:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR         
 *  [11:6]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH          
 *  [17:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT          
 *  [23:18] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK
 *  [29:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG  
 *  [31:30] | ???    | Unknown | *UNDEFINED*                                                   
 * 
 */
/*
 * Field : cfg_t_param_act_to_rdwr
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_act_to_rdwr[5:0]
 * 
 * Name:Act to RW Timing
 * 
 * Description:Activate to Read/write command timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR_SET(value) (((value) << 0) & 0x0000003f)

/*
 * Field : cfg_t_param_act_to_pch
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_act_to_pch[5:0]
 * 
 * Name:Act to Precharge Timing
 * 
 * Description:Activate to Precharge Timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_SET_MSK    0x00000fc0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_CLR_MSK    0xfffff03f
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_GET(value) (((value) & 0x00000fc0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH_SET(value) (((value) << 6) & 0x00000fc0)

/*
 * Field : cfg_t_param_act_to_act
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_act_to_act[5:0]
 * 
 * Name:Act to Act Same Bank
 * 
 * Description:Active to activate timing on same bank.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_SET_MSK    0x0003f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_CLR_MSK    0xfffc0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_GET(value) (((value) & 0x0003f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_SET(value) (((value) << 12) & 0x0003f000)

/*
 * Field : cfg_t_param_act_to_act_diff_bank
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_act_to_act_diff_bank[5:0]
 * 
 * Name:Act to Act Diff Bank
 * 
 * Description:Active to activate timing on different banks, for DDR4 same bank
 * group.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_SET_MSK    0x00fc0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_CLR_MSK    0xff03ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_GET(value) (((value) & 0x00fc0000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK_SET(value) (((value) << 18) & 0x00fc0000)

/*
 * Field : cfg_t_param_act_to_act_diff_bg
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_act_to_act_diff_bg[5:0]
 * 
 * Name:Act to Act Diff Bank Group
 * 
 * Description:Active to activate timing on different bank groups, DDR4 only.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_MSB        29
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_SET_MSK    0x3f000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_CLR_MSK    0xc0ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_GET(value) (((value) & 0x3f000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG_SET(value) (((value) << 24) & 0x3f000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING0.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING0_s
{
    volatile uint32_t  cfg_t_param_act_to_rdwr          :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_RDWR */
    volatile uint32_t  cfg_t_param_act_to_pch           :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_PCH */
    volatile uint32_t  cfg_t_param_act_to_act           :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT */
    volatile uint32_t  cfg_t_param_act_to_act_diff_bank :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BANK */
    volatile uint32_t  cfg_t_param_act_to_act_diff_bg   :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING0_CFG_T_PARAM_ACT_TO_ACT_DIFF_BG */
    uint32_t                                            :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING0. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING0_s  ALT_MPFE_IOHMC_REG_CALTIMING0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING0 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING0_OFST        0x7c

/*
 * Register : reg_caltiming1
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                 
 * :--------|:-------|:--------|:-------------------------------------------------------------
 *  [5:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD          
 *  [11:6]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP
 *  [17:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG  
 *  [23:18] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR          
 *  [29:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP
 *  [31:30] | ???    | Unknown | *UNDEFINED*                                                 
 * 
 */
/*
 * Field : cfg_t_param_rd_to_rd
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_to_rd[5:0]
 * 
 * Name:Rd to Rd Same Bank
 * 
 * Description:Read to read command timing on same bank.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_SET(value) (((value) << 0) & 0x0000003f)

/*
 * Field : cfg_t_param_rd_to_rd_diff_chip
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_to_rd_diff_chip[5:0]
 * 
 * Name:Rd to Rd Diff Chip
 * 
 * Description:Read to read command timing on different chips.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_SET_MSK    0x00000fc0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_CLR_MSK    0xfffff03f
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_GET(value) (((value) & 0x00000fc0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP_SET(value) (((value) << 6) & 0x00000fc0)

/*
 * Field : cfg_t_param_rd_to_rd_diff_bg
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_to_rd_diff_bg[5:0]
 * 
 * Name:Rd to Rd Diff Bank Group
 * 
 * Description:Read to read command timing on different bank groups, DDR4 only.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_SET_MSK    0x0003f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_CLR_MSK    0xfffc0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_GET(value) (((value) & 0x0003f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG_SET(value) (((value) << 12) & 0x0003f000)

/*
 * Field : cfg_t_param_rd_to_wr
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_to_wr[5:0]
 * 
 * Name:Rd to Wr Same Bank
 * 
 * Description:Write to read command timing on same bank.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_SET_MSK    0x00fc0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_CLR_MSK    0xff03ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_GET(value) (((value) & 0x00fc0000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_SET(value) (((value) << 18) & 0x00fc0000)

/*
 * Field : cfg_t_param_rd_to_wr_diff_chip
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_to_wr_diff_chip[5:0]
 * 
 * Name:Rd to Wr Diff Chip
 * 
 * Description:Read to write command timing on different chips.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_MSB        29
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_SET_MSK    0x3f000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_CLR_MSK    0xc0ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_GET(value) (((value) & 0x3f000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP_SET(value) (((value) << 24) & 0x3f000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING1.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING1_s
{
    volatile uint32_t  cfg_t_param_rd_to_rd           :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD */
    volatile uint32_t  cfg_t_param_rd_to_rd_diff_chip :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_CHIP */
    volatile uint32_t  cfg_t_param_rd_to_rd_diff_bg   :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_RD_DIFF_BG */
    volatile uint32_t  cfg_t_param_rd_to_wr           :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR */
    volatile uint32_t  cfg_t_param_rd_to_wr_diff_chip :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING1_CFG_T_PARAM_RD_TO_WR_DIFF_CHIP */
    uint32_t                                          :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING1. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING1_s  ALT_MPFE_IOHMC_REG_CALTIMING1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING1 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING1_OFST        0x80

/*
 * Register : reg_caltiming2
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                 
 * :--------|:-------|:--------|:-------------------------------------------------------------
 *  [5:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG  
 *  [11:6]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH         
 *  [17:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID    
 *  [23:18] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR          
 *  [29:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP
 *  [31:30] | ???    | Unknown | *UNDEFINED*                                                 
 * 
 */
/*
 * Field : cfg_t_param_rd_to_wr_diff_bg
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_to_wr_diff_bg[5:0]
 * 
 * Name:Rd to Wr Diff Bank Group
 * 
 * Description:Read to write command timing on different bank groups, DDR4 only.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG_SET(value) (((value) << 0) & 0x0000003f)

/*
 * Field : cfg_t_param_rd_to_pch
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_to_pch[5:0]
 * 
 * Name:Rd to Precharge
 * 
 * Description:Read to precharge command timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_SET_MSK    0x00000fc0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_CLR_MSK    0xfffff03f
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_GET(value) (((value) & 0x00000fc0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH_SET(value) (((value) << 6) & 0x00000fc0)

/*
 * Field : cfg_t_param_rd_ap_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rd_ap_to_valid[5:0]
 * 
 * Name:Rd with Auto Precharge to Valid Cmd
 * 
 * Description:Read command with autoprecharge to data valid timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_SET_MSK    0x0003f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_CLR_MSK    0xfffc0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_GET(value) (((value) & 0x0003f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID_SET(value) (((value) << 12) & 0x0003f000)

/*
 * Field : cfg_t_param_wr_to_wr
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_to_wr[5:0]
 * 
 * Name:Wr to Wr Same bank
 * 
 * Description:Write to write command timing on same bank.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_SET_MSK    0x00fc0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_CLR_MSK    0xff03ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_GET(value) (((value) & 0x00fc0000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_SET(value) (((value) << 18) & 0x00fc0000)

/*
 * Field : cfg_t_param_wr_to_wr_diff_chip
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_to_wr_diff_chip[5:0]
 * 
 * Name:Wr to Wr  Diff Chip
 * 
 * Description:Write to write command timing on different chips.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_MSB        29
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_SET_MSK    0x3f000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_CLR_MSK    0xc0ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_GET(value) (((value) & 0x3f000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP_SET(value) (((value) << 24) & 0x3f000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING2.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING2_s
{
    volatile uint32_t  cfg_t_param_rd_to_wr_diff_bg   :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_WR_DIFF_BG */
    volatile uint32_t  cfg_t_param_rd_to_pch          :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_TO_PCH */
    volatile uint32_t  cfg_t_param_rd_ap_to_valid     :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_RD_AP_TO_VALID */
    volatile uint32_t  cfg_t_param_wr_to_wr           :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR */
    volatile uint32_t  cfg_t_param_wr_to_wr_diff_chip :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING2_CFG_T_PARAM_WR_TO_WR_DIFF_CHIP */
    uint32_t                                          :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING2. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING2_s  ALT_MPFE_IOHMC_REG_CALTIMING2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING2 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING2_OFST        0x84

/*
 * Register : reg_caltiming3
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                 
 * :--------|:-------|:--------|:-------------------------------------------------------------
 *  [5:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG  
 *  [11:6]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD          
 *  [17:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP
 *  [23:18] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG  
 *  [29:24] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH         
 *  [31:30] | ???    | Unknown | *UNDEFINED*                                                 
 * 
 */
/*
 * Field : cfg_t_param_wr_to_wr_diff_bg
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_to_wr_diff_bg[5:0]
 * 
 * Name:Wr to Wr Diff Bank Group
 * 
 * Description:Write to write command timing on different bank groups, DDR4 only.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG_SET(value) (((value) << 0) & 0x0000003f)

/*
 * Field : cfg_t_param_wr_to_rd
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_to_rd[5:0]
 * 
 * Name:Wr to Rd Same Bank
 * 
 * Description:Write to read command timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_SET_MSK    0x00000fc0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_CLR_MSK    0xfffff03f
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_GET(value) (((value) & 0x00000fc0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_SET(value) (((value) << 6) & 0x00000fc0)

/*
 * Field : cfg_t_param_wr_to_rd_diff_chip
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_to_rd_diff_chip[5:0]
 * 
 * Name:Wr to Rd Diff Chip
 * 
 * Description:Write to read command timing on different chips.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_SET_MSK    0x0003f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_CLR_MSK    0xfffc0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_GET(value) (((value) & 0x0003f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP_SET(value) (((value) << 12) & 0x0003f000)

/*
 * Field : cfg_t_param_wr_to_rd_diff_bg
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_to_rd_diff_bg[5:0]
 * 
 * Name:Wr to Rd Diff bank Group
 * 
 * Description:Write to read command timing on different bank groups, DDR4 only.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_MSB        23
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_SET_MSK    0x00fc0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_CLR_MSK    0xff03ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_GET(value) (((value) & 0x00fc0000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG_SET(value) (((value) << 18) & 0x00fc0000)

/*
 * Field : cfg_t_param_wr_to_pch
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_to_pch[5:0]
 * 
 * Name:Wr to Precharge
 * 
 * Description:Write to precharge command timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_MSB        29
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_SET_MSK    0x3f000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_CLR_MSK    0xc0ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_GET(value) (((value) & 0x3f000000) >> 24)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH_SET(value) (((value) << 24) & 0x3f000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING3.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING3_s
{
    volatile uint32_t  cfg_t_param_wr_to_wr_diff_bg   :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_WR_DIFF_BG */
    volatile uint32_t  cfg_t_param_wr_to_rd           :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD */
    volatile uint32_t  cfg_t_param_wr_to_rd_diff_chip :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_CHIP */
    volatile uint32_t  cfg_t_param_wr_to_rd_diff_bg   :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_RD_DIFF_BG */
    volatile uint32_t  cfg_t_param_wr_to_pch          :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING3_CFG_T_PARAM_WR_TO_PCH */
    uint32_t                                          :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING3. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING3_s  ALT_MPFE_IOHMC_REG_CALTIMING3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING3 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING3 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING3_OFST        0x88

/*
 * Register : reg_caltiming4
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                               
 * :--------|:-------|:--------|:-----------------------------------------------------------
 *  [5:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID  
 *  [11:6]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID    
 *  [17:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID
 *  [25:18] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID    
 *  [31:26] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID    
 * 
 */
/*
 * Field : cfg_t_param_wr_ap_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_wr_ap_to_valid[5:0]
 * 
 * Name:Wr with Auto Precharge to Valid
 * 
 * Description:Write with autoprecharge to valid command timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_SET_MSK    0x0000003f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_CLR_MSK    0xffffffc0
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_GET(value) (((value) & 0x0000003f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID_SET(value) (((value) << 0) & 0x0000003f)

/*
 * Field : cfg_t_param_pch_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_pch_to_valid[5:0]
 * 
 * Name:Precharge to Valid
 * 
 * Description:Precharge to valid command timing.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_SET_MSK    0x00000fc0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_CLR_MSK    0xfffff03f
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_GET(value) (((value) & 0x00000fc0) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID_SET(value) (((value) << 6) & 0x00000fc0)

/*
 * Field : cfg_t_param_pch_all_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_pch_all_to_valid[5:0]
 * 
 * Name:Precharge All to Valid
 * 
 * Description:Precharge all to banks being ready for bank activation command.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_SET_MSK    0x0003f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_CLR_MSK    0xfffc0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_GET(value) (((value) & 0x0003f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID_SET(value) (((value) << 12) & 0x0003f000)

/*
 * Field : cfg_t_param_arf_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_arf_to_valid[7:0]
 * 
 * Name:Auto Refresh to Valid
 * 
 * Description:Auto Refresh to valid DRAM command window. When operating in DDR4
 * 3DS mode, this register serves as the SLR (same logical rank) variant of tRFC.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_MSB        25
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_WIDTH      8
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_SET_MSK    0x03fc0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_CLR_MSK    0xfc03ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_GET(value) (((value) & 0x03fc0000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID_SET(value) (((value) << 18) & 0x03fc0000)

/*
 * Field : cfg_t_param_pdn_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_pdn_to_valid[5:0]
 * 
 * Name:Power Down to Valid
 * 
 * Description:Power down to valid bank command window.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_WIDTH      6
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_SET_MSK    0xfc000000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_CLR_MSK    0x03ffffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_GET(value) (((value) & 0xfc000000) >> 26)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID_SET(value) (((value) << 26) & 0xfc000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING4.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING4_s
{
    volatile uint32_t  cfg_t_param_wr_ap_to_valid   :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_WR_AP_TO_VALID */
    volatile uint32_t  cfg_t_param_pch_to_valid     :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_TO_VALID */
    volatile uint32_t  cfg_t_param_pch_all_to_valid :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PCH_ALL_TO_VALID */
    volatile uint32_t  cfg_t_param_arf_to_valid     :  8;  /* ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_ARF_TO_VALID */
    volatile uint32_t  cfg_t_param_pdn_to_valid     :  6;  /* ALT_MPFE_IOHMC_REG_CALTIMING4_CFG_T_PARAM_PDN_TO_VALID */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING4. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING4_s  ALT_MPFE_IOHMC_REG_CALTIMING4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING4 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING4 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING4_OFST        0x8c

/*
 * Register : reg_caltiming5
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                            
 * :--------|:-------|:--------|:--------------------------------------------------------
 *  [9:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID 
 *  [19:10] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL
 *  [31:20] | ???    | Unknown | *UNDEFINED*                                            
 * 
 */
/*
 * Field : cfg_t_param_srf_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_srf_to_valid[9:0]
 * 
 * Name:Self Refresh to Valid
 * 
 * Description:Self-refresh to valid bank command window.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_MSB        9
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_WIDTH      10
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID_SET(value) (((value) << 0) & 0x000003ff)

/*
 * Field : cfg_t_param_srf_to_zq_cal
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_srf_to_zq_cal[9:0]
 * 
 * Name:Self Refresh to ZQCAL
 * 
 * Description:Self refresh to ZQ calibration window.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_MSB        19
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_WIDTH      10
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_SET_MSK    0x000ffc00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_CLR_MSK    0xfff003ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_GET(value) (((value) & 0x000ffc00) >> 10)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL_SET(value) (((value) << 10) & 0x000ffc00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING5.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING5_s
{
    volatile uint32_t  cfg_t_param_srf_to_valid  : 10;  /* ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_VALID */
    volatile uint32_t  cfg_t_param_srf_to_zq_cal : 10;  /* ALT_MPFE_IOHMC_REG_CALTIMING5_CFG_T_PARAM_SRF_TO_ZQ_CAL */
    uint32_t                                     : 12;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING5. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING5_s  ALT_MPFE_IOHMC_REG_CALTIMING5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING5 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING5 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING5_OFST        0x90

/*
 * Register : reg_caltiming6
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                         
 * :--------|:-------|:--------|:-----------------------------------------------------
 *  [12:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD
 *  [28:13] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD
 *  [31:29] | ???    | Unknown | *UNDEFINED*                                         
 * 
 */
/*
 * Field : cfg_t_param_arf_period
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_arf_period[12:0]
 * 
 * Name:Auto Refresh Period
 * 
 * Description:Auto-refresh period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_MSB        12
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_WIDTH      13
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_SET_MSK    0x00001fff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_CLR_MSK    0xffffe000
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_GET(value) (((value) & 0x00001fff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD_SET(value) (((value) << 0) & 0x00001fff)

/*
 * Field : cfg_t_param_pdn_period
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_pdn_period[15:0]
 * 
 * Name:Power Down Period
 * 
 * Description:Clock power down recovery period.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_MSB        28
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_SET_MSK    0x1fffe000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_CLR_MSK    0xe0001fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_GET(value) (((value) & 0x1fffe000) >> 13)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD_SET(value) (((value) << 13) & 0x1fffe000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING6.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING6_s
{
    volatile uint32_t  cfg_t_param_arf_period : 13;  /* ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_ARF_PERIOD */
    volatile uint32_t  cfg_t_param_pdn_period : 16;  /* ALT_MPFE_IOHMC_REG_CALTIMING6_CFG_T_PARAM_PDN_PERIOD */
    uint32_t                                  :  3;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING6. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING6_s  ALT_MPFE_IOHMC_REG_CALTIMING6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING6 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING6 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING6_OFST        0x94

/*
 * Register : reg_caltiming7
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                            
 * :--------|:-------|:--------|:--------------------------------------------------------
 *  [8:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID
 *  [15:9]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID
 *  [19:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID 
 *  [29:20] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID 
 *  [31:30] | ???    | Unknown | *UNDEFINED*                                            
 * 
 */
/*
 * Field : cfg_t_param_zqcl_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_zqcl_to_valid[8:0]
 * 
 * Name:ZQCAL Long to Valid
 * 
 * Description:Long ZQ calibration to valid.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_WIDTH      9
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_SET_MSK    0x000001ff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_CLR_MSK    0xfffffe00
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_GET(value) (((value) & 0x000001ff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID_SET(value) (((value) << 0) & 0x000001ff)

/*
 * Field : cfg_t_param_zqcs_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_zqcs_to_valid[6:0]
 * 
 * Name:ZQCAL Short to Valid
 * 
 * Description:Short ZQ calibration to valid.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_WIDTH      7
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_SET_MSK    0x0000fe00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_CLR_MSK    0xffff01ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_GET(value) (((value) & 0x0000fe00) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID_SET(value) (((value) << 9) & 0x0000fe00)

/*
 * Field : cfg_t_param_mrs_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_mrs_to_valid[3:0]
 * 
 * Name:Mode Register Set to Valid
 * 
 * Description:Mode Register Setting to valid.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_MSB        19
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_SET_MSK    0x000f0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_CLR_MSK    0xfff0ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_GET(value) (((value) & 0x000f0000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID_SET(value) (((value) << 16) & 0x000f0000)

/*
 * Field : cfg_t_param_mps_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_mps_to_valid[9:0]
 * 
 * Name:Max Power Saving to Valid
 * 
 * Description:Timing parameter for Maximum Power Saving to any valid command.
 * tXMP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_MSB        29
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_WIDTH      10
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_SET_MSK    0x3ff00000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_CLR_MSK    0xc00fffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_GET(value) (((value) & 0x3ff00000) >> 20)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID_SET(value) (((value) << 20) & 0x3ff00000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING7.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING7_s
{
    volatile uint32_t  cfg_t_param_zqcl_to_valid :  9;  /* ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCL_TO_VALID */
    volatile uint32_t  cfg_t_param_zqcs_to_valid :  7;  /* ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_ZQCS_TO_VALID */
    volatile uint32_t  cfg_t_param_mrs_to_valid  :  4;  /* ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MRS_TO_VALID */
    volatile uint32_t  cfg_t_param_mps_to_valid  : 10;  /* ALT_MPFE_IOHMC_REG_CALTIMING7_CFG_T_PARAM_MPS_TO_VALID */
    uint32_t                                     :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING7. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING7_s  ALT_MPFE_IOHMC_REG_CALTIMING7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING7 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING7 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING7_OFST        0x98

/*
 * Register : reg_caltiming8
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                       
 * :--------|:-------|:--------|:-------------------------------------------------------------------
 *  [3:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID            
 *  [8:4]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID            
 *  [12:9]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE      
 *  [16:13] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS      
 *  [19:17] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY
 *  [27:20] | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID        
 *  [31:28] | ???    | Unknown | *UNDEFINED*                                                       
 * 
 */
/*
 * Field : cfg_t_param_mrr_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_mrr_to_valid[3:0]
 * 
 * Name:Mode Register Read to Valid
 * 
 * Description:Timing parameter for Mode Register Read to any valid command.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID_SET(value) (((value) << 0) & 0x0000000f)

/*
 * Field : cfg_t_param_mpr_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_mpr_to_valid[4:0]
 * 
 * Name:Multi Purpose Register Read to Valid
 * 
 * Description:Timing parameter for Multi Purpose Register Read to any valid
 * command.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_SET_MSK    0x000001f0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_CLR_MSK    0xfffffe0f
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_GET(value) (((value) & 0x000001f0) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID_SET(value) (((value) << 4) & 0x000001f0)

/*
 * Field : cfg_t_param_mps_exit_cs_to_cke
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_mps_exit_cs_to_cke[3:0]
 * 
 * Name:Max Power Saving CS to CKE
 * 
 * Description:Timing parameter for exit Maximum Power Saving. Timing requirement
 * for CS assertion vs CKE de-assertion. tMPX_S.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_MSB        12
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_SET_MSK    0x00001e00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_CLR_MSK    0xffffe1ff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_GET(value) (((value) & 0x00001e00) >> 9)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE_SET(value) (((value) << 9) & 0x00001e00)

/*
 * Field : cfg_t_param_mps_exit_cke_to_cs
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_mps_exit_cke_to_cs[3:0]
 * 
 * Name:Max Power Saving CKE to CS
 * 
 * Description:Timing parameter for exit Maximum Power Saving. Timing requirement
 * for CKE de-assertion vs CS de-assertion. tMPX_LH.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_MSB        16
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_SET_MSK    0x0001e000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_CLR_MSK    0xfffe1fff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_GET(value) (((value) & 0x0001e000) >> 13)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS_SET(value) (((value) << 13) & 0x0001e000)

/*
 * Field : cfg_t_param_rld3_multibank_ref_delay
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_rld3_multibank_ref_delay[2:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_MSB        19
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_SET_MSK    0x000e0000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_CLR_MSK    0xfff1ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_GET(value) (((value) & 0x000e0000) >> 17)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY_SET(value) (((value) << 17) & 0x000e0000)

/*
 * Field : cfg_t_param_mmr_cmd_to_valid
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_mmr_cmd_to_valid[7:0]
 * 
 * Name:MMR Cmd to Valid Timing
 * 
 * Description:MMR cmd to valid delay.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_MSB        27
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_WIDTH      8
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_SET_MSK    0x0ff00000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_CLR_MSK    0xf00fffff
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_GET(value) (((value) & 0x0ff00000) >> 20)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID_SET(value) (((value) << 20) & 0x0ff00000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING8.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING8_s
{
    volatile uint32_t  cfg_t_param_mrr_to_valid             :  4;  /* ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MRR_TO_VALID */
    volatile uint32_t  cfg_t_param_mpr_to_valid             :  5;  /* ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPR_TO_VALID */
    volatile uint32_t  cfg_t_param_mps_exit_cs_to_cke       :  4;  /* ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CS_TO_CKE */
    volatile uint32_t  cfg_t_param_mps_exit_cke_to_cs       :  4;  /* ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MPS_EXIT_CKE_TO_CS */
    volatile uint32_t  cfg_t_param_rld3_multibank_ref_delay :  3;  /* ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_RLD3_MULTIBANK_REF_DELAY */
    volatile uint32_t  cfg_t_param_mmr_cmd_to_valid         :  8;  /* ALT_MPFE_IOHMC_REG_CALTIMING8_CFG_T_PARAM_MMR_CMD_TO_VALID */
    uint32_t                                                :  4;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING8. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING8_s  ALT_MPFE_IOHMC_REG_CALTIMING8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING8 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING8 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING8_OFST        0x9c

/*
 * Register : reg_caltiming9
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                           
 * :-------|:-------|:--------|:-------------------------------------------------------
 *  [7:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT
 *  [31:8] | ???    | Unknown | *UNDEFINED*                                           
 * 
 */
/*
 * Field : cfg_t_param_4_act_to_act
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_4_act_to_act[7:0]
 * 
 * Name:Four Activate Window Time
 * 
 * Description:The four-activate window timing parameter.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_WIDTH      8
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT_SET(value) (((value) << 0) & 0x000000ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING9.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING9_s
{
    volatile uint32_t  cfg_t_param_4_act_to_act :  8;  /* ALT_MPFE_IOHMC_REG_CALTIMING9_CFG_T_PARAM_4_ACT_TO_ACT */
    uint32_t                                    : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING9. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING9_s  ALT_MPFE_IOHMC_REG_CALTIMING9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING9 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING9 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING9_OFST        0xa0

/*
 * Register : reg_caltiming10
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                             
 * :-------|:-------|:--------|:---------------------------------------------------------
 *  [7:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT
 *  [31:8] | ???    | Unknown | *UNDEFINED*                                             
 * 
 */
/*
 * Field : cfg_t_param_16_act_to_act
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_t_param_16_act_to_act[7:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT register field. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_WIDTH      8
/* The mask used to set the ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT register field value. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT field value from a register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT_SET(value) (((value) << 0) & 0x000000ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_CALTIMING10.
 */
struct ALT_MPFE_IOHMC_REG_CALTIMING10_s
{
    volatile uint32_t  cfg_t_param_16_act_to_act :  8;  /* ALT_MPFE_IOHMC_REG_CALTIMING10_CFG_T_PARAM_16_ACT_TO_ACT */
    uint32_t                                     : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_CALTIMING10. */
typedef struct ALT_MPFE_IOHMC_REG_CALTIMING10_s  ALT_MPFE_IOHMC_REG_CALTIMING10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_CALTIMING10 register. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_CALTIMING10 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_CALTIMING10_OFST        0xa4

/*
 * Register : reg_dramaddrw
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                           
 * :--------|:-------|:--------|:-------------------------------------------------------
 *  [4:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH       
 *  [9:5]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH       
 *  [13:10] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH      
 *  [15:14] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH
 *  [18:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH        
 *  [31:19] | ???    | Unknown | *UNDEFINED*                                           
 * 
 */
/*
 * Field : cfg_col_addr_width
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_col_addr_width[4:0]
 * 
 * Name:DRAM Column Address Bits
 * 
 * Description:The number of column address bits for the memory devices in your
 * memory interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_MSB        4
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH_SET(value) (((value) << 0) & 0x0000001f)

/*
 * Field : cfg_row_addr_width
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_row_addr_width[4:0]
 * 
 * Name:DRAM Row Address Bits
 * 
 * Description:The number of row address bits for the memory devices in your memory
 * interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_MSB        9
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_WIDTH      5
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_SET_MSK    0x000003e0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_CLR_MSK    0xfffffc1f
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_GET(value) (((value) & 0x000003e0) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH_SET(value) (((value) << 5) & 0x000003e0)

/*
 * Field : cfg_bank_addr_width
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_bank_addr_width[3:0]
 * 
 * Name:DRAM Bank Address Bits
 * 
 * Description:The number of bank address bits for the memory devices in your
 * memory interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_MSB        13
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_SET_MSK    0x00003c00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_CLR_MSK    0xffffc3ff
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_GET(value) (((value) & 0x00003c00) >> 10)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH_SET(value) (((value) << 10) & 0x00003c00)

/*
 * Field : cfg_bank_group_addr_width
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_bank_group_addr_width[1:0]
 * 
 * Name:DRAM Bank Group Address Bits
 * 
 * Description:The number of bank group address bits for the memory devices in your
 * memory interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_SET_MSK    0x0000c000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_CLR_MSK    0xffff3fff
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_GET(value) (((value) & 0x0000c000) >> 14)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH_SET(value) (((value) << 14) & 0x0000c000)

/*
 * Field : cfg_cs_addr_width
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cs_addr_width[2:0]
 * 
 * Name:DRAM Chip Address Bits
 * 
 * Description:The number of chip select address bits for the memory devices in
 * your memory interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_MSB        18
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_SET_MSK    0x00070000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_CLR_MSK    0xfff8ffff
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_GET(value) (((value) & 0x00070000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH_SET(value) (((value) << 16) & 0x00070000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DRAMADDRW.
 */
struct ALT_MPFE_IOHMC_REG_DRAMADDRW_s
{
    volatile uint32_t  cfg_col_addr_width        :  5;  /* ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_COL_ADDR_WIDTH */
    volatile uint32_t  cfg_row_addr_width        :  5;  /* ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_ROW_ADDR_WIDTH */
    volatile uint32_t  cfg_bank_addr_width       :  4;  /* ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_ADDR_WIDTH */
    volatile uint32_t  cfg_bank_group_addr_width :  2;  /* ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_BANK_GROUP_ADDR_WIDTH */
    volatile uint32_t  cfg_cs_addr_width         :  3;  /* ALT_MPFE_IOHMC_REG_DRAMADDRW_CFG_CS_ADDR_WIDTH */
    uint32_t                                     : 13;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DRAMADDRW. */
typedef struct ALT_MPFE_IOHMC_REG_DRAMADDRW_s  ALT_MPFE_IOHMC_REG_DRAMADDRW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMADDRW register. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DRAMADDRW register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DRAMADDRW_OFST        0xa8

/*
 * Register : reg_sideband0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                
 * :-------|:-------|:--------|:--------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                
 * 
 */
/*
 * Field : mr_cmd_trigger
 * 
 * iohmc_ctrl_mmr_top_inst.mr_cmd_trigger
 * 
 * Name:Mode Register Command Execution Trigger
 * 
 * Description:Write to 1 to trigger the execution of the mode register command.
 * It’s write clear.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND0.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND0_s
{
    volatile uint32_t  mr_cmd_trigger :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND0_MR_CMD_TRIGGER */
    uint32_t                          : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND0. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND0_s  ALT_MPFE_IOHMC_REG_SIDEBAND0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND0 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND0_OFST        0xac

/*
 * Register : reg_sideband1
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                 
 * :-------|:-------|:--------|:---------------------------------------------
 *  [3:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                 
 * 
 */
/*
 * Field : mmr_refresh_req
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_refresh_req[3:0]
 * 
 * Name:User Refresh Request
 * 
 * Description:When asserted, indicates Refresh request to the specific rank. Each
 * bit corresponds to each rank. Controller clear this bit to ‘0’ once Refresh
 * is executed.
 * 
 * Note: User may program any combination of values.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ_SET(value) (((value) << 0) & 0x0000000f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND1.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND1_s
{
    volatile uint32_t  mmr_refresh_req :  4;  /* ALT_MPFE_IOHMC_REG_SIDEBAND1_MMR_REFRESH_REQ */
    uint32_t                           : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND1. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND1_s  ALT_MPFE_IOHMC_REG_SIDEBAND1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND1 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND1_OFST        0xb0

/*
 * Register : reg_sideband2
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                    
 * :-------|:-------|:--------|:------------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                    
 * 
 */
/*
 * Field : mmr_zqcal_long_req
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_zqcal_long_req
 * 
 * Name:User Long ZQ Cal Request
 * 
 * Description:When asserted, indicates long ZQ cal request. This bit is write
 * clear.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND2.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND2_s
{
    volatile uint32_t  mmr_zqcal_long_req :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND2_MMR_ZQCAL_LONG_REQ */
    uint32_t                              : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND2. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND2_s  ALT_MPFE_IOHMC_REG_SIDEBAND2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND2 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND2_OFST        0xb4

/*
 * Register : reg_sideband3
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                     
 * :-------|:-------|:--------|:-------------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                     
 * 
 */
/*
 * Field : mmr_zqcal_short_req
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_zqcal_short_req
 * 
 * Name:User Short ZQ Cal Request
 * 
 * Description:When asserted, indicates short ZQ cal request. This bit is write
 * clear.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND3.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND3_s
{
    volatile uint32_t  mmr_zqcal_short_req :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND3_MMR_ZQCAL_SHORT_REQ */
    uint32_t                               : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND3. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND3_s  ALT_MPFE_IOHMC_REG_SIDEBAND3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND3 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND3 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND3_OFST        0xb8

/*
 * Register : reg_sideband4
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                   
 * :-------|:-------|:--------|:-----------------------------------------------
 *  [3:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                   
 * 
 */
/*
 * Field : mmr_self_rfsh_req
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_self_rfsh_req[3:0]
 * 
 * Name:User Self Refresh Request
 * 
 * Description:When asserted, indicates self refresh request to the specific rank.
 * Each bit corresponds to each rank. These bits are write clear.
 * 
 * Note: User may NOT program any combination of values. Legal Values are 0(hex)
 * and F(hex). All other values are ILLEGAL.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ_SET(value) (((value) << 0) & 0x0000000f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND4.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND4_s
{
    volatile uint32_t  mmr_self_rfsh_req :  4;  /* ALT_MPFE_IOHMC_REG_SIDEBAND4_MMR_SELF_RFSH_REQ */
    uint32_t                             : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND4. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND4_s  ALT_MPFE_IOHMC_REG_SIDEBAND4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND4 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND4 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND4_OFST        0xbc

/*
 * Register : reg_sideband5
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                 
 * :-------|:-------|:--------|:---------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                 
 * 
 */
/*
 * Field : mmr_dpd_mps_req
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_dpd_mps_req
 * 
 * Name:User Deep Power Down/Max Power Saving Request
 * 
 * Description:When asserted, indicates deep power down or max power saving
 * request. This bit is write clear.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND5.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND5_s
{
    volatile uint32_t  mmr_dpd_mps_req :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND5_MMR_DPD_MPS_REQ */
    uint32_t                           : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND5. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND5_s  ALT_MPFE_IOHMC_REG_SIDEBAND5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND5 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND5 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND5_OFST        0xc0

/*
 * Register : reg_sideband6
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                            
 * :-------|:-------|:--------|:----------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK
 *  [31:1] | ???    | Unknown | *UNDEFINED*                            
 * 
 */
/*
 * Field : mr_cmd_ack
 * 
 * iohmc_ctrl_mmr_top_inst.mr_cmd_ack
 * 
 * Name:Mode Register Command Ack
 * 
 * Description:Acknowledge to mode register command.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND6.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND6_s
{
    const volatile uint32_t  mr_cmd_ack :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND6_MR_CMD_ACK */
    uint32_t                            : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND6. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND6_s  ALT_MPFE_IOHMC_REG_SIDEBAND6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND6 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND6 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND6_OFST        0xc4

/*
 * Register : reg_sideband7
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                 
 * :-------|:-------|:--------|:---------------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                 
 * 
 */
/*
 * Field : mmr_refresh_ack
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_refresh_ack
 * 
 * Name:Refresh Acknowlege (non-3DS)
 * 
 * Description:Acknowledge to indicate refresh is in progress (non-3DS).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND7.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND7_s
{
    const volatile uint32_t  mmr_refresh_ack :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND7_MMR_REFRESH_ACK */
    uint32_t                                 : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND7. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND7_s  ALT_MPFE_IOHMC_REG_SIDEBAND7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND7 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND7 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND7_OFST        0xc8

/*
 * Register : reg_sideband8
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                               
 * :-------|:-------|:--------|:-------------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK
 *  [31:1] | ???    | Unknown | *UNDEFINED*                               
 * 
 */
/*
 * Field : mmr_zqcal_ack
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_zqcal_ack
 * 
 * Name:ZQCAL Acknowlege
 * 
 * Description:Acknowledge to indicate ZQCAL is progress.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND8.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND8_s
{
    const volatile uint32_t  mmr_zqcal_ack :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND8_MMR_ZQCAL_ACK */
    uint32_t                               : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND8. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND8_s  ALT_MPFE_IOHMC_REG_SIDEBAND8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND8 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND8 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND8_OFST        0xcc

/*
 * Register : reg_sideband9
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                   
 * :-------|:-------|:--------|:-----------------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                   
 * 
 */
/*
 * Field : mmr_self_rfsh_ack
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_self_rfsh_ack
 * 
 * Name:Self Refresh Acknowlege
 * 
 * Description:Acknowledge to indicate self refresh is progress.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND9.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND9_s
{
    const volatile uint32_t  mmr_self_rfsh_ack :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND9_MMR_SELF_RFSH_ACK */
    uint32_t                                   : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND9. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND9_s  ALT_MPFE_IOHMC_REG_SIDEBAND9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND9 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND9 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND9_OFST        0xd0

/*
 * Register : reg_sideband10
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                  
 * :-------|:-------|:--------|:----------------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                  
 * 
 */
/*
 * Field : mmr_dpd_mps_ack
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_dpd_mps_ack
 * 
 * Name:Deep Power Down/Max Power Saving Acknowlege
 * 
 * Description:Acknowledge to indicate deep power down/max power saving is in
 * progress.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND10.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND10_s
{
    const volatile uint32_t  mmr_dpd_mps_ack :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND10_MMR_DPD_MPS_ACK */
    uint32_t                                 : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND10. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND10_s  ALT_MPFE_IOHMC_REG_SIDEBAND10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND10 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND10 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND10_OFST        0xd4

/*
 * Register : reg_sideband11
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                  
 * :-------|:-------|:--------|:----------------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                  
 * 
 */
/*
 * Field : mmr_auto_pd_ack
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_auto_pd_ack
 * 
 * Name:Auto Power Down Acknowlege
 * 
 * Description:Acknowledge to indicate auto power down is in progress.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND11.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND11_s
{
    const volatile uint32_t  mmr_auto_pd_ack :  1;  /* ALT_MPFE_IOHMC_REG_SIDEBAND11_MMR_AUTO_PD_ACK */
    uint32_t                                 : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND11. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND11_s  ALT_MPFE_IOHMC_REG_SIDEBAND11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND11 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND11 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND11_OFST        0xd8

/*
 * Register : reg_sideband12
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                              
 * :-------|:-------|:--------|:------------------------------------------
 *  [2:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE
 *  [6:3]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK
 *  [31:7] | ???    | Unknown | *UNDEFINED*                              
 * 
 */
/*
 * Field : mr_cmd_type
 * 
 * iohmc_ctrl_mmr_top_inst.mr_cmd_type[2:0]
 * 
 * Name:Mode Register Command Type
 * 
 * Description:Indicates the type of Mode Register Command
 * 
 * ‘000’ – Mode Register Set.
 * 
 * ‘001’ – Mode Register Read.
 * 
 * ‘010’ – Multi Purpose Register Read.
 * 
 * Others – Reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_MSB        2
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_WIDTH      3
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_SET_MSK    0x00000007
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_CLR_MSK    0xfffffff8
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_GET(value) (((value) & 0x00000007) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE_SET(value) (((value) << 0) & 0x00000007)

/*
 * Field : mr_cmd_rank
 * 
 * iohmc_ctrl_mmr_top_inst.mr_cmd_rank[3:0]
 * 
 * Name:Mode Register Command Rank
 * 
 * Description:Indicates which rank the mode register command is intended to.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_SET_MSK    0x00000078
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_CLR_MSK    0xffffff87
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_GET(value) (((value) & 0x00000078) >> 3)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK_SET(value) (((value) << 3) & 0x00000078)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND12.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND12_s
{
    volatile uint32_t  mr_cmd_type :  3;  /* ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_TYPE */
    volatile uint32_t  mr_cmd_rank :  4;  /* ALT_MPFE_IOHMC_REG_SIDEBAND12_MR_CMD_RANK */
    uint32_t                       : 25;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND12. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND12_s  ALT_MPFE_IOHMC_REG_SIDEBAND12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND12 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND12 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND12_OFST        0xdc

/*
 * Register : reg_sideband13
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                
 * :-------|:-------|:--------|:--------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE
 * 
 */
/*
 * Field : mr_cmd_opcode
 * 
 * iohmc_ctrl_mmr_top_inst.mr_cmd_opcode[31:0]
 * 
 * Name:Mode Register Command Opcode
 * 
 * Description:[31:27] reserved.
 * 
 * Register Command Opcode
 * 
 * Information to be used for Register Command
 * 
 * LPDDR3
 * 
 * [26:20] Reserved
 * 
 * [19:10] falling edge CA.
 * 
 * [9:0] rising edge CA
 * 
 * DDR4
 * 
 * [26:24] C2:C0
 * 
 * [23] ACT
 * 
 * [22:21] BG1:BG0
 * 
 * [20] Reserved
 * 
 * [19:18] BA1:BA0
 * 
 * [17] A17
 * 
 * [16] RAS
 * 
 * [15] CAS
 * 
 * [14] WE
 * 
 * [13:0] A13:A0
 * 
 * DDR3
 * 
 * [26:21] Reserved
 * 
 * [20:18] BA2:BA0
 * 
 * [17] A17
 * 
 * [16] RAS
 * 
 * [15] CAS
 * 
 * [14] WE
 * 
 * [13] Reserved
 * 
 * [12:0] A12:A0
 * 
 * RLDRAM3
 * 
 * [26] Reserved
 * 
 * [25:22] BA3:BA0
 * 
 * [21] REF
 * 
 * [20] WE
 * 
 * [19:0] A19:A0
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND13.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND13_s
{
    volatile uint32_t  mr_cmd_opcode : 32;  /* ALT_MPFE_IOHMC_REG_SIDEBAND13_MR_CMD_OPCODE */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND13. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND13_s  ALT_MPFE_IOHMC_REG_SIDEBAND13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND13 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND13 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND13_OFST        0xe0

/*
 * Register : reg_sideband14
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                   
 * :--------|:-------|:--------|:-----------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK
 *  [31:16] | ???    | Unknown | *UNDEFINED*                                   
 * 
 */
/*
 * Field : mmr_refresh_bank
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_refresh_bank[15:0]
 * 
 * Name:LPDDR3 Per Bank Refresh
 * 
 * Description:When asserted, indictates LPDDR3 per bank Refresh. When not
 * asserted, indicates LPDDR3 all bank refresh.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND14.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND14_s
{
    volatile uint32_t  mmr_refresh_bank : 16;  /* ALT_MPFE_IOHMC_REG_SIDEBAND14_MMR_REFRESH_BANK */
    uint32_t                            : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND14. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND14_s  ALT_MPFE_IOHMC_REG_SIDEBAND14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND14 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND14 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND14_OFST        0xe4

/*
 * Register : reg_sideband15
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                 
 * :-------|:-------|:--------|:---------------------------------------------
 *  [3:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK
 *  [31:4] | ???    | Unknown | *UNDEFINED*                                 
 * 
 */
/*
 * Field : mmr_stall_rank
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_stall_rank[3:0]
 * 
 * Name:Stall Rank
 * 
 * Description:Setting to 1 to stall the corresponding rank.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK_SET(value) (((value) << 0) & 0x0000000f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND15.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND15_s
{
    volatile uint32_t  mmr_stall_rank :  4;  /* ALT_MPFE_IOHMC_REG_SIDEBAND15_MMR_STALL_RANK */
    uint32_t                          : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND15. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND15_s  ALT_MPFE_IOHMC_REG_SIDEBAND15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND15 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND15 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND15_OFST        0xe8

/*
 * Register : reg_dramsts
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                               
 * :-------|:-------|:--------|:-------------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS
 *  [1]    | R      | Unknown | ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL   
 *  [31:2] | ???    | Unknown | *UNDEFINED*                               
 * 
 */
/*
 * Field : phy_cal_success
 * 
 * iohmc_ctrl_mmr_top_inst.phy_cal_success
 * 
 * Name:PHY Calibration Successful
 * 
 * Description:This bit will be set to 1 if the PHY was able to successfully
 * calibrate.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS register field. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS register field. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS register field. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : phy_cal_fail
 * 
 * iohmc_ctrl_mmr_top_inst.phy_cal_fail
 * 
 * Name:PHY Calibration Failed
 * 
 * Description:This bit  will be set to 1 if the PHY was unable to calibrate.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL register field. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL register field. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL register field. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL register field value. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL field value from a register. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DRAMSTS.
 */
struct ALT_MPFE_IOHMC_REG_DRAMSTS_s
{
    const volatile uint32_t  phy_cal_success :  1;  /* ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_SUCCESS */
    const volatile uint32_t  phy_cal_fail    :  1;  /* ALT_MPFE_IOHMC_REG_DRAMSTS_PHY_CAL_FAIL */
    uint32_t                                 : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DRAMSTS. */
typedef struct ALT_MPFE_IOHMC_REG_DRAMSTS_s  ALT_MPFE_IOHMC_REG_DRAMSTS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DRAMSTS register. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DRAMSTS register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DRAMSTS_OFST        0xec

/*
 * Register : reg_dbgdone
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                        
 * :-------|:-------|:--------|:------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE
 *  [31:1] | ???    | Unknown | *UNDEFINED*                        
 * 
 */
/*
 * Field : dbg_done
 * 
 * iohmc_ctrl_mmr_top_inst.dbg_done
 * 
 * Name:Debug Test Done
 * 
 * Description:Indicates the debug test is completed.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE register field. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE register field. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE register field. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE register field value. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE register field value. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGDONE.
 */
struct ALT_MPFE_IOHMC_REG_DBGDONE_s
{
    const volatile uint32_t  dbg_done :  1;  /* ALT_MPFE_IOHMC_REG_DBGDONE_DBG_DONE */
    uint32_t                          : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGDONE. */
typedef struct ALT_MPFE_IOHMC_REG_DBGDONE_s  ALT_MPFE_IOHMC_REG_DBGDONE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGDONE register. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGDONE register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGDONE_OFST        0xf0

/*
 * Register : reg_dbgsignals
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                  
 * :-------|:-------|:--------|:----------------------------------------------
 *  [31:0] | R      | Unknown | ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT
 * 
 */
/*
 * Field : dbg_signals_out
 * 
 * iohmc_ctrl_mmr_top_inst.dbg_signals_out[31:0]
 * 
 * Name:Debug Signals
 * 
 * Description:Available debug signals.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT register field. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT register field. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT register field. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT register field value. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT register field value. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGSIGNALS.
 */
struct ALT_MPFE_IOHMC_REG_DBGSIGNALS_s
{
    const volatile uint32_t  dbg_signals_out : 32;  /* ALT_MPFE_IOHMC_REG_DBGSIGNALS_DBG_SIGNALS_OUT */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGSIGNALS. */
typedef struct ALT_MPFE_IOHMC_REG_DBGSIGNALS_s  ALT_MPFE_IOHMC_REG_DBGSIGNALS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGSIGNALS register. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGSIGNALS register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGSIGNALS_OFST        0xf4

/*
 * Register : reg_dbgreset
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                   
 * :-------|:-------|:--------|:-----------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET
 *  [1]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET 
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                   
 * 
 */
/*
 * Field : counter_zero_reset
 * 
 * iohmc_ctrl_mmr_top_inst.counter_zero_reset
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET register field. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET register field. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET register field. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET register field value. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET register field value. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : counter_one_reset
 * 
 * iohmc_ctrl_mmr_top_inst.counter_one_reset
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET register field. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET register field. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET register field. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET register field value. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET register field value. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGRESET.
 */
struct ALT_MPFE_IOHMC_REG_DBGRESET_s
{
    volatile uint32_t  counter_zero_reset :  1;  /* ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ZERO_RESET */
    volatile uint32_t  counter_one_reset  :  1;  /* ALT_MPFE_IOHMC_REG_DBGRESET_COUNTER_ONE_RESET */
    uint32_t                              : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGRESET. */
typedef struct ALT_MPFE_IOHMC_REG_DBGRESET_s  ALT_MPFE_IOHMC_REG_DBGRESET_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGRESET register. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGRESET register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGRESET_OFST        0xf8

/*
 * Register : reg_dbgmatch
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                            
 * :-------|:-------|:--------|:----------------------------------------
 *  [31:0] | R      | Unknown | ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE
 * 
 */
/*
 * Field : counter_one
 * 
 * iohmc_ctrl_mmr_top_inst.counter_one[31:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE register field. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE register field. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE register field. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE register field value. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE register field value. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE field value from a register. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_DBGMATCH.
 */
struct ALT_MPFE_IOHMC_REG_DBGMATCH_s
{
    const volatile uint32_t  counter_one : 32;  /* ALT_MPFE_IOHMC_REG_DBGMATCH_COUNTER_ONE */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_DBGMATCH. */
typedef struct ALT_MPFE_IOHMC_REG_DBGMATCH_s  ALT_MPFE_IOHMC_REG_DBGMATCH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_DBGMATCH register. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_DBGMATCH register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_DBGMATCH_OFST        0xfc

/*
 * Register : reg_counter0mask
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                      
 * :-------|:-------|:--------|:--------------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK
 * 
 */
/*
 * Field : counter_zero_mask
 * 
 * iohmc_ctrl_mmr_top_inst.counter_zero_mask[31:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK field value from a register. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_COUNTER0MASK.
 */
struct ALT_MPFE_IOHMC_REG_COUNTER0MASK_s
{
    volatile uint32_t  counter_zero_mask : 32;  /* ALT_MPFE_IOHMC_REG_COUNTER0MASK_COUNTER_ZERO_MASK */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_COUNTER0MASK. */
typedef struct ALT_MPFE_IOHMC_REG_COUNTER0MASK_s  ALT_MPFE_IOHMC_REG_COUNTER0MASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER0MASK register. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_COUNTER0MASK register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MASK_OFST        0x100

/*
 * Register : reg_counter1mask
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                     
 * :-------|:-------|:--------|:-------------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK
 * 
 */
/*
 * Field : counter_one_mask
 * 
 * iohmc_ctrl_mmr_top_inst.counter_one_mask[31:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK field value from a register. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_COUNTER1MASK.
 */
struct ALT_MPFE_IOHMC_REG_COUNTER1MASK_s
{
    volatile uint32_t  counter_one_mask : 32;  /* ALT_MPFE_IOHMC_REG_COUNTER1MASK_COUNTER_ONE_MASK */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_COUNTER1MASK. */
typedef struct ALT_MPFE_IOHMC_REG_COUNTER1MASK_s  ALT_MPFE_IOHMC_REG_COUNTER1MASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER1MASK register. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_COUNTER1MASK register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MASK_OFST        0x104

/*
 * Register : reg_counter0match
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                        
 * :-------|:-------|:--------|:----------------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH
 * 
 */
/*
 * Field : counter_zero_match
 * 
 * iohmc_ctrl_mmr_top_inst.counter_zero_match[31:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH field value from a register. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_COUNTER0MATCH.
 */
struct ALT_MPFE_IOHMC_REG_COUNTER0MATCH_s
{
    volatile uint32_t  counter_zero_match : 32;  /* ALT_MPFE_IOHMC_REG_COUNTER0MATCH_COUNTER_ZERO_MATCH */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_COUNTER0MATCH. */
typedef struct ALT_MPFE_IOHMC_REG_COUNTER0MATCH_s  ALT_MPFE_IOHMC_REG_COUNTER0MATCH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER0MATCH register. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_COUNTER0MATCH register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_COUNTER0MATCH_OFST        0x108

/*
 * Register : reg_counter1match
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                       
 * :-------|:-------|:--------|:---------------------------------------------------
 *  [31:0] | RW     | Unknown | ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH
 * 
 */
/*
 * Field : counter_one_match
 * 
 * iohmc_ctrl_mmr_top_inst.counter_one_match[31:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH register field. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH register field value. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH field value from a register. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_COUNTER1MATCH.
 */
struct ALT_MPFE_IOHMC_REG_COUNTER1MATCH_s
{
    volatile uint32_t  counter_one_match : 32;  /* ALT_MPFE_IOHMC_REG_COUNTER1MATCH_COUNTER_ONE_MATCH */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_COUNTER1MATCH. */
typedef struct ALT_MPFE_IOHMC_REG_COUNTER1MATCH_s  ALT_MPFE_IOHMC_REG_COUNTER1MATCH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_COUNTER1MATCH register. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_COUNTER1MATCH register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_COUNTER1MATCH_OFST        0x10c

/*
 * Register : reg_niosreserve0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                  
 * :--------|:-------|:--------|:----------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0
 *  [31:16] | ???    | Unknown | *UNDEFINED*                                  
 * 
 */
/*
 * Field : nios_reserve0
 * 
 * iohmc_ctrl_mmr_top_inst.nios_reserve0[15:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 register field value. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 register field value. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 field value from a register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_NIOSRESERVE0.
 */
struct ALT_MPFE_IOHMC_REG_NIOSRESERVE0_s
{
    volatile uint32_t  nios_reserve0 : 16;  /* ALT_MPFE_IOHMC_REG_NIOSRESERVE0_NIOS_RESERVE0 */
    uint32_t                         : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_NIOSRESERVE0. */
typedef struct ALT_MPFE_IOHMC_REG_NIOSRESERVE0_s  ALT_MPFE_IOHMC_REG_NIOSRESERVE0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_NIOSRESERVE0 register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_NIOSRESERVE0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE0_OFST        0x110

/*
 * Register : reg_niosreserve1
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                  
 * :--------|:-------|:--------|:----------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1
 *  [31:16] | ???    | Unknown | *UNDEFINED*                                  
 * 
 */
/*
 * Field : nios_reserve1
 * 
 * iohmc_ctrl_mmr_top_inst.nios_reserve1[15:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 register field value. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 register field value. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 field value from a register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_NIOSRESERVE1.
 */
struct ALT_MPFE_IOHMC_REG_NIOSRESERVE1_s
{
    volatile uint32_t  nios_reserve1 : 16;  /* ALT_MPFE_IOHMC_REG_NIOSRESERVE1_NIOS_RESERVE1 */
    uint32_t                         : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_NIOSRESERVE1. */
typedef struct ALT_MPFE_IOHMC_REG_NIOSRESERVE1_s  ALT_MPFE_IOHMC_REG_NIOSRESERVE1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_NIOSRESERVE1 register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_NIOSRESERVE1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE1_OFST        0x114

/*
 * Register : reg_niosreserve2
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                  
 * :--------|:-------|:--------|:----------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2
 *  [31:16] | ???    | Unknown | *UNDEFINED*                                  
 * 
 */
/*
 * Field : nios_reserve2
 * 
 * iohmc_ctrl_mmr_top_inst.nios_reserve2[15:0]
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 register field. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_WIDTH      16
/* The mask used to set the ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 register field value. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 register field value. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 field value from a register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_NIOSRESERVE2.
 */
struct ALT_MPFE_IOHMC_REG_NIOSRESERVE2_s
{
    volatile uint32_t  nios_reserve2 : 16;  /* ALT_MPFE_IOHMC_REG_NIOSRESERVE2_NIOS_RESERVE2 */
    uint32_t                         : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_NIOSRESERVE2. */
typedef struct ALT_MPFE_IOHMC_REG_NIOSRESERVE2_s  ALT_MPFE_IOHMC_REG_NIOSRESERVE2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_NIOSRESERVE2 register. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_NIOSRESERVE2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_NIOSRESERVE2_OFST        0x118

/*
 * Register : reg_sbcfg8
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                              
 * :--------|:-------|:--------|:------------------------------------------
 *  [19:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5
 *  [31:20] | ???    | Unknown | *UNDEFINED*                              
 * 
 */
/*
 * Field : cfg_sb_ddr4_mr5
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_sb_ddr4_mr5[19:0]
 * 
 * Name:DDR4 MR5 content
 * 
 * Description:This register stores the DDR4 MR5 content.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_MSB        19
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_WIDTH      20
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_SET_MSK    0x000fffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_CLR_MSK    0xfff00000
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_GET(value) (((value) & 0x000fffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5_SET(value) (((value) << 0) & 0x000fffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG8.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG8_s
{
    volatile uint32_t  cfg_sb_ddr4_mr5 : 20;  /* ALT_MPFE_IOHMC_REG_SBCFG8_CFG_SB_DDR4_MR5 */
    uint32_t                           : 12;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG8. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG8_s  ALT_MPFE_IOHMC_REG_SBCFG8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG8 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG8 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG8_OFST        0x11c

/*
 * Register : reg_sbcfg9
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                      
 * :-------|:-------|:--------|:--------------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                      
 * 
 */
/*
 * Field : cfg_ddr4_mps_addrmirror
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ddr4_mps_addrmirror
 * 
 * Name:DDR4 MPS Address Mirroring
 * 
 * Description:Set to 1 to enable address mirror option during MPS.
 * 
 * Set to 0 to disable address mirror option during MPS.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR register field. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR register field value. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR field value from a register. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SBCFG9.
 */
struct ALT_MPFE_IOHMC_REG_SBCFG9_s
{
    volatile uint32_t  cfg_ddr4_mps_addrmirror :  1;  /* ALT_MPFE_IOHMC_REG_SBCFG9_CFG_DDR4_MPS_ADDRMIRROR */
    uint32_t                                   : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SBCFG9. */
typedef struct ALT_MPFE_IOHMC_REG_SBCFG9_s  ALT_MPFE_IOHMC_REG_SBCFG9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SBCFG9 register. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SBCFG9 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SBCFG9_OFST        0x120

/*
 * Register : reg_3ds0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                   
 * :--------|:-------|:--------|:-----------------------------------------------
 *  [3:0]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0       
 *  [7:4]   | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1       
 *  [11:8]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2       
 *  [15:12] | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3       
 *  [17:16] | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH    
 *  [18]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE
 *  [31:19] | ???    | Unknown | *UNDEFINED*                                   
 * 
 */
/*
 * Field : cfg_3ds_lr_num0
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3ds_lr_num0[3:0]
 * 
 * Name:Number of 3DS Logical Ranks on Physical Rank 0
 * 
 * Description:4’b0000: Disable 3DS Logic
 * 
 * 4’b0001: 1H (engineering feature i.e. 3DS logic running in non-3DS mode)
 * 
 * 4’b0010: 2H
 * 
 * 4’b0100: 4H
 * 
 * 4’b1000: 8H (engineering feature)
 * 
 * All other values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_SET_MSK    0x0000000f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_CLR_MSK    0xfffffff0
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0_SET(value) (((value) << 0) & 0x0000000f)

/*
 * Field : cfg_3ds_lr_num1
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3ds_lr_num1[3:0]
 * 
 * Name:Number of 3DS Logical Ranks on Physical Rank 1
 * 
 * Description:4’b0000: Disable 3DS Logic
 * 
 * 4’b0001: 1H (engineering feature i.e. 3DS logic running in non-3DS mode)
 * 
 * 4’b0010: 2H
 * 
 * 4’b0100: 4H
 * 
 * 4’b1000: 8H (engineering feature)
 * 
 * All other values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_SET_MSK    0x000000f0
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_CLR_MSK    0xffffff0f
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_GET(value) (((value) & 0x000000f0) >> 4)
/* Produces a ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1_SET(value) (((value) << 4) & 0x000000f0)

/*
 * Field : cfg_3ds_lr_num2
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3ds_lr_num2[3:0]
 * 
 * Name:Number of 3DS Logical Ranks on Physical Rank 2
 * 
 * Description:4’b0000: Disable 3DS Logic
 * 
 * 4’b0001: 1H (engineering feature i.e. 3DS logic running in non-3DS mode)
 * 
 * 4’b0010: 2H
 * 
 * 4’b0100: 4H
 * 
 * 4’b1000: 8H (engineering feature)
 * 
 * All other values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_MSB        11
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_SET_MSK    0x00000f00
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_CLR_MSK    0xfffff0ff
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_GET(value) (((value) & 0x00000f00) >> 8)
/* Produces a ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2_SET(value) (((value) << 8) & 0x00000f00)

/*
 * Field : cfg_3ds_lr_num3
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3ds_lr_num3[3:0]
 * 
 * Name:Number of 3DS Logical Ranks on Physical Rank 3
 * 
 * Description:4’b0000: Disable 3DS Logic
 * 
 * 4’b0001: 1H (engineering feature i.e. 3DS logic running in non-3DS mode)
 * 
 * 4’b0010: 2H
 * 
 * 4’b0100: 4H
 * 
 * 4’b1000: 8H (engineering feature)
 * 
 * All other values are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_MSB        15
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_WIDTH      4
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_SET_MSK    0x0000f000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_CLR_MSK    0xffff0fff
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_GET(value) (((value) & 0x0000f000) >> 12)
/* Produces a ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3_SET(value) (((value) << 12) & 0x0000f000)

/*
 * Field : cfg_cid_addr_width
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cid_addr_width[1:0]
 * 
 * Name:3DS Chip ID Address Width
 * 
 * Description:To configure the width of the 3DS Chip ID signal, range 0-3.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_MSB        17
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_WIDTH      2
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_SET_MSK    0x00030000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_CLR_MSK    0xfffcffff
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_GET(value) (((value) & 0x00030000) >> 16)
/* Produces a ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH_SET(value) (((value) << 16) & 0x00030000)

/*
 * Field : cfg_3ds_pr_stag_enable
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3ds_pr_stag_enable
 * 
 * Name:Enable Physical Rank Staggering to 3DS devices
 * 
 * Description:1’b0 – Disable 3DS Physical Rank Refresh Staggering (Default)
 * 
 * 1’b1 – Enable 3DS Physical Rank Refresh Staggering.
 * 
 * Note: This is the global enable bit. There is no per rank option.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_MSB        18
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE register field. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_SET_MSK    0x00040000
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE register field value. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_CLR_MSK    0xfffbffff
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE_SET(value) (((value) << 18) & 0x00040000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_3DS0.
 */
struct ALT_MPFE_IOHMC_REG_3DS0_s
{
    volatile uint32_t  cfg_3ds_lr_num0        :  4;  /* ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM0 */
    volatile uint32_t  cfg_3ds_lr_num1        :  4;  /* ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM1 */
    volatile uint32_t  cfg_3ds_lr_num2        :  4;  /* ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM2 */
    volatile uint32_t  cfg_3ds_lr_num3        :  4;  /* ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_LR_NUM3 */
    volatile uint32_t  cfg_cid_addr_width     :  2;  /* ALT_MPFE_IOHMC_REG_3DS0_CFG_CID_ADDR_WIDTH */
    volatile uint32_t  cfg_3ds_pr_stag_enable :  1;  /* ALT_MPFE_IOHMC_REG_3DS0_CFG_3DS_PR_STAG_ENABLE */
    uint32_t                                  : 13;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_3DS0. */
typedef struct ALT_MPFE_IOHMC_REG_3DS0_s  ALT_MPFE_IOHMC_REG_3DS0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_3DS0 register. */
#define ALT_MPFE_IOHMC_REG_3DS0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_3DS0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_3DS0_OFST        0x124

/*
 * Register : reg_3ds1
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                
 * :-------|:-------|:--------|:--------------------------------------------
 *  [6:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR
 *  [31:7] | ???    | Unknown | *UNDEFINED*                                
 * 
 */
/*
 * Field : cfg_3ds_ref2ref_dlr
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_3ds_ref2ref_dlr[6:0]
 * 
 * Name:Refresh-to-refresh timing (Between Different Logical Ranks)
 * 
 * Description:Timing parameter for refreshes between different logical ranks i.e.
 * tRFC (DLR).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR register field. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR register field. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR register field. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_WIDTH      7
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR register field value. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_SET_MSK    0x0000007f
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR register field value. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_CLR_MSK    0xffffff80
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_GET(value) (((value) & 0x0000007f) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR_SET(value) (((value) << 0) & 0x0000007f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_3DS1.
 */
struct ALT_MPFE_IOHMC_REG_3DS1_s
{
    volatile uint32_t  cfg_3ds_ref2ref_dlr :  7;  /* ALT_MPFE_IOHMC_REG_3DS1_CFG_3DS_REF2REF_DLR */
    uint32_t                               : 25;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_3DS1. */
typedef struct ALT_MPFE_IOHMC_REG_3DS1_s  ALT_MPFE_IOHMC_REG_3DS1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_3DS1 register. */
#define ALT_MPFE_IOHMC_REG_3DS1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_3DS1 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_3DS1_OFST        0x128

/*
 * Register : reg_3ds2
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                        
 * :-------|:-------|:--------|:------------------------------------
 *  [8:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID
 *  [31:9] | ???    | Unknown | *UNDEFINED*                        
 * 
 */
/*
 * Field : cfg_chip_id
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_chip_id[8:0]
 * 
 * Name:3DS Chip ID Mapping
 * 
 * Description:Configure this register to change 3DS pin mapping
 * 
 * [8:6] – CID[2] map
 * 
 * [5:3] – CID[1] map
 * 
 * [2:0] – CID[0] map
 * 
 * where
 * 
 * [8] – Map CID[2] to default CID[2] pin
 * 
 * [7] – Map CID[2] to default CID[1] pin
 * 
 * [6] – Map CID[2] to default CID[0] pin
 * 
 * [5] – Map CID[1] to default CID[2] pin
 * 
 * [4] – Map CID[1] to default CID[1] pin
 * 
 * [3] – Map CID[1] to default CID[0] pin
 * 
 * [2] – Map CID[0] to default CID[2] pin
 * 
 * [1] – Map CID[0] to default CID[1] pin
 * 
 * [0] – Map CID[0] to default CID[0] pin
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID register field. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID register field. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_MSB        8
/* The width in bits of the ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID register field. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_WIDTH      9
/* The mask used to set the ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID register field value. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_SET_MSK    0x000001ff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID register field value. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_CLR_MSK    0xfffffe00
/* The reset value of the ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID field value from a register. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_GET(value) (((value) & 0x000001ff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID_SET(value) (((value) << 0) & 0x000001ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_3DS2.
 */
struct ALT_MPFE_IOHMC_REG_3DS2_s
{
    volatile uint32_t  cfg_chip_id :  9;  /* ALT_MPFE_IOHMC_REG_3DS2_CFG_CHIP_ID */
    uint32_t                       : 23;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_3DS2. */
typedef struct ALT_MPFE_IOHMC_REG_3DS2_s  ALT_MPFE_IOHMC_REG_3DS2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_3DS2 register. */
#define ALT_MPFE_IOHMC_REG_3DS2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_3DS2 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_3DS2_OFST        0x12c

/*
 * Register : reg_pipeline0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                          
 * :-------|:-------|:--------|:------------------------------------------------------
 *  [0]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA     
 *  [1]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA      
 *  [2]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA      
 *  [3]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA     
 *  [4]    | ???    | Unknown | *UNDEFINED*                                          
 *  [5]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA
 *  [6]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA     
 *  [7]    | RW     | Unknown | ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN
 *  [31:8] | ???    | Unknown | *UNDEFINED*                                          
 * 
 */
/*
 * Field : cfg_arbiter_reg_ena
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_arbiter_reg_ena
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_MSB        0
/* The width in bits of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA field value from a register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : cfg_wb_ptr_reg_ena
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_wb_ptr_reg_ena
 * 
 * Name:Bypass Write Buffer (WB) Retire Pointer
 * 
 * Description:1’b0 – Live WB Retire Pointer path (Default)
 * 
 * 1’b1 – Flop WB Retire Pointer path
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_MSB        1
/* The width in bits of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA field value from a register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : cfg_rb_ptr_reg_ena
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_rb_ptr_reg_ena
 * 
 * Name:Bypass Read Buffer (RB) Retire Pointer
 * 
 * Description:1’b0 – Live RB Retire Pointer path (Default)
 * 
 * 1’b0 – Flop RB Retire Pointer path
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_MSB        2
/* The width in bits of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA field value from a register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : cfg_ctl2dbc_reg_ena
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctl2dbc_reg_ena
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_MSB        3
/* The width in bits of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA field value from a register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : cfg_ctl2dbc_tile_reg_ena
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ctl2dbc_tile_reg_ena
 * 
 * Name:Reserved
 * 
 * Description:TBD
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_MSB        5
/* The width in bits of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA field value from a register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : cfg_ac_tile_reg_ena
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_ac_tile_reg_ena
 * 
 * Name:AC Pipe Stage Enable (Tile)
 * 
 * Description:Set to 1 to enable address/command tile pipe stage.
 * 
 * Set to 0 to disable address/command tile pipe stage.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_MSB        6
/* The width in bits of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA field value from a register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : cfg_cmd_fifo_pipeline_en
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_cmd_fifo_reserve_en
 * 
 * Name:Avalon Almost-Ready Enable
 * 
 * Description:Enables Almost-Ready behavior in input command FIFO.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN register field. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN register field value. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN field value from a register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN_SET(value) (((value) << 7) & 0x00000080)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_PIPELINE0.
 */
struct ALT_MPFE_IOHMC_REG_PIPELINE0_s
{
    volatile uint32_t  cfg_arbiter_reg_ena      :  1;  /* ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_ARBITER_REG_ENA */
    volatile uint32_t  cfg_wb_ptr_reg_ena       :  1;  /* ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_WB_PTR_REG_ENA */
    volatile uint32_t  cfg_rb_ptr_reg_ena       :  1;  /* ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_RB_PTR_REG_ENA */
    volatile uint32_t  cfg_ctl2dbc_reg_ena      :  1;  /* ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_REG_ENA */
    uint32_t                                    :  1;  /* *UNDEFINED* */
    volatile uint32_t  cfg_ctl2dbc_tile_reg_ena :  1;  /* ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CTL2DBC_TILE_REG_ENA */
    volatile uint32_t  cfg_ac_tile_reg_ena      :  1;  /* ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_AC_TILE_REG_ENA */
    volatile uint32_t  cfg_cmd_fifo_pipeline_en :  1;  /* ALT_MPFE_IOHMC_REG_PIPELINE0_CFG_CMD_FIFO_PIPELINE_EN */
    uint32_t                                    : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_PIPELINE0. */
typedef struct ALT_MPFE_IOHMC_REG_PIPELINE0_s  ALT_MPFE_IOHMC_REG_PIPELINE0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_PIPELINE0 register. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_PIPELINE0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_PIPELINE0_OFST        0x130

/*
 * Register : reg_memclockgating0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                              
 * :-------|:-------|:--------|:----------------------------------------------------------
 *  [7:0]  | RW     | Unknown | ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING
 *  [31:8] | ???    | Unknown | *UNDEFINED*                                              
 * 
 */
/*
 * Field : cfg_memclkgate_setting
 * 
 * iohmc_ctrl_mmr_top_inst.cfg_memclkgate_setting
 * 
 * Name:Memory Clock Control Setting
 * 
 * Description:Set memory clocks behavior for Hard Memory Controller
 * 
 * Each 2-bit field controls a specific memory clock pair.
 * 
 * [7:6] – memory clock pair #3
 * 
 * [5:4] – memory clock pair #2
 * 
 * [3:2] – memory clock pair #1
 * 
 * [1:0] – memory clock pair #0
 * 
 * Memory clock behavior is controlled as follows:
 * 
 * 2’b11 – Reserved
 * 
 * 2’b10 – clock always enabled
 * 
 * 2’b11 – clock disabled in low power states
 * 
 * 2’b00 – clock always disabled
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING register field. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING register field. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_MSB        7
/* The width in bits of the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING register field. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_WIDTH      8
/* The mask used to set the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING register field value. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING register field value. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING field value from a register. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING_SET(value) (((value) << 0) & 0x000000ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0.
 */
struct ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_s
{
    volatile uint32_t  cfg_memclkgate_setting :  8;  /* ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_CFG_MEMCLKGATE_SETTING */
    uint32_t                                  : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0. */
typedef struct ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_s  ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0 register. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_OFST        0x138

/*
 * Register : reg_sideband16
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                      
 * :-------|:-------|:--------|:--------------------------------------------------
 *  [31:0] | R      | Unknown | ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK
 * 
 */
/*
 * Field : mmr_3ds_refresh_ack
 * 
 * iohmc_ctrl_mmr_top_inst.mmr_3ds_refresh_ack[31:0]
 * 
 * Name:3DS Refresh Acknowledge
 * 
 * Description:Acknowledge to indicate 3DS refresh is done.
 * 
 * Bit0: PR0, LR0
 * 
 * Bit1: PR0, LR1
 * 
 * Bit2: PR0, LR2
 * 
 * Bit3: PR0, LR3
 * 
 * Bits4-7: Reserved
 * 
 * Bit8: PR1, LR0
 * 
 * Bit9: PR1, LR1
 * 
 * Bit10: PR1, LR2
 * 
 * Bit11: PR1, LR3
 * 
 * Bits12-15: Reserved
 * 
 * Bit16: PR2, LR0
 * 
 * Bit17: PR2, LR1
 * 
 * Bit18: PR2, LR2
 * 
 * Bit19: PR2, LR3
 * 
 * Bits20-23: Reserved
 * 
 * Bit24: PR3, LR0
 * 
 * Bit25: PR3, LR1
 * 
 * Bit26: PR3, LR2
 * 
 * Bit27: PR3, LR3
 * 
 * Bits 28-32: Reserved
 * 
 * Note1: PR=Physical Rank
 * 
 * Note2: LR=Logical Rank
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_MSB        31
/* The width in bits of the ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK register field. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_WIDTH      32
/* The mask used to set the ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK register field value. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK register field is UNKNOWN. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_RESET      0x0
/* Extracts the ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK field value from a register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK register field value suitable for setting the register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND16.
 */
struct ALT_MPFE_IOHMC_REG_SIDEBAND16_s
{
    const volatile uint32_t  mmr_3ds_refresh_ack : 32;  /* ALT_MPFE_IOHMC_REG_SIDEBAND16_MMR_3DS_REFRESH_ACK */
};

/* The typedef declaration for register ALT_MPFE_IOHMC_REG_SIDEBAND16. */
typedef struct ALT_MPFE_IOHMC_REG_SIDEBAND16_s  ALT_MPFE_IOHMC_REG_SIDEBAND16_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_IOHMC_REG_SIDEBAND16 register. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_RESET       0x00000000
/* The byte offset of the ALT_MPFE_IOHMC_REG_SIDEBAND16 register from the beginning of the component. */
#define ALT_MPFE_IOHMC_REG_SIDEBAND16_OFST        0x13c

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_IOHMC.
 */
struct ALT_MPFE_IOHMC_s
{
    volatile ALT_MPFE_IOHMC_REG_DBGCFG0_t          reg_dbgcfg0;           /* ALT_MPFE_IOHMC_REG_DBGCFG0 */
    volatile ALT_MPFE_IOHMC_REG_DBGCFG1_t          reg_dbgcfg1;           /* ALT_MPFE_IOHMC_REG_DBGCFG1 */
    volatile ALT_MPFE_IOHMC_REG_DBGCFG2_t          reg_dbgcfg2;           /* ALT_MPFE_IOHMC_REG_DBGCFG2 */
    volatile ALT_MPFE_IOHMC_REG_DBGCFG3_t          reg_dbgcfg3;           /* ALT_MPFE_IOHMC_REG_DBGCFG3 */
    volatile ALT_MPFE_IOHMC_REG_DBGCFG4_t          reg_dbgcfg4;           /* ALT_MPFE_IOHMC_REG_DBGCFG4 */
    volatile ALT_MPFE_IOHMC_REG_DBGCFG5_t          reg_dbgcfg5;           /* ALT_MPFE_IOHMC_REG_DBGCFG5 */
    volatile ALT_MPFE_IOHMC_REG_DBGCFG6_t          reg_dbgcfg6;           /* ALT_MPFE_IOHMC_REG_DBGCFG6 */
    volatile ALT_MPFE_IOHMC_REG_RESERVE0_t         reg_reserve0;          /* ALT_MPFE_IOHMC_REG_RESERVE0 */
    volatile ALT_MPFE_IOHMC_REG_RESERVE1_t         reg_reserve1;          /* ALT_MPFE_IOHMC_REG_RESERVE1 */
    volatile ALT_MPFE_IOHMC_REG_RESERVE2_t         reg_reserve2;          /* ALT_MPFE_IOHMC_REG_RESERVE2 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG0_t         reg_ctrlcfg0;          /* ALT_MPFE_IOHMC_REG_CTRLCFG0 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG1_t         reg_ctrlcfg1;          /* ALT_MPFE_IOHMC_REG_CTRLCFG1 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG2_t         reg_ctrlcfg2;          /* ALT_MPFE_IOHMC_REG_CTRLCFG2 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG3_t         reg_ctrlcfg3;          /* ALT_MPFE_IOHMC_REG_CTRLCFG3 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG4_t         reg_ctrlcfg4;          /* ALT_MPFE_IOHMC_REG_CTRLCFG4 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG5_t         reg_ctrlcfg5;          /* ALT_MPFE_IOHMC_REG_CTRLCFG5 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG6_t         reg_ctrlcfg6;          /* ALT_MPFE_IOHMC_REG_CTRLCFG6 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG7_t         reg_ctrlcfg7;          /* ALT_MPFE_IOHMC_REG_CTRLCFG7 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG8_t         reg_ctrlcfg8;          /* ALT_MPFE_IOHMC_REG_CTRLCFG8 */
    volatile ALT_MPFE_IOHMC_REG_CTRLCFG9_t         reg_ctrlcfg9;          /* ALT_MPFE_IOHMC_REG_CTRLCFG9 */
    volatile ALT_MPFE_IOHMC_REG_DRAMTIMING0_t      reg_dramtiming0;       /* ALT_MPFE_IOHMC_REG_DRAMTIMING0 */
    volatile ALT_MPFE_IOHMC_REG_DRAMODT0_t         reg_dramodt0;          /* ALT_MPFE_IOHMC_REG_DRAMODT0 */
    volatile ALT_MPFE_IOHMC_REG_DRAMODT1_t         reg_dramodt1;          /* ALT_MPFE_IOHMC_REG_DRAMODT1 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG0_t           reg_sbcfg0;            /* ALT_MPFE_IOHMC_REG_SBCFG0 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG1_t           reg_sbcfg1;            /* ALT_MPFE_IOHMC_REG_SBCFG1 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG2_t           reg_sbcfg2;            /* ALT_MPFE_IOHMC_REG_SBCFG2 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG3_t           reg_sbcfg3;            /* ALT_MPFE_IOHMC_REG_SBCFG3 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG4_t           reg_sbcfg4;            /* ALT_MPFE_IOHMC_REG_SBCFG4 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG5_t           reg_sbcfg5;            /* ALT_MPFE_IOHMC_REG_SBCFG5 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG6_t           reg_sbcfg6;            /* ALT_MPFE_IOHMC_REG_SBCFG6 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG7_t           reg_sbcfg7;            /* ALT_MPFE_IOHMC_REG_SBCFG7 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING0_t       reg_caltiming0;        /* ALT_MPFE_IOHMC_REG_CALTIMING0 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING1_t       reg_caltiming1;        /* ALT_MPFE_IOHMC_REG_CALTIMING1 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING2_t       reg_caltiming2;        /* ALT_MPFE_IOHMC_REG_CALTIMING2 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING3_t       reg_caltiming3;        /* ALT_MPFE_IOHMC_REG_CALTIMING3 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING4_t       reg_caltiming4;        /* ALT_MPFE_IOHMC_REG_CALTIMING4 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING5_t       reg_caltiming5;        /* ALT_MPFE_IOHMC_REG_CALTIMING5 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING6_t       reg_caltiming6;        /* ALT_MPFE_IOHMC_REG_CALTIMING6 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING7_t       reg_caltiming7;        /* ALT_MPFE_IOHMC_REG_CALTIMING7 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING8_t       reg_caltiming8;        /* ALT_MPFE_IOHMC_REG_CALTIMING8 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING9_t       reg_caltiming9;        /* ALT_MPFE_IOHMC_REG_CALTIMING9 */
    volatile ALT_MPFE_IOHMC_REG_CALTIMING10_t      reg_caltiming10;       /* ALT_MPFE_IOHMC_REG_CALTIMING10 */
    volatile ALT_MPFE_IOHMC_REG_DRAMADDRW_t        reg_dramaddrw;         /* ALT_MPFE_IOHMC_REG_DRAMADDRW */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND0_t        reg_sideband0;         /* ALT_MPFE_IOHMC_REG_SIDEBAND0 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND1_t        reg_sideband1;         /* ALT_MPFE_IOHMC_REG_SIDEBAND1 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND2_t        reg_sideband2;         /* ALT_MPFE_IOHMC_REG_SIDEBAND2 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND3_t        reg_sideband3;         /* ALT_MPFE_IOHMC_REG_SIDEBAND3 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND4_t        reg_sideband4;         /* ALT_MPFE_IOHMC_REG_SIDEBAND4 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND5_t        reg_sideband5;         /* ALT_MPFE_IOHMC_REG_SIDEBAND5 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND6_t        reg_sideband6;         /* ALT_MPFE_IOHMC_REG_SIDEBAND6 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND7_t        reg_sideband7;         /* ALT_MPFE_IOHMC_REG_SIDEBAND7 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND8_t        reg_sideband8;         /* ALT_MPFE_IOHMC_REG_SIDEBAND8 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND9_t        reg_sideband9;         /* ALT_MPFE_IOHMC_REG_SIDEBAND9 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND10_t       reg_sideband10;        /* ALT_MPFE_IOHMC_REG_SIDEBAND10 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND11_t       reg_sideband11;        /* ALT_MPFE_IOHMC_REG_SIDEBAND11 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND12_t       reg_sideband12;        /* ALT_MPFE_IOHMC_REG_SIDEBAND12 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND13_t       reg_sideband13;        /* ALT_MPFE_IOHMC_REG_SIDEBAND13 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND14_t       reg_sideband14;        /* ALT_MPFE_IOHMC_REG_SIDEBAND14 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND15_t       reg_sideband15;        /* ALT_MPFE_IOHMC_REG_SIDEBAND15 */
    volatile ALT_MPFE_IOHMC_REG_DRAMSTS_t          reg_dramsts;           /* ALT_MPFE_IOHMC_REG_DRAMSTS */
    volatile ALT_MPFE_IOHMC_REG_DBGDONE_t          reg_dbgdone;           /* ALT_MPFE_IOHMC_REG_DBGDONE */
    volatile ALT_MPFE_IOHMC_REG_DBGSIGNALS_t       reg_dbgsignals;        /* ALT_MPFE_IOHMC_REG_DBGSIGNALS */
    volatile ALT_MPFE_IOHMC_REG_DBGRESET_t         reg_dbgreset;          /* ALT_MPFE_IOHMC_REG_DBGRESET */
    volatile ALT_MPFE_IOHMC_REG_DBGMATCH_t         reg_dbgmatch;          /* ALT_MPFE_IOHMC_REG_DBGMATCH */
    volatile ALT_MPFE_IOHMC_REG_COUNTER0MASK_t     reg_counter0mask;      /* ALT_MPFE_IOHMC_REG_COUNTER0MASK */
    volatile ALT_MPFE_IOHMC_REG_COUNTER1MASK_t     reg_counter1mask;      /* ALT_MPFE_IOHMC_REG_COUNTER1MASK */
    volatile ALT_MPFE_IOHMC_REG_COUNTER0MATCH_t    reg_counter0match;     /* ALT_MPFE_IOHMC_REG_COUNTER0MATCH */
    volatile ALT_MPFE_IOHMC_REG_COUNTER1MATCH_t    reg_counter1match;     /* ALT_MPFE_IOHMC_REG_COUNTER1MATCH */
    volatile ALT_MPFE_IOHMC_REG_NIOSRESERVE0_t     reg_niosreserve0;      /* ALT_MPFE_IOHMC_REG_NIOSRESERVE0 */
    volatile ALT_MPFE_IOHMC_REG_NIOSRESERVE1_t     reg_niosreserve1;      /* ALT_MPFE_IOHMC_REG_NIOSRESERVE1 */
    volatile ALT_MPFE_IOHMC_REG_NIOSRESERVE2_t     reg_niosreserve2;      /* ALT_MPFE_IOHMC_REG_NIOSRESERVE2 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG8_t           reg_sbcfg8;            /* ALT_MPFE_IOHMC_REG_SBCFG8 */
    volatile ALT_MPFE_IOHMC_REG_SBCFG9_t           reg_sbcfg9;            /* ALT_MPFE_IOHMC_REG_SBCFG9 */
    volatile ALT_MPFE_IOHMC_REG_3DS0_t             reg_3ds0;              /* ALT_MPFE_IOHMC_REG_3DS0 */
    volatile ALT_MPFE_IOHMC_REG_3DS1_t             reg_3ds1;              /* ALT_MPFE_IOHMC_REG_3DS1 */
    volatile ALT_MPFE_IOHMC_REG_3DS2_t             reg_3ds2;              /* ALT_MPFE_IOHMC_REG_3DS2 */
    volatile ALT_MPFE_IOHMC_REG_PIPELINE0_t        reg_pipeline0;         /* ALT_MPFE_IOHMC_REG_PIPELINE0 */
    volatile uint32_t                              _pad_0x134_0x137;      /* *UNDEFINED* */
    volatile ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0_t  reg_memclockgating0;   /* ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0 */
    volatile ALT_MPFE_IOHMC_REG_SIDEBAND16_t       reg_sideband16;        /* ALT_MPFE_IOHMC_REG_SIDEBAND16 */
    volatile uint32_t                              _pad_0x140_0x190[20];  /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_IOHMC. */
typedef struct ALT_MPFE_IOHMC_s  ALT_MPFE_IOHMC_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_IOHMC. */
struct ALT_MPFE_IOHMC_raw_s
{
    volatile uint32_t  reg_dbgcfg0;           /* ALT_MPFE_IOHMC_REG_DBGCFG0 */
    volatile uint32_t  reg_dbgcfg1;           /* ALT_MPFE_IOHMC_REG_DBGCFG1 */
    volatile uint32_t  reg_dbgcfg2;           /* ALT_MPFE_IOHMC_REG_DBGCFG2 */
    volatile uint32_t  reg_dbgcfg3;           /* ALT_MPFE_IOHMC_REG_DBGCFG3 */
    volatile uint32_t  reg_dbgcfg4;           /* ALT_MPFE_IOHMC_REG_DBGCFG4 */
    volatile uint32_t  reg_dbgcfg5;           /* ALT_MPFE_IOHMC_REG_DBGCFG5 */
    volatile uint32_t  reg_dbgcfg6;           /* ALT_MPFE_IOHMC_REG_DBGCFG6 */
    volatile uint32_t  reg_reserve0;          /* ALT_MPFE_IOHMC_REG_RESERVE0 */
    volatile uint32_t  reg_reserve1;          /* ALT_MPFE_IOHMC_REG_RESERVE1 */
    volatile uint32_t  reg_reserve2;          /* ALT_MPFE_IOHMC_REG_RESERVE2 */
    volatile uint32_t  reg_ctrlcfg0;          /* ALT_MPFE_IOHMC_REG_CTRLCFG0 */
    volatile uint32_t  reg_ctrlcfg1;          /* ALT_MPFE_IOHMC_REG_CTRLCFG1 */
    volatile uint32_t  reg_ctrlcfg2;          /* ALT_MPFE_IOHMC_REG_CTRLCFG2 */
    volatile uint32_t  reg_ctrlcfg3;          /* ALT_MPFE_IOHMC_REG_CTRLCFG3 */
    volatile uint32_t  reg_ctrlcfg4;          /* ALT_MPFE_IOHMC_REG_CTRLCFG4 */
    volatile uint32_t  reg_ctrlcfg5;          /* ALT_MPFE_IOHMC_REG_CTRLCFG5 */
    volatile uint32_t  reg_ctrlcfg6;          /* ALT_MPFE_IOHMC_REG_CTRLCFG6 */
    volatile uint32_t  reg_ctrlcfg7;          /* ALT_MPFE_IOHMC_REG_CTRLCFG7 */
    volatile uint32_t  reg_ctrlcfg8;          /* ALT_MPFE_IOHMC_REG_CTRLCFG8 */
    volatile uint32_t  reg_ctrlcfg9;          /* ALT_MPFE_IOHMC_REG_CTRLCFG9 */
    volatile uint32_t  reg_dramtiming0;       /* ALT_MPFE_IOHMC_REG_DRAMTIMING0 */
    volatile uint32_t  reg_dramodt0;          /* ALT_MPFE_IOHMC_REG_DRAMODT0 */
    volatile uint32_t  reg_dramodt1;          /* ALT_MPFE_IOHMC_REG_DRAMODT1 */
    volatile uint32_t  reg_sbcfg0;            /* ALT_MPFE_IOHMC_REG_SBCFG0 */
    volatile uint32_t  reg_sbcfg1;            /* ALT_MPFE_IOHMC_REG_SBCFG1 */
    volatile uint32_t  reg_sbcfg2;            /* ALT_MPFE_IOHMC_REG_SBCFG2 */
    volatile uint32_t  reg_sbcfg3;            /* ALT_MPFE_IOHMC_REG_SBCFG3 */
    volatile uint32_t  reg_sbcfg4;            /* ALT_MPFE_IOHMC_REG_SBCFG4 */
    volatile uint32_t  reg_sbcfg5;            /* ALT_MPFE_IOHMC_REG_SBCFG5 */
    volatile uint32_t  reg_sbcfg6;            /* ALT_MPFE_IOHMC_REG_SBCFG6 */
    volatile uint32_t  reg_sbcfg7;            /* ALT_MPFE_IOHMC_REG_SBCFG7 */
    volatile uint32_t  reg_caltiming0;        /* ALT_MPFE_IOHMC_REG_CALTIMING0 */
    volatile uint32_t  reg_caltiming1;        /* ALT_MPFE_IOHMC_REG_CALTIMING1 */
    volatile uint32_t  reg_caltiming2;        /* ALT_MPFE_IOHMC_REG_CALTIMING2 */
    volatile uint32_t  reg_caltiming3;        /* ALT_MPFE_IOHMC_REG_CALTIMING3 */
    volatile uint32_t  reg_caltiming4;        /* ALT_MPFE_IOHMC_REG_CALTIMING4 */
    volatile uint32_t  reg_caltiming5;        /* ALT_MPFE_IOHMC_REG_CALTIMING5 */
    volatile uint32_t  reg_caltiming6;        /* ALT_MPFE_IOHMC_REG_CALTIMING6 */
    volatile uint32_t  reg_caltiming7;        /* ALT_MPFE_IOHMC_REG_CALTIMING7 */
    volatile uint32_t  reg_caltiming8;        /* ALT_MPFE_IOHMC_REG_CALTIMING8 */
    volatile uint32_t  reg_caltiming9;        /* ALT_MPFE_IOHMC_REG_CALTIMING9 */
    volatile uint32_t  reg_caltiming10;       /* ALT_MPFE_IOHMC_REG_CALTIMING10 */
    volatile uint32_t  reg_dramaddrw;         /* ALT_MPFE_IOHMC_REG_DRAMADDRW */
    volatile uint32_t  reg_sideband0;         /* ALT_MPFE_IOHMC_REG_SIDEBAND0 */
    volatile uint32_t  reg_sideband1;         /* ALT_MPFE_IOHMC_REG_SIDEBAND1 */
    volatile uint32_t  reg_sideband2;         /* ALT_MPFE_IOHMC_REG_SIDEBAND2 */
    volatile uint32_t  reg_sideband3;         /* ALT_MPFE_IOHMC_REG_SIDEBAND3 */
    volatile uint32_t  reg_sideband4;         /* ALT_MPFE_IOHMC_REG_SIDEBAND4 */
    volatile uint32_t  reg_sideband5;         /* ALT_MPFE_IOHMC_REG_SIDEBAND5 */
    volatile uint32_t  reg_sideband6;         /* ALT_MPFE_IOHMC_REG_SIDEBAND6 */
    volatile uint32_t  reg_sideband7;         /* ALT_MPFE_IOHMC_REG_SIDEBAND7 */
    volatile uint32_t  reg_sideband8;         /* ALT_MPFE_IOHMC_REG_SIDEBAND8 */
    volatile uint32_t  reg_sideband9;         /* ALT_MPFE_IOHMC_REG_SIDEBAND9 */
    volatile uint32_t  reg_sideband10;        /* ALT_MPFE_IOHMC_REG_SIDEBAND10 */
    volatile uint32_t  reg_sideband11;        /* ALT_MPFE_IOHMC_REG_SIDEBAND11 */
    volatile uint32_t  reg_sideband12;        /* ALT_MPFE_IOHMC_REG_SIDEBAND12 */
    volatile uint32_t  reg_sideband13;        /* ALT_MPFE_IOHMC_REG_SIDEBAND13 */
    volatile uint32_t  reg_sideband14;        /* ALT_MPFE_IOHMC_REG_SIDEBAND14 */
    volatile uint32_t  reg_sideband15;        /* ALT_MPFE_IOHMC_REG_SIDEBAND15 */
    volatile uint32_t  reg_dramsts;           /* ALT_MPFE_IOHMC_REG_DRAMSTS */
    volatile uint32_t  reg_dbgdone;           /* ALT_MPFE_IOHMC_REG_DBGDONE */
    volatile uint32_t  reg_dbgsignals;        /* ALT_MPFE_IOHMC_REG_DBGSIGNALS */
    volatile uint32_t  reg_dbgreset;          /* ALT_MPFE_IOHMC_REG_DBGRESET */
    volatile uint32_t  reg_dbgmatch;          /* ALT_MPFE_IOHMC_REG_DBGMATCH */
    volatile uint32_t  reg_counter0mask;      /* ALT_MPFE_IOHMC_REG_COUNTER0MASK */
    volatile uint32_t  reg_counter1mask;      /* ALT_MPFE_IOHMC_REG_COUNTER1MASK */
    volatile uint32_t  reg_counter0match;     /* ALT_MPFE_IOHMC_REG_COUNTER0MATCH */
    volatile uint32_t  reg_counter1match;     /* ALT_MPFE_IOHMC_REG_COUNTER1MATCH */
    volatile uint32_t  reg_niosreserve0;      /* ALT_MPFE_IOHMC_REG_NIOSRESERVE0 */
    volatile uint32_t  reg_niosreserve1;      /* ALT_MPFE_IOHMC_REG_NIOSRESERVE1 */
    volatile uint32_t  reg_niosreserve2;      /* ALT_MPFE_IOHMC_REG_NIOSRESERVE2 */
    volatile uint32_t  reg_sbcfg8;            /* ALT_MPFE_IOHMC_REG_SBCFG8 */
    volatile uint32_t  reg_sbcfg9;            /* ALT_MPFE_IOHMC_REG_SBCFG9 */
    volatile uint32_t  reg_3ds0;              /* ALT_MPFE_IOHMC_REG_3DS0 */
    volatile uint32_t  reg_3ds1;              /* ALT_MPFE_IOHMC_REG_3DS1 */
    volatile uint32_t  reg_3ds2;              /* ALT_MPFE_IOHMC_REG_3DS2 */
    volatile uint32_t  reg_pipeline0;         /* ALT_MPFE_IOHMC_REG_PIPELINE0 */
    volatile uint32_t  _pad_0x134_0x137;      /* *UNDEFINED* */
    volatile uint32_t  reg_memclockgating0;   /* ALT_MPFE_IOHMC_REG_MEMCLOCKGATING0 */
    volatile uint32_t  reg_sideband16;        /* ALT_MPFE_IOHMC_REG_SIDEBAND16 */
    volatile uint32_t  _pad_0x140_0x190[20];  /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_IOHMC. */
typedef struct ALT_MPFE_IOHMC_raw_s  ALT_MPFE_IOHMC_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_HMC_ADP
 * Block
 * 
 */
/*
 * Register : IP_REV_ID - IP_REV_ID
 * 
 * IDO Register
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                     
 * :--------|:-------|:------|:---------------------------------
 *  [15:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV
 *  [31:16] | ???    | 0x0   | *UNDEFINED*                     
 * 
 */
/*
 * Field : SIREV
 * 
 * IP Rev #These bits indicate the silicon revision number
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV register field. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV register field. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV register field. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_WIDTH      16
/* The mask used to set the ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV register field value. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV register field value. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_CLR_MSK    0xffff0000
/* The reset value of the ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV register field. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV field value from a register. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_IP_REV_ID.
 */
struct ALT_MPFE_HMC_ADP_IP_REV_ID_s
{
    volatile uint32_t  SIREV : 16;  /* ALT_MPFE_HMC_ADP_IP_REV_ID_SIREV */
    uint32_t                 : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_IP_REV_ID. */
typedef struct ALT_MPFE_HMC_ADP_IP_REV_ID_s  ALT_MPFE_HMC_ADP_IP_REV_ID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_IP_REV_ID register. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_IP_REV_ID register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_IP_REV_ID_OFST        0x0

/*
 * Register : DDRIOCTRL
 * 
 * DDR IO Control Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [1:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE
 *  [31:2] | ???    | 0x0   | *UNDEFINED*                       
 * 
 */
/*
 * Field : IO_SIZE
 * 
 * External Configuration of DDR IO size.
 * 
 * These bits are configured at start to indicate the external DDR IO size.
 * 
 * 2b00 = DDR IO x16. default value after reset
 * 
 * 2b01 = DDR IO x32
 * 
 * 2b10 = DDR IO x64
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_E_X16 | 0x0   |            
 *  ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_E_X32 | 0x1   |            
 *  ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_E_X64 | 0x2   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE
 * 
 */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_E_X16    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE
 * 
 */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_E_X32    0x1
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE
 * 
 */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_E_X64    0x2

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE register field. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE register field. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE register field. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_WIDTH      2
/* The mask used to set the ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE register field value. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE register field value. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE register field. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE field value from a register. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_DDRIOCTRL.
 */
struct ALT_MPFE_HMC_ADP_DDRIOCTRL_s
{
    volatile uint32_t  IO_SIZE :  2;  /* ALT_MPFE_HMC_ADP_DDRIOCTRL_IO_SIZE */
    uint32_t                   : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_DDRIOCTRL. */
typedef struct ALT_MPFE_HMC_ADP_DDRIOCTRL_s  ALT_MPFE_HMC_ADP_DDRIOCTRL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_DDRIOCTRL register. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_DDRIOCTRL register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_DDRIOCTRL_OFST        0x8

/*
 * Register : DDRCALSTAT
 * 
 * DDR Calibration Status Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                     
 * :-------|:-------|:------|:---------------------------------
 *  [0]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL 
 *  [1]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL
 *  [31:2] | ???    | 0x0   | *UNDEFINED*                     
 * 
 */
/*
 * Field : CAL
 * 
 * DDR calibration status.
 * 
 * Indicates the DDR calibration was successful.
 * 
 * 1'b0: When set to 0, calibration is either on going, hasn't started or failed.
 * 
 * 1'b1: When set to 1, calibration has succeeded.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL register field value. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL register field value. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL field value from a register. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : FAIL
 * 
 * DDR calibration failure status.
 * 
 * Indicates whether DDR calibration has failed.
 * 
 * 1'b0: Calibration is in progress or did not fail.
 * 
 * 1'b1: Calibration failed.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL register field value. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL register field value. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL register field. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL field value from a register. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL_SET(value) (((value) << 1) & 0x00000002)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_DDRCALSTAT.
 */
struct ALT_MPFE_HMC_ADP_DDRCALSTAT_s
{
    volatile uint32_t  CAL  :  1;  /* ALT_MPFE_HMC_ADP_DDRCALSTAT_CAL */
    volatile uint32_t  FAIL :  1;  /* ALT_MPFE_HMC_ADP_DDRCALSTAT_FAIL */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_DDRCALSTAT. */
typedef struct ALT_MPFE_HMC_ADP_DDRCALSTAT_s  ALT_MPFE_HMC_ADP_DDRCALSTAT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_DDRCALSTAT register. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_DDRCALSTAT register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_DDRCALSTAT_OFST        0xc

/*
 * Register : MPR_0BEAT1
 * 
 * MPR register [31:0] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                     
 * :-------|:-------|:------|:---------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0
 * 
 */
/*
 * Field : MPR0
 * 
 * MPR reg[31:0] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_0BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_0BEAT1_s
{
    volatile uint32_t  MPR0 : 32;  /* ALT_MPFE_HMC_ADP_MPR_0BEAT1_MPR0 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_0BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_0BEAT1_s  ALT_MPFE_HMC_ADP_MPR_0BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_0BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_0BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT1_OFST        0x10

/*
 * Register : MPR_1BEAT1
 * 
 * MPR register [63:32] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32
 * 
 */
/*
 * Field : MPR32
 * 
 * MPR reg[63:32] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_1BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_1BEAT1_s
{
    volatile uint32_t  MPR32 : 32;  /* ALT_MPFE_HMC_ADP_MPR_1BEAT1_MPR32 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_1BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_1BEAT1_s  ALT_MPFE_HMC_ADP_MPR_1BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_1BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_1BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT1_OFST        0x14

/*
 * Register : MPR_2BEAT1
 * 
 * MPR register [95:64] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64
 * 
 */
/*
 * Field : MPR64
 * 
 * MPR reg[95:64] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_2BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_2BEAT1_s
{
    volatile uint32_t  MPR64 : 32;  /* ALT_MPFE_HMC_ADP_MPR_2BEAT1_MPR64 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_2BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_2BEAT1_s  ALT_MPFE_HMC_ADP_MPR_2BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_2BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_2BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT1_OFST        0x18

/*
 * Register : MPR_3BEAT1
 * 
 * MPR register [127:96] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96
 * 
 */
/*
 * Field : MPR96
 * 
 * MPR reg[127:96] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_3BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_3BEAT1_s
{
    volatile uint32_t  MPR96 : 32;  /* ALT_MPFE_HMC_ADP_MPR_3BEAT1_MPR96 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_3BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_3BEAT1_s  ALT_MPFE_HMC_ADP_MPR_3BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_3BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_3BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT1_OFST        0x1c

/*
 * Register : MPR_4BEAT1
 * 
 * MPR register [159:128] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128
 * 
 */
/*
 * Field : MPR128
 * 
 * MPR reg[159:128] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_4BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_4BEAT1_s
{
    volatile uint32_t  MPR128 : 32;  /* ALT_MPFE_HMC_ADP_MPR_4BEAT1_MPR128 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_4BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_4BEAT1_s  ALT_MPFE_HMC_ADP_MPR_4BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_4BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_4BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT1_OFST        0x20

/*
 * Register : MPR_5BEAT1
 * 
 * MPR register [191:160] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160
 * 
 */
/*
 * Field : MPR160
 * 
 * MPR reg[191:160] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_5BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_5BEAT1_s
{
    volatile uint32_t  MPR160 : 32;  /* ALT_MPFE_HMC_ADP_MPR_5BEAT1_MPR160 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_5BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_5BEAT1_s  ALT_MPFE_HMC_ADP_MPR_5BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_5BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_5BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT1_OFST        0x24

/*
 * Register : MPR_6BEAT1
 * 
 * MPR register [223:192] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192
 * 
 */
/*
 * Field : MPR192
 * 
 * MPR reg[223:192] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_6BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_6BEAT1_s
{
    volatile uint32_t  MPR192 : 32;  /* ALT_MPFE_HMC_ADP_MPR_6BEAT1_MPR192 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_6BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_6BEAT1_s  ALT_MPFE_HMC_ADP_MPR_6BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_6BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_6BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT1_OFST        0x28

/*
 * Register : MPR_7BEAT1
 * 
 * MPR register [255:224] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224
 * 
 */
/*
 * Field : MPR224
 * 
 * MPR reg[255:224] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_7BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_7BEAT1_s
{
    volatile uint32_t  MPR224 : 32;  /* ALT_MPFE_HMC_ADP_MPR_7BEAT1_MPR224 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_7BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_7BEAT1_s  ALT_MPFE_HMC_ADP_MPR_7BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_7BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_7BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT1_OFST        0x2c

/*
 * Register : MPR_8BEAT1
 * 
 * MPR register [287:256] for first beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256
 * 
 */
/*
 * Field : MPR256
 * 
 * MPR reg[287:256] for first beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_8BEAT1.
 */
struct ALT_MPFE_HMC_ADP_MPR_8BEAT1_s
{
    volatile uint32_t  MPR256 : 32;  /* ALT_MPFE_HMC_ADP_MPR_8BEAT1_MPR256 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_8BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_MPR_8BEAT1_s  ALT_MPFE_HMC_ADP_MPR_8BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_8BEAT1 register. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_8BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT1_OFST        0x30

/*
 * Register : MPR_0BEAT2
 * 
 * MPR register [31:0] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                     
 * :-------|:-------|:------|:---------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0
 * 
 */
/*
 * Field : MPR0
 * 
 * MPR reg[31:0] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 register field. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_0BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_0BEAT2_s
{
    volatile uint32_t  MPR0 : 32;  /* ALT_MPFE_HMC_ADP_MPR_0BEAT2_MPR0 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_0BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_0BEAT2_s  ALT_MPFE_HMC_ADP_MPR_0BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_0BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_0BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_0BEAT2_OFST        0x34

/*
 * Register : MPR_1BEAT2
 * 
 * MPR register [63:32] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32
 * 
 */
/*
 * Field : MPR32
 * 
 * MPR reg[63:32] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 register field. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_1BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_1BEAT2_s
{
    volatile uint32_t  MPR32 : 32;  /* ALT_MPFE_HMC_ADP_MPR_1BEAT2_MPR32 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_1BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_1BEAT2_s  ALT_MPFE_HMC_ADP_MPR_1BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_1BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_1BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_1BEAT2_OFST        0x38

/*
 * Register : MPR_2BEAT2
 * 
 * MPR register [95:64] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64
 * 
 */
/*
 * Field : MPR64
 * 
 * MPR reg[95:64] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 register field. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_2BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_2BEAT2_s
{
    volatile uint32_t  MPR64 : 32;  /* ALT_MPFE_HMC_ADP_MPR_2BEAT2_MPR64 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_2BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_2BEAT2_s  ALT_MPFE_HMC_ADP_MPR_2BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_2BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_2BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_2BEAT2_OFST        0x3c

/*
 * Register : MPR_3BEAT2
 * 
 * MPR register [127:96] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96
 * 
 */
/*
 * Field : MPR96
 * 
 * MPR reg[127:96] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 register field. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_3BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_3BEAT2_s
{
    volatile uint32_t  MPR96 : 32;  /* ALT_MPFE_HMC_ADP_MPR_3BEAT2_MPR96 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_3BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_3BEAT2_s  ALT_MPFE_HMC_ADP_MPR_3BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_3BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_3BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_3BEAT2_OFST        0x40

/*
 * Register : MPR_4BEAT2
 * 
 * MPR register [159:128] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128
 * 
 */
/*
 * Field : MPR128
 * 
 * MPR reg[159:128] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 register field. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_4BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_4BEAT2_s
{
    volatile uint32_t  MPR128 : 32;  /* ALT_MPFE_HMC_ADP_MPR_4BEAT2_MPR128 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_4BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_4BEAT2_s  ALT_MPFE_HMC_ADP_MPR_4BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_4BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_4BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_4BEAT2_OFST        0x44

/*
 * Register : MPR_5BEAT2
 * 
 * MPR register [191:160] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160
 * 
 */
/*
 * Field : MPR160
 * 
 * MPR reg[191:160] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 register field. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_5BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_5BEAT2_s
{
    volatile uint32_t  MPR160 : 32;  /* ALT_MPFE_HMC_ADP_MPR_5BEAT2_MPR160 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_5BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_5BEAT2_s  ALT_MPFE_HMC_ADP_MPR_5BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_5BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_5BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_5BEAT2_OFST        0x48

/*
 * Register : MPR_6BEAT2
 * 
 * MPR register [223:192] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192
 * 
 */
/*
 * Field : MPR192
 * 
 * MPR reg[223:192] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 register field. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_6BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_6BEAT2_s
{
    volatile uint32_t  MPR192 : 32;  /* ALT_MPFE_HMC_ADP_MPR_6BEAT2_MPR192 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_6BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_6BEAT2_s  ALT_MPFE_HMC_ADP_MPR_6BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_6BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_6BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_6BEAT2_OFST        0x4c

/*
 * Register : MPR_7BEAT2
 * 
 * MPR register [255:224] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224
 * 
 */
/*
 * Field : MPR224
 * 
 * MPR reg[255:224] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 register field. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_7BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_7BEAT2_s
{
    volatile uint32_t  MPR224 : 32;  /* ALT_MPFE_HMC_ADP_MPR_7BEAT2_MPR224 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_7BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_7BEAT2_s  ALT_MPFE_HMC_ADP_MPR_7BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_7BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_7BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_7BEAT2_OFST        0x50

/*
 * Register : MPR_8BEAT2
 * 
 * MPR register [287:256] for second beat
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256
 * 
 */
/*
 * Field : MPR256
 * 
 * MPR reg[287:256] for second beat
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 register field value. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 register field. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 field value from a register. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MPR_8BEAT2.
 */
struct ALT_MPFE_HMC_ADP_MPR_8BEAT2_s
{
    volatile uint32_t  MPR256 : 32;  /* ALT_MPFE_HMC_ADP_MPR_8BEAT2_MPR256 */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MPR_8BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_MPR_8BEAT2_s  ALT_MPFE_HMC_ADP_MPR_8BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MPR_8BEAT2 register. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MPR_8BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MPR_8BEAT2_OFST        0x54

/*
 * Register : AUTO_PRECHARGE
 * 
 * auto-precharge bit
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                         
 * :-------|:-------|:------|:-------------------------------------
 *  [0]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL
 *  [31:1] | ???    | 0x0   | *UNDEFINED*                         
 * 
 */
/*
 * Field : CTRL
 * 
 * Drive bit 43 of core2ctl_cmd_data0 bus to HMC.
 * 
 * 1'b0: Default value after reset. Auto-precharge request to HMC is disabled
 * 
 * 1'b1: Every read/write command sent to HMC has the auto-precharge bit enabled
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL
 * 
 */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL
 * 
 */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL register field. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL register field. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL register field. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL register field value. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL register field value. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL register field. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL field value from a register. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_AUTO_PRECHARGE.
 */
struct ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_s
{
    volatile uint32_t  CTRL :  1;  /* ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_CTRL */
    uint32_t                : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_AUTO_PRECHARGE. */
typedef struct ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_s  ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE register. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_AUTO_PRECHARGE register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_OFST        0x60

/*
 * Register : DRAMADDRWIDTH
 * 
 * DRAM address bit width
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                             
 * :--------|:-------|:------|:---------------------------------------------------------
 *  [4:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH       
 *  [9:5]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH       
 *  [13:10] | RW     | 0x0   | ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH      
 *  [15:14] | RW     | 0x0   | ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH
 *  [18:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH        
 *  [31:19] | ???    | 0x0   | *UNDEFINED*                                             
 * 
 */
/*
 * Field : CFG_COL_ADDR_WIDTH
 * 
 * DRAM Column Address Bits
 * 
 * The number of column address bits for the memory devices in your memory
 * interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH_SET(value) (((value) << 0) & 0x0000001f)

/*
 * Field : CFG_ROW_ADDR_WIDTH
 * 
 * DRAM Row Address Bits
 * 
 * The number of row address bits for the memory devices in your memory interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_MSB        9
/* The width in bits of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_SET_MSK    0x000003e0
/* The mask used to clear the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_CLR_MSK    0xfffffc1f
/* The reset value of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_GET(value) (((value) & 0x000003e0) >> 5)
/* Produces a ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH_SET(value) (((value) << 5) & 0x000003e0)

/*
 * Field : CFG_BANK_ADDR_WIDTH
 * 
 * DRAM Bank Address Bits
 * 
 * The number of bank address bits for the memory devices in your memory interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_MSB        13
/* The width in bits of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_WIDTH      4
/* The mask used to set the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_SET_MSK    0x00003c00
/* The mask used to clear the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_CLR_MSK    0xffffc3ff
/* The reset value of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_GET(value) (((value) & 0x00003c00) >> 10)
/* Produces a ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH_SET(value) (((value) << 10) & 0x00003c00)

/*
 * Field : CFG_BANK_GROUP_ADDR_WIDTH
 * 
 * DRAM Bank Group Address Bits
 * 
 * The number of bank group address bits for t     he memory devices in your memory
 * interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_WIDTH      2
/* The mask used to set the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_SET_MSK    0x0000c000
/* The mask used to clear the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_CLR_MSK    0xffff3fff
/* The reset value of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_GET(value) (((value) & 0x0000c000) >> 14)
/* Produces a ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH_SET(value) (((value) << 14) & 0x0000c000)

/*
 * Field : CFG_CS_ADDR_WIDTH
 * 
 * Chip Address Bits
 * 
 * The number of chip select address bits for the memory devices in your memory
 * interface.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_MSB        18
/* The width in bits of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_WIDTH      3
/* The mask used to set the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_SET_MSK    0x00070000
/* The mask used to clear the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH register field value. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_CLR_MSK    0xfff8ffff
/* The reset value of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH register field. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH field value from a register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_GET(value) (((value) & 0x00070000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH_SET(value) (((value) << 16) & 0x00070000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_DRAMADDRWIDTH.
 */
struct ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_s
{
    volatile uint32_t  CFG_COL_ADDR_WIDTH        :  5;  /* ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_COL_ADDR_WIDTH */
    volatile uint32_t  CFG_ROW_ADDR_WIDTH        :  5;  /* ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_ROW_ADDR_WIDTH */
    volatile uint32_t  CFG_BANK_ADDR_WIDTH       :  4;  /* ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_ADDR_WIDTH */
    volatile uint32_t  CFG_BANK_GROUP_ADDR_WIDTH :  2;  /* ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_BANK_GROUP_ADDR_WIDTH */
    volatile uint32_t  CFG_CS_ADDR_WIDTH         :  3;  /* ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_CFG_CS_ADDR_WIDTH */
    uint32_t                                     : 13;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_DRAMADDRWIDTH. */
typedef struct ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_s  ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH register. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_DRAMADDRWIDTH register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_OFST        0xe0

/*
 * Register : ECCCTRL1
 * 
 * ECC control 1.
 * 
 * This bit is used to set the initialize the memory and ecc to a known value
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                             
 * :--------|:-------|:------|:-----------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN        
 *  [7:1]   | ???    | 0x0   | *UNDEFINED*                             
 *  [8]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST       
 *  [15:9]  | ???    | 0x0   | *UNDEFINED*                             
 *  [16]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST
 *  [31:17] | ???    | 0x0   | *UNDEFINED*                             
 * 
 */
/*
 * Field : ECC_EN
 * 
 * Enable for the ECC detection and correction logic.
 * 
 * 1'b0:ECC block is disabled. Default value after reset.
 * 
 * 1'b1: ECC block is enabled. Every RAM access will verify the data and generate
 * any necessary error requests.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN field value from a register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : CNT_RST
 * 
 * Reset of internal counter.
 * 
 * 1'b0: No effect on internal counter. Dafault value after reset
 * 
 * 1'b1: Reset the internal counter to zero
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                      | Value | Description
 * :------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_E_STAY  | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_E_RESET | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_E_STAY    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_E_RESET   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_MSB        8
/* The width in bits of the ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST field value from a register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : AUTOWB_CNT_RST
 * 
 * Reset the autoWB internal counter to zero.
 * 
 * 1'b0 : No effect on autoWB internal counter. Default value after reset
 * 
 * 1'b1 :  Reset the autoWB internal counter to zero
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_E_STAY  | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_E_RESET | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_E_STAY     0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_E_RESET    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_MSB        16
/* The width in bits of the ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST field value from a register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST_SET(value) (((value) << 16) & 0x00010000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECCCTRL1.
 */
struct ALT_MPFE_HMC_ADP_ECCCTRL1_s
{
    volatile uint32_t  ECC_EN         :  1;  /* ALT_MPFE_HMC_ADP_ECCCTRL1_ECC_EN */
    uint32_t                          :  7;  /* *UNDEFINED* */
    volatile uint32_t  CNT_RST        :  1;  /* ALT_MPFE_HMC_ADP_ECCCTRL1_CNT_RST */
    uint32_t                          :  7;  /* *UNDEFINED* */
    volatile uint32_t  AUTOWB_CNT_RST :  1;  /* ALT_MPFE_HMC_ADP_ECCCTRL1_AUTOWB_CNT_RST */
    uint32_t                          : 15;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECCCTRL1. */
typedef struct ALT_MPFE_HMC_ADP_ECCCTRL1_s  ALT_MPFE_HMC_ADP_ECCCTRL1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL1 register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECCCTRL1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECCCTRL1_OFST        0x100

/*
 * Register : ECCCTRL2
 * 
 * ECC control 2.
 * 
 * This bit is used to set the initialize the memory and ecc to a known value
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                             
 * :--------|:-------|:------|:-----------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN     
 *  [7:1]   | ???    | 0x0   | *UNDEFINED*                             
 *  [8]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN        
 *  [15:9]  | ???    | 0x0   | *UNDEFINED*                             
 *  [16]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN
 *  [31:17] | ???    | 0x0   | *UNDEFINED*                             
 * 
 */
/*
 * Field : AUTOWB_EN
 * 
 * Enable auto write back correction feature.
 * 
 * When serr is detected on outgoing reads, HMC adaptor schedules the corrected
 * data and ECC to the written to the DDR memory. This bit enables auto correction
 * of DDR memory.
 * 
 * 1'b0: disable auto WB drop correction. Default value after reset.
 * 
 * 1'b1: enable auto WB drop correction.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_E_DISABLE   0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_E_ENABLE    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN field value from a register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : RMW_EN
 * 
 * Enable read modify write logic.
 * 
 * When ECC is enabled and sub word accesses require correct ECC to be calculated,
 * this bit should be enabled. RMW_EN bit should be disabled when ECC_EN is
 * disabled.
 * 
 * 1'b0: disable RMW logic. Default value after reset.
 * 
 * 1'b1: enable RMW logic.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_MSB        8
/* The width in bits of the ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN field value from a register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : OVRW_RB_ECC_EN
 * 
 * Overwrite the read-back ecc code during RMW process if DBE is detected.
 * 
 * 1'b0: write the read-back ECC from RMW process if derr is detected. Default
 * value after reset.
 * 
 * 1'b1: write of 1 will overwrite the ECC overwrite feature.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_MSB        16
/* The width in bits of the ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN register field value. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN register field. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN field value from a register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN_SET(value) (((value) << 16) & 0x00010000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECCCTRL2.
 */
struct ALT_MPFE_HMC_ADP_ECCCTRL2_s
{
    volatile uint32_t  AUTOWB_EN      :  1;  /* ALT_MPFE_HMC_ADP_ECCCTRL2_AUTOWB_EN */
    uint32_t                          :  7;  /* *UNDEFINED* */
    volatile uint32_t  RMW_EN         :  1;  /* ALT_MPFE_HMC_ADP_ECCCTRL2_RMW_EN */
    uint32_t                          :  7;  /* *UNDEFINED* */
    volatile uint32_t  OVRW_RB_ECC_EN :  1;  /* ALT_MPFE_HMC_ADP_ECCCTRL2_OVRW_RB_ECC_EN */
    uint32_t                          : 15;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECCCTRL2. */
typedef struct ALT_MPFE_HMC_ADP_ECCCTRL2_s  ALT_MPFE_HMC_ADP_ECCCTRL2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECCCTRL2 register. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECCCTRL2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECCCTRL2_OFST        0x104

/*
 * Register : ERRINTEN
 * 
 * Error Interrupt enable
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [0]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN      
 *  [1]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN      
 *  [2]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN     
 *  [3]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN
 *  [31:4] | ???    | 0x0   | *UNDEFINED*                              
 * 
 */
/*
 * Field : SERRINTEN
 * 
 * This bit is used to enable the single bit error to system manager. It enables
 * the interrupt modes (sbe request,compare match)
 * 
 * 1'b0: SBE interrupt generation logic is disabled.
 * 
 * 1'b1: SBE interrupt generation logic is enabled,
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_E_DISABLE   0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_E_ENABLE    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : DERRINTEN
 * 
 * This bit is used to enable the double bit error interrupt to system
 * 
 * manager.When dbe error occurs, bus error is always generated with the
 * transaction.DERR interrupt (derr_req)will be generated when this bit is enabled.
 * 
 * 1'b0: DBE interrupt generation logic is disabled.
 * 
 * 1'b1: DBE interrupt generation logic is enabled,
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_E_DISABLE   0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_E_ENABLE    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : HMI_INTREN
 * 
 * Enables GP HMI interrupt.
 * 
 * This bit is used to enable the general purpose HMI interrupt error interrupt to
 * system manager. When this bit is enabled along with autoWB_drop_en, it compares
 * the internal counter with autoWB_drop_cntreg value. If the value is greater than
 * or equal to, then the interrupt will be asserted..
 * 
 * 1'b0: hmi interrupt generation logic is disabled.
 * 
 * 1'b1: hmi interrupt generation logic is enabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_MSB        2
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : SEQ2CORE_INTREN
 * 
 * Enables seq2core interrupt.
 * 
 * 1'b0: seq2core interrupt generation logic is disabled.
 * 
 * 1'b1: seq2core interrupt generation logic is enabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_E_DISABLE 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_E_ENABLE  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_MSB        3
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN register field. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ERRINTEN.
 */
struct ALT_MPFE_HMC_ADP_ERRINTEN_s
{
    volatile uint32_t  SERRINTEN       :  1;  /* ALT_MPFE_HMC_ADP_ERRINTEN_SERRINTEN */
    volatile uint32_t  DERRINTEN       :  1;  /* ALT_MPFE_HMC_ADP_ERRINTEN_DERRINTEN */
    volatile uint32_t  HMI_INTREN      :  1;  /* ALT_MPFE_HMC_ADP_ERRINTEN_HMI_INTREN */
    volatile uint32_t  SEQ2CORE_INTREN :  1;  /* ALT_MPFE_HMC_ADP_ERRINTEN_SEQ2CORE_INTREN */
    uint32_t                           : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ERRINTEN. */
typedef struct ALT_MPFE_HMC_ADP_ERRINTEN_s  ALT_MPFE_HMC_ADP_ERRINTEN_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTEN register. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ERRINTEN register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ERRINTEN_OFST        0x110

/*
 * Register : ERRINTENS
 * 
 * Error Interrupt set
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [0]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS      
 *  [1]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS      
 *  [2]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS     
 *  [3]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS
 *  [31:4] | ???    | 0x0   | *UNDEFINED*                              
 * 
 */
/*
 * Field : SERRINTS
 * 
 * This bit is used to set the single-bit error interrupt bit.
 * 
 * Reads reflect SERRINTEN.
 * 
 * 1'b0: writing of zero has no effect
 * 
 * 1'b1: writing one, this bit will set SERRINTEN bit to 1.
 * 
 * This is performing a bitwise writing, not implemented as a FF.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_E_STAY  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_E_SET   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : DERRINTS
 * 
 * This bit is used to set the double-bit error interrupt bit.
 * 
 * Reads reflect DERRINTEN.
 * 
 * 1'b0: writing of zero has no effect
 * 
 * 1'b1: writing one, DERRINTEN bit to 1.
 * 
 * This is performing a bitwise writing, not implemented as a FF.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_E_STAY  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_E_SET   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : HMI_INTRS
 * 
 * This bit is used to set the general purposes HMI interrupt error.
 * 
 * 1'b0: writing of zero has no effect
 * 
 * 1'b1: writing one, HMI_INTREN bit to 1.
 * 
 * This is performing a bitwise writing, not implemented as a FF.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_E_STAY 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_E_SET  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_MSB        2
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : SEQ2CORE_INTRS
 * 
 * This bit is used to set the seq2core interrupt.
 * 
 * 1'b0: writing of zero has no effect
 * 
 * 1'b1: writing one, SEQ2CORE_INTREN bit to 1
 * 
 * This is performing a bitwise writing, not implemented as a FF.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_E_STAY    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_E_SET     0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_MSB        3
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ERRINTENS.
 */
struct ALT_MPFE_HMC_ADP_ERRINTENS_s
{
    volatile uint32_t  SERRINTS       :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENS_SERRINTS */
    volatile uint32_t  DERRINTS       :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENS_DERRINTS */
    volatile uint32_t  HMI_INTRS      :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENS_HMI_INTRS */
    volatile uint32_t  SEQ2CORE_INTRS :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENS_SEQ2CORE_INTRS */
    uint32_t                          : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ERRINTENS. */
typedef struct ALT_MPFE_HMC_ADP_ERRINTENS_s  ALT_MPFE_HMC_ADP_ERRINTENS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENS register. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ERRINTENS register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ERRINTENS_OFST        0x114

/*
 * Register : ERRINTENR
 * 
 * Error Interrupt reset.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [0]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR      
 *  [1]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR      
 *  [2]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR     
 *  [3]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR
 *  [31:4] | ???    | 0x0   | *UNDEFINED*                              
 * 
 */
/*
 * Field : SERRINTR
 * 
 * This bit is used to reset the single-bit error interrupt bit.
 * 
 * Reads reflect SERRINTEN.
 * 
 * 1’b0: Writing of zero has no effect.
 * 
 * 1’b1: By writing one, this bit will reset SERRINTEN bit to 0.
 * 
 * This is performing a bitwise writing of this feature.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_E_STAY  | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_E_RESET | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_E_STAY  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_E_RESET 0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : DERRINTR
 * 
 * This bit is used to reset the double-bit error interrupt bit.
 * 
 * Reads reflect DERRINTEN.
 * 
 * 1’b0: Writing of zero has no effect.
 * 
 * 1’b1: By writing one, this bit will reset DERRINTEN bit to 0.
 * 
 * This is performing a bitwise writing of this feature.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_E_STAY  | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_E_RESET | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_E_STAY  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_E_RESET 0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : HMI_INTRR
 * 
 * This bit is used to reset the general purpose HMI interrupt error interrupt to
 * system manager
 * 
 * 1’b0: Writing of zero has no effect.
 * 
 * 1’b1: By writing one, this bit will reset HMI_INTREN bit to 0.
 * 
 * This is performing a bitwise writing of this feature.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_E_STAY  | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_E_RESET | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_E_STAY     0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_E_RESET    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_MSB        2
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : SEQ2CORE_INTRR
 * 
 * This bit is used to reset the seq2core interrupt bit.
 * 
 * 1’b0: Writing of zero has no effect.
 * 
 * 1’b1: By writing one, this bit will reset SEQ2CORE_INTREN bit to 0.
 * 
 * This is performing a bitwise writing of this feature.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_E_STAY  | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_E_RESET | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_E_STAY    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR
 * 
 */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_E_RESET   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_MSB        3
/* The width in bits of the ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR register field value. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR register field. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR field value from a register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ERRINTENR.
 */
struct ALT_MPFE_HMC_ADP_ERRINTENR_s
{
    volatile uint32_t  SERRINTR       :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENR_SERRINTR */
    volatile uint32_t  DERRINTR       :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENR_DERRINTR */
    volatile uint32_t  HMI_INTRR      :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENR_HMI_INTRR */
    volatile uint32_t  SEQ2CORE_INTRR :  1;  /* ALT_MPFE_HMC_ADP_ERRINTENR_SEQ2CORE_INTRR */
    uint32_t                          : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ERRINTENR. */
typedef struct ALT_MPFE_HMC_ADP_ERRINTENR_s  ALT_MPFE_HMC_ADP_ERRINTENR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ERRINTENR register. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ERRINTENR register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ERRINTENR_OFST        0x118

/*
 * Register : INTMODE
 * 
 * Interrupt mode
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                               
 * :--------|:-------|:------|:-------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTMODE_INTMODE          
 *  [7:1]   | ???    | 0x0   | *UNDEFINED*                               
 *  [8]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN
 *  [15:9]  | ???    | 0x0   | *UNDEFINED*                               
 *  [16]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTMODE_INTONCMP         
 *  [23:17] | ???    | 0x0   | *UNDEFINED*                               
 *  [24]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN        
 *  [31:25] | ???    | 0x0   | *UNDEFINED*                               
 * 
 */
/*
 * Field : INTMODE
 * 
 * Interrupt mode for single-bit error.This is disabled when SERRINTEN is disabled.
 * 
 * 1'b0: interrupt disbaled
 * 
 * 1'b1: generate interrupt on every SERR
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_INTMODE_INTMODE_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_INTMODE_INTMODE_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_INTMODE
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_INTMODE
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTMODE_INTMODE register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTMODE_INTMODE register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_INTMODE_INTMODE register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTMODE_INTMODE register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTMODE_INTMODE register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_INTMODE_INTMODE register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTMODE_INTMODE field value from a register. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_INTMODE_INTMODE register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTMODE_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXT_ADDRPARITY_EN
 * 
 * Enable address parity for DDR4 memories.
 * 
 * This bit is used to enable the interrupt that generate externally when address
 * parity is detected. when enabled, this will be generating derr_req signal
 * 
 * 1'b0: disable address parity on DERR interrupt
 * 
 * 1'b1: enable address parity on DERR interrupt
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_E_DISABLE    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_E_ENABLE     0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_MSB        8
/* The width in bits of the ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN field value from a register. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : INTONCMP
 * 
 * Enable interrupt on compare match.
 * 
 * This bit is used to enable interrupt when the internal counter and SERRCNTA
 * value matches. serr_req signal will be asserted on a match.
 * 
 * 1'b0: SERR interrupt on compare match is disabled
 * 
 * 1'b1: SERR interrupt on compare match is enabled
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_INTONCMP
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_E_DISABLE 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_INTONCMP
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_E_ENABLE  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTMODE_INTONCMP register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTMODE_INTONCMP register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_MSB        16
/* The width in bits of the ALT_MPFE_HMC_ADP_INTMODE_INTONCMP register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTMODE_INTONCMP register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTMODE_INTONCMP register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_HMC_ADP_INTMODE_INTONCMP register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTMODE_INTONCMP field value from a register. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_INTMODE_INTONCMP register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTMODE_INTONCMP_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : AFICAL_EN
 * 
 * Enable interrupt of AFI Cal success.
 * 
 * This bit is used to enable interrupt of AFI Cal success. hmi_intr signal will be
 * asserted on a match.
 * 
 * 1'b0: HMI interrupts on compare match is disabled.
 * 
 * 1'b1: HMI interrupts on compare matched is enabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_E_DISABLE    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN
 * 
 */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_E_ENABLE     0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_MSB        24
/* The width in bits of the ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_SET_MSK    0x01000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN register field value. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_CLR_MSK    0xfeffffff
/* The reset value of the ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN register field. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN field value from a register. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN_SET(value) (((value) << 24) & 0x01000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_INTMODE.
 */
struct ALT_MPFE_HMC_ADP_INTMODE_s
{
    volatile uint32_t  INTMODE           :  1;  /* ALT_MPFE_HMC_ADP_INTMODE_INTMODE */
    uint32_t                             :  7;  /* *UNDEFINED* */
    volatile uint32_t  EXT_ADDRPARITY_EN :  1;  /* ALT_MPFE_HMC_ADP_INTMODE_EXT_ADDRPARITY_EN */
    uint32_t                             :  7;  /* *UNDEFINED* */
    volatile uint32_t  INTONCMP          :  1;  /* ALT_MPFE_HMC_ADP_INTMODE_INTONCMP */
    uint32_t                             :  7;  /* *UNDEFINED* */
    volatile uint32_t  AFICAL_EN         :  1;  /* ALT_MPFE_HMC_ADP_INTMODE_AFICAL_EN */
    uint32_t                             :  7;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_INTMODE. */
typedef struct ALT_MPFE_HMC_ADP_INTMODE_s  ALT_MPFE_HMC_ADP_INTMODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_INTMODE register. */
#define ALT_MPFE_HMC_ADP_INTMODE_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_INTMODE register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_INTMODE_OFST        0x11c

/*
 * Register : INTSTAT
 * 
 * Interrupt status
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                           
 * :--------|:-------|:------|:---------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA     
 *  [1]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA     
 *  [2]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA     
 *  [3]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA
 *  [15:4]  | ???    | 0x0   | *UNDEFINED*                           
 *  [16]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG   
 *  [17]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG   
 *  [18]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG   
 *  [31:19] | ???    | 0x0   | *UNDEFINED*                           
 * 
 */
/*
 * Field : SERRPENA
 * 
 * Single-bit error pending
 * 
 * This bit is used to clear the pending SBE.
 * 
 * 1'b0: No effect.
 * 
 * 1'b1: indicates SBE is pending. Write of one will clear the pending. This will
 * de-assert the serr_req signal.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA field value from a register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : DERRPENA
 * 
 * Double bit error pending
 * 
 * This bit is used to clear the pending DBE.
 * 
 * 1'b0: No effect.
 * 
 * 1'b1: indicates DBE is pending. Write of one will clear the pending DBE. This
 * will de-assert the derr_req signal.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA field value from a register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : HMI_PENA
 * 
 * HMI interrupt pending
 * 
 * This bit is used to clear the pending hmi interrupt bit.
 * 
 * 1'b0: No effect
 * 
 * 1'b1: indicates hmi interrupt is pending. Write of one will clear the pending
 * interrupt. This will de-assert the hmi_intr signal.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_MSB        2
/* The width in bits of the ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA field value from a register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : SEQ2CORE_PENA
 * 
 * SEQ2CORE pending
 * 
 * This bit is used to clear the pending SEQ2CORE.
 * 
 * 1'b0: No effect
 * 
 * 1'b1: indicates seq2core interrupt is pending. Write of one will clear the
 * pending interrupt. This will de-assert the seq2core_intr signal.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_MSB        3
/* The width in bits of the ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA field value from a register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : ADDRMTCFLG
 * 
 * Address mismatch error flag.
 * 
 * This bit is used to flag the last transaction was flagged with address mismatch
 * error.
 * 
 * 1'b0: No effect.
 * 
 * 1'b1: indicates address mismatch error has occured. This will drive the bus to
 * respond the read with bus error. Write of one will clears this register address
 * mismatch error.
 * 
 * Bus error occurs as part of the transaction but this indicates the SW the cause
 * of the error. This should occur once per transaction.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_MSB        16
/* The width in bits of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : ADDRPARFLG
 * 
 * External address parity flag for DDR4 memory.
 * 
 * This bit is used to flag external address parity flag which is driven with
 * derr_req port.
 * 
 * 1'b0: No Effect.
 * 
 * 1'b1: Read of one indicates double-bit interrupt has occurred.   Write of one
 * will clear this register last address parity flag.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_MSB        17
/* The width in bits of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_SET_MSK    0x00020000
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_CLR_MSK    0xfffdffff
/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : DERRBUSFLG
 * 
 * This bit is used to flag the last transaction was flagged with double-bit error.
 * 
 * 1'b0: no effect.
 * 
 * 1'b1: indicates double-bit error has occured. This will drive the bus to respond
 * the read with bus error. Write of one will clear this register double-but bus
 * error.
 * 
 * Bus error occurs as part of the transaction but this indicates the SW the cause
 * of the error. This should only occur once per transaction
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_MSB        18
/* The width in bits of the ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_SET_MSK    0x00040000
/* The mask used to clear the ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG register field value. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_CLR_MSK    0xfffbffff
/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG register field. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG_SET(value) (((value) << 18) & 0x00040000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_INTSTAT.
 */
struct ALT_MPFE_HMC_ADP_INTSTAT_s
{
    volatile uint32_t  SERRPENA      :  1;  /* ALT_MPFE_HMC_ADP_INTSTAT_SERRPENA */
    volatile uint32_t  DERRPENA      :  1;  /* ALT_MPFE_HMC_ADP_INTSTAT_DERRPENA */
    volatile uint32_t  HMI_PENA      :  1;  /* ALT_MPFE_HMC_ADP_INTSTAT_HMI_PENA */
    volatile uint32_t  SEQ2CORE_PENA :  1;  /* ALT_MPFE_HMC_ADP_INTSTAT_SEQ2CORE_PENA */
    uint32_t                         : 12;  /* *UNDEFINED* */
    volatile uint32_t  ADDRMTCFLG    :  1;  /* ALT_MPFE_HMC_ADP_INTSTAT_ADDRMTCFLG */
    volatile uint32_t  ADDRPARFLG    :  1;  /* ALT_MPFE_HMC_ADP_INTSTAT_ADDRPARFLG */
    volatile uint32_t  DERRBUSFLG    :  1;  /* ALT_MPFE_HMC_ADP_INTSTAT_DERRBUSFLG */
    uint32_t                         : 13;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_INTSTAT. */
typedef struct ALT_MPFE_HMC_ADP_INTSTAT_s  ALT_MPFE_HMC_ADP_INTSTAT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_INTSTAT register. */
#define ALT_MPFE_HMC_ADP_INTSTAT_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_INTSTAT register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_INTSTAT_OFST        0x120

/*
 * Register : DIAGINTTEST
 * 
 * Enable diagnostic errors
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA  
 *  [7:1]   | ???    | 0x0   | *UNDEFINED*                          
 *  [8]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA  
 *  [15:9]  | ???    | 0x0   | *UNDEFINED*                          
 *  [16]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC
 *  [23:17] | ???    | 0x0   | *UNDEFINED*                          
 *  [24]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR
 *  [31:25] | ???    | 0x0   | *UNDEFINED*                          
 * 
 */
/*
 * Field : TSERRA
 * 
 * This bit is used to test a single-bit error.
 * 
 * 1'b0: Write of zero has no effect.
 * 
 * 1'b1: When this bit is set to 1,  serr_req signal is generated to the system
 * manager when the ECC decoder detects a single-bit error. By writing to this bit,
 * SERRPENA bit will be pending. Write of one to SERRPENA will clear this bit.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_E_STAY  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_E_SET   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA field value from a register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : TDERRA
 * 
 * Diagnostic enable of Double-bit error.
 * 
 * This bit is used to test double-bit error.
 * 
 * 1'b0: Write of zero has no effect.
 * 
 * 1'b1: When this bit is set to 1,  derr_req signal is generated to the system
 * manager when the ECC decoder detects a double-bit error. By writing to this bit,
 * DERRBUSFLG bit will be pending. Write of one to DERRBUSFLG will clear this bit.
 * SW needs to explicitly write to DERRPENA to clear it.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_E_STAY  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_E_SET   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_MSB        8
/* The width in bits of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA field value from a register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : TADDRMTC
 * 
 * Diagnostic enable of Address mismatch error.
 * 
 * This bit is used to flag that the last transaction was flagged with address
 * mismatch error.
 * 
 * 1'b0: Disables generating address match bus error as part of the transaction.
 * 
 * 1'b1: When this bit is set to 1, derr_req signal is generated to the system
 * manager when the ECC decoder detects a ecc address mismatch. By writing to this
 * bit, ADDRMTCFLG bit will be pending. Write of one to ADDRMTCFLG will clear this
 * bit. SW needs to explicitly write to DERRPENA to clear it.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_E_STAY    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_E_SET     0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_MSB        16
/* The width in bits of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC field value from a register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : TADDRPAR
 * 
 * Diagnostic of address parity of DDR4.
 * 
 * This bit is used to test the address parity error path.
 * 
 * 1'b0: Disables generating address match bus error as part of the transaction.
 * 
 * 1'b1: When this bit is set to 1, derr_req signal is generated to the system
 * manager when the ECC decoder detects an ecc address parity error. By writing to
 * this bit, ADDRPARFLG bit will be pending. Write of one to ADDRPARFLG will clear
 * this bit. SW needs to explicitly write to DERRPENA to clear it.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_E_STAY | 0x0   |            
 *  ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_E_SET  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_E_STAY    0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR
 * 
 */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_E_SET     0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_MSB        24
/* The width in bits of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_SET_MSK    0x01000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR register field value. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_CLR_MSK    0xfeffffff
/* The reset value of the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR register field. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR field value from a register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR_SET(value) (((value) << 24) & 0x01000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_DIAGINTTEST.
 */
struct ALT_MPFE_HMC_ADP_DIAGINTTEST_s
{
    volatile uint32_t  TSERRA   :  1;  /* ALT_MPFE_HMC_ADP_DIAGINTTEST_TSERRA */
    uint32_t                    :  7;  /* *UNDEFINED* */
    volatile uint32_t  TDERRA   :  1;  /* ALT_MPFE_HMC_ADP_DIAGINTTEST_TDERRA */
    uint32_t                    :  7;  /* *UNDEFINED* */
    volatile uint32_t  TADDRMTC :  1;  /* ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRMTC */
    uint32_t                    :  7;  /* *UNDEFINED* */
    volatile uint32_t  TADDRPAR :  1;  /* ALT_MPFE_HMC_ADP_DIAGINTTEST_TADDRPAR */
    uint32_t                    :  7;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_DIAGINTTEST. */
typedef struct ALT_MPFE_HMC_ADP_DIAGINTTEST_s  ALT_MPFE_HMC_ADP_DIAGINTTEST_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_DIAGINTTEST register. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_DIAGINTTEST register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_DIAGINTTEST_OFST        0x124

/*
 * Register : MODSTAT
 * 
 * Counter feature status flag
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [0]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA        
 *  [7:1]  | ???    | 0x0   | *UNDEFINED*                             
 *  [8]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG
 *  [31:9] | ???    | 0x0   | *UNDEFINED*                             
 * 
 */
/*
 * Field : CMPFLGA
 * 
 * Counter Match occurred flag.
 * 
 * This bit indicates that the internal counter and SERRCNT value matched.
 * 
 * 1'b0: read indicates match check of SERR interrupt on compare match is disabled.
 * 
 * 1'b1: read indicates compare has matched.  Write of one will clear the pending
 * compare match. This will not de-assert the serr_req signal - software needs to
 * write to serrpen bit to clear the interrupt.
 * 
 * When the match occurs, additional errors will not increment count until the
 * compare status flag is cleared. If the software does not change the SERRCNT
 * register prior to clearing this flag or reset the internal counter, next
 * increment of internal counter could set this flag again in the next cycle.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA register field value. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA register field value. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA field value from a register. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : AUTOWB_DROP_FLG
 * 
 * Auto writeback counter match flag.
 * 
 * This bit indicates that the internal autoWB counter and autoWB_drop_cnt value
 * matched.
 * 
 * 1'b0: read indicates match check of hmi_intr interrupt on compare match is
 * disabled.
 * 
 * 1'b1: read indicates compare has matched.  Write of one will clear the pending
 * compare match. This will not de-assert the hmi_intr signal - software needs to
 * write to hmi_intrpen bit to clear the interrupt.
 * 
 * When the match occurs, additional errors will not increment count until the
 * compare status flag is cleared. If the software does not change the
 * autoWB_drop_cnt register prior to clearing this flag or reset the autoWB
 * counter, next increment of internal autoWB counter could set this flag in the
 * next cycle.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_MSB        8
/* The width in bits of the ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG register field value. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG register field value. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG register field. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG field value from a register. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG_SET(value) (((value) << 8) & 0x00000100)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_MODSTAT.
 */
struct ALT_MPFE_HMC_ADP_MODSTAT_s
{
    volatile uint32_t  CMPFLGA         :  1;  /* ALT_MPFE_HMC_ADP_MODSTAT_CMPFLGA */
    uint32_t                           :  7;  /* *UNDEFINED* */
    volatile uint32_t  AUTOWB_DROP_FLG :  1;  /* ALT_MPFE_HMC_ADP_MODSTAT_AUTOWB_DROP_FLG */
    uint32_t                           : 23;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_MODSTAT. */
typedef struct ALT_MPFE_HMC_ADP_MODSTAT_s  ALT_MPFE_HMC_ADP_MODSTAT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_MODSTAT register. */
#define ALT_MPFE_HMC_ADP_MODSTAT_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_MODSTAT register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_MODSTAT_OFST        0x128

/*
 * Register : DERRADDRA
 * 
 * Double-bit error address
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS
 * 
 */
/*
 * Field : DADDRESS
 * 
 * Recent DBE address.
 * 
 * This register shows the address of the current double-bit error. RAM size will
 * determine the maximum number of address bits.
 * 
 * This address is logged when a new derr_req or bus error is generated to the
 * system. This is gated by the ecc_en enable bit and derrinten bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS field value from a register. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_DERRADDRA.
 */
struct ALT_MPFE_HMC_ADP_DERRADDRA_s
{
    volatile uint32_t  DADDRESS : 32;  /* ALT_MPFE_HMC_ADP_DERRADDRA_DADDRESS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_DERRADDRA. */
typedef struct ALT_MPFE_HMC_ADP_DERRADDRA_s  ALT_MPFE_HMC_ADP_DERRADDRA_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_DERRADDRA register. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_DERRADDRA register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_DERRADDRA_OFST        0x12c

/*
 * Register : SERRADDRA
 * 
 * Single-bit error address
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS
 * 
 */
/*
 * Field : SADDRESS
 * 
 * Recent single-bit error address.
 * 
 * This register shows the address of the current single-bit error. This address is
 * logged when a new serr_req is generated to the system. This is gated by the
 * single-bit error interrupt enable and ecc_en.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS field value from a register. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_SERRADDRA.
 */
struct ALT_MPFE_HMC_ADP_SERRADDRA_s
{
    volatile uint32_t  SADDRESS : 32;  /* ALT_MPFE_HMC_ADP_SERRADDRA_SADDRESS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_SERRADDRA. */
typedef struct ALT_MPFE_HMC_ADP_SERRADDRA_s  ALT_MPFE_HMC_ADP_SERRADDRA_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_SERRADDRA register. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_SERRADDRA register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_SERRADDRA_OFST        0x130

/*
 * Register : AUTOWB_CORRADDR
 * 
 * This register shows the address of the current autoWB correction SBE.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                
 * :-------|:-------|:------|:--------------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS
 * 
 */
/*
 * Field : SWBADDRESS
 * 
 * recent autoWB correction address.
 * 
 * This register shows the address of the current autoWB correction single-bit
 * error. This address is logged when a new serr_req is generated to the system.
 * This is gated by the single-bit error interrupt enable and ecc_en.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS field value from a register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR.
 */
struct ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_s
{
    volatile uint32_t  SWBADDRESS : 32;  /* ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_SWBADDRESS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR. */
typedef struct ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_s  ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_OFST        0x138

/*
 * Register : SERRCNTREG
 * 
 * Maximum counter value for single-bit error interrupt
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT
 * 
 */
/*
 * Field : SERRCNT
 * 
 * Compare value for the internal single-bit errors.
 * 
 * This register sets the value to compare with the internal counter. Software
 * should write to this register before enabling the interrupt on compare.
 * 
 * 0x0: If the serrcnt bits are not modified before enabling the intoncmp, internal
 * counter=0 and serrcnt=0, serr compare interrupt will not occur. Default after
 * reset.
 * 
 * Nonzero: if internal counter == serrcnt == nonzero will create a serr compare
 * interrupt.
 * 
 * When the compare matches, autoWB_drop_cmpflga will be set.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT register field. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT register field. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT register field. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT register field value. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT register field value. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT register field. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT field value from a register. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_SERRCNTREG.
 */
struct ALT_MPFE_HMC_ADP_SERRCNTREG_s
{
    volatile uint32_t  SERRCNT : 32;  /* ALT_MPFE_HMC_ADP_SERRCNTREG_SERRCNT */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_SERRCNTREG. */
typedef struct ALT_MPFE_HMC_ADP_SERRCNTREG_s  ALT_MPFE_HMC_ADP_SERRCNTREG_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_SERRCNTREG register. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_SERRCNTREG register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_SERRCNTREG_OFST        0x13c

/*
 * Register : AUTOWB_DROP_CNTREG
 * 
 * Maximum counter value for AUTOWB correction interrupt
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [31:0] | RW     | 0x1   | ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT
 * 
 */
/*
 * Field : CNT
 * 
 * Compare value for the internal autoWB correction count.
 * 
 * This register sets the value to compare with the autoWB internal counter.
 * Software should write to this register before enabling the interrupt on compare.
 * 
 * 0x1: If the autoWB_drop_cntreg bits are not modified before enabling the
 * hmi_intr, autoWB internal counter=0 and autoWB_dop_cnt =1, serr compare
 * interrupt will not occur. Default after reset.
 * 
 * Nonzero: if autoWB internal counter == autoWB_drop_cnt  == nonzero will create a
 * serr compare interrupt.
 * 
 * When the compare matches, autoWB_drop_flg will be set.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT register field value. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT register field value. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_RESET      0x1
/* Extracts the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT field value from a register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG.
 */
struct ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_s
{
    volatile uint32_t  CNT : 32;  /* ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_CNT */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG. */
typedef struct ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_s  ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_RESET       0x00000001
/* The byte offset of the ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_OFST        0x140

/*
 * Register : ECC_REG2WRECCDATABUS
 * 
 * ECC from register associated to data which will be written to the RAM
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                  
 * :--------|:-------|:------|:----------------------------------------------
 *  [7:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS
 *  [15:8]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS
 *  [23:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS
 *  [31:24] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS
 * 
 */
/*
 * Field : ECC0BUS
 * 
 * ECC from register associated to data [63:0] which will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : ECC1BUS
 * 
 * ECC from register associated to data [127:64] which will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_CLR_MSK    0xffff00ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : ECC2BUS
 * 
 * ECC from register associated to data [191:128] which will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_MSB        23
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : ECC3BUS
 * 
 * ECC from register associated to data [255:192] which will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS.
 */
struct ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_s
{
    volatile uint32_t  ECC0BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC0BUS */
    volatile uint32_t  ECC1BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC1BUS */
    volatile uint32_t  ECC2BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC2BUS */
    volatile uint32_t  ECC3BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_ECC3BUS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS. */
typedef struct ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_s  ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_OFST        0x144

/*
 * Register : ECC_RDECCDATA2REGBUS
 * 
 * ECC of data from RAM will be written to register
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                  
 * :--------|:-------|:------|:----------------------------------------------
 *  [7:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS
 *  [15:8]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS
 *  [23:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS
 *  [31:24] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS
 * 
 */
/*
 * Field : ECC0BUS
 * 
 * ECC of data [63:0] from RAM which will be written to register.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : ECC1BUS
 * 
 * ECC of data [127:64] from RAM which will be written to register.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_CLR_MSK    0xffff00ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : ECC2BUS
 * 
 * ECC of data [191:128] from RAM which will be written to register.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_MSB        23
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : ECC3BUS
 * 
 * ECC of data [255:192] from RAM which will be written to register.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS.
 */
struct ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_s
{
    volatile uint32_t  ECC0BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC0BUS */
    volatile uint32_t  ECC1BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC1BUS */
    volatile uint32_t  ECC2BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC2BUS */
    volatile uint32_t  ECC3BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_ECC3BUS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS. */
typedef struct ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_s  ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS register. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_OFST        0x148

/*
 * Register : ECC_REG2RDECCDATABUS
 * 
 * ECC from register associated to RD data which will be written to hmc ecc
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                  
 * :--------|:-------|:------|:----------------------------------------------
 *  [7:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS
 *  [15:8]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS
 *  [23:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS
 *  [31:24] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS
 * 
 */
/*
 * Field : ECC0BUS
 * 
 * ECC from register associated to RD data [63:0] which will be written to hmc ecc.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : ECC1BUS
 * 
 * ECC from register associated to RD data [127:64] which will be written to hmc
 * ecc.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_CLR_MSK    0xffff00ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : ECC2BUS
 * 
 * ECC from register associated to RD data [191:128] which will be written to hmc
 * ecc.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_MSB        23
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : ECC3BUS
 * 
 * ECC from register associated to RD data [255:192] which will be written to hmc
 * ecc.
 * 
 * Based on the DDR IO width, unimplemented bytes of this register will read as
 * zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS.
 */
struct ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_s
{
    volatile uint32_t  ECC0BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC0BUS */
    volatile uint32_t  ECC1BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC1BUS */
    volatile uint32_t  ECC2BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC2BUS */
    volatile uint32_t  ECC3BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_ECC3BUS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS. */
typedef struct ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_s  ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_OFST        0x14c

/*
 * Register : ECC_DIAGON
 * 
 * Enable diagnostics access
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON 
 *  [1]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON 
 *  [15:2]  | ???    | 0x0   | *UNDEFINED*                          
 *  [16]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON
 *  [31:17] | ???    | 0x0   | *UNDEFINED*                          
 * 
 */
/*
 * Field : WRDIAGON
 * 
 * Write diagnostics mux enabled.
 * 
 * This overrides the encoder output with the register data ecc.
 * 
 * 1'b0: Write diagnostics path via the ecc_reg2wdatabus is disabled.
 * 
 * 1'b1: Write diagnostics path via the ecc_reg2wdatabus is enabled.
 * 
 * Both Rddiagon and Wrdiagon bits can be enabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON
 * 
 */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON
 * 
 */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : RDDIAGON
 * 
 * Read diagnostics mux enabled.
 * 
 * This overrides the data entering the ECC decoder.
 * 
 * 1'b0: Read diagnostics path via the ecc_rdata2regbus or ecc_reg2rdatabus is
 * disabled.
 * 
 * 1'b1: Read diagnostics path via the ecc_rdata2regbus or ecc_reg2rdatabus is
 * enabled.
 * 
 * Both Rddiagon and Wrdiagon bits can be enabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON
 * 
 */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_E_DISABLE  0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON
 * 
 */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_E_ENABLE   0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : ECCDIAGON
 * 
 * ECC diagnostics mode.
 * 
 * 1'b0: ECC diagnostics logic is disabled. ECC encoder bypass is disabled.
 * 
 * 1'b1: ECC diagnostics logic is enabled. Direction of ECC data from the register
 * to data bus or data bus to ecc register is determined by ECC_rddiagon or
 * ECC_wrdiagon.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_E_DISABLE | 0x0   |            
 *  ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_E_ENABLE  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON
 * 
 */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_E_DISABLE 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON
 * 
 */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_E_ENABLE  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_MSB        16
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON register field. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON_SET(value) (((value) << 16) & 0x00010000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_DIAGON.
 */
struct ALT_MPFE_HMC_ADP_ECC_DIAGON_s
{
    volatile uint32_t  WRDIAGON  :  1;  /* ALT_MPFE_HMC_ADP_ECC_DIAGON_WRDIAGON */
    volatile uint32_t  RDDIAGON  :  1;  /* ALT_MPFE_HMC_ADP_ECC_DIAGON_RDDIAGON */
    uint32_t                     : 14;  /* *UNDEFINED* */
    volatile uint32_t  ECCDIAGON :  1;  /* ALT_MPFE_HMC_ADP_ECC_DIAGON_ECCDIAGON */
    uint32_t                     : 15;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_DIAGON. */
typedef struct ALT_MPFE_HMC_ADP_ECC_DIAGON_s  ALT_MPFE_HMC_ADP_ECC_DIAGON_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DIAGON register. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_DIAGON register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_DIAGON_OFST        0x150

/*
 * Register : ECC_DECSTAT
 * 
 * Diagnostic decoder status
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                             
 * :--------|:-------|:------|:-----------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG
 *  [1]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG
 *  [2]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG
 *  [3]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG
 *  [4]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG
 *  [5]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG
 *  [6]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG
 *  [7]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG
 *  [8]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG
 *  [9]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG
 *  [10]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG
 *  [11]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG
 *  [31:12] | ???    | 0x0   | *UNDEFINED*                             
 * 
 */
/*
 * Field : DEC0SERRFLG
 * 
 * indicates decoder for data [63:0] has detected SBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a single bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit. Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : DEC1SERRFLG
 * 
 * indicates decoder for data [127:64] has detected SBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a single bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit. Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : DEC2SERRFLG
 * 
 * indicates decoder for data [191:128] has detected SBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a single bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit.Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_MSB        2
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : DEC3SERRFLG
 * 
 * indicates decoder for data [255:192] has detected SBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a single bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit.Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_MSB        3
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : DEC0ADDRFLG
 * 
 * indicates decoder for data [63:0] has detected address error.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected an address mismatch error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears.Additional errors will not change the state of this bit.Error flag is set
 * on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : DEC1ADDRFLG
 * 
 * indicates decoder for data [127:64] has detected address error.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected an address mismatch error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears.Additional errors will not change the state of this bit.Error flag is set
 * on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_MSB        5
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : DEC2ADDRFLG
 * 
 * indicates decoder for data [191:128] has detected address error.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected an address mismatch error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears.Additional errors will not change the state of this bit.Error flag is set
 * on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_MSB        6
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : DEC3ADDRFLG
 * 
 * indicates decoder for data [255:192] has detected address error.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected an address mismatch error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears.Additional errors will not change the state of this bit.Error flag is set
 * on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : DEC0DERRFLG
 * 
 * indicates decoder for data [63:0] has detected DBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a double-bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit. Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_MSB        8
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : DEC1DERRFLG
 * 
 * indicates decoder for data [127:64] has detected DBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a double-bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit.Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_MSB        9
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : DEC2DERRFLG
 * 
 * indicates decoder for data [191:128] has detected DBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a double-bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit.Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_MSB        10
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : DEC3DERRFLG
 * 
 * indicates decoder for data [255:192] has detected DBE.
 * 
 * 1'b0: No error has been captured with this flag.
 * 
 * 1'b1: Decoder 0 detected a double-bit error. This flag will be set by the
 * hardware and it will be cleared by the writing 1. This flag will be set till SW
 * clears. Additional errors will not change the state of this bit. Error flag is
 * set on the first beat of erred data.
 * 
 * This won't be reset by the ecc_en bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_MSB        11
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG register field value. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG register field. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG_SET(value) (((value) << 11) & 0x00000800)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_DECSTAT.
 */
struct ALT_MPFE_HMC_ADP_ECC_DECSTAT_s
{
    volatile uint32_t  DEC0SERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0SERRFLG */
    volatile uint32_t  DEC1SERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1SERRFLG */
    volatile uint32_t  DEC2SERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2SERRFLG */
    volatile uint32_t  DEC3SERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3SERRFLG */
    volatile uint32_t  DEC0ADDRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0ADDRFLG */
    volatile uint32_t  DEC1ADDRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1ADDRFLG */
    volatile uint32_t  DEC2ADDRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2ADDRFLG */
    volatile uint32_t  DEC3ADDRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3ADDRFLG */
    volatile uint32_t  DEC0DERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC0DERRFLG */
    volatile uint32_t  DEC1DERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC1DERRFLG */
    volatile uint32_t  DEC2DERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC2DERRFLG */
    volatile uint32_t  DEC3DERRFLG :  1;  /* ALT_MPFE_HMC_ADP_ECC_DECSTAT_DEC3DERRFLG */
    uint32_t                       : 20;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_DECSTAT. */
typedef struct ALT_MPFE_HMC_ADP_ECC_DECSTAT_s  ALT_MPFE_HMC_ADP_ECC_DECSTAT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_DECSTAT register. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_DECSTAT register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_DECSTAT_OFST        0x154

/*
 * Register : ECC_ERRGENADDR_0
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                           
 * :-------|:-------|:------|:---------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 0.
 * 
 * Address generated with SER or address mismatch logic. Address will be driven by
 * the ECC decoder on every read latched by the RAM independent of ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_s
{
    volatile uint32_t  ADDR : 32;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_ADDR */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_s  ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_OFST        0x160

/*
 * Register : ECC_ERRGENADDR_1
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                           
 * :-------|:-------|:------|:---------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 1.
 * 
 * Address generated with SER or address mismatch logic. Address will be driven by
 * the ECC decoder on every read latched by the RAM independent of ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_s
{
    volatile uint32_t  ADDR : 32;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_ADDR */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_s  ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_OFST        0x164

/*
 * Register : ECC_ERRGENADDR_2
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                           
 * :-------|:-------|:------|:---------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 2.
 * 
 * Address generated with SER or address mismatch logic. Address will be driven by
 * the ECC decoder on every read latched by the RAM independent of ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_s
{
    volatile uint32_t  ADDR : 32;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_ADDR */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_s  ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_OFST        0x168

/*
 * Register : ECC_ERRGENADDR_3
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                           
 * :-------|:-------|:------|:---------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 3.
 * 
 * Address generated with SER or address mismatch logic. Address will be driven by
 * the ECC decoder on every read latched by the RAM independent of ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_WIDTH      32
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_CLR_MSK    0x00000000
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_s
{
    volatile uint32_t  ADDR : 32;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_ADDR */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_s  ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_OFST        0x16c

/*
 * Register : ECC_REG2RDDATABUS_BEAT0
 * 
 * ECC Reg2Rddatabus_beat0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                     
 * :--------|:-------|:------|:-------------------------------------------------
 *  [7:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS
 *  [15:8]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS
 *  [23:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS
 *  [31:24] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS
 * 
 */
/*
 * Field : ECC0BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : ECC1BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_CLR_MSK    0xffff00ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : ECC2BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_MSB        23
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : ECC3BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0.
 */
struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_s
{
    volatile uint32_t  ECC0BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC0BUS */
    volatile uint32_t  ECC1BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC1BUS */
    volatile uint32_t  ECC2BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC2BUS */
    volatile uint32_t  ECC3BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_ECC3BUS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0. */
typedef struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_s  ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0 register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_OFST        0x170

/*
 * Register : ECC_REG2RDDATABUS_BEAT1
 * 
 * ECC Reg2Rddatabus_beat1
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                     
 * :--------|:-------|:------|:-------------------------------------------------
 *  [7:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS
 *  [15:8]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS
 *  [23:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS
 *  [31:24] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS
 * 
 */
/*
 * Field : ECC0BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : ECC1BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_CLR_MSK    0xffff00ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : ECC2BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_MSB        23
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : ECC3BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1.
 */
struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_s
{
    volatile uint32_t  ECC0BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC0BUS */
    volatile uint32_t  ECC1BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC1BUS */
    volatile uint32_t  ECC2BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC2BUS */
    volatile uint32_t  ECC3BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_ECC3BUS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1. */
typedef struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_s  ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1 register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_OFST        0x174

/*
 * Register : ECC_REG2RDDATABUS_BEAT2
 * 
 * ECC Reg2Rddatabus_beat2
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                     
 * :--------|:-------|:------|:-------------------------------------------------
 *  [7:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS
 *  [15:8]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS
 *  [23:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS
 *  [31:24] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS
 * 
 */
/*
 * Field : ECC0BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : ECC1BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_CLR_MSK    0xffff00ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : ECC2BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_MSB        23
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : ECC3BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2.
 */
struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_s
{
    volatile uint32_t  ECC0BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC0BUS */
    volatile uint32_t  ECC1BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC1BUS */
    volatile uint32_t  ECC2BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC2BUS */
    volatile uint32_t  ECC3BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_ECC3BUS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2. */
typedef struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_s  ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2 register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_OFST        0x178

/*
 * Register : ECC_REG2RDDATABUS_BEAT3
 * 
 * ECC Reg2Rddatabus_beat3
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                     
 * :--------|:-------|:------|:-------------------------------------------------
 *  [7:0]   | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS
 *  [15:8]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS
 *  [23:16] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS
 *  [31:24] | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS
 * 
 */
/*
 * Field : ECC0BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : ECC1BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_MSB        15
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_CLR_MSK    0xffff00ff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : ECC2BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_MSB        23
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_CLR_MSK    0xff00ffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : ECC3BUS
 * 
 * Data ECC from the register will be written to the RAM
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_MSB        31
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_SET_MSK    0xff000000
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS register field value. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_CLR_MSK    0x00ffffff
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS register field. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_GET(value) (((value) & 0xff000000) >> 24)
/* Produces a ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS_SET(value) (((value) << 24) & 0xff000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3.
 */
struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_s
{
    volatile uint32_t  ECC0BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC0BUS */
    volatile uint32_t  ECC1BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC1BUS */
    volatile uint32_t  ECC2BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC2BUS */
    volatile uint32_t  ECC3BUS :  8;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_ECC3BUS */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3. */
typedef struct ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_s  ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3 register. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_OFST        0x17c

/*
 * Register : ECC_ERRGENHADDR_0
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [4:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR
 *  [31:5] | ???    | 0x0   | *UNDEFINED*                            
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 0.
 * 
 * High address generated with SER or address mismatch logic. Address will be
 * driven by the ECC decoder on every read latched by the RAM independent of
 * ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_s
{
    volatile uint32_t  ADDR :  5;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_ADDR */
    uint32_t                : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_s  ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_OFST        0x180

/*
 * Register : ECC_ERRGENHADDR_1
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [4:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR
 *  [31:5] | ???    | 0x0   | *UNDEFINED*                            
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 1.
 * 
 * High address generated with SER or address mismatch logic. Address will be
 * driven by the ECC decoder on every read latched by the RAM independent of
 * ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_s
{
    volatile uint32_t  ADDR :  5;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_ADDR */
    uint32_t                : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_s  ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_OFST        0x184

/*
 * Register : ECC_ERRGENHADDR_2
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [4:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR
 *  [31:5] | ???    | 0x0   | *UNDEFINED*                            
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 2.
 * 
 * High address generated with SER or address mismatch logic. Address will be
 * driven by the ECC decoder on every read latched by the RAM independent of
 * ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_s
{
    volatile uint32_t  ADDR :  5;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_ADDR */
    uint32_t                : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_s  ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_OFST        0x188

/*
 * Register : ECC_ERRGENHADDR_3
 * 
 * Error address register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [4:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR
 *  [31:5] | ???    | 0x0   | *UNDEFINED*                            
 * 
 */
/*
 * Field : ADDR
 * 
 * For decoder 3.
 * 
 * High address generated with SER or address mismatch logic. Address will be
 * driven by the ECC decoder on every read latched by the RAM independent of
 * ECCDiagon is on.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR register field value. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR register field. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR field value from a register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3.
 */
struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_s
{
    volatile uint32_t  ADDR :  5;  /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_ADDR */
    uint32_t                : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3. */
typedef struct ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_s  ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3 register. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3 register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_OFST        0x18c

/*
 * Register : DERRHADDR
 * 
 * Double-bit error high address
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [4:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS
 *  [31:5] | ???    | 0x0   | *UNDEFINED*                        
 * 
 */
/*
 * Field : DADDRESS
 * 
 * Recent DBE High address.
 * 
 * This register shows the address of the current double-bit error. RAM size will
 * determine the maximum number of address bits.
 * 
 * This address is logged when a new derr_req or bus error is generated to the
 * system. This is gated by the ecc_en enable bit and derrinten bit.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS register field. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS field value from a register. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_DERRHADDR.
 */
struct ALT_MPFE_HMC_ADP_DERRHADDR_s
{
    volatile uint32_t  DADDRESS :  5;  /* ALT_MPFE_HMC_ADP_DERRHADDR_DADDRESS */
    uint32_t                    : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_DERRHADDR. */
typedef struct ALT_MPFE_HMC_ADP_DERRHADDR_s  ALT_MPFE_HMC_ADP_DERRHADDR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_DERRHADDR register. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_DERRHADDR register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_DERRHADDR_OFST        0x1b0

/*
 * Register : SERRHADDR
 * 
 * Single-bit error address
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [4:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS
 *  [31:5] | ???    | 0x0   | *UNDEFINED*                        
 * 
 */
/*
 * Field : SADDRESS
 * 
 * Recent SBE High address.
 * 
 * This register shows the address of the current single-bit error. This address is
 * logged when a new serr_req is generated to the system. This is gated by the
 * single-bit error interrupt enable and ecc_en.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS register field. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS field value from a register. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_SERRHADDR.
 */
struct ALT_MPFE_HMC_ADP_SERRHADDR_s
{
    volatile uint32_t  SADDRESS :  5;  /* ALT_MPFE_HMC_ADP_SERRHADDR_SADDRESS */
    uint32_t                    : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_SERRHADDR. */
typedef struct ALT_MPFE_HMC_ADP_SERRHADDR_s  ALT_MPFE_HMC_ADP_SERRHADDR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_SERRHADDR register. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_SERRHADDR register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_SERRHADDR_OFST        0x1b4

/*
 * Register : AUTOWB_CORRHADDR
 * 
 * This register shows the high address of the current autoWB correction SBE.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                 
 * :-------|:-------|:------|:---------------------------------------------
 *  [4:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS
 *  [31:5] | ???    | 0x0   | *UNDEFINED*                                 
 * 
 */
/*
 * Field : SWBADDRESS
 * 
 * recent autoWB correction high address.
 * 
 * This register shows the address of the current autoWB correction single-bit
 * error. This address is logged when a new serr_req is generated to the system.
 * This is gated by the single-bit error interrupt enable and ecc_en.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_WIDTH      5
/* The mask used to set the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS register field value. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS register field. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS field value from a register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR.
 */
struct ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_s
{
    volatile uint32_t  SWBADDRESS :  5;  /* ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_SWBADDRESS */
    uint32_t                      : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR. */
typedef struct ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_s  ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR register. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_OFST        0x1bc

/*
 * Register : HPSINTFCSEL
 * 
 * HPS interface Enable
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                             
 * :--------|:-------|:------|:-----------------------------------------
 *  [0]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0
 *  [1]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1
 *  [2]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2
 *  [3]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3
 *  [4]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC  
 *  [7:5]   | ???    | 0x0   | *UNDEFINED*                             
 *  [8]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0
 *  [9]     | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1
 *  [10]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2
 *  [11]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3
 *  [12]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC  
 *  [15:13] | ???    | 0x0   | *UNDEFINED*                             
 *  [16]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0
 *  [17]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1
 *  [18]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2
 *  [19]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3
 *  [20]    | RW     | 0x0   | ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC  
 *  [31:21] | ???    | 0x0   | *UNDEFINED*                             
 * 
 */
/*
 * Field : TILEA_LANE0
 * 
 * To select which path of signals connect to Tile A lane 0 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_MSB        0
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : TILEA_LANE1
 * 
 * To select which path of signals connect to Tile A lane 1 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_MSB        1
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : TILEA_LANE2
 * 
 * To select which path of signals connect to Tile A lane 2 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_MSB        2
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : TILEA_LANE3
 * 
 * To select which path of signals connect to Tile A lane 3 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_MSB        3
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : TILEA_HMC
 * 
 * To select which path of signals connect to Tile A HMC (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_E_FPGA   0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_E_HPS    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_MSB        4
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : TILEB_LANE0
 * 
 * To select which path of signals connect to Tile B lane 0 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_MSB        8
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : TILEB_LANE1
 * 
 * To select which path of signals connect to Tile B lane 1 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_MSB        9
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : TILEB_LANE2
 * 
 * To select which path of signals connect to Tile B lane 2 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_MSB        10
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : TILEB_LANE3
 * 
 * To select which path of signals connect to Tile B lane 3 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_MSB        11
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : TILEB_HMC
 * 
 * To select which path of signals connect to Tile B HMC (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_E_FPGA   0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_E_HPS    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_MSB        12
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_SET_MSK    0x00001000
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_CLR_MSK    0xffffefff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : TILEC_LANE0
 * 
 * To select which path of signals connect to Tile C lane 0 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_MSB        16
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_SET_MSK    0x00010000
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_CLR_MSK    0xfffeffff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : TILEC_LANE1
 * 
 * To select which path of signals connect to Tile C lane 1 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_MSB        17
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_SET_MSK    0x00020000
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_CLR_MSK    0xfffdffff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : TILEC_LANE2
 * 
 * To select which path of signals connect to Tile C lane 2 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_MSB        18
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_SET_MSK    0x00040000
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_CLR_MSK    0xfffbffff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : TILEC_LANE3
 * 
 * To select which path of signals connect to Tile C lane 3 (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_E_FPGA 0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_E_HPS  0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_MSB        19
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_SET_MSK    0x00080000
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : TILEC_HMC
 * 
 * To select which path of signals connect to Tile C HMC (fabric wires stealing)
 * 
 * 1'b0 : Set 0 to choose fabric path (Default value after reset)
 * 
 * 1'b1: Set 1 to choose HMC adaptor path
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_E_FPGA | 0x0   |            
 *  ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_E_HPS  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_E_FPGA   0x0
/*
 * Enumerated value for register field ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC
 * 
 */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_E_HPS    0x1

/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_MSB        20
/* The width in bits of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_WIDTH      1
/* The mask used to set the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_SET_MSK    0x00100000
/* The mask used to clear the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC register field value. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_CLR_MSK    0xffefffff
/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC register field. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC field value from a register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC_SET(value) (((value) << 20) & 0x00100000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_HPSINTFCSEL.
 */
struct ALT_MPFE_HMC_ADP_HPSINTFCSEL_s
{
    volatile uint32_t  TILEA_LANE0 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE0 */
    volatile uint32_t  TILEA_LANE1 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE1 */
    volatile uint32_t  TILEA_LANE2 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE2 */
    volatile uint32_t  TILEA_LANE3 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_LANE3 */
    volatile uint32_t  TILEA_HMC   :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEA_HMC */
    uint32_t                       :  3;  /* *UNDEFINED* */
    volatile uint32_t  TILEB_LANE0 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE0 */
    volatile uint32_t  TILEB_LANE1 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE1 */
    volatile uint32_t  TILEB_LANE2 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE2 */
    volatile uint32_t  TILEB_LANE3 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_LANE3 */
    volatile uint32_t  TILEB_HMC   :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEB_HMC */
    uint32_t                       :  3;  /* *UNDEFINED* */
    volatile uint32_t  TILEC_LANE0 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE0 */
    volatile uint32_t  TILEC_LANE1 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE1 */
    volatile uint32_t  TILEC_LANE2 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE2 */
    volatile uint32_t  TILEC_LANE3 :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_LANE3 */
    volatile uint32_t  TILEC_HMC   :  1;  /* ALT_MPFE_HMC_ADP_HPSINTFCSEL_TILEC_HMC */
    uint32_t                       : 11;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_HPSINTFCSEL. */
typedef struct ALT_MPFE_HMC_ADP_HPSINTFCSEL_s  ALT_MPFE_HMC_ADP_HPSINTFCSEL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_HPSINTFCSEL register. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_HPSINTFCSEL register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_HPSINTFCSEL_OFST        0x210

/*
 * Register : RSTHANDSHAKECTRL
 * 
 * reset handshaking from MPFE or ARM
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                               
 * :-------|:-------|:------|:-------------------------------------------
 *  [7:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ
 *  [31:8] | ???    | 0x0   | *UNDEFINED*                               
 * 
 */
/*
 * Field : CORE2SEQ
 * 
 * core2seq register
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ register field value. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ register field value. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ field value from a register. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ_SET(value) (((value) << 0) & 0x000000ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL.
 */
struct ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_s
{
    volatile uint32_t  CORE2SEQ :  8;  /* ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_CORE2SEQ */
    uint32_t                    : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL. */
typedef struct ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_s  ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL register. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_OFST        0x214

/*
 * Register : RSTHANDSHAKESTAT
 * 
 * Reset handshaking from IO48 or Nios
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                               
 * :-------|:-------|:------|:-------------------------------------------
 *  [7:0]  | RW     | 0x0   | ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE
 *  [31:8] | ???    | 0x0   | *UNDEFINED*                               
 * 
 */
/*
 * Field : SEQ2CORE
 * 
 * seq2core register
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_MSB        7
/* The width in bits of the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_WIDTH      8
/* The mask used to set the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE register field value. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE register field value. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE register field. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_RESET      0x0
/* Extracts the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE field value from a register. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE register field value suitable for setting the register. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE_SET(value) (((value) << 0) & 0x000000ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT.
 */
struct ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_s
{
    volatile uint32_t  SEQ2CORE :  8;  /* ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_SEQ2CORE */
    uint32_t                    : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT. */
typedef struct ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_s  ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT register. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_RESET       0x00000000
/* The byte offset of the ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT register from the beginning of the component. */
#define ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_OFST        0x218

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_HMC_ADP.
 */
struct ALT_MPFE_HMC_ADP_s
{
    volatile ALT_MPFE_HMC_ADP_IP_REV_ID_t                IP_REV_ID;                /* ALT_MPFE_HMC_ADP_IP_REV_ID */
    volatile uint32_t                                    _pad_0x4_0x7;             /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_DDRIOCTRL_t                DDRIOCTRL;                /* ALT_MPFE_HMC_ADP_DDRIOCTRL */
    volatile ALT_MPFE_HMC_ADP_DDRCALSTAT_t               DDRCALSTAT;               /* ALT_MPFE_HMC_ADP_DDRCALSTAT */
    volatile ALT_MPFE_HMC_ADP_MPR_0BEAT1_t               MPR_0BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_0BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_1BEAT1_t               MPR_1BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_1BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_2BEAT1_t               MPR_2BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_2BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_3BEAT1_t               MPR_3BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_3BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_4BEAT1_t               MPR_4BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_4BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_5BEAT1_t               MPR_5BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_5BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_6BEAT1_t               MPR_6BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_6BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_7BEAT1_t               MPR_7BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_7BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_8BEAT1_t               MPR_8BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_8BEAT1 */
    volatile ALT_MPFE_HMC_ADP_MPR_0BEAT2_t               MPR_0BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_0BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_1BEAT2_t               MPR_1BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_1BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_2BEAT2_t               MPR_2BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_2BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_3BEAT2_t               MPR_3BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_3BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_4BEAT2_t               MPR_4BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_4BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_5BEAT2_t               MPR_5BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_5BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_6BEAT2_t               MPR_6BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_6BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_7BEAT2_t               MPR_7BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_7BEAT2 */
    volatile ALT_MPFE_HMC_ADP_MPR_8BEAT2_t               MPR_8BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_8BEAT2 */
    volatile uint32_t                                    _pad_0x58_0x5f[2];        /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_AUTO_PRECHARGE_t           AUTO_PRECHARGE;           /* ALT_MPFE_HMC_ADP_AUTO_PRECHARGE */
    volatile uint32_t                                    _pad_0x64_0xdf[31];       /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_DRAMADDRWIDTH_t            DRAMADDRWIDTH;            /* ALT_MPFE_HMC_ADP_DRAMADDRWIDTH */
    volatile uint32_t                                    _pad_0xe4_0xff[7];        /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_ECCCTRL1_t                 ECCCTRL1;                 /* ALT_MPFE_HMC_ADP_ECCCTRL1 */
    volatile ALT_MPFE_HMC_ADP_ECCCTRL2_t                 ECCCTRL2;                 /* ALT_MPFE_HMC_ADP_ECCCTRL2 */
    volatile uint32_t                                    _pad_0x108_0x10f[2];      /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_ERRINTEN_t                 ERRINTEN;                 /* ALT_MPFE_HMC_ADP_ERRINTEN */
    volatile ALT_MPFE_HMC_ADP_ERRINTENS_t                ERRINTENS;                /* ALT_MPFE_HMC_ADP_ERRINTENS */
    volatile ALT_MPFE_HMC_ADP_ERRINTENR_t                ERRINTENR;                /* ALT_MPFE_HMC_ADP_ERRINTENR */
    volatile ALT_MPFE_HMC_ADP_INTMODE_t                  INTMODE;                  /* ALT_MPFE_HMC_ADP_INTMODE */
    volatile ALT_MPFE_HMC_ADP_INTSTAT_t                  INTSTAT;                  /* ALT_MPFE_HMC_ADP_INTSTAT */
    volatile ALT_MPFE_HMC_ADP_DIAGINTTEST_t              DIAGINTTEST;              /* ALT_MPFE_HMC_ADP_DIAGINTTEST */
    volatile ALT_MPFE_HMC_ADP_MODSTAT_t                  MODSTAT;                  /* ALT_MPFE_HMC_ADP_MODSTAT */
    volatile ALT_MPFE_HMC_ADP_DERRADDRA_t                DERRADDRA;                /* ALT_MPFE_HMC_ADP_DERRADDRA */
    volatile ALT_MPFE_HMC_ADP_SERRADDRA_t                SERRADDRA;                /* ALT_MPFE_HMC_ADP_SERRADDRA */
    volatile uint32_t                                    _pad_0x134_0x137;         /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR_t          AUTOWB_CORRADDR;          /* ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR */
    volatile ALT_MPFE_HMC_ADP_SERRCNTREG_t               SERRCNTREG;               /* ALT_MPFE_HMC_ADP_SERRCNTREG */
    volatile ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG_t       AUTOWB_DROP_CNTREG;       /* ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG */
    volatile ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS_t     ECC_REG2WRECCDATABUS;     /* ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS */
    volatile ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS_t     ECC_RDECCDATA2REGBUS;     /* ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS */
    volatile ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS_t     ECC_REG2RDECCDATABUS;     /* ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS */
    volatile ALT_MPFE_HMC_ADP_ECC_DIAGON_t               ECC_DIAGON;               /* ALT_MPFE_HMC_ADP_ECC_DIAGON */
    volatile ALT_MPFE_HMC_ADP_ECC_DECSTAT_t              ECC_DECSTAT;              /* ALT_MPFE_HMC_ADP_ECC_DECSTAT */
    volatile uint32_t                                    _pad_0x158_0x15f[2];      /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0_t         ECC_ERRGENADDR_0;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0 */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1_t         ECC_ERRGENADDR_1;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1 */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2_t         ECC_ERRGENADDR_2;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2 */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3_t         ECC_ERRGENADDR_3;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3 */
    volatile ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0_t  ECC_REG2RDDATABUS_BEAT0;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0 */
    volatile ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1_t  ECC_REG2RDDATABUS_BEAT1;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1 */
    volatile ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2_t  ECC_REG2RDDATABUS_BEAT2;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2 */
    volatile ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3_t  ECC_REG2RDDATABUS_BEAT3;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3 */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0_t        ECC_ERRGENHADDR_0;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0 */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1_t        ECC_ERRGENHADDR_1;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1 */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2_t        ECC_ERRGENHADDR_2;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2 */
    volatile ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3_t        ECC_ERRGENHADDR_3;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3 */
    volatile uint32_t                                    _pad_0x190_0x1af[8];      /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_DERRHADDR_t                DERRHADDR;                /* ALT_MPFE_HMC_ADP_DERRHADDR */
    volatile ALT_MPFE_HMC_ADP_SERRHADDR_t                SERRHADDR;                /* ALT_MPFE_HMC_ADP_SERRHADDR */
    volatile uint32_t                                    _pad_0x1b8_0x1bb;         /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR_t         AUTOWB_CORRHADDR;         /* ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR */
    volatile uint32_t                                    _pad_0x1c0_0x20f[20];     /* *UNDEFINED* */
    volatile ALT_MPFE_HMC_ADP_HPSINTFCSEL_t              HPSINTFCSEL;              /* ALT_MPFE_HMC_ADP_HPSINTFCSEL */
    volatile ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL_t         RSTHANDSHAKECTRL;         /* ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL */
    volatile ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT_t         RSTHANDSHAKESTAT;         /* ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT */
    volatile uint32_t                                    _pad_0x21c_0x500[185];    /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_HMC_ADP. */
typedef struct ALT_MPFE_HMC_ADP_s  ALT_MPFE_HMC_ADP_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_HMC_ADP. */
struct ALT_MPFE_HMC_ADP_raw_s
{
    volatile uint32_t  IP_REV_ID;                /* ALT_MPFE_HMC_ADP_IP_REV_ID */
    volatile uint32_t  _pad_0x4_0x7;             /* *UNDEFINED* */
    volatile uint32_t  DDRIOCTRL;                /* ALT_MPFE_HMC_ADP_DDRIOCTRL */
    volatile uint32_t  DDRCALSTAT;               /* ALT_MPFE_HMC_ADP_DDRCALSTAT */
    volatile uint32_t  MPR_0BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_0BEAT1 */
    volatile uint32_t  MPR_1BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_1BEAT1 */
    volatile uint32_t  MPR_2BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_2BEAT1 */
    volatile uint32_t  MPR_3BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_3BEAT1 */
    volatile uint32_t  MPR_4BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_4BEAT1 */
    volatile uint32_t  MPR_5BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_5BEAT1 */
    volatile uint32_t  MPR_6BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_6BEAT1 */
    volatile uint32_t  MPR_7BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_7BEAT1 */
    volatile uint32_t  MPR_8BEAT1;               /* ALT_MPFE_HMC_ADP_MPR_8BEAT1 */
    volatile uint32_t  MPR_0BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_0BEAT2 */
    volatile uint32_t  MPR_1BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_1BEAT2 */
    volatile uint32_t  MPR_2BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_2BEAT2 */
    volatile uint32_t  MPR_3BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_3BEAT2 */
    volatile uint32_t  MPR_4BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_4BEAT2 */
    volatile uint32_t  MPR_5BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_5BEAT2 */
    volatile uint32_t  MPR_6BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_6BEAT2 */
    volatile uint32_t  MPR_7BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_7BEAT2 */
    volatile uint32_t  MPR_8BEAT2;               /* ALT_MPFE_HMC_ADP_MPR_8BEAT2 */
    volatile uint32_t  _pad_0x58_0x5f[2];        /* *UNDEFINED* */
    volatile uint32_t  AUTO_PRECHARGE;           /* ALT_MPFE_HMC_ADP_AUTO_PRECHARGE */
    volatile uint32_t  _pad_0x64_0xdf[31];       /* *UNDEFINED* */
    volatile uint32_t  DRAMADDRWIDTH;            /* ALT_MPFE_HMC_ADP_DRAMADDRWIDTH */
    volatile uint32_t  _pad_0xe4_0xff[7];        /* *UNDEFINED* */
    volatile uint32_t  ECCCTRL1;                 /* ALT_MPFE_HMC_ADP_ECCCTRL1 */
    volatile uint32_t  ECCCTRL2;                 /* ALT_MPFE_HMC_ADP_ECCCTRL2 */
    volatile uint32_t  _pad_0x108_0x10f[2];      /* *UNDEFINED* */
    volatile uint32_t  ERRINTEN;                 /* ALT_MPFE_HMC_ADP_ERRINTEN */
    volatile uint32_t  ERRINTENS;                /* ALT_MPFE_HMC_ADP_ERRINTENS */
    volatile uint32_t  ERRINTENR;                /* ALT_MPFE_HMC_ADP_ERRINTENR */
    volatile uint32_t  INTMODE;                  /* ALT_MPFE_HMC_ADP_INTMODE */
    volatile uint32_t  INTSTAT;                  /* ALT_MPFE_HMC_ADP_INTSTAT */
    volatile uint32_t  DIAGINTTEST;              /* ALT_MPFE_HMC_ADP_DIAGINTTEST */
    volatile uint32_t  MODSTAT;                  /* ALT_MPFE_HMC_ADP_MODSTAT */
    volatile uint32_t  DERRADDRA;                /* ALT_MPFE_HMC_ADP_DERRADDRA */
    volatile uint32_t  SERRADDRA;                /* ALT_MPFE_HMC_ADP_SERRADDRA */
    volatile uint32_t  _pad_0x134_0x137;         /* *UNDEFINED* */
    volatile uint32_t  AUTOWB_CORRADDR;          /* ALT_MPFE_HMC_ADP_AUTOWB_CORRADDR */
    volatile uint32_t  SERRCNTREG;               /* ALT_MPFE_HMC_ADP_SERRCNTREG */
    volatile uint32_t  AUTOWB_DROP_CNTREG;       /* ALT_MPFE_HMC_ADP_AUTOWB_DROP_CNTREG */
    volatile uint32_t  ECC_REG2WRECCDATABUS;     /* ALT_MPFE_HMC_ADP_ECC_REG2WRECCDATABUS */
    volatile uint32_t  ECC_RDECCDATA2REGBUS;     /* ALT_MPFE_HMC_ADP_ECC_RDECCDATA2REGBUS */
    volatile uint32_t  ECC_REG2RDECCDATABUS;     /* ALT_MPFE_HMC_ADP_ECC_REG2RDECCDATABUS */
    volatile uint32_t  ECC_DIAGON;               /* ALT_MPFE_HMC_ADP_ECC_DIAGON */
    volatile uint32_t  ECC_DECSTAT;              /* ALT_MPFE_HMC_ADP_ECC_DECSTAT */
    volatile uint32_t  _pad_0x158_0x15f[2];      /* *UNDEFINED* */
    volatile uint32_t  ECC_ERRGENADDR_0;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_0 */
    volatile uint32_t  ECC_ERRGENADDR_1;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_1 */
    volatile uint32_t  ECC_ERRGENADDR_2;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_2 */
    volatile uint32_t  ECC_ERRGENADDR_3;         /* ALT_MPFE_HMC_ADP_ECC_ERRGENADDR_3 */
    volatile uint32_t  ECC_REG2RDDATABUS_BEAT0;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT0 */
    volatile uint32_t  ECC_REG2RDDATABUS_BEAT1;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT1 */
    volatile uint32_t  ECC_REG2RDDATABUS_BEAT2;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT2 */
    volatile uint32_t  ECC_REG2RDDATABUS_BEAT3;  /* ALT_MPFE_HMC_ADP_ECC_REG2RDDATABUS_BEAT3 */
    volatile uint32_t  ECC_ERRGENHADDR_0;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_0 */
    volatile uint32_t  ECC_ERRGENHADDR_1;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_1 */
    volatile uint32_t  ECC_ERRGENHADDR_2;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_2 */
    volatile uint32_t  ECC_ERRGENHADDR_3;        /* ALT_MPFE_HMC_ADP_ECC_ERRGENHADDR_3 */
    volatile uint32_t  _pad_0x190_0x1af[8];      /* *UNDEFINED* */
    volatile uint32_t  DERRHADDR;                /* ALT_MPFE_HMC_ADP_DERRHADDR */
    volatile uint32_t  SERRHADDR;                /* ALT_MPFE_HMC_ADP_SERRHADDR */
    volatile uint32_t  _pad_0x1b8_0x1bb;         /* *UNDEFINED* */
    volatile uint32_t  AUTOWB_CORRHADDR;         /* ALT_MPFE_HMC_ADP_AUTOWB_CORRHADDR */
    volatile uint32_t  _pad_0x1c0_0x20f[20];     /* *UNDEFINED* */
    volatile uint32_t  HPSINTFCSEL;              /* ALT_MPFE_HMC_ADP_HPSINTFCSEL */
    volatile uint32_t  RSTHANDSHAKECTRL;         /* ALT_MPFE_HMC_ADP_RSTHANDSHAKECTRL */
    volatile uint32_t  RSTHANDSHAKESTAT;         /* ALT_MPFE_HMC_ADP_RSTHANDSHAKESTAT */
    volatile uint32_t  _pad_0x21c_0x500[185];    /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_HMC_ADP. */
typedef struct ALT_MPFE_HMC_ADP_raw_s  ALT_MPFE_HMC_ADP_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_CS_OBS_AT_MAIN_ATBENDPT
 * 
 */
/*
 * Register : cs_obs_at_main_AtbEndPoint_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                       
 * :-------|:-------|:---------|:-----------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x7      | ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0xca7ca6 | ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_RESET      0x7
/* Extracts the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_RESET      0xca7ca6
/* Extracts the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID.
 */
struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID. */
typedef struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_s  ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_RESET       0xca7ca607
/* The byte offset of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_OFST        0x0

/*
 * Register : cs_obs_at_main_AtbEndPoint_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                        
 * :-------|:-------|:------|:------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID.
 */
struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID. */
typedef struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_s  ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_OFST        0x4

/*
 * Register : cs_obs_at_main_AtbEndPoint_AtbId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                            
 * :-------|:-------|:--------|:------------------------------------------------------------------------
 *  [6:0]  | RW     | 0x0     | ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID
 *  [31:7] | ???    | Unknown | *UNDEFINED*                                                            
 * 
 */
/*
 * Field : ATBID
 * 
 * ATB AtId
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_MSB        6
/* The width in bits of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_WIDTH      7
/* The mask used to set the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_SET_MSK    0x0000007f
/* The mask used to clear the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_CLR_MSK    0xffffff80
/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_RESET      0x0
/* Extracts the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID field value from a register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_GET(value) (((value) & 0x0000007f) >> 0)
/* Produces a ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID register field value suitable for setting the register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID_SET(value) (((value) << 0) & 0x0000007f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID.
 */
struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_s
{
    volatile uint32_t  ATBID :  7;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_ATBID */
    uint32_t                 : 25;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID. */
typedef struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_s  ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_RESET       0x00000000
/* The byte offset of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID register from the beginning of the component. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_OFST        0x8

/*
 * Register : cs_obs_at_main_AtbEndPoint_AtbEn
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                            
 * :-------|:-------|:--------|:------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                                            
 * 
 */
/*
 * Field : ATBEN
 * 
 * ATB Unit Enable
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_MSB        0
/* The width in bits of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_WIDTH      1
/* The mask used to set the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_RESET      0x0
/* Extracts the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN field value from a register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN register field value suitable for setting the register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN.
 */
struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_s
{
    volatile uint32_t  ATBEN :  1;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_ATBEN */
    uint32_t                 : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN. */
typedef struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_s  ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_RESET       0x00000000
/* The byte offset of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN register from the beginning of the component. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_OFST        0xc

/*
 * Register : cs_obs_at_main_AtbEndPoint_SyncPeriod
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                      
 * :-------|:-------|:--------|:----------------------------------------------------------------------------------
 *  [4:0]  | RW     | 0x0     | ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD
 *  [31:5] | ???    | Unknown | *UNDEFINED*                                                                      
 * 
 */
/*
 * Field : SYNCPERIOD
 * 
 * ATB Synchro Period
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_MSB        4
/* The width in bits of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_WIDTH      5
/* The mask used to set the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_SET_MSK    0x0000001f
/* The mask used to clear the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD register field value. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_CLR_MSK    0xffffffe0
/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD register field. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_RESET      0x0
/* Extracts the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD field value from a register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_GET(value) (((value) & 0x0000001f) >> 0)
/* Produces a ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD register field value suitable for setting the register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD_SET(value) (((value) << 0) & 0x0000001f)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD.
 */
struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_s
{
    volatile uint32_t  SYNCPERIOD :  5;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_SYNCPERIOD */
    uint32_t                      : 27;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD. */
typedef struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_s  ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD register. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_RESET       0x00000000
/* The byte offset of the ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD register from the beginning of the component. */
#define ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_OFST        0x10

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT.
 */
struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_s
{
    volatile ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID_t      cs_obs_at_main_AtbEndPoint_Id_CoreId;      /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID */
    volatile ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID_t  cs_obs_at_main_AtbEndPoint_Id_RevisionId;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID */
    volatile ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID_t          cs_obs_at_main_AtbEndPoint_AtbId;          /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID */
    volatile ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN_t          cs_obs_at_main_AtbEndPoint_AtbEn;          /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN */
    volatile ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD_t     cs_obs_at_main_AtbEndPoint_SyncPeriod;     /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD */
    volatile uint32_t                                                                     _pad_0x14_0x80[27];                        /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT. */
typedef struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_s  ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT. */
struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_raw_s
{
    volatile uint32_t  cs_obs_at_main_AtbEndPoint_Id_CoreId;      /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_COREID */
    volatile uint32_t  cs_obs_at_main_AtbEndPoint_Id_RevisionId;  /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ID_REVISIONID */
    volatile uint32_t  cs_obs_at_main_AtbEndPoint_AtbId;          /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBID */
    volatile uint32_t  cs_obs_at_main_AtbEndPoint_AtbEn;          /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_ATBEN */
    volatile uint32_t  cs_obs_at_main_AtbEndPoint_SyncPeriod;     /* ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_CS_OBS_AT_MAIN_ATBENDPOINT_SYNCPERIOD */
    volatile uint32_t  _pad_0x14_0x80[27];                        /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT. */
typedef struct ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_raw_s  ALT_MPFE_CS_OBS_AT_MAIN_ATBENDPT_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_CCU_MEM0_QOS
 * 
 */
/*
 * Register : ccu_mem0_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                              
 * :-------|:-------|:---------|:--------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x89b4d7 | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0x89b4d7
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0x89b4d704
/* The byte offset of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : ccu_mem0_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                               
 * :-------|:-------|:------|:---------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : ccu_mem0_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                     
 * :--------|:-------|:--------|:-----------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                     
 *  [9:8]   | RW     | 0x0     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                     
 *  [31]    | R      | 0x1     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x0
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000000
/* The byte offset of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : ccu_mem0_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                 
 * :-------|:-------|:--------|:-------------------------------------------------------------
 *  [1:0]  | RW     | 0x1     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                 
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x1
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000001
/* The byte offset of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : ccu_mem0_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                           
 * :--------|:-------|:--------|:-----------------------------------------------------------------------
 *  [12:0]  | RW     | 0xbfe   | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:13] | ???    | Unknown | *UNDEFINED*                                                           
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        12
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      13
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x00001fff
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xffffe000
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0xbfe
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x00001fff) >> 0)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x00001fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 13;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 19;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000bfe
/* The byte offset of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : ccu_mem0_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                             
 * :--------|:-------|:--------|:-------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                             
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : ccu_mem0_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                              
 * :-------|:-------|:--------|:--------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                              
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_CCU_MEM0_QOS.
 */
struct ALT_MPFE_CCU_MEM0_QOS_s
{
    volatile ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID_t      ccu_mem0_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  ccu_mem0_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY_t       ccu_mem0_I_main_QosGenerator_Priority;       /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE_t           ccu_mem0_I_main_QosGenerator_Mode;           /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH_t      ccu_mem0_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION_t     ccu_mem0_I_main_QosGenerator_Saturation;     /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL_t     ccu_mem0_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                            _pad_0x1c_0x80[25];                          /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_CCU_MEM0_QOS. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_s  ALT_MPFE_CCU_MEM0_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_CCU_MEM0_QOS. */
struct ALT_MPFE_CCU_MEM0_QOS_raw_s
{
    volatile uint32_t  ccu_mem0_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  ccu_mem0_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  ccu_mem0_I_main_QosGenerator_Priority;       /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  ccu_mem0_I_main_QosGenerator_Mode;           /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  ccu_mem0_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  ccu_mem0_I_main_QosGenerator_Saturation;     /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  ccu_mem0_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_CCU_MEM0_QOS_CCU_MEM0_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                          /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_CCU_MEM0_QOS. */
typedef struct ALT_MPFE_CCU_MEM0_QOS_raw_s  ALT_MPFE_CCU_MEM0_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR0_AXI128_QOS
 * 
 */
/*
 * Register : fpga2sdram0_axi128_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                             
 * :-------|:-------|:---------|:-----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x38bac5 | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0x38bac5
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0x38bac504
/* The byte offset of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram0_axi128_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                              
 * :-------|:-------|:------|:------------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram0_axi128_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                    
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                    
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                    
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram0_axi128_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                
 * :-------|:-------|:--------|:----------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram0_axi128_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [12:0]  | RW     | 0xc80   | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:13] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        12
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      13
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x00001fff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xffffe000
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0xc80
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x00001fff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x00001fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 13;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 19;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000c80
/* The byte offset of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram0_axi128_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                            
 * :--------|:-------|:--------|:----------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                            
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram0_axi128_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                             
 * :-------|:-------|:--------|:-----------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                             
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR0_AXI128_QOS.
 */
struct ALT_MPFE_F2SDR0_AXI128_QOS_s
{
    volatile ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram0_axi128_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram0_axi128_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram0_axi128_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram0_axi128_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram0_axi128_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram0_axi128_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram0_axi128_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                           _pad_0x1c_0x80[25];                                    /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR0_AXI128_QOS. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_s  ALT_MPFE_F2SDR0_AXI128_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR0_AXI128_QOS. */
struct ALT_MPFE_F2SDR0_AXI128_QOS_raw_s
{
    volatile uint32_t  fpga2sdram0_axi128_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram0_axi128_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram0_axi128_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram0_axi128_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram0_axi128_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram0_axi128_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram0_axi128_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR0_AXI128_QOS_FPGA2SDRAM0_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                    /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR0_AXI128_QOS. */
typedef struct ALT_MPFE_F2SDR0_AXI128_QOS_raw_s  ALT_MPFE_F2SDR0_AXI128_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR0_AXI32_QOS
 * 
 */
/*
 * Register : fpga2sdram0_axi32_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                           
 * :-------|:-------|:---------|:---------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x90f627 | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0x90f627
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0x90f62704
/* The byte offset of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram0_axi32_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                            
 * :-------|:-------|:------|:----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram0_axi32_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                  
 * :--------|:-------|:--------|:------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                  
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                  
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram0_axi32_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                              
 * :-------|:-------|:--------|:--------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                              
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram0_axi32_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                        
 * :--------|:-------|:--------|:------------------------------------------------------------------------------------
 *  [10:0]  | RW     | 0x280   | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:11] | ???    | Unknown | *UNDEFINED*                                                                        
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        10
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      11
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x000007ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xfffff800
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0x280
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x000007ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x000007ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 11;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 21;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000280
/* The byte offset of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram0_axi32_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram0_axi32_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR0_AXI32_QOS.
 */
struct ALT_MPFE_F2SDR0_AXI32_QOS_s
{
    volatile ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram0_axi32_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram0_axi32_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram0_axi32_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram0_axi32_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram0_axi32_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram0_axi32_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram0_axi32_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                         _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR0_AXI32_QOS. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_s  ALT_MPFE_F2SDR0_AXI32_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR0_AXI32_QOS. */
struct ALT_MPFE_F2SDR0_AXI32_QOS_raw_s
{
    volatile uint32_t  fpga2sdram0_axi32_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram0_axi32_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram0_axi32_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram0_axi32_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram0_axi32_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram0_axi32_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram0_axi32_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR0_AXI32_QOS_FPGA2SDRAM0_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR0_AXI32_QOS. */
typedef struct ALT_MPFE_F2SDR0_AXI32_QOS_raw_s  ALT_MPFE_F2SDR0_AXI32_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR0_AXI64_QOS
 * 
 */
/*
 * Register : fpga2sdram0_axi64_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                           
 * :-------|:-------|:---------|:---------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0xb31375 | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0xb31375
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0xb3137504
/* The byte offset of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram0_axi64_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                            
 * :-------|:-------|:------|:----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram0_axi64_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                  
 * :--------|:-------|:--------|:------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                  
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                  
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram0_axi64_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                              
 * :-------|:-------|:--------|:--------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                              
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram0_axi64_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                        
 * :--------|:-------|:--------|:------------------------------------------------------------------------------------
 *  [11:0]  | RW     | 0x780   | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:12] | ???    | Unknown | *UNDEFINED*                                                                        
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        11
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      12
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x00000fff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xfffff000
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0x780
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x00000fff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x00000fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 12;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 20;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000780
/* The byte offset of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram0_axi64_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram0_axi64_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR0_AXI64_QOS.
 */
struct ALT_MPFE_F2SDR0_AXI64_QOS_s
{
    volatile ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram0_axi64_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram0_axi64_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram0_axi64_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram0_axi64_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram0_axi64_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram0_axi64_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram0_axi64_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                         _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR0_AXI64_QOS. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_s  ALT_MPFE_F2SDR0_AXI64_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR0_AXI64_QOS. */
struct ALT_MPFE_F2SDR0_AXI64_QOS_raw_s
{
    volatile uint32_t  fpga2sdram0_axi64_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram0_axi64_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram0_axi64_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram0_axi64_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram0_axi64_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram0_axi64_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram0_axi64_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR0_AXI64_QOS_FPGA2SDRAM0_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR0_AXI64_QOS. */
typedef struct ALT_MPFE_F2SDR0_AXI64_QOS_raw_s  ALT_MPFE_F2SDR0_AXI64_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR1_AXI128_QOS
 * 
 */
/*
 * Register : fpga2sdram1_axi128_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                             
 * :-------|:-------|:---------|:-----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x98409b | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0x98409b
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0x98409b04
/* The byte offset of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram1_axi128_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                              
 * :-------|:-------|:------|:------------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram1_axi128_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                    
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                    
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                    
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram1_axi128_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                
 * :-------|:-------|:--------|:----------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram1_axi128_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [12:0]  | RW     | 0x780   | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:13] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        12
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      13
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x00001fff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xffffe000
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0x780
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x00001fff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x00001fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 13;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 19;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000780
/* The byte offset of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram1_axi128_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                            
 * :--------|:-------|:--------|:----------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                            
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram1_axi128_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                             
 * :-------|:-------|:--------|:-----------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                             
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR1_AXI128_QOS.
 */
struct ALT_MPFE_F2SDR1_AXI128_QOS_s
{
    volatile ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram1_axi128_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram1_axi128_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram1_axi128_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram1_axi128_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram1_axi128_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram1_axi128_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram1_axi128_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                           _pad_0x1c_0x80[25];                                    /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR1_AXI128_QOS. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_s  ALT_MPFE_F2SDR1_AXI128_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR1_AXI128_QOS. */
struct ALT_MPFE_F2SDR1_AXI128_QOS_raw_s
{
    volatile uint32_t  fpga2sdram1_axi128_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram1_axi128_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram1_axi128_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram1_axi128_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram1_axi128_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram1_axi128_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram1_axi128_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR1_AXI128_QOS_FPGA2SDRAM1_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                    /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR1_AXI128_QOS. */
typedef struct ALT_MPFE_F2SDR1_AXI128_QOS_raw_s  ALT_MPFE_F2SDR1_AXI128_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR1_AXI32_QOS
 * 
 */
/*
 * Register : fpga2sdram1_axi32_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                           
 * :-------|:-------|:---------|:---------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x163445 | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0x163445
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0x16344504
/* The byte offset of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram1_axi32_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                            
 * :-------|:-------|:------|:----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram1_axi32_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                  
 * :--------|:-------|:--------|:------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                  
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                  
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram1_axi32_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                              
 * :-------|:-------|:--------|:--------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                              
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram1_axi32_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                        
 * :--------|:-------|:--------|:------------------------------------------------------------------------------------
 *  [10:0]  | RW     | 0x280   | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:11] | ???    | Unknown | *UNDEFINED*                                                                        
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        10
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      11
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x000007ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xfffff800
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0x280
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x000007ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x000007ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 11;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 21;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000280
/* The byte offset of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram1_axi32_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram1_axi32_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR1_AXI32_QOS.
 */
struct ALT_MPFE_F2SDR1_AXI32_QOS_s
{
    volatile ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram1_axi32_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram1_axi32_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram1_axi32_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram1_axi32_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram1_axi32_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram1_axi32_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram1_axi32_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                         _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR1_AXI32_QOS. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_s  ALT_MPFE_F2SDR1_AXI32_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR1_AXI32_QOS. */
struct ALT_MPFE_F2SDR1_AXI32_QOS_raw_s
{
    volatile uint32_t  fpga2sdram1_axi32_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram1_axi32_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram1_axi32_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram1_axi32_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram1_axi32_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram1_axi32_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram1_axi32_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR1_AXI32_QOS_FPGA2SDRAM1_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR1_AXI32_QOS. */
typedef struct ALT_MPFE_F2SDR1_AXI32_QOS_raw_s  ALT_MPFE_F2SDR1_AXI32_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR1_AXI64_QOS
 * 
 */
/*
 * Register : fpga2sdram1_axi64_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                           
 * :-------|:-------|:---------|:---------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x41ac8b | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0x41ac8b
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0x41ac8b04
/* The byte offset of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram1_axi64_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                            
 * :-------|:-------|:------|:----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram1_axi64_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                  
 * :--------|:-------|:--------|:------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                  
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                  
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram1_axi64_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                              
 * :-------|:-------|:--------|:--------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                              
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram1_axi64_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                        
 * :--------|:-------|:--------|:------------------------------------------------------------------------------------
 *  [11:0]  | RW     | 0x780   | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:12] | ???    | Unknown | *UNDEFINED*                                                                        
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        11
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      12
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x00000fff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xfffff000
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0x780
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x00000fff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x00000fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 12;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 20;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000780
/* The byte offset of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram1_axi64_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram1_axi64_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR1_AXI64_QOS.
 */
struct ALT_MPFE_F2SDR1_AXI64_QOS_s
{
    volatile ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram1_axi64_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram1_axi64_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram1_axi64_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram1_axi64_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram1_axi64_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram1_axi64_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram1_axi64_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                         _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR1_AXI64_QOS. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_s  ALT_MPFE_F2SDR1_AXI64_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR1_AXI64_QOS. */
struct ALT_MPFE_F2SDR1_AXI64_QOS_raw_s
{
    volatile uint32_t  fpga2sdram1_axi64_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram1_axi64_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram1_axi64_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram1_axi64_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram1_axi64_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram1_axi64_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram1_axi64_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR1_AXI64_QOS_FPGA2SDRAM1_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR1_AXI64_QOS. */
typedef struct ALT_MPFE_F2SDR1_AXI64_QOS_raw_s  ALT_MPFE_F2SDR1_AXI64_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR2_AXI128_QOS
 * 
 */
/*
 * Register : fpga2sdram2_axi128_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                             
 * :-------|:-------|:---------|:-----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x150ab7 | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0x150ab7
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0x150ab704
/* The byte offset of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram2_axi128_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                              
 * :-------|:-------|:------|:------------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram2_axi128_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                    
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                    
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                    
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram2_axi128_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                
 * :-------|:-------|:--------|:----------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                                
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram2_axi128_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [12:0]  | RW     | 0xc80   | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:13] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        12
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      13
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x00001fff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xffffe000
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0xc80
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x00001fff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x00001fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 13;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 19;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000c80
/* The byte offset of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram2_axi128_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                            
 * :--------|:-------|:--------|:----------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                            
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram2_axi128_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                             
 * :-------|:-------|:--------|:-----------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                             
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR2_AXI128_QOS.
 */
struct ALT_MPFE_F2SDR2_AXI128_QOS_s
{
    volatile ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram2_axi128_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram2_axi128_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram2_axi128_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram2_axi128_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram2_axi128_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram2_axi128_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram2_axi128_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                           _pad_0x1c_0x80[25];                                    /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR2_AXI128_QOS. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_s  ALT_MPFE_F2SDR2_AXI128_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR2_AXI128_QOS. */
struct ALT_MPFE_F2SDR2_AXI128_QOS_raw_s
{
    volatile uint32_t  fpga2sdram2_axi128_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram2_axi128_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram2_axi128_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram2_axi128_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram2_axi128_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram2_axi128_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram2_axi128_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR2_AXI128_QOS_FPGA2SDRAM2_AXI128_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                    /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR2_AXI128_QOS. */
typedef struct ALT_MPFE_F2SDR2_AXI128_QOS_raw_s  ALT_MPFE_F2SDR2_AXI128_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR2_AXI32_QOS
 * 
 */
/*
 * Register : fpga2sdram2_axi32_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                           
 * :-------|:-------|:---------|:---------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0xecc09f | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0xecc09f
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0xecc09f04
/* The byte offset of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram2_axi32_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                            
 * :-------|:-------|:------|:----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram2_axi32_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                  
 * :--------|:-------|:--------|:------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                  
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                  
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram2_axi32_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                              
 * :-------|:-------|:--------|:--------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                              
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram2_axi32_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                        
 * :--------|:-------|:--------|:------------------------------------------------------------------------------------
 *  [10:0]  | RW     | 0x280   | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:11] | ???    | Unknown | *UNDEFINED*                                                                        
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        10
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      11
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x000007ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xfffff800
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0x280
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x000007ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x000007ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 11;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 21;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000280
/* The byte offset of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram2_axi32_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram2_axi32_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR2_AXI32_QOS.
 */
struct ALT_MPFE_F2SDR2_AXI32_QOS_s
{
    volatile ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram2_axi32_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram2_axi32_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram2_axi32_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram2_axi32_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram2_axi32_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram2_axi32_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram2_axi32_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                         _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR2_AXI32_QOS. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_s  ALT_MPFE_F2SDR2_AXI32_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR2_AXI32_QOS. */
struct ALT_MPFE_F2SDR2_AXI32_QOS_raw_s
{
    volatile uint32_t  fpga2sdram2_axi32_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram2_axi32_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram2_axi32_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram2_axi32_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram2_axi32_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram2_axi32_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram2_axi32_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR2_AXI32_QOS_FPGA2SDRAM2_AXI32_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR2_AXI32_QOS. */
typedef struct ALT_MPFE_F2SDR2_AXI32_QOS_raw_s  ALT_MPFE_F2SDR2_AXI32_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR2_AXI64_QOS
 * 
 */
/*
 * Register : fpga2sdram2_axi64_I_main_QosGenerator_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                           
 * :-------|:-------|:---------|:---------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x4      | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0xe58cca | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_RESET      0x4
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_RESET      0xe58cca
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_s  ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_RESET       0xe58cca04
/* The byte offset of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram2_axi64_I_main_QosGenerator_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                            
 * :-------|:-------|:------|:----------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_s  ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram2_axi64_I_main_QosGenerator_Priority
 * 
 * Priority register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                  
 * :--------|:-------|:--------|:------------------------------------------------------------------------------
 *  [1:0]   | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0  
 *  [7:2]   | ???    | Unknown | *UNDEFINED*                                                                  
 *  [9:8]   | RW     | 0x2     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1  
 *  [30:10] | ???    | Unknown | *UNDEFINED*                                                                  
 *  [31]    | R      | 0x1     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK
 * 
 */
/*
 * Field : P0
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for write
 * transactions. In Bandwidth Regulator mode, the priority level when the used
 * throughput is above the threshold. In Bandwidth Regulator mode, P0 should have a
 * value equal or lower than P1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : P1
 * 
 * In Programmable or Bandwidth Limiter mode, the priority level for read
 * transactions. In Bandwidth regulator mode, the priority level when the used
 * throughput is below the threshold. In Bandwidth Regulator mode, P1 should have a
 * value equal or greater than P0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET_MSK    0x00000300
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_CLR_MSK    0xfffffcff
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_RESET      0x2
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : MARK
 * 
 * Backward compatibility marker when 0.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET_MSK    0x80000000
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_CLR_MSK    0x7fffffff
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_RESET      0x1
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_s
{
    volatile uint32_t        P0   :  2;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P0 */
    uint32_t                      :  6;  /* *UNDEFINED* */
    volatile uint32_t        P1   :  2;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_P1 */
    uint32_t                      : 21;  /* *UNDEFINED* */
    const volatile uint32_t  MARK :  1;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_MARK */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_s  ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_RESET       0x80000200
/* The byte offset of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_OFST        0x8

/*
 * Register : fpga2sdram2_axi64_I_main_QosGenerator_Mode
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                              
 * :-------|:-------|:--------|:--------------------------------------------------------------------------
 *  [1:0]  | RW     | 0x3     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE
 *  [31:2] | ???    | Unknown | *UNDEFINED*                                                              
 * 
 */
/*
 * Field : MODE
 * 
 * 0 = Programmable mode: a programmed priority is assigned to each read or write,
 * 1 = Bandwidth Limiter Mode: a hard limit restricts throughput, 2 = Bypass mode:
 * (<See SoC-specific QoS generator documentation>), 3 = Bandwidth Regulator mode:
 * priority decreases when throughput exceeds a threshold.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_WIDTH      2
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_SET_MSK    0x00000003
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_CLR_MSK    0xfffffffc
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_RESET      0x3
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE_SET(value) (((value) << 0) & 0x00000003)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_s
{
    volatile uint32_t  MODE :  2;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_MODE */
    uint32_t                : 30;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_s  ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_RESET       0x00000003
/* The byte offset of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_OFST        0xc

/*
 * Register : fpga2sdram2_axi64_I_main_QosGenerator_Bandwidth
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                        
 * :--------|:-------|:--------|:------------------------------------------------------------------------------------
 *  [11:0]  | RW     | 0x780   | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH
 *  [31:12] | ???    | Unknown | *UNDEFINED*                                                                        
 * 
 */
/*
 * Field : BANDWIDTH
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the bandwidth threshold in
 * units of 1/256th bytes per cycle. For example, 80 MBps on a 250 MHz interface is
 * value 0x0052.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_MSB        11
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_WIDTH      12
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET_MSK    0x00000fff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_CLR_MSK    0xfffff000
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_RESET      0x780
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_GET(value) (((value) & 0x00000fff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH_SET(value) (((value) << 0) & 0x00000fff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_s
{
    volatile uint32_t  BANDWIDTH : 12;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_BANDWIDTH */
    uint32_t                     : 20;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_s  ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_RESET       0x00000780
/* The byte offset of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_OFST        0x10

/*
 * Register : fpga2sdram2_axi64_I_main_QosGenerator_Saturation
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                          
 * :--------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [9:0]   | RW     | 0x8     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION
 *  [31:10] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : SATURATION
 * 
 * In Bandwidth Limiter or Bandwidth Regulator mode, the maximum data count value,
 * in units of 16 bytes. This determines the window of time over which bandwidth is
 * measured. For example, to measure bandwidth within a 1000 cycle window on a
 * 64-bit interface is value 0x1F4.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_WIDTH      10
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET_MSK    0x000003ff
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_CLR_MSK    0xfffffc00
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_RESET      0x8
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_GET(value) (((value) & 0x000003ff) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION_SET(value) (((value) << 0) & 0x000003ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_s
{
    volatile uint32_t  SATURATION : 10;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_SATURATION */
    uint32_t                      : 22;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_s  ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_RESET       0x00000008
/* The byte offset of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_OFST        0x14

/*
 * Register : fpga2sdram2_axi64_I_main_QosGenerator_ExtControl
 * 
 * External inputs control.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                           
 * :-------|:-------|:--------|:---------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN   
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN   
 *  [31:3] | ???    | Unknown | *UNDEFINED*                                                                           
 * 
 */
/*
 * Field : SOCKETQOSEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : EXTTHREN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : INTCLKEN
 * 
 * n/a
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN field value from a register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN_SET(value) (((value) << 2) & 0x00000004)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_s
{
    volatile uint32_t  SOCKETQOSEN :  1;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_SOCKETQOSEN */
    volatile uint32_t  EXTTHREN    :  1;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_EXTTHREN */
    volatile uint32_t  INTCLKEN    :  1;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_INTCLKEN */
    uint32_t                       : 29;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_s  ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL register. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL register from the beginning of the component. */
#define ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_OFST        0x18

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR2_AXI64_QOS.
 */
struct ALT_MPFE_F2SDR2_AXI64_QOS_s
{
    volatile ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID_t      fpga2sdram2_axi64_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID_t  fpga2sdram2_axi64_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY_t       fpga2sdram2_axi64_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE_t           fpga2sdram2_axi64_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE */
    volatile ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH_t      fpga2sdram2_axi64_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION_t     fpga2sdram2_axi64_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION */
    volatile ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL_t     fpga2sdram2_axi64_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t                                                                         _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR2_AXI64_QOS. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_s  ALT_MPFE_F2SDR2_AXI64_QOS_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR2_AXI64_QOS. */
struct ALT_MPFE_F2SDR2_AXI64_QOS_raw_s
{
    volatile uint32_t  fpga2sdram2_axi64_I_main_QosGenerator_Id_CoreId;      /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_COREID */
    volatile uint32_t  fpga2sdram2_axi64_I_main_QosGenerator_Id_RevisionId;  /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_ID_REVISIONID */
    volatile uint32_t  fpga2sdram2_axi64_I_main_QosGenerator_Priority;       /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_PRIORITY */
    volatile uint32_t  fpga2sdram2_axi64_I_main_QosGenerator_Mode;           /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_MODE */
    volatile uint32_t  fpga2sdram2_axi64_I_main_QosGenerator_Bandwidth;      /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_BANDWIDTH */
    volatile uint32_t  fpga2sdram2_axi64_I_main_QosGenerator_Saturation;     /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_SATURATION */
    volatile uint32_t  fpga2sdram2_axi64_I_main_QosGenerator_ExtControl;     /* ALT_MPFE_F2SDR2_AXI64_QOS_FPGA2SDRAM2_AXI64_I_MAIN_QOSGENERATOR_EXTCONTROL */
    volatile uint32_t  _pad_0x1c_0x80[25];                                   /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR2_AXI64_QOS. */
typedef struct ALT_MPFE_F2SDR2_AXI64_QOS_raw_s  ALT_MPFE_F2SDR2_AXI64_QOS_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : MPFE_F2SDR_MGR_MAIN_SBMGR
 * 
 */
/*
 * Register : fpga2sdram_manager_main_SidebandManager_Id_CoreId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset    | Description                                                                                 
 * :-------|:-------|:---------|:---------------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0xb      | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID  
 *  [31:8] | R      | 0x9885cb | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM
 * 
 */
/*
 * Field : CORETYPEID
 * 
 * Field identifying the type of IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_RESET      0xb
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : CORECHECKSUM
 * 
 * Field containing a checksum of the parameters of the IP.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_RESET      0x9885cb
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_s
{
    const volatile uint32_t  CORETYPEID   :  8;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORETYPEID */
    const volatile uint32_t  CORECHECKSUM : 24;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_CORECHECKSUM */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_RESET       0x9885cb0b
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_OFST        0x0

/*
 * Register : fpga2sdram_manager_main_SidebandManager_Id_RevisionId
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                                                  
 * :-------|:-------|:------|:----------------------------------------------------------------------------------------------
 *  [7:0]  | R      | 0x0   | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID   
 *  [31:8] | R      | 0x148 | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID
 * 
 */
/*
 * Field : USERID
 * 
 * Field containing a user defined value, not used anywhere inside the IP itself.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_WIDTH      8
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_SET_MSK    0x000000ff
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_CLR_MSK    0xffffff00
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : FLEXNOCID
 * 
 * Field containing the build revision of the software used to generate the IP HDL
 * code.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_MSB        31
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_WIDTH      24
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_SET_MSK    0xffffff00
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_CLR_MSK    0x000000ff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_RESET      0x148
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_s
{
    const volatile uint32_t  USERID    :  8;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_USERID */
    const volatile uint32_t  FLEXNOCID : 24;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_FLEXNOCID */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_RESET       0x00014800
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_OFST        0x4

/*
 * Register : fpga2sdram_manager_main_SidebandManager_FaultEn
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                          
 * :-------|:-------|:--------|:--------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                                                          
 * 
 */
/*
 * Field : FAULTEN
 * 
 * Global Fault Enable register
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_s
{
    volatile uint32_t  FAULTEN :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_FAULTEN */
    uint32_t                   : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_OFST        0x8

/*
 * Register : fpga2sdram_manager_main_SidebandManager_FaultStatus
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                                  
 * :-------|:-------|:--------|:----------------------------------------------------------------------------------------------
 *  [0]    | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS
 *  [31:1] | ???    | Unknown | *UNDEFINED*                                                                                  
 * 
 */
/*
 * Field : FAULTSTATUS
 * 
 * Global Fault Status register
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS_SET(value) (((value) << 0) & 0x00000001)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_s
{
    const volatile uint32_t  FAULTSTATUS :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_FAULTSTATUS */
    uint32_t                             : 31;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_OFST        0xc

/*
 * Register : fpga2sdram_manager_main_SidebandManager_FlagInEn0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                                             
 * :--------|:-------|:--------|:---------------------------------------------------------------------------------------------------------
 *  [0]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN     
 *  [1]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN  
 *  [2]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN 
 *  [3]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN
 *  [4]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN     
 *  [5]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN  
 *  [6]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN 
 *  [7]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN
 *  [8]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN     
 *  [9]     | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN  
 *  [10]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN 
 *  [11]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN
 *  [31:12] | ???    | Unknown | *UNDEFINED*                                                                                             
 * 
 */
/*
 * Field : FPGA2SDRAM0_IDLE_EN
 * 
 * FlagIn Enable register #0.FPGA2SDRAM0_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : FPGA2SDRAM0_IDLEACK_EN
 * 
 * FlagIn Enable register #1.FPGA2SDRAM0_IDLEACK_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : FPGA2SDRAM0_CMD_IDLE_EN
 * 
 * FlagIn Enable register #2.FPGA2SDRAM0_CMD_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : FPGA2SDRAM0_RESP_IDLE_EN
 * 
 * FlagIn Enable register #3.FPGA2SDRAM0_RESP_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_MSB        3
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : FPGA2SDRAM1_IDLE_EN
 * 
 * FlagIn Enable register #4.FPGA2SDRAM1_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_MSB        4
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : FPGA2SDRAM1_IDLEACK_EN
 * 
 * FlagIn Enable register #5.FPGA2SDRAM1_IDLEACK_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_MSB        5
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : FPGA2SDRAM1_CMD_IDLE_EN
 * 
 * FlagIn Enable register #6.FPGA2SDRAM1_CMD_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_MSB        6
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : FPGA2SDRAM1_RESP_IDLE_EN
 * 
 * FlagIn Enable register #7.FPGA2SDRAM1_RESP_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : FPGA2SDRAM2_IDLE_EN
 * 
 * FlagIn Enable register #8.FPGA2SDRAM2_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_MSB        8
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : FPGA2SDRAM2_IDLEACK_EN
 * 
 * FlagIn Enable register #9.FPGA2SDRAM2_IDLEACK_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : FPGA2SDRAM2_CMD_IDLE_EN
 * 
 * FlagIn Enable register #10.FPGA2SDRAM2_CMD_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_MSB        10
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : FPGA2SDRAM2_RESP_IDLE_EN
 * 
 * FlagIn Enable register #11.FPGA2SDRAM2_RESP_IDLE_EN
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_MSB        11
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN_SET(value) (((value) << 11) & 0x00000800)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_s
{
    volatile uint32_t  FPGA2SDRAM0_IDLE_EN      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM0_IDLEACK_EN   :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_IDLEACK_EN */
    volatile uint32_t  FPGA2SDRAM0_CMD_IDLE_EN  :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_CMD_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM0_RESP_IDLE_EN :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM0_RESP_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM1_IDLE_EN      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM1_IDLEACK_EN   :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_IDLEACK_EN */
    volatile uint32_t  FPGA2SDRAM1_CMD_IDLE_EN  :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_CMD_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM1_RESP_IDLE_EN :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM1_RESP_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM2_IDLE_EN      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM2_IDLEACK_EN   :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_IDLEACK_EN */
    volatile uint32_t  FPGA2SDRAM2_CMD_IDLE_EN  :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_CMD_IDLE_EN */
    volatile uint32_t  FPGA2SDRAM2_RESP_IDLE_EN :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_FPGA2SDRAM2_RESP_IDLE_EN */
    uint32_t                                    : 20;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0 register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0 register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_OFST        0x10

/*
 * Register : fpga2sdram_manager_main_SidebandManager_FlagInStatus0
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                                                                                     
 * :--------|:-------|:--------|:-----------------------------------------------------------------------------------------------------------------
 *  [0]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS     
 *  [1]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS  
 *  [2]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS 
 *  [3]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS
 *  [4]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS     
 *  [5]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS  
 *  [6]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS 
 *  [7]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS
 *  [8]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS     
 *  [9]     | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS  
 *  [10]    | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS 
 *  [11]    | R      | Unknown | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS
 *  [31:12] | ???    | Unknown | *UNDEFINED*                                                                                                     
 * 
 */
/*
 * Field : FPGA2SDRAM0_IDLE_STATUS
 * 
 * FlagIn Status register #0.FPGA2SDRAM0_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : FPGA2SDRAM0_IDLEACK_STATUS
 * 
 * FlagIn Status register #1.FPGA2SDRAM0_IDLEACK_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : FPGA2SDRAM0_CMD_IDLE_STATUS
 * 
 * FlagIn Status register #2.FPGA2SDRAM0_CMD_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : FPGA2SDRAM0_RESP_IDLE_STATUS
 * 
 * FlagIn Status register #3.FPGA2SDRAM0_RESP_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_MSB        3
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : FPGA2SDRAM1_IDLE_STATUS
 * 
 * FlagIn Status register #4.FPGA2SDRAM1_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_MSB        4
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : FPGA2SDRAM1_IDLEACK_STATUS
 * 
 * FlagIn Status register #5.FPGA2SDRAM1_IDLEACK_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_MSB        5
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : FPGA2SDRAM1_CMD_IDLE_STATUS
 * 
 * FlagIn Status register #6.FPGA2SDRAM1_CMD_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_MSB        6
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : FPGA2SDRAM1_RESP_IDLE_STATUS
 * 
 * FlagIn Status register #7.FPGA2SDRAM1_RESP_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : FPGA2SDRAM2_IDLE_STATUS
 * 
 * FlagIn Status register #8.FPGA2SDRAM2_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_MSB        8
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : FPGA2SDRAM2_IDLEACK_STATUS
 * 
 * FlagIn Status register #9.FPGA2SDRAM2_IDLEACK_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_MSB        9
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_SET_MSK    0x00000200
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_CLR_MSK    0xfffffdff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : FPGA2SDRAM2_CMD_IDLE_STATUS
 * 
 * FlagIn Status register #10.FPGA2SDRAM2_CMD_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_MSB        10
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_SET_MSK    0x00000400
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_CLR_MSK    0xfffffbff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : FPGA2SDRAM2_RESP_IDLE_STATUS
 * 
 * FlagIn Status register #11.FPGA2SDRAM2_RESP_IDLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_MSB        11
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_SET_MSK    0x00000800
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS register field is UNKNOWN. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS_SET(value) (((value) << 11) & 0x00000800)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_s
{
    const volatile uint32_t  FPGA2SDRAM0_IDLE_STATUS      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM0_IDLEACK_STATUS   :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_IDLEACK_STATUS */
    const volatile uint32_t  FPGA2SDRAM0_CMD_IDLE_STATUS  :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_CMD_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM0_RESP_IDLE_STATUS :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM0_RESP_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM1_IDLE_STATUS      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM1_IDLEACK_STATUS   :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_IDLEACK_STATUS */
    const volatile uint32_t  FPGA2SDRAM1_CMD_IDLE_STATUS  :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_CMD_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM1_RESP_IDLE_STATUS :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM1_RESP_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM2_IDLE_STATUS      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM2_IDLEACK_STATUS   :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_IDLEACK_STATUS */
    const volatile uint32_t  FPGA2SDRAM2_CMD_IDLE_STATUS  :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_CMD_IDLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM2_RESP_IDLE_STATUS :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_FPGA2SDRAM2_RESP_IDLE_STATUS */
    uint32_t                                              : 20;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0 register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0 register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_OFST        0x14

/*
 * Register : fpga2sdram_manager_main_SidebandManager_FlagOutSet0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                                                  
 * :-------|:-------|:--------|:--------------------------------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET    
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET     
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET
 *  [3]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET    
 *  [4]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET     
 *  [5]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET
 *  [6]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET    
 *  [7]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET     
 *  [8]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET
 *  [31:9] | ???    | Unknown | *UNDEFINED*                                                                                                  
 * 
 */
/*
 * Field : FPGA2SDRAM0_IDLEREQ_SET
 * 
 * FlagOut Set register #0.FPGA2SDRAM0_IDLEREQ_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : FPGA2SDRAM0_ENABLE_SET
 * 
 * FlagOut Set register #1.FPGA2SDRAM0_ENABLE_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : FPGA2SDRAM0_FORCE_DRAIN_SET
 * 
 * FlagOut Set register #2.FPGA2SDRAM0_FORCE_DRAIN_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : FPGA2SDRAM1_IDLEREQ_SET
 * 
 * FlagOut Set register #3.FPGA2SDRAM1_IDLEREQ_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_MSB        3
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : FPGA2SDRAM1_ENABLE_SET
 * 
 * FlagOut Set register #4.FPGA2SDRAM1_ENABLE_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_MSB        4
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : FPGA2SDRAM1_FORCE_DRAIN_SET
 * 
 * FlagOut Set register #5.FPGA2SDRAM1_FORCE_DRAIN_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_MSB        5
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : FPGA2SDRAM2_IDLEREQ_SET
 * 
 * FlagOut Set register #6.FPGA2SDRAM2_IDLEREQ_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_MSB        6
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : FPGA2SDRAM2_ENABLE_SET
 * 
 * FlagOut Set register #7.FPGA2SDRAM2_ENABLE_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : FPGA2SDRAM2_FORCE_DRAIN_SET
 * 
 * FlagOut Set register #8.FPGA2SDRAM2_FORCE_DRAIN_SET
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_MSB        8
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET_SET(value) (((value) << 8) & 0x00000100)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_s
{
    volatile uint32_t  FPGA2SDRAM0_IDLEREQ_SET     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_IDLEREQ_SET */
    volatile uint32_t  FPGA2SDRAM0_ENABLE_SET      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_ENABLE_SET */
    volatile uint32_t  FPGA2SDRAM0_FORCE_DRAIN_SET :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM0_FORCE_DRAIN_SET */
    volatile uint32_t  FPGA2SDRAM1_IDLEREQ_SET     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_IDLEREQ_SET */
    volatile uint32_t  FPGA2SDRAM1_ENABLE_SET      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_ENABLE_SET */
    volatile uint32_t  FPGA2SDRAM1_FORCE_DRAIN_SET :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM1_FORCE_DRAIN_SET */
    volatile uint32_t  FPGA2SDRAM2_IDLEREQ_SET     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_IDLEREQ_SET */
    volatile uint32_t  FPGA2SDRAM2_ENABLE_SET      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_ENABLE_SET */
    volatile uint32_t  FPGA2SDRAM2_FORCE_DRAIN_SET :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_FPGA2SDRAM2_FORCE_DRAIN_SET */
    uint32_t                                       : 23;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0 register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0 register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_OFST        0x50

/*
 * Register : fpga2sdram_manager_main_SidebandManager_FlagOutClr0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                                                  
 * :-------|:-------|:--------|:--------------------------------------------------------------------------------------------------------------
 *  [0]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR    
 *  [1]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR     
 *  [2]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR
 *  [3]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR    
 *  [4]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR     
 *  [5]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR
 *  [6]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR    
 *  [7]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR     
 *  [8]    | RW     | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR
 *  [31:9] | ???    | Unknown | *UNDEFINED*                                                                                                  
 * 
 */
/*
 * Field : FPGA2SDRAM0_IDLEREQ_CLR
 * 
 * FlagOut Clr register #0.FPGA2SDRAM0_IDLEREQ_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : FPGA2SDRAM0_ENABLE_CLR
 * 
 * FlagOut Clr register #1.FPGA2SDRAM0_ENABLE_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : FPGA2SDRAM0_FORCE_DRAIN_CLR
 * 
 * FlagOut Clr register #2.FPGA2SDRAM0_FORCE_DRAIN_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : FPGA2SDRAM1_IDLEREQ_CLR
 * 
 * FlagOut Clr register #3.FPGA2SDRAM1_IDLEREQ_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_MSB        3
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : FPGA2SDRAM1_ENABLE_CLR
 * 
 * FlagOut Clr register #4.FPGA2SDRAM1_ENABLE_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_MSB        4
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : FPGA2SDRAM1_FORCE_DRAIN_CLR
 * 
 * FlagOut Clr register #5.FPGA2SDRAM1_FORCE_DRAIN_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_MSB        5
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : FPGA2SDRAM2_IDLEREQ_CLR
 * 
 * FlagOut Clr register #6.FPGA2SDRAM2_IDLEREQ_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_MSB        6
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : FPGA2SDRAM2_ENABLE_CLR
 * 
 * FlagOut Clr register #7.FPGA2SDRAM2_ENABLE_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : FPGA2SDRAM2_FORCE_DRAIN_CLR
 * 
 * FlagOut Clr register #8.FPGA2SDRAM2_FORCE_DRAIN_CLR
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_MSB        8
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR_SET(value) (((value) << 8) & 0x00000100)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_s
{
    volatile uint32_t  FPGA2SDRAM0_IDLEREQ_CLR     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_IDLEREQ_CLR */
    volatile uint32_t  FPGA2SDRAM0_ENABLE_CLR      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_ENABLE_CLR */
    volatile uint32_t  FPGA2SDRAM0_FORCE_DRAIN_CLR :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM0_FORCE_DRAIN_CLR */
    volatile uint32_t  FPGA2SDRAM1_IDLEREQ_CLR     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_IDLEREQ_CLR */
    volatile uint32_t  FPGA2SDRAM1_ENABLE_CLR      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_ENABLE_CLR */
    volatile uint32_t  FPGA2SDRAM1_FORCE_DRAIN_CLR :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM1_FORCE_DRAIN_CLR */
    volatile uint32_t  FPGA2SDRAM2_IDLEREQ_CLR     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_IDLEREQ_CLR */
    volatile uint32_t  FPGA2SDRAM2_ENABLE_CLR      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_ENABLE_CLR */
    volatile uint32_t  FPGA2SDRAM2_FORCE_DRAIN_CLR :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_FPGA2SDRAM2_FORCE_DRAIN_CLR */
    uint32_t                                       : 23;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0 register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0 register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_OFST        0x54

/*
 * Register : fpga2sdram_manager_main_SidebandManager_FlagOutStatus0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description                                                                                                        
 * :-------|:-------|:--------|:--------------------------------------------------------------------------------------------------------------------
 *  [0]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS    
 *  [1]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS     
 *  [2]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS
 *  [3]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS    
 *  [4]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS     
 *  [5]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS
 *  [6]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS    
 *  [7]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS     
 *  [8]    | R      | 0x0     | ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS
 *  [31:9] | ???    | Unknown | *UNDEFINED*                                                                                                        
 * 
 */
/*
 * Field : FPGA2SDRAM0_IDLEREQ_STATUS
 * 
 * FlagOut Status register #0.FPGA2SDRAM0_IDLEREQ_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_MSB        0
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_SET_MSK    0x00000001
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : FPGA2SDRAM0_ENABLE_STATUS
 * 
 * FlagOut Status register #1.FPGA2SDRAM0_ENABLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_MSB        1
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_SET_MSK    0x00000002
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : FPGA2SDRAM0_FORCE_DRAIN_STATUS
 * 
 * FlagOut Status register #2.FPGA2SDRAM0_FORCE_DRAIN_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_MSB        2
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_SET_MSK    0x00000004
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_CLR_MSK    0xfffffffb
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : FPGA2SDRAM1_IDLEREQ_STATUS
 * 
 * FlagOut Status register #3.FPGA2SDRAM1_IDLEREQ_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_MSB        3
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_SET_MSK    0x00000008
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : FPGA2SDRAM1_ENABLE_STATUS
 * 
 * FlagOut Status register #4.FPGA2SDRAM1_ENABLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_MSB        4
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_SET_MSK    0x00000010
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_CLR_MSK    0xffffffef
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : FPGA2SDRAM1_FORCE_DRAIN_STATUS
 * 
 * FlagOut Status register #5.FPGA2SDRAM1_FORCE_DRAIN_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_MSB        5
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_SET_MSK    0x00000020
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_CLR_MSK    0xffffffdf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : FPGA2SDRAM2_IDLEREQ_STATUS
 * 
 * FlagOut Status register #6.FPGA2SDRAM2_IDLEREQ_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_MSB        6
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_SET_MSK    0x00000040
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_CLR_MSK    0xffffffbf
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : FPGA2SDRAM2_ENABLE_STATUS
 * 
 * FlagOut Status register #7.FPGA2SDRAM2_ENABLE_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_MSB        7
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_SET_MSK    0x00000080
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : FPGA2SDRAM2_FORCE_DRAIN_STATUS
 * 
 * FlagOut Status register #8.FPGA2SDRAM2_FORCE_DRAIN_STATUS
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_MSB        8
/* The width in bits of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_WIDTH      1
/* The mask used to set the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_SET_MSK    0x00000100
/* The mask used to clear the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS register field value. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_CLR_MSK    0xfffffeff
/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS register field. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_RESET      0x0
/* Extracts the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS field value from a register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS register field value suitable for setting the register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS_SET(value) (((value) << 8) & 0x00000100)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_s
{
    const volatile uint32_t  FPGA2SDRAM0_IDLEREQ_STATUS     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_IDLEREQ_STATUS */
    const volatile uint32_t  FPGA2SDRAM0_ENABLE_STATUS      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_ENABLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM0_FORCE_DRAIN_STATUS :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM0_FORCE_DRAIN_STATUS */
    const volatile uint32_t  FPGA2SDRAM1_IDLEREQ_STATUS     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_IDLEREQ_STATUS */
    const volatile uint32_t  FPGA2SDRAM1_ENABLE_STATUS      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_ENABLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM1_FORCE_DRAIN_STATUS :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM1_FORCE_DRAIN_STATUS */
    const volatile uint32_t  FPGA2SDRAM2_IDLEREQ_STATUS     :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_IDLEREQ_STATUS */
    const volatile uint32_t  FPGA2SDRAM2_ENABLE_STATUS      :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_ENABLE_STATUS */
    const volatile uint32_t  FPGA2SDRAM2_FORCE_DRAIN_STATUS :  1;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_FPGA2SDRAM2_FORCE_DRAIN_STATUS */
    uint32_t                                                : 23;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0 register. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_RESET       0x00000000
/* The byte offset of the ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0 register from the beginning of the component. */
#define ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_OFST        0x58

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_MPFE_F2SDR_MGR_MAIN_SBMGR.
 */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_s
{
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID_t       fpga2sdram_manager_main_SidebandManager_Id_CoreId;       /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID_t   fpga2sdram_manager_main_SidebandManager_Id_RevisionId;   /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN_t         fpga2sdram_manager_main_SidebandManager_FaultEn;         /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS_t     fpga2sdram_manager_main_SidebandManager_FaultStatus;     /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0_t       fpga2sdram_manager_main_SidebandManager_FlagInEn0;       /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0 */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0_t   fpga2sdram_manager_main_SidebandManager_FlagInStatus0;   /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0 */
    volatile uint32_t                                                                                _pad_0x18_0x4f[14];                                      /* *UNDEFINED* */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0_t     fpga2sdram_manager_main_SidebandManager_FlagOutSet0;     /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0 */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0_t     fpga2sdram_manager_main_SidebandManager_FlagOutClr0;     /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0 */
    volatile ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0_t  fpga2sdram_manager_main_SidebandManager_FlagOutStatus0;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0 */
    volatile uint32_t                                                                                _pad_0x5c_0x100[41];                                     /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_MPFE_F2SDR_MGR_MAIN_SBMGR. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_t;
/* The struct declaration for the raw register contents of register group ALT_MPFE_F2SDR_MGR_MAIN_SBMGR. */
struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_raw_s
{
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_Id_CoreId;       /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_COREID */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_Id_RevisionId;   /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_ID_REVISIONID */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_FaultEn;         /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTEN */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_FaultStatus;     /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FAULTSTATUS */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_FlagInEn0;       /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINEN0 */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_FlagInStatus0;   /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGINSTATUS0 */
    volatile uint32_t  _pad_0x18_0x4f[14];                                      /* *UNDEFINED* */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_FlagOutSet0;     /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSET0 */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_FlagOutClr0;     /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTCLR0 */
    volatile uint32_t  fpga2sdram_manager_main_SidebandManager_FlagOutStatus0;  /* ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_FPGA2SDRAM_MANAGER_MAIN_SIDEBANDMANAGER_FLAGOUTSTATUS0 */
    volatile uint32_t  _pad_0x5c_0x100[41];                                     /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_MPFE_F2SDR_MGR_MAIN_SBMGR. */
typedef struct ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_raw_s  ALT_MPFE_F2SDR_MGR_MAIN_SBMGR_raw_t;
#endif  /* __ASSEMBLY__ */


#ifdef __cplusplus
}
#endif  /* __cplusplus */
#endif  /* __ALT_SOCAL_MPFE_H__ */

