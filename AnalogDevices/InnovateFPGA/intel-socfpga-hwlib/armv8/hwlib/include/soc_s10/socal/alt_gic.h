/***********************************************************************************
*                                                                                  *
* Copyright 2013-2015 Altera Corporation. All Rights Reserved.                     *
*                                                                                  *
* Redistribution and use in source and binary forms, with or without               *
* modification, are permitted provided that the following conditions are met:      *
*                                                                                  *
* 1. Redistributions of source code must retain the above copyright notice,        *
*    this list of conditions and the following disclaimer.                         *
*                                                                                  *
* 2. Redistributions in binary form must reproduce the above copyright notice,     *
*    this list of conditions and the following disclaimer in the documentation     *
*    and/or other materials provided with the distribution.                        *
*                                                                                  *
* 3. Neither the name of the copyright holder nor the names of its contributors    *
*    may be used to endorse or promote products derived from this software without *
*    specific prior written permission.                                            *
*                                                                                  *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"      *
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE        *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE       *
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE        *
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR              *
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF             *
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS         *
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN          *
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)          *
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                      *
*                                                                                  *
***********************************************************************************/

/* Altera - ALT_GIC_DIST */

#ifndef __ALT_SOCAL_GIC_H__
#define __ALT_SOCAL_GIC_H__

#ifndef __ASSEMBLY__
#ifdef __cplusplus
#include <cstdint>
extern "C"
{
#else   /* __cplusplus */
#include <stdint.h>
#endif  /* __cplusplus */
#endif  /* __ASSEMBLY__ */

/*
 * Component : Distributor memory map - GIC_DIST
 * Distributor memory map
 * 
 * Memory map for the GIC Distributor block. Contains all registers with the GICD
 * prefix. Note: Some registers are security-banked or banked per-CPU.
 * 
 */
/*
 * Register : GICD_CTLR
 * 
 * Distributor Control Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CTLR_FLD register field. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CTLR_FLD register field. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CTLR_FLD register field. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CTLR_FLD register field value. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CTLR_FLD register field value. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CTLR_FLD register field. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_CTLR_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CTLR_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CTLR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CTLR.
 */
struct ALT_GIC_DIST_GICD_CTLR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CTLR. */
typedef struct ALT_GIC_DIST_GICD_CTLR_s  ALT_GIC_DIST_GICD_CTLR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CTLR register. */
#define ALT_GIC_DIST_GICD_CTLR_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_CTLR register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CTLR_OFST        0x0

/*
 * Register : GICD_TYPER
 * 
 * Interrupt Controller Type Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_TYPER_FLD register field. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_TYPER_FLD register field. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_TYPER_FLD register field. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_TYPER_FLD register field value. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_TYPER_FLD register field value. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_TYPER_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_TYPER_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_TYPER_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_TYPER_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_TYPER.
 */
struct ALT_GIC_DIST_GICD_TYPER_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_TYPER. */
typedef struct ALT_GIC_DIST_GICD_TYPER_s  ALT_GIC_DIST_GICD_TYPER_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_TYPER register. */
#define ALT_GIC_DIST_GICD_TYPER_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_TYPER register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_TYPER_OFST        0x4

/*
 * Register : GICD_IIDR
 * 
 * Distributor Implementer Identification Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset     | Description
 * :-------|:-------|:----------|:------------
 *  [31:0] | RW     | 0x200143b | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IIDR_FLD register field. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IIDR_FLD register field. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IIDR_FLD register field. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IIDR_FLD register field value. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IIDR_FLD register field value. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IIDR_FLD register field. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_RESET      0x200143b
/* Extracts the ALT_GIC_DIST_GICD_IIDR_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IIDR_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IIDR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IIDR.
 */
struct ALT_GIC_DIST_GICD_IIDR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IIDR. */
typedef struct ALT_GIC_DIST_GICD_IIDR_s  ALT_GIC_DIST_GICD_IIDR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IIDR register. */
#define ALT_GIC_DIST_GICD_IIDR_RESET       0x0200143b
/* The byte offset of the ALT_GIC_DIST_GICD_IIDR register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IIDR_OFST        0x8

/*
 * Register : GICD_IGROUPR0
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR0.
 */
struct ALT_GIC_DIST_GICD_IGROUPR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR0. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR0_s  ALT_GIC_DIST_GICD_IGROUPR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR0 register. */
#define ALT_GIC_DIST_GICD_IGROUPR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR0_OFST        0x80

/*
 * Register : GICD_IGROUPR1
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR1.
 */
struct ALT_GIC_DIST_GICD_IGROUPR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR1. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR1_s  ALT_GIC_DIST_GICD_IGROUPR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR1 register. */
#define ALT_GIC_DIST_GICD_IGROUPR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR1_OFST        0x84

/*
 * Register : GICD_IGROUPR2
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR2.
 */
struct ALT_GIC_DIST_GICD_IGROUPR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR2. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR2_s  ALT_GIC_DIST_GICD_IGROUPR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR2 register. */
#define ALT_GIC_DIST_GICD_IGROUPR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR2_OFST        0x88

/*
 * Register : GICD_IGROUPR3
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR3.
 */
struct ALT_GIC_DIST_GICD_IGROUPR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR3. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR3_s  ALT_GIC_DIST_GICD_IGROUPR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR3 register. */
#define ALT_GIC_DIST_GICD_IGROUPR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR3_OFST        0x8c

/*
 * Register : GICD_IGROUPR4
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR4.
 */
struct ALT_GIC_DIST_GICD_IGROUPR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR4. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR4_s  ALT_GIC_DIST_GICD_IGROUPR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR4 register. */
#define ALT_GIC_DIST_GICD_IGROUPR4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR4_OFST        0x90

/*
 * Register : GICD_IGROUPR5
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR5.
 */
struct ALT_GIC_DIST_GICD_IGROUPR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR5. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR5_s  ALT_GIC_DIST_GICD_IGROUPR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR5 register. */
#define ALT_GIC_DIST_GICD_IGROUPR5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR5_OFST        0x94

/*
 * Register : GICD_IGROUPR6
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR6.
 */
struct ALT_GIC_DIST_GICD_IGROUPR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR6. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR6_s  ALT_GIC_DIST_GICD_IGROUPR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR6 register. */
#define ALT_GIC_DIST_GICD_IGROUPR6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR6_OFST        0x98

/*
 * Register : GICD_IGROUPR7
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR7.
 */
struct ALT_GIC_DIST_GICD_IGROUPR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR7. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR7_s  ALT_GIC_DIST_GICD_IGROUPR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR7 register. */
#define ALT_GIC_DIST_GICD_IGROUPR7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR7_OFST        0x9c

/*
 * Register : GICD_IGROUPR8
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR8.
 */
struct ALT_GIC_DIST_GICD_IGROUPR8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR8. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR8_s  ALT_GIC_DIST_GICD_IGROUPR8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR8 register. */
#define ALT_GIC_DIST_GICD_IGROUPR8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR8_OFST        0xa0

/*
 * Register : GICD_IGROUPR9
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR9.
 */
struct ALT_GIC_DIST_GICD_IGROUPR9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR9. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR9_s  ALT_GIC_DIST_GICD_IGROUPR9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR9 register. */
#define ALT_GIC_DIST_GICD_IGROUPR9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR9_OFST        0xa4

/*
 * Register : GICD_IGROUPR10
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR10.
 */
struct ALT_GIC_DIST_GICD_IGROUPR10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR10. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR10_s  ALT_GIC_DIST_GICD_IGROUPR10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR10 register. */
#define ALT_GIC_DIST_GICD_IGROUPR10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR10_OFST        0xa8

/*
 * Register : GICD_IGROUPR11
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR11.
 */
struct ALT_GIC_DIST_GICD_IGROUPR11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR11. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR11_s  ALT_GIC_DIST_GICD_IGROUPR11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR11 register. */
#define ALT_GIC_DIST_GICD_IGROUPR11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR11_OFST        0xac

/*
 * Register : GICD_IGROUPR12
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR12.
 */
struct ALT_GIC_DIST_GICD_IGROUPR12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR12. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR12_s  ALT_GIC_DIST_GICD_IGROUPR12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR12 register. */
#define ALT_GIC_DIST_GICD_IGROUPR12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR12_OFST        0xb0

/*
 * Register : GICD_IGROUPR13
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR13.
 */
struct ALT_GIC_DIST_GICD_IGROUPR13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR13. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR13_s  ALT_GIC_DIST_GICD_IGROUPR13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR13 register. */
#define ALT_GIC_DIST_GICD_IGROUPR13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR13_OFST        0xb4

/*
 * Register : GICD_IGROUPR14
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR14.
 */
struct ALT_GIC_DIST_GICD_IGROUPR14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR14. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR14_s  ALT_GIC_DIST_GICD_IGROUPR14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR14 register. */
#define ALT_GIC_DIST_GICD_IGROUPR14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR14_OFST        0xb8

/*
 * Register : GICD_IGROUPR15
 * 
 * Interrupt Group Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IGROUPR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IGROUPR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IGROUPR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IGROUPR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IGROUPR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IGROUPR15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IGROUPR15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IGROUPR15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IGROUPR15.
 */
struct ALT_GIC_DIST_GICD_IGROUPR15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IGROUPR15. */
typedef struct ALT_GIC_DIST_GICD_IGROUPR15_s  ALT_GIC_DIST_GICD_IGROUPR15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IGROUPR15 register. */
#define ALT_GIC_DIST_GICD_IGROUPR15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IGROUPR15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IGROUPR15_OFST        0xbc

/*
 * Register : GICD_ISENABLER0
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER0_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER0.
 */
struct ALT_GIC_DIST_GICD_ISENABLER0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER0. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER0_s  ALT_GIC_DIST_GICD_ISENABLER0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER0 register. */
#define ALT_GIC_DIST_GICD_ISENABLER0_RESET       0x0000ffff
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER0_OFST        0x100

/*
 * Register : GICD_ISENABLER1
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER1.
 */
struct ALT_GIC_DIST_GICD_ISENABLER1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER1. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER1_s  ALT_GIC_DIST_GICD_ISENABLER1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER1 register. */
#define ALT_GIC_DIST_GICD_ISENABLER1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER1_OFST        0x104

/*
 * Register : GICD_ISENABLER2
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER2.
 */
struct ALT_GIC_DIST_GICD_ISENABLER2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER2. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER2_s  ALT_GIC_DIST_GICD_ISENABLER2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER2 register. */
#define ALT_GIC_DIST_GICD_ISENABLER2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER2_OFST        0x108

/*
 * Register : GICD_ISENABLER3
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER3.
 */
struct ALT_GIC_DIST_GICD_ISENABLER3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER3. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER3_s  ALT_GIC_DIST_GICD_ISENABLER3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER3 register. */
#define ALT_GIC_DIST_GICD_ISENABLER3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER3_OFST        0x10c

/*
 * Register : GICD_ISENABLER4
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER4.
 */
struct ALT_GIC_DIST_GICD_ISENABLER4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER4. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER4_s  ALT_GIC_DIST_GICD_ISENABLER4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER4 register. */
#define ALT_GIC_DIST_GICD_ISENABLER4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER4_OFST        0x110

/*
 * Register : GICD_ISENABLER5
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER5.
 */
struct ALT_GIC_DIST_GICD_ISENABLER5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER5. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER5_s  ALT_GIC_DIST_GICD_ISENABLER5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER5 register. */
#define ALT_GIC_DIST_GICD_ISENABLER5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER5_OFST        0x114

/*
 * Register : GICD_ISENABLER6
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER6.
 */
struct ALT_GIC_DIST_GICD_ISENABLER6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER6. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER6_s  ALT_GIC_DIST_GICD_ISENABLER6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER6 register. */
#define ALT_GIC_DIST_GICD_ISENABLER6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER6_OFST        0x118

/*
 * Register : GICD_ISENABLER7
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER7.
 */
struct ALT_GIC_DIST_GICD_ISENABLER7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER7. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER7_s  ALT_GIC_DIST_GICD_ISENABLER7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER7 register. */
#define ALT_GIC_DIST_GICD_ISENABLER7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER7_OFST        0x11c

/*
 * Register : GICD_ISENABLER8
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER8.
 */
struct ALT_GIC_DIST_GICD_ISENABLER8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER8. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER8_s  ALT_GIC_DIST_GICD_ISENABLER8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER8 register. */
#define ALT_GIC_DIST_GICD_ISENABLER8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER8_OFST        0x120

/*
 * Register : GICD_ISENABLER9
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER9.
 */
struct ALT_GIC_DIST_GICD_ISENABLER9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER9. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER9_s  ALT_GIC_DIST_GICD_ISENABLER9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER9 register. */
#define ALT_GIC_DIST_GICD_ISENABLER9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER9_OFST        0x124

/*
 * Register : GICD_ISENABLER10
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER10.
 */
struct ALT_GIC_DIST_GICD_ISENABLER10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER10. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER10_s  ALT_GIC_DIST_GICD_ISENABLER10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER10 register. */
#define ALT_GIC_DIST_GICD_ISENABLER10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER10_OFST        0x128

/*
 * Register : GICD_ISENABLER11
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER11.
 */
struct ALT_GIC_DIST_GICD_ISENABLER11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER11. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER11_s  ALT_GIC_DIST_GICD_ISENABLER11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER11 register. */
#define ALT_GIC_DIST_GICD_ISENABLER11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER11_OFST        0x12c

/*
 * Register : GICD_ISENABLER12
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER12.
 */
struct ALT_GIC_DIST_GICD_ISENABLER12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER12. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER12_s  ALT_GIC_DIST_GICD_ISENABLER12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER12 register. */
#define ALT_GIC_DIST_GICD_ISENABLER12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER12_OFST        0x130

/*
 * Register : GICD_ISENABLER13
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER13.
 */
struct ALT_GIC_DIST_GICD_ISENABLER13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER13. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER13_s  ALT_GIC_DIST_GICD_ISENABLER13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER13 register. */
#define ALT_GIC_DIST_GICD_ISENABLER13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER13_OFST        0x134

/*
 * Register : GICD_ISENABLER14
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER14.
 */
struct ALT_GIC_DIST_GICD_ISENABLER14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER14. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER14_s  ALT_GIC_DIST_GICD_ISENABLER14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER14 register. */
#define ALT_GIC_DIST_GICD_ISENABLER14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER14_OFST        0x138

/*
 * Register : GICD_ISENABLER15
 * 
 * Interrupt Set-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISENABLER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISENABLER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISENABLER15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISENABLER15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISENABLER15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISENABLER15.
 */
struct ALT_GIC_DIST_GICD_ISENABLER15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISENABLER15. */
typedef struct ALT_GIC_DIST_GICD_ISENABLER15_s  ALT_GIC_DIST_GICD_ISENABLER15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISENABLER15 register. */
#define ALT_GIC_DIST_GICD_ISENABLER15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISENABLER15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISENABLER15_OFST        0x13c

/*
 * Register : GICD_ICENABLER0
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER0_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER0.
 */
struct ALT_GIC_DIST_GICD_ICENABLER0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER0. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER0_s  ALT_GIC_DIST_GICD_ICENABLER0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER0 register. */
#define ALT_GIC_DIST_GICD_ICENABLER0_RESET       0x0000ffff
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER0_OFST        0x180

/*
 * Register : GICD_ICENABLER1
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER1.
 */
struct ALT_GIC_DIST_GICD_ICENABLER1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER1. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER1_s  ALT_GIC_DIST_GICD_ICENABLER1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER1 register. */
#define ALT_GIC_DIST_GICD_ICENABLER1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER1_OFST        0x184

/*
 * Register : GICD_ICENABLER2
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER2.
 */
struct ALT_GIC_DIST_GICD_ICENABLER2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER2. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER2_s  ALT_GIC_DIST_GICD_ICENABLER2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER2 register. */
#define ALT_GIC_DIST_GICD_ICENABLER2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER2_OFST        0x188

/*
 * Register : GICD_ICENABLER3
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER3.
 */
struct ALT_GIC_DIST_GICD_ICENABLER3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER3. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER3_s  ALT_GIC_DIST_GICD_ICENABLER3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER3 register. */
#define ALT_GIC_DIST_GICD_ICENABLER3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER3_OFST        0x18c

/*
 * Register : GICD_ICENABLER4
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER4.
 */
struct ALT_GIC_DIST_GICD_ICENABLER4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER4. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER4_s  ALT_GIC_DIST_GICD_ICENABLER4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER4 register. */
#define ALT_GIC_DIST_GICD_ICENABLER4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER4_OFST        0x190

/*
 * Register : GICD_ICENABLER5
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER5.
 */
struct ALT_GIC_DIST_GICD_ICENABLER5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER5. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER5_s  ALT_GIC_DIST_GICD_ICENABLER5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER5 register. */
#define ALT_GIC_DIST_GICD_ICENABLER5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER5_OFST        0x194

/*
 * Register : GICD_ICENABLER6
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER6.
 */
struct ALT_GIC_DIST_GICD_ICENABLER6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER6. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER6_s  ALT_GIC_DIST_GICD_ICENABLER6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER6 register. */
#define ALT_GIC_DIST_GICD_ICENABLER6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER6_OFST        0x198

/*
 * Register : GICD_ICENABLER7
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER7.
 */
struct ALT_GIC_DIST_GICD_ICENABLER7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER7. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER7_s  ALT_GIC_DIST_GICD_ICENABLER7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER7 register. */
#define ALT_GIC_DIST_GICD_ICENABLER7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER7_OFST        0x19c

/*
 * Register : GICD_ICENABLER8
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER8.
 */
struct ALT_GIC_DIST_GICD_ICENABLER8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER8. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER8_s  ALT_GIC_DIST_GICD_ICENABLER8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER8 register. */
#define ALT_GIC_DIST_GICD_ICENABLER8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER8_OFST        0x1a0

/*
 * Register : GICD_ICENABLER9
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER9.
 */
struct ALT_GIC_DIST_GICD_ICENABLER9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER9. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER9_s  ALT_GIC_DIST_GICD_ICENABLER9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER9 register. */
#define ALT_GIC_DIST_GICD_ICENABLER9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER9_OFST        0x1a4

/*
 * Register : GICD_ICENABLER10
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER10.
 */
struct ALT_GIC_DIST_GICD_ICENABLER10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER10. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER10_s  ALT_GIC_DIST_GICD_ICENABLER10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER10 register. */
#define ALT_GIC_DIST_GICD_ICENABLER10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER10_OFST        0x1a8

/*
 * Register : GICD_ICENABLER11
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER11.
 */
struct ALT_GIC_DIST_GICD_ICENABLER11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER11. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER11_s  ALT_GIC_DIST_GICD_ICENABLER11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER11 register. */
#define ALT_GIC_DIST_GICD_ICENABLER11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER11_OFST        0x1ac

/*
 * Register : GICD_ICENABLER12
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER12.
 */
struct ALT_GIC_DIST_GICD_ICENABLER12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER12. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER12_s  ALT_GIC_DIST_GICD_ICENABLER12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER12 register. */
#define ALT_GIC_DIST_GICD_ICENABLER12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER12_OFST        0x1b0

/*
 * Register : GICD_ICENABLER13
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER13.
 */
struct ALT_GIC_DIST_GICD_ICENABLER13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER13. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER13_s  ALT_GIC_DIST_GICD_ICENABLER13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER13 register. */
#define ALT_GIC_DIST_GICD_ICENABLER13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER13_OFST        0x1b4

/*
 * Register : GICD_ICENABLER14
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER14.
 */
struct ALT_GIC_DIST_GICD_ICENABLER14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER14. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER14_s  ALT_GIC_DIST_GICD_ICENABLER14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER14 register. */
#define ALT_GIC_DIST_GICD_ICENABLER14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER14_OFST        0x1b8

/*
 * Register : GICD_ICENABLER15
 * 
 * Interrupt Clear-Enable Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICENABLER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICENABLER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICENABLER15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICENABLER15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICENABLER15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICENABLER15.
 */
struct ALT_GIC_DIST_GICD_ICENABLER15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICENABLER15. */
typedef struct ALT_GIC_DIST_GICD_ICENABLER15_s  ALT_GIC_DIST_GICD_ICENABLER15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICENABLER15 register. */
#define ALT_GIC_DIST_GICD_ICENABLER15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICENABLER15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICENABLER15_OFST        0x1bc

/*
 * Register : GICD_ISPENDR0
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR0.
 */
struct ALT_GIC_DIST_GICD_ISPENDR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR0. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR0_s  ALT_GIC_DIST_GICD_ISPENDR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR0 register. */
#define ALT_GIC_DIST_GICD_ISPENDR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR0_OFST        0x200

/*
 * Register : GICD_ISPENDR1
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR1.
 */
struct ALT_GIC_DIST_GICD_ISPENDR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR1. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR1_s  ALT_GIC_DIST_GICD_ISPENDR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR1 register. */
#define ALT_GIC_DIST_GICD_ISPENDR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR1_OFST        0x204

/*
 * Register : GICD_ISPENDR2
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR2.
 */
struct ALT_GIC_DIST_GICD_ISPENDR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR2. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR2_s  ALT_GIC_DIST_GICD_ISPENDR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR2 register. */
#define ALT_GIC_DIST_GICD_ISPENDR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR2_OFST        0x208

/*
 * Register : GICD_ISPENDR3
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR3.
 */
struct ALT_GIC_DIST_GICD_ISPENDR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR3. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR3_s  ALT_GIC_DIST_GICD_ISPENDR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR3 register. */
#define ALT_GIC_DIST_GICD_ISPENDR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR3_OFST        0x20c

/*
 * Register : GICD_ISPENDR4
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR4.
 */
struct ALT_GIC_DIST_GICD_ISPENDR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR4. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR4_s  ALT_GIC_DIST_GICD_ISPENDR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR4 register. */
#define ALT_GIC_DIST_GICD_ISPENDR4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR4_OFST        0x210

/*
 * Register : GICD_ISPENDR5
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR5.
 */
struct ALT_GIC_DIST_GICD_ISPENDR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR5. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR5_s  ALT_GIC_DIST_GICD_ISPENDR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR5 register. */
#define ALT_GIC_DIST_GICD_ISPENDR5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR5_OFST        0x214

/*
 * Register : GICD_ISPENDR6
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR6.
 */
struct ALT_GIC_DIST_GICD_ISPENDR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR6. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR6_s  ALT_GIC_DIST_GICD_ISPENDR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR6 register. */
#define ALT_GIC_DIST_GICD_ISPENDR6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR6_OFST        0x218

/*
 * Register : GICD_ISPENDR7
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR7.
 */
struct ALT_GIC_DIST_GICD_ISPENDR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR7. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR7_s  ALT_GIC_DIST_GICD_ISPENDR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR7 register. */
#define ALT_GIC_DIST_GICD_ISPENDR7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR7_OFST        0x21c

/*
 * Register : GICD_ISPENDR8
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR8.
 */
struct ALT_GIC_DIST_GICD_ISPENDR8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR8. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR8_s  ALT_GIC_DIST_GICD_ISPENDR8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR8 register. */
#define ALT_GIC_DIST_GICD_ISPENDR8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR8_OFST        0x220

/*
 * Register : GICD_ISPENDR9
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR9.
 */
struct ALT_GIC_DIST_GICD_ISPENDR9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR9. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR9_s  ALT_GIC_DIST_GICD_ISPENDR9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR9 register. */
#define ALT_GIC_DIST_GICD_ISPENDR9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR9_OFST        0x224

/*
 * Register : GICD_ISPENDR10
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR10.
 */
struct ALT_GIC_DIST_GICD_ISPENDR10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR10. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR10_s  ALT_GIC_DIST_GICD_ISPENDR10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR10 register. */
#define ALT_GIC_DIST_GICD_ISPENDR10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR10_OFST        0x228

/*
 * Register : GICD_ISPENDR11
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR11.
 */
struct ALT_GIC_DIST_GICD_ISPENDR11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR11. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR11_s  ALT_GIC_DIST_GICD_ISPENDR11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR11 register. */
#define ALT_GIC_DIST_GICD_ISPENDR11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR11_OFST        0x22c

/*
 * Register : GICD_ISPENDR12
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR12.
 */
struct ALT_GIC_DIST_GICD_ISPENDR12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR12. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR12_s  ALT_GIC_DIST_GICD_ISPENDR12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR12 register. */
#define ALT_GIC_DIST_GICD_ISPENDR12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR12_OFST        0x230

/*
 * Register : GICD_ISPENDR13
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR13.
 */
struct ALT_GIC_DIST_GICD_ISPENDR13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR13. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR13_s  ALT_GIC_DIST_GICD_ISPENDR13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR13 register. */
#define ALT_GIC_DIST_GICD_ISPENDR13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR13_OFST        0x234

/*
 * Register : GICD_ISPENDR14
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR14.
 */
struct ALT_GIC_DIST_GICD_ISPENDR14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR14. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR14_s  ALT_GIC_DIST_GICD_ISPENDR14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR14 register. */
#define ALT_GIC_DIST_GICD_ISPENDR14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR14_OFST        0x238

/*
 * Register : GICD_ISPENDR15
 * 
 * Interrupt Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISPENDR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISPENDR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISPENDR15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISPENDR15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISPENDR15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISPENDR15.
 */
struct ALT_GIC_DIST_GICD_ISPENDR15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISPENDR15. */
typedef struct ALT_GIC_DIST_GICD_ISPENDR15_s  ALT_GIC_DIST_GICD_ISPENDR15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISPENDR15 register. */
#define ALT_GIC_DIST_GICD_ISPENDR15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISPENDR15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISPENDR15_OFST        0x23c

/*
 * Register : GICD_ICPENDR0
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR0.
 */
struct ALT_GIC_DIST_GICD_ICPENDR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR0. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR0_s  ALT_GIC_DIST_GICD_ICPENDR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR0 register. */
#define ALT_GIC_DIST_GICD_ICPENDR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR0_OFST        0x280

/*
 * Register : GICD_ICPENDR1
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR1.
 */
struct ALT_GIC_DIST_GICD_ICPENDR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR1. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR1_s  ALT_GIC_DIST_GICD_ICPENDR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR1 register. */
#define ALT_GIC_DIST_GICD_ICPENDR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR1_OFST        0x284

/*
 * Register : GICD_ICPENDR2
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR2.
 */
struct ALT_GIC_DIST_GICD_ICPENDR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR2. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR2_s  ALT_GIC_DIST_GICD_ICPENDR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR2 register. */
#define ALT_GIC_DIST_GICD_ICPENDR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR2_OFST        0x288

/*
 * Register : GICD_ICPENDR3
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR3.
 */
struct ALT_GIC_DIST_GICD_ICPENDR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR3. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR3_s  ALT_GIC_DIST_GICD_ICPENDR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR3 register. */
#define ALT_GIC_DIST_GICD_ICPENDR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR3_OFST        0x28c

/*
 * Register : GICD_ICPENDR4
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR4.
 */
struct ALT_GIC_DIST_GICD_ICPENDR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR4. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR4_s  ALT_GIC_DIST_GICD_ICPENDR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR4 register. */
#define ALT_GIC_DIST_GICD_ICPENDR4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR4_OFST        0x290

/*
 * Register : GICD_ICPENDR5
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR5.
 */
struct ALT_GIC_DIST_GICD_ICPENDR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR5. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR5_s  ALT_GIC_DIST_GICD_ICPENDR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR5 register. */
#define ALT_GIC_DIST_GICD_ICPENDR5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR5_OFST        0x294

/*
 * Register : GICD_ICPENDR6
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR6.
 */
struct ALT_GIC_DIST_GICD_ICPENDR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR6. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR6_s  ALT_GIC_DIST_GICD_ICPENDR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR6 register. */
#define ALT_GIC_DIST_GICD_ICPENDR6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR6_OFST        0x298

/*
 * Register : GICD_ICPENDR7
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR7.
 */
struct ALT_GIC_DIST_GICD_ICPENDR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR7. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR7_s  ALT_GIC_DIST_GICD_ICPENDR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR7 register. */
#define ALT_GIC_DIST_GICD_ICPENDR7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR7_OFST        0x29c

/*
 * Register : GICD_ICPENDR8
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR8.
 */
struct ALT_GIC_DIST_GICD_ICPENDR8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR8. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR8_s  ALT_GIC_DIST_GICD_ICPENDR8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR8 register. */
#define ALT_GIC_DIST_GICD_ICPENDR8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR8_OFST        0x2a0

/*
 * Register : GICD_ICPENDR9
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR9.
 */
struct ALT_GIC_DIST_GICD_ICPENDR9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR9. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR9_s  ALT_GIC_DIST_GICD_ICPENDR9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR9 register. */
#define ALT_GIC_DIST_GICD_ICPENDR9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR9_OFST        0x2a4

/*
 * Register : GICD_ICPENDR10
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR10.
 */
struct ALT_GIC_DIST_GICD_ICPENDR10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR10. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR10_s  ALT_GIC_DIST_GICD_ICPENDR10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR10 register. */
#define ALT_GIC_DIST_GICD_ICPENDR10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR10_OFST        0x2a8

/*
 * Register : GICD_ICPENDR11
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR11.
 */
struct ALT_GIC_DIST_GICD_ICPENDR11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR11. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR11_s  ALT_GIC_DIST_GICD_ICPENDR11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR11 register. */
#define ALT_GIC_DIST_GICD_ICPENDR11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR11_OFST        0x2ac

/*
 * Register : GICD_ICPENDR12
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR12.
 */
struct ALT_GIC_DIST_GICD_ICPENDR12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR12. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR12_s  ALT_GIC_DIST_GICD_ICPENDR12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR12 register. */
#define ALT_GIC_DIST_GICD_ICPENDR12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR12_OFST        0x2b0

/*
 * Register : GICD_ICPENDR13
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR13.
 */
struct ALT_GIC_DIST_GICD_ICPENDR13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR13. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR13_s  ALT_GIC_DIST_GICD_ICPENDR13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR13 register. */
#define ALT_GIC_DIST_GICD_ICPENDR13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR13_OFST        0x2b4

/*
 * Register : GICD_ICPENDR14
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR14.
 */
struct ALT_GIC_DIST_GICD_ICPENDR14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR14. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR14_s  ALT_GIC_DIST_GICD_ICPENDR14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR14 register. */
#define ALT_GIC_DIST_GICD_ICPENDR14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR14_OFST        0x2b8

/*
 * Register : GICD_ICPENDR15
 * 
 * Interrupt Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICPENDR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICPENDR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICPENDR15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICPENDR15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICPENDR15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICPENDR15.
 */
struct ALT_GIC_DIST_GICD_ICPENDR15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICPENDR15. */
typedef struct ALT_GIC_DIST_GICD_ICPENDR15_s  ALT_GIC_DIST_GICD_ICPENDR15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICPENDR15 register. */
#define ALT_GIC_DIST_GICD_ICPENDR15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICPENDR15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICPENDR15_OFST        0x2bc

/*
 * Register : GICD_ISACTIVER0
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER0.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER0. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER0_s  ALT_GIC_DIST_GICD_ISACTIVER0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER0 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER0_OFST        0x300

/*
 * Register : GICD_ISACTIVER1
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER1.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER1. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER1_s  ALT_GIC_DIST_GICD_ISACTIVER1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER1 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER1_OFST        0x304

/*
 * Register : GICD_ISACTIVER2
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER2.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER2. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER2_s  ALT_GIC_DIST_GICD_ISACTIVER2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER2 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER2_OFST        0x308

/*
 * Register : GICD_ISACTIVER3
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER3.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER3. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER3_s  ALT_GIC_DIST_GICD_ISACTIVER3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER3 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER3_OFST        0x30c

/*
 * Register : GICD_ISACTIVER4
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER4.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER4. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER4_s  ALT_GIC_DIST_GICD_ISACTIVER4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER4 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER4_OFST        0x310

/*
 * Register : GICD_ISACTIVER5
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER5.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER5. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER5_s  ALT_GIC_DIST_GICD_ISACTIVER5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER5 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER5_OFST        0x314

/*
 * Register : GICD_ISACTIVER6
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER6.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER6. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER6_s  ALT_GIC_DIST_GICD_ISACTIVER6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER6 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER6_OFST        0x318

/*
 * Register : GICD_ISACTIVER7
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER7.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER7. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER7_s  ALT_GIC_DIST_GICD_ISACTIVER7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER7 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER7_OFST        0x31c

/*
 * Register : GICD_ISACTIVER8
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER8.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER8. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER8_s  ALT_GIC_DIST_GICD_ISACTIVER8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER8 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER8_OFST        0x320

/*
 * Register : GICD_ISACTIVER9
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER9.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER9. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER9_s  ALT_GIC_DIST_GICD_ISACTIVER9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER9 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER9_OFST        0x324

/*
 * Register : GICD_ISACTIVER10
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER10.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER10. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER10_s  ALT_GIC_DIST_GICD_ISACTIVER10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER10 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER10_OFST        0x328

/*
 * Register : GICD_ISACTIVER11
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER11.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER11. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER11_s  ALT_GIC_DIST_GICD_ISACTIVER11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER11 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER11_OFST        0x32c

/*
 * Register : GICD_ISACTIVER12
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER12.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER12. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER12_s  ALT_GIC_DIST_GICD_ISACTIVER12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER12 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER12_OFST        0x330

/*
 * Register : GICD_ISACTIVER13
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER13.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER13. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER13_s  ALT_GIC_DIST_GICD_ISACTIVER13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER13 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER13_OFST        0x334

/*
 * Register : GICD_ISACTIVER14
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER14.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER14. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER14_s  ALT_GIC_DIST_GICD_ISACTIVER14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER14 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER14_OFST        0x338

/*
 * Register : GICD_ISACTIVER15
 * 
 * Interrupt Set-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ISACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ISACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ISACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ISACTIVER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ISACTIVER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ISACTIVER15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ISACTIVER15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ISACTIVER15.
 */
struct ALT_GIC_DIST_GICD_ISACTIVER15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ISACTIVER15. */
typedef struct ALT_GIC_DIST_GICD_ISACTIVER15_s  ALT_GIC_DIST_GICD_ISACTIVER15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ISACTIVER15 register. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ISACTIVER15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ISACTIVER15_OFST        0x33c

/*
 * Register : GICD_ICACTIVER0
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER0.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER0. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER0_s  ALT_GIC_DIST_GICD_ICACTIVER0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER0 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER0_OFST        0x380

/*
 * Register : GICD_ICACTIVER1
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER1.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER1. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER1_s  ALT_GIC_DIST_GICD_ICACTIVER1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER1 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER1_OFST        0x384

/*
 * Register : GICD_ICACTIVER2
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER2.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER2. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER2_s  ALT_GIC_DIST_GICD_ICACTIVER2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER2 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER2_OFST        0x388

/*
 * Register : GICD_ICACTIVER3
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER3.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER3. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER3_s  ALT_GIC_DIST_GICD_ICACTIVER3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER3 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER3_OFST        0x38c

/*
 * Register : GICD_ICACTIVER4
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER4.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER4. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER4_s  ALT_GIC_DIST_GICD_ICACTIVER4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER4 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER4_OFST        0x390

/*
 * Register : GICD_ICACTIVER5
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER5.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER5. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER5_s  ALT_GIC_DIST_GICD_ICACTIVER5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER5 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER5_OFST        0x394

/*
 * Register : GICD_ICACTIVER6
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER6.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER6. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER6_s  ALT_GIC_DIST_GICD_ICACTIVER6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER6 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER6_OFST        0x398

/*
 * Register : GICD_ICACTIVER7
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER7.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER7. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER7_s  ALT_GIC_DIST_GICD_ICACTIVER7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER7 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER7_OFST        0x39c

/*
 * Register : GICD_ICACTIVER8
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER8.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER8. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER8_s  ALT_GIC_DIST_GICD_ICACTIVER8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER8 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER8_OFST        0x3a0

/*
 * Register : GICD_ICACTIVER9
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER9.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER9. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER9_s  ALT_GIC_DIST_GICD_ICACTIVER9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER9 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER9_OFST        0x3a4

/*
 * Register : GICD_ICACTIVER10
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER10.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER10. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER10_s  ALT_GIC_DIST_GICD_ICACTIVER10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER10 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER10_OFST        0x3a8

/*
 * Register : GICD_ICACTIVER11
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER11.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER11. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER11_s  ALT_GIC_DIST_GICD_ICACTIVER11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER11 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER11_OFST        0x3ac

/*
 * Register : GICD_ICACTIVER12
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER12.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER12. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER12_s  ALT_GIC_DIST_GICD_ICACTIVER12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER12 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER12_OFST        0x3b0

/*
 * Register : GICD_ICACTIVER13
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER13.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER13. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER13_s  ALT_GIC_DIST_GICD_ICACTIVER13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER13 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER13_OFST        0x3b4

/*
 * Register : GICD_ICACTIVER14
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER14.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER14. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER14_s  ALT_GIC_DIST_GICD_ICACTIVER14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER14 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER14_OFST        0x3b8

/*
 * Register : GICD_ICACTIVER15
 * 
 * Interrupt Clear-Active Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICACTIVER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICACTIVER15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICACTIVER15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICACTIVER15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICACTIVER15.
 */
struct ALT_GIC_DIST_GICD_ICACTIVER15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICACTIVER15. */
typedef struct ALT_GIC_DIST_GICD_ICACTIVER15_s  ALT_GIC_DIST_GICD_ICACTIVER15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICACTIVER15 register. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ICACTIVER15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICACTIVER15_OFST        0x3bc

/*
 * Register : GICD_IPRIORITYR0
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR0_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR0.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR0. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR0_s  ALT_GIC_DIST_GICD_IPRIORITYR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR0 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR0_OFST        0x400

/*
 * Register : GICD_IPRIORITYR1
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR1_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR1.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR1. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR1_s  ALT_GIC_DIST_GICD_IPRIORITYR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR1 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR1_OFST        0x404

/*
 * Register : GICD_IPRIORITYR2
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR2_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR2.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR2. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR2_s  ALT_GIC_DIST_GICD_IPRIORITYR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR2 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR2_OFST        0x408

/*
 * Register : GICD_IPRIORITYR3
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR3_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR3.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR3. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR3_s  ALT_GIC_DIST_GICD_IPRIORITYR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR3 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR3_OFST        0x40c

/*
 * Register : GICD_IPRIORITYR4
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR4_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR4.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR4. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR4_s  ALT_GIC_DIST_GICD_IPRIORITYR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR4 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR4_OFST        0x410

/*
 * Register : GICD_IPRIORITYR5
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR5_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR5.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR5. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR5_s  ALT_GIC_DIST_GICD_IPRIORITYR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR5 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR5_OFST        0x414

/*
 * Register : GICD_IPRIORITYR6
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR6_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR6.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR6. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR6_s  ALT_GIC_DIST_GICD_IPRIORITYR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR6 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR6_OFST        0x418

/*
 * Register : GICD_IPRIORITYR7
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR7_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR7.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR7. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR7_s  ALT_GIC_DIST_GICD_IPRIORITYR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR7 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR7_OFST        0x41c

/*
 * Register : GICD_IPRIORITYR8
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR8_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR8.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR8. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR8_s  ALT_GIC_DIST_GICD_IPRIORITYR8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR8 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR8_OFST        0x420

/*
 * Register : GICD_IPRIORITYR9
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR9_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR9.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR9. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR9_s  ALT_GIC_DIST_GICD_IPRIORITYR9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR9 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR9_OFST        0x424

/*
 * Register : GICD_IPRIORITYR10
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR10_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR10.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR10. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR10_s  ALT_GIC_DIST_GICD_IPRIORITYR10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR10 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR10_OFST        0x428

/*
 * Register : GICD_IPRIORITYR11
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR11_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR11.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR11. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR11_s  ALT_GIC_DIST_GICD_IPRIORITYR11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR11 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR11_OFST        0x42c

/*
 * Register : GICD_IPRIORITYR12
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR12_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR12.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR12. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR12_s  ALT_GIC_DIST_GICD_IPRIORITYR12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR12 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR12_OFST        0x430

/*
 * Register : GICD_IPRIORITYR13
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR13_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR13.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR13. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR13_s  ALT_GIC_DIST_GICD_IPRIORITYR13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR13 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR13_OFST        0x434

/*
 * Register : GICD_IPRIORITYR14
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR14_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR14.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR14. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR14_s  ALT_GIC_DIST_GICD_IPRIORITYR14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR14 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR14_OFST        0x438

/*
 * Register : GICD_IPRIORITYR15
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR15_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR15.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR15. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR15_s  ALT_GIC_DIST_GICD_IPRIORITYR15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR15 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR15_OFST        0x43c

/*
 * Register : GICD_IPRIORITYR16
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR16_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR16_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR16_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR16_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR16_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR16_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR16_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR16_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR16.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR16_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR16. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR16_s  ALT_GIC_DIST_GICD_IPRIORITYR16_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR16 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR16 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR16_OFST        0x440

/*
 * Register : GICD_IPRIORITYR17
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR17_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR17_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR17_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR17_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR17_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR17_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR17_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR17_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR17.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR17_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR17. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR17_s  ALT_GIC_DIST_GICD_IPRIORITYR17_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR17 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR17 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR17_OFST        0x444

/*
 * Register : GICD_IPRIORITYR18
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR18_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR18_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR18_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR18_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR18_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR18_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR18_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR18_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR18.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR18_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR18. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR18_s  ALT_GIC_DIST_GICD_IPRIORITYR18_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR18 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR18 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR18_OFST        0x448

/*
 * Register : GICD_IPRIORITYR19
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR19_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR19_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR19_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR19_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR19_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR19_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR19_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR19_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR19.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR19_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR19. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR19_s  ALT_GIC_DIST_GICD_IPRIORITYR19_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR19 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR19 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR19_OFST        0x44c

/*
 * Register : GICD_IPRIORITYR20
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR20_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR20_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR20_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR20_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR20_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR20_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR20_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR20_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR20.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR20_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR20. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR20_s  ALT_GIC_DIST_GICD_IPRIORITYR20_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR20 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR20 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR20_OFST        0x450

/*
 * Register : GICD_IPRIORITYR21
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR21_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR21_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR21_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR21_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR21_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR21_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR21_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR21_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR21.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR21_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR21. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR21_s  ALT_GIC_DIST_GICD_IPRIORITYR21_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR21 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR21 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR21_OFST        0x454

/*
 * Register : GICD_IPRIORITYR22
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR22_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR22_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR22_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR22_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR22_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR22_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR22_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR22_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR22.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR22_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR22. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR22_s  ALT_GIC_DIST_GICD_IPRIORITYR22_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR22 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR22 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR22_OFST        0x458

/*
 * Register : GICD_IPRIORITYR23
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR23_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR23_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR23_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR23_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR23_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR23_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR23_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR23_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR23.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR23_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR23. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR23_s  ALT_GIC_DIST_GICD_IPRIORITYR23_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR23 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR23 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR23_OFST        0x45c

/*
 * Register : GICD_IPRIORITYR24
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR24_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR24_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR24_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR24_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR24_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR24_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR24_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR24_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR24.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR24_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR24. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR24_s  ALT_GIC_DIST_GICD_IPRIORITYR24_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR24 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR24 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR24_OFST        0x460

/*
 * Register : GICD_IPRIORITYR25
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR25_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR25_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR25_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR25_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR25_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR25_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR25_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR25_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR25.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR25_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR25. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR25_s  ALT_GIC_DIST_GICD_IPRIORITYR25_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR25 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR25 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR25_OFST        0x464

/*
 * Register : GICD_IPRIORITYR26
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR26_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR26_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR26_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR26_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR26_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR26_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR26_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR26_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR26.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR26_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR26. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR26_s  ALT_GIC_DIST_GICD_IPRIORITYR26_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR26 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR26 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR26_OFST        0x468

/*
 * Register : GICD_IPRIORITYR27
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR27_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR27_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR27_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR27_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR27_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR27_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR27_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR27_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR27.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR27_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR27. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR27_s  ALT_GIC_DIST_GICD_IPRIORITYR27_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR27 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR27 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR27_OFST        0x46c

/*
 * Register : GICD_IPRIORITYR28
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR28_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR28_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR28_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR28_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR28_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR28_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR28_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR28_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR28.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR28_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR28. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR28_s  ALT_GIC_DIST_GICD_IPRIORITYR28_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR28 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR28 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR28_OFST        0x470

/*
 * Register : GICD_IPRIORITYR29
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR29_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR29_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR29_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR29_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR29_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR29_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR29_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR29_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR29.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR29_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR29. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR29_s  ALT_GIC_DIST_GICD_IPRIORITYR29_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR29 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR29 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR29_OFST        0x474

/*
 * Register : GICD_IPRIORITYR30
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR30_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR30_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR30_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR30_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR30_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR30_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR30_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR30_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR30.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR30_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR30. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR30_s  ALT_GIC_DIST_GICD_IPRIORITYR30_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR30 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR30 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR30_OFST        0x478

/*
 * Register : GICD_IPRIORITYR31
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR31_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR31_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR31_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR31_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR31_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR31_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR31_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR31_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR31.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR31_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR31. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR31_s  ALT_GIC_DIST_GICD_IPRIORITYR31_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR31 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR31 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR31_OFST        0x47c

/*
 * Register : GICD_IPRIORITYR32
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR32_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR32_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR32_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR32_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR32_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR32_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR32_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR32_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR32.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR32_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR32. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR32_s  ALT_GIC_DIST_GICD_IPRIORITYR32_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR32 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR32 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR32_OFST        0x480

/*
 * Register : GICD_IPRIORITYR33
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR33_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR33_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR33_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR33_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR33_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR33_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR33_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR33_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR33.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR33_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR33. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR33_s  ALT_GIC_DIST_GICD_IPRIORITYR33_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR33 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR33 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR33_OFST        0x484

/*
 * Register : GICD_IPRIORITYR34
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR34_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR34_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR34_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR34_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR34_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR34_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR34_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR34_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR34.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR34_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR34. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR34_s  ALT_GIC_DIST_GICD_IPRIORITYR34_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR34 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR34 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR34_OFST        0x488

/*
 * Register : GICD_IPRIORITYR35
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR35_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR35_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR35_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR35_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR35_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR35_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR35_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR35_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR35.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR35_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR35. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR35_s  ALT_GIC_DIST_GICD_IPRIORITYR35_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR35 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR35 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR35_OFST        0x48c

/*
 * Register : GICD_IPRIORITYR36
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR36_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR36_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR36_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR36_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR36_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR36_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR36_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR36_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR36.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR36_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR36. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR36_s  ALT_GIC_DIST_GICD_IPRIORITYR36_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR36 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR36 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR36_OFST        0x490

/*
 * Register : GICD_IPRIORITYR37
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR37_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR37_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR37_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR37_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR37_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR37_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR37_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR37_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR37.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR37_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR37. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR37_s  ALT_GIC_DIST_GICD_IPRIORITYR37_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR37 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR37 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR37_OFST        0x494

/*
 * Register : GICD_IPRIORITYR38
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR38_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR38_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR38_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR38_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR38_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR38_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR38_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR38_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR38.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR38_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR38. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR38_s  ALT_GIC_DIST_GICD_IPRIORITYR38_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR38 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR38 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR38_OFST        0x498

/*
 * Register : GICD_IPRIORITYR39
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR39_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR39_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR39_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR39_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR39_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR39_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR39_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR39_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR39.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR39_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR39. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR39_s  ALT_GIC_DIST_GICD_IPRIORITYR39_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR39 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR39 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR39_OFST        0x49c

/*
 * Register : GICD_IPRIORITYR40
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR40_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR40_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR40_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR40_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR40_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR40_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR40_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR40_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR40.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR40_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR40. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR40_s  ALT_GIC_DIST_GICD_IPRIORITYR40_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR40 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR40 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR40_OFST        0x4a0

/*
 * Register : GICD_IPRIORITYR41
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR41_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR41_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR41_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR41_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR41_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR41_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR41_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR41_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR41.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR41_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR41. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR41_s  ALT_GIC_DIST_GICD_IPRIORITYR41_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR41 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR41 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR41_OFST        0x4a4

/*
 * Register : GICD_IPRIORITYR42
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR42_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR42_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR42_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR42_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR42_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR42_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR42_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR42_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR42.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR42_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR42. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR42_s  ALT_GIC_DIST_GICD_IPRIORITYR42_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR42 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR42 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR42_OFST        0x4a8

/*
 * Register : GICD_IPRIORITYR43
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR43_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR43_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR43_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR43_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR43_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR43_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR43_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR43_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR43.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR43_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR43. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR43_s  ALT_GIC_DIST_GICD_IPRIORITYR43_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR43 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR43 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR43_OFST        0x4ac

/*
 * Register : GICD_IPRIORITYR44
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR44_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR44_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR44_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR44_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR44_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR44_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR44_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR44_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR44.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR44_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR44. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR44_s  ALT_GIC_DIST_GICD_IPRIORITYR44_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR44 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR44 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR44_OFST        0x4b0

/*
 * Register : GICD_IPRIORITYR45
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR45_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR45_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR45_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR45_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR45_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR45_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR45_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR45_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR45.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR45_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR45. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR45_s  ALT_GIC_DIST_GICD_IPRIORITYR45_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR45 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR45 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR45_OFST        0x4b4

/*
 * Register : GICD_IPRIORITYR46
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR46_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR46_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR46_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR46_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR46_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR46_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR46_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR46_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR46.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR46_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR46. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR46_s  ALT_GIC_DIST_GICD_IPRIORITYR46_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR46 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR46 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR46_OFST        0x4b8

/*
 * Register : GICD_IPRIORITYR47
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR47_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR47_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR47_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR47_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR47_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR47_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR47_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR47_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR47.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR47_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR47. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR47_s  ALT_GIC_DIST_GICD_IPRIORITYR47_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR47 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR47 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR47_OFST        0x4bc

/*
 * Register : GICD_IPRIORITYR48
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR48_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR48_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR48_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR48_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR48_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR48_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR48_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR48_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR48.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR48_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR48. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR48_s  ALT_GIC_DIST_GICD_IPRIORITYR48_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR48 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR48 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR48_OFST        0x4c0

/*
 * Register : GICD_IPRIORITYR49
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR49_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR49_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR49_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR49_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR49_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR49_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR49_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR49_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR49.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR49_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR49. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR49_s  ALT_GIC_DIST_GICD_IPRIORITYR49_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR49 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR49 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR49_OFST        0x4c4

/*
 * Register : GICD_IPRIORITYR50
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR50_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR50_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR50_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR50_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR50_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR50_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR50_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR50_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR50.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR50_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR50. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR50_s  ALT_GIC_DIST_GICD_IPRIORITYR50_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR50 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR50 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR50_OFST        0x4c8

/*
 * Register : GICD_IPRIORITYR51
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR51_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR51_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR51_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR51_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR51_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR51_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR51_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR51_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR51.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR51_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR51. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR51_s  ALT_GIC_DIST_GICD_IPRIORITYR51_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR51 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR51 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR51_OFST        0x4cc

/*
 * Register : GICD_IPRIORITYR52
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR52_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR52_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR52_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR52_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR52_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR52_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR52_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR52_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR52.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR52_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR52. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR52_s  ALT_GIC_DIST_GICD_IPRIORITYR52_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR52 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR52 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR52_OFST        0x4d0

/*
 * Register : GICD_IPRIORITYR53
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR53_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR53_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR53_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR53_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR53_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR53_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR53_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR53_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR53.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR53_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR53. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR53_s  ALT_GIC_DIST_GICD_IPRIORITYR53_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR53 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR53 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR53_OFST        0x4d4

/*
 * Register : GICD_IPRIORITYR54
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR54_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR54_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR54_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR54_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR54_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR54_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR54_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR54_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR54.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR54_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR54. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR54_s  ALT_GIC_DIST_GICD_IPRIORITYR54_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR54 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR54 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR54_OFST        0x4d8

/*
 * Register : GICD_IPRIORITYR55
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR55_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR55_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR55_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR55_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR55_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR55_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR55_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR55_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR55.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR55_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR55. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR55_s  ALT_GIC_DIST_GICD_IPRIORITYR55_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR55 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR55 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR55_OFST        0x4dc

/*
 * Register : GICD_IPRIORITYR56
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR56_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR56_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR56_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR56_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR56_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR56_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR56_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR56_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR56.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR56_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR56. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR56_s  ALT_GIC_DIST_GICD_IPRIORITYR56_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR56 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR56 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR56_OFST        0x4e0

/*
 * Register : GICD_IPRIORITYR57
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR57_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR57_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR57_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR57_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR57_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR57_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR57_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR57_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR57.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR57_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR57. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR57_s  ALT_GIC_DIST_GICD_IPRIORITYR57_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR57 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR57 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR57_OFST        0x4e4

/*
 * Register : GICD_IPRIORITYR58
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR58_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR58_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR58_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR58_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR58_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR58_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR58_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR58_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR58.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR58_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR58. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR58_s  ALT_GIC_DIST_GICD_IPRIORITYR58_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR58 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR58 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR58_OFST        0x4e8

/*
 * Register : GICD_IPRIORITYR59
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR59_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR59_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR59_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR59_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR59_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR59_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR59_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR59_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR59.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR59_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR59. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR59_s  ALT_GIC_DIST_GICD_IPRIORITYR59_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR59 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR59 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR59_OFST        0x4ec

/*
 * Register : GICD_IPRIORITYR60
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR60_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR60_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR60_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR60_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR60_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR60_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR60_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR60_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR60.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR60_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR60. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR60_s  ALT_GIC_DIST_GICD_IPRIORITYR60_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR60 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR60 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR60_OFST        0x4f0

/*
 * Register : GICD_IPRIORITYR61
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR61_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR61_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR61_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR61_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR61_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR61_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR61_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR61_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR61.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR61_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR61. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR61_s  ALT_GIC_DIST_GICD_IPRIORITYR61_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR61 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR61 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR61_OFST        0x4f4

/*
 * Register : GICD_IPRIORITYR62
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR62_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR62_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR62_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR62_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR62_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR62_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR62_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR62_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR62.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR62_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR62. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR62_s  ALT_GIC_DIST_GICD_IPRIORITYR62_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR62 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR62 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR62_OFST        0x4f8

/*
 * Register : GICD_IPRIORITYR63
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR63_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR63_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR63_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR63_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR63_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR63_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR63_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR63_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR63.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR63_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR63. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR63_s  ALT_GIC_DIST_GICD_IPRIORITYR63_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR63 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR63 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR63_OFST        0x4fc

/*
 * Register : GICD_IPRIORITYR64
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR64_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR64_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR64_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR64_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR64_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR64_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR64_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR64_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR64.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR64_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR64. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR64_s  ALT_GIC_DIST_GICD_IPRIORITYR64_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR64 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR64 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR64_OFST        0x500

/*
 * Register : GICD_IPRIORITYR65
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR65_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR65_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR65_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR65_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR65_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR65_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR65_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR65_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR65.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR65_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR65. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR65_s  ALT_GIC_DIST_GICD_IPRIORITYR65_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR65 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR65 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR65_OFST        0x504

/*
 * Register : GICD_IPRIORITYR66
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR66_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR66_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR66_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR66_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR66_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR66_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR66_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR66_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR66.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR66_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR66. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR66_s  ALT_GIC_DIST_GICD_IPRIORITYR66_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR66 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR66 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR66_OFST        0x508

/*
 * Register : GICD_IPRIORITYR67
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR67_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR67_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR67_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR67_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR67_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR67_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR67_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR67_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR67.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR67_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR67. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR67_s  ALT_GIC_DIST_GICD_IPRIORITYR67_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR67 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR67 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR67_OFST        0x50c

/*
 * Register : GICD_IPRIORITYR68
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR68_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR68_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR68_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR68_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR68_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR68_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR68_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR68_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR68.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR68_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR68. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR68_s  ALT_GIC_DIST_GICD_IPRIORITYR68_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR68 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR68 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR68_OFST        0x510

/*
 * Register : GICD_IPRIORITYR69
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR69_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR69_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR69_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR69_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR69_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR69_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR69_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR69_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR69.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR69_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR69. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR69_s  ALT_GIC_DIST_GICD_IPRIORITYR69_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR69 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR69 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR69_OFST        0x514

/*
 * Register : GICD_IPRIORITYR70
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR70_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR70_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR70_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR70_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR70_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR70_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR70_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR70_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR70.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR70_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR70. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR70_s  ALT_GIC_DIST_GICD_IPRIORITYR70_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR70 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR70 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR70_OFST        0x518

/*
 * Register : GICD_IPRIORITYR71
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR71_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR71_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR71_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR71_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR71_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR71_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR71_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR71_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR71.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR71_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR71. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR71_s  ALT_GIC_DIST_GICD_IPRIORITYR71_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR71 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR71 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR71_OFST        0x51c

/*
 * Register : GICD_IPRIORITYR72
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR72_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR72_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR72_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR72_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR72_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR72_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR72_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR72_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR72.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR72_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR72. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR72_s  ALT_GIC_DIST_GICD_IPRIORITYR72_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR72 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR72 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR72_OFST        0x520

/*
 * Register : GICD_IPRIORITYR73
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR73_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR73_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR73_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR73_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR73_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR73_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR73_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR73_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR73.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR73_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR73. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR73_s  ALT_GIC_DIST_GICD_IPRIORITYR73_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR73 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR73 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR73_OFST        0x524

/*
 * Register : GICD_IPRIORITYR74
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR74_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR74_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR74_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR74_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR74_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR74_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR74_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR74_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR74.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR74_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR74. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR74_s  ALT_GIC_DIST_GICD_IPRIORITYR74_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR74 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR74 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR74_OFST        0x528

/*
 * Register : GICD_IPRIORITYR75
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR75_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR75_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR75_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR75_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR75_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR75_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR75_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR75_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR75.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR75_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR75. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR75_s  ALT_GIC_DIST_GICD_IPRIORITYR75_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR75 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR75 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR75_OFST        0x52c

/*
 * Register : GICD_IPRIORITYR76
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR76_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR76_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR76_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR76_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR76_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR76_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR76_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR76_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR76.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR76_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR76. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR76_s  ALT_GIC_DIST_GICD_IPRIORITYR76_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR76 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR76 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR76_OFST        0x530

/*
 * Register : GICD_IPRIORITYR77
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR77_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR77_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR77_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR77_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR77_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR77_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR77_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR77_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR77.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR77_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR77. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR77_s  ALT_GIC_DIST_GICD_IPRIORITYR77_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR77 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR77 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR77_OFST        0x534

/*
 * Register : GICD_IPRIORITYR78
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR78_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR78_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR78_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR78_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR78_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR78_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR78_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR78_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR78.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR78_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR78. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR78_s  ALT_GIC_DIST_GICD_IPRIORITYR78_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR78 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR78 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR78_OFST        0x538

/*
 * Register : GICD_IPRIORITYR79
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR79_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR79_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR79_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR79_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR79_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR79_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR79_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR79_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR79.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR79_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR79. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR79_s  ALT_GIC_DIST_GICD_IPRIORITYR79_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR79 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR79 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR79_OFST        0x53c

/*
 * Register : GICD_IPRIORITYR80
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR80_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR80_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR80_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR80_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR80_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR80_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR80_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR80_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR80.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR80_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR80. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR80_s  ALT_GIC_DIST_GICD_IPRIORITYR80_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR80 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR80 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR80_OFST        0x540

/*
 * Register : GICD_IPRIORITYR81
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR81_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR81_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR81_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR81_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR81_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR81_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR81_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR81_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR81.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR81_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR81. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR81_s  ALT_GIC_DIST_GICD_IPRIORITYR81_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR81 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR81 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR81_OFST        0x544

/*
 * Register : GICD_IPRIORITYR82
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR82_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR82_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR82_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR82_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR82_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR82_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR82_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR82_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR82.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR82_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR82. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR82_s  ALT_GIC_DIST_GICD_IPRIORITYR82_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR82 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR82 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR82_OFST        0x548

/*
 * Register : GICD_IPRIORITYR83
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR83_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR83_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR83_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR83_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR83_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR83_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR83_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR83_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR83.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR83_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR83. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR83_s  ALT_GIC_DIST_GICD_IPRIORITYR83_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR83 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR83 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR83_OFST        0x54c

/*
 * Register : GICD_IPRIORITYR84
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR84_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR84_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR84_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR84_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR84_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR84_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR84_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR84_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR84.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR84_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR84. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR84_s  ALT_GIC_DIST_GICD_IPRIORITYR84_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR84 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR84 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR84_OFST        0x550

/*
 * Register : GICD_IPRIORITYR85
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR85_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR85_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR85_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR85_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR85_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR85_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR85_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR85_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR85.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR85_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR85. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR85_s  ALT_GIC_DIST_GICD_IPRIORITYR85_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR85 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR85 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR85_OFST        0x554

/*
 * Register : GICD_IPRIORITYR86
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR86_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR86_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR86_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR86_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR86_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR86_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR86_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR86_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR86.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR86_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR86. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR86_s  ALT_GIC_DIST_GICD_IPRIORITYR86_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR86 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR86 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR86_OFST        0x558

/*
 * Register : GICD_IPRIORITYR87
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR87_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR87_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR87_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR87_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR87_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR87_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR87_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR87_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR87.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR87_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR87. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR87_s  ALT_GIC_DIST_GICD_IPRIORITYR87_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR87 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR87 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR87_OFST        0x55c

/*
 * Register : GICD_IPRIORITYR88
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR88_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR88_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR88_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR88_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR88_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR88_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR88_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR88_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR88.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR88_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR88. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR88_s  ALT_GIC_DIST_GICD_IPRIORITYR88_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR88 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR88 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR88_OFST        0x560

/*
 * Register : GICD_IPRIORITYR89
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR89_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR89_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR89_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR89_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR89_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR89_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR89_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR89_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR89.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR89_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR89. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR89_s  ALT_GIC_DIST_GICD_IPRIORITYR89_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR89 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR89 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR89_OFST        0x564

/*
 * Register : GICD_IPRIORITYR90
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR90_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR90_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR90_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR90_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR90_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR90_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR90_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR90_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR90.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR90_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR90. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR90_s  ALT_GIC_DIST_GICD_IPRIORITYR90_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR90 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR90 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR90_OFST        0x568

/*
 * Register : GICD_IPRIORITYR91
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR91_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR91_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR91_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR91_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR91_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR91_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR91_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR91_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR91.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR91_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR91. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR91_s  ALT_GIC_DIST_GICD_IPRIORITYR91_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR91 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR91 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR91_OFST        0x56c

/*
 * Register : GICD_IPRIORITYR92
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR92_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR92_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR92_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR92_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR92_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR92_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR92_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR92_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR92.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR92_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR92. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR92_s  ALT_GIC_DIST_GICD_IPRIORITYR92_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR92 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR92 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR92_OFST        0x570

/*
 * Register : GICD_IPRIORITYR93
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR93_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR93_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR93_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR93_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR93_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR93_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR93_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR93_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR93.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR93_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR93. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR93_s  ALT_GIC_DIST_GICD_IPRIORITYR93_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR93 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR93 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR93_OFST        0x574

/*
 * Register : GICD_IPRIORITYR94
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR94_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR94_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR94_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR94_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR94_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR94_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR94_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR94_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR94.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR94_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR94. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR94_s  ALT_GIC_DIST_GICD_IPRIORITYR94_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR94 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR94 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR94_OFST        0x578

/*
 * Register : GICD_IPRIORITYR95
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR95_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR95_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR95_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR95_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR95_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR95_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR95_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR95_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR95.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR95_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR95. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR95_s  ALT_GIC_DIST_GICD_IPRIORITYR95_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR95 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR95 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR95_OFST        0x57c

/*
 * Register : GICD_IPRIORITYR96
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR96_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR96_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR96_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR96_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR96_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR96_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR96_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR96_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR96.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR96_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR96. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR96_s  ALT_GIC_DIST_GICD_IPRIORITYR96_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR96 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR96 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR96_OFST        0x580

/*
 * Register : GICD_IPRIORITYR97
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR97_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR97_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR97_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR97_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR97_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR97_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR97_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR97_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR97.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR97_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR97. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR97_s  ALT_GIC_DIST_GICD_IPRIORITYR97_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR97 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR97 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR97_OFST        0x584

/*
 * Register : GICD_IPRIORITYR98
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR98_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR98_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR98_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR98_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR98_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR98_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR98_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR98_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR98.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR98_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR98. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR98_s  ALT_GIC_DIST_GICD_IPRIORITYR98_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR98 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR98 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR98_OFST        0x588

/*
 * Register : GICD_IPRIORITYR99
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR99_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR99_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR99_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR99_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR99_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR99_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR99_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR99_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR99.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR99_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR99. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR99_s  ALT_GIC_DIST_GICD_IPRIORITYR99_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR99 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR99 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR99_OFST        0x58c

/*
 * Register : GICD_IPRIORITYR100
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR100_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR100_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR100_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR100_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR100_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR100_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR100_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR100_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR100.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR100_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR100. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR100_s  ALT_GIC_DIST_GICD_IPRIORITYR100_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR100 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR100 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR100_OFST        0x590

/*
 * Register : GICD_IPRIORITYR101
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR101_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR101_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR101_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR101_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR101_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR101_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR101_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR101_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR101.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR101_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR101. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR101_s  ALT_GIC_DIST_GICD_IPRIORITYR101_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR101 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR101 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR101_OFST        0x594

/*
 * Register : GICD_IPRIORITYR102
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR102_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR102_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR102_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR102_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR102_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR102_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR102_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR102_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR102.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR102_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR102. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR102_s  ALT_GIC_DIST_GICD_IPRIORITYR102_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR102 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR102 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR102_OFST        0x598

/*
 * Register : GICD_IPRIORITYR103
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR103_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR103_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR103_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR103_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR103_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR103_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR103_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR103_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR103.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR103_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR103. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR103_s  ALT_GIC_DIST_GICD_IPRIORITYR103_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR103 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR103 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR103_OFST        0x59c

/*
 * Register : GICD_IPRIORITYR104
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR104_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR104_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR104_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR104_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR104_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR104_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR104_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR104_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR104.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR104_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR104. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR104_s  ALT_GIC_DIST_GICD_IPRIORITYR104_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR104 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR104 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR104_OFST        0x5a0

/*
 * Register : GICD_IPRIORITYR105
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR105_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR105_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR105_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR105_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR105_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR105_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR105_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR105_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR105.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR105_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR105. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR105_s  ALT_GIC_DIST_GICD_IPRIORITYR105_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR105 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR105 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR105_OFST        0x5a4

/*
 * Register : GICD_IPRIORITYR106
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR106_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR106_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR106_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR106_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR106_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR106_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR106_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR106_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR106.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR106_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR106. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR106_s  ALT_GIC_DIST_GICD_IPRIORITYR106_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR106 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR106 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR106_OFST        0x5a8

/*
 * Register : GICD_IPRIORITYR107
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR107_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR107_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR107_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR107_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR107_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR107_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR107_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR107_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR107.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR107_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR107. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR107_s  ALT_GIC_DIST_GICD_IPRIORITYR107_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR107 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR107 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR107_OFST        0x5ac

/*
 * Register : GICD_IPRIORITYR108
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR108_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR108_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR108_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR108_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR108_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR108_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR108_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR108_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR108.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR108_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR108. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR108_s  ALT_GIC_DIST_GICD_IPRIORITYR108_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR108 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR108 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR108_OFST        0x5b0

/*
 * Register : GICD_IPRIORITYR109
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR109_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR109_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR109_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR109_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR109_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR109_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR109_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR109_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR109.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR109_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR109. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR109_s  ALT_GIC_DIST_GICD_IPRIORITYR109_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR109 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR109 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR109_OFST        0x5b4

/*
 * Register : GICD_IPRIORITYR110
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR110_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR110_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR110_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR110_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR110_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR110_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR110_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR110_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR110.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR110_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR110. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR110_s  ALT_GIC_DIST_GICD_IPRIORITYR110_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR110 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR110 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR110_OFST        0x5b8

/*
 * Register : GICD_IPRIORITYR111
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR111_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR111_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR111_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR111_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR111_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR111_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR111_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR111_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR111.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR111_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR111. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR111_s  ALT_GIC_DIST_GICD_IPRIORITYR111_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR111 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR111 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR111_OFST        0x5bc

/*
 * Register : GICD_IPRIORITYR112
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR112_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR112_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR112_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR112_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR112_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR112_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR112_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR112_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR112.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR112_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR112. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR112_s  ALT_GIC_DIST_GICD_IPRIORITYR112_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR112 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR112 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR112_OFST        0x5c0

/*
 * Register : GICD_IPRIORITYR113
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR113_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR113_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR113_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR113_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR113_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR113_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR113_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR113_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR113.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR113_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR113. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR113_s  ALT_GIC_DIST_GICD_IPRIORITYR113_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR113 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR113 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR113_OFST        0x5c4

/*
 * Register : GICD_IPRIORITYR114
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR114_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR114_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR114_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR114_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR114_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR114_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR114_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR114_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR114.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR114_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR114. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR114_s  ALT_GIC_DIST_GICD_IPRIORITYR114_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR114 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR114 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR114_OFST        0x5c8

/*
 * Register : GICD_IPRIORITYR115
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR115_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR115_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR115_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR115_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR115_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR115_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR115_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR115_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR115.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR115_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR115. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR115_s  ALT_GIC_DIST_GICD_IPRIORITYR115_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR115 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR115 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR115_OFST        0x5cc

/*
 * Register : GICD_IPRIORITYR116
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR116_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR116_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR116_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR116_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR116_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR116_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR116_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR116_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR116.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR116_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR116. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR116_s  ALT_GIC_DIST_GICD_IPRIORITYR116_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR116 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR116 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR116_OFST        0x5d0

/*
 * Register : GICD_IPRIORITYR117
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR117_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR117_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR117_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR117_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR117_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR117_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR117_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR117_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR117.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR117_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR117. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR117_s  ALT_GIC_DIST_GICD_IPRIORITYR117_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR117 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR117 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR117_OFST        0x5d4

/*
 * Register : GICD_IPRIORITYR118
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR118_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR118_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR118_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR118_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR118_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR118_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR118_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR118_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR118.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR118_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR118. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR118_s  ALT_GIC_DIST_GICD_IPRIORITYR118_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR118 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR118 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR118_OFST        0x5d8

/*
 * Register : GICD_IPRIORITYR119
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR119_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR119_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR119_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR119_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR119_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR119_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR119_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR119_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR119.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR119_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR119. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR119_s  ALT_GIC_DIST_GICD_IPRIORITYR119_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR119 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR119 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR119_OFST        0x5dc

/*
 * Register : GICD_IPRIORITYR120
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR120_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR120_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR120_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR120_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR120_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR120_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR120_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR120_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR120.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR120_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR120. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR120_s  ALT_GIC_DIST_GICD_IPRIORITYR120_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR120 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR120 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR120_OFST        0x5e0

/*
 * Register : GICD_IPRIORITYR121
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR121_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR121_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR121_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR121_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR121_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR121_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR121_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR121_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR121.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR121_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR121. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR121_s  ALT_GIC_DIST_GICD_IPRIORITYR121_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR121 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR121 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR121_OFST        0x5e4

/*
 * Register : GICD_IPRIORITYR122
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR122_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR122_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR122_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR122_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR122_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR122_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR122_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR122_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR122.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR122_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR122. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR122_s  ALT_GIC_DIST_GICD_IPRIORITYR122_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR122 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR122 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR122_OFST        0x5e8

/*
 * Register : GICD_IPRIORITYR123
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR123_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR123_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR123_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR123_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR123_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR123_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR123_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR123_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR123.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR123_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR123. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR123_s  ALT_GIC_DIST_GICD_IPRIORITYR123_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR123 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR123 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR123_OFST        0x5ec

/*
 * Register : GICD_IPRIORITYR124
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR124_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR124_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR124_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR124_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR124_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR124_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR124_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR124_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR124.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR124_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR124. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR124_s  ALT_GIC_DIST_GICD_IPRIORITYR124_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR124 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR124 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR124_OFST        0x5f0

/*
 * Register : GICD_IPRIORITYR125
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR125_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR125_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR125_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR125_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR125_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR125_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR125_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR125_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR125.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR125_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR125. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR125_s  ALT_GIC_DIST_GICD_IPRIORITYR125_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR125 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR125 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR125_OFST        0x5f4

/*
 * Register : GICD_IPRIORITYR126
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR126_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR126_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR126_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR126_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR126_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR126_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR126_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR126_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR126.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR126_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR126. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR126_s  ALT_GIC_DIST_GICD_IPRIORITYR126_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR126 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR126 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR126_OFST        0x5f8

/*
 * Register : GICD_IPRIORITYR127
 * 
 * Interrupt Priority Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR127_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_IPRIORITYR127_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_IPRIORITYR127_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_IPRIORITYR127_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_IPRIORITYR127_FLD register field value. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR127_FLD register field. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_IPRIORITYR127_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_IPRIORITYR127_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_IPRIORITYR127.
 */
struct ALT_GIC_DIST_GICD_IPRIORITYR127_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_IPRIORITYR127. */
typedef struct ALT_GIC_DIST_GICD_IPRIORITYR127_s  ALT_GIC_DIST_GICD_IPRIORITYR127_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_IPRIORITYR127 register. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_IPRIORITYR127 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_IPRIORITYR127_OFST        0x5fc

/*
 * Register : GICD_ITARGETSR0
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR0_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR0.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR0. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR0_s  ALT_GIC_DIST_GICD_ITARGETSR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR0 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR0_OFST        0x800

/*
 * Register : GICD_ITARGETSR1
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR1_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR1.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR1. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR1_s  ALT_GIC_DIST_GICD_ITARGETSR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR1 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR1_OFST        0x804

/*
 * Register : GICD_ITARGETSR2
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR2_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR2.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR2. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR2_s  ALT_GIC_DIST_GICD_ITARGETSR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR2 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR2_OFST        0x808

/*
 * Register : GICD_ITARGETSR3
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR3_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR3.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR3. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR3_s  ALT_GIC_DIST_GICD_ITARGETSR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR3 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR3_OFST        0x80c

/*
 * Register : GICD_ITARGETSR4
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR4_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR4.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR4. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR4_s  ALT_GIC_DIST_GICD_ITARGETSR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR4 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR4_OFST        0x810

/*
 * Register : GICD_ITARGETSR5
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR5_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR5.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR5. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR5_s  ALT_GIC_DIST_GICD_ITARGETSR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR5 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR5_OFST        0x814

/*
 * Register : GICD_ITARGETSR6
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR6_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR6.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR6. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR6_s  ALT_GIC_DIST_GICD_ITARGETSR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR6 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR6_OFST        0x818

/*
 * Register : GICD_ITARGETSR7
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR7_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR7.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR7. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR7_s  ALT_GIC_DIST_GICD_ITARGETSR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR7 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR7_OFST        0x81c

/*
 * Register : GICD_ITARGETSR8
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR8.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR8. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR8_s  ALT_GIC_DIST_GICD_ITARGETSR8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR8 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR8_OFST        0x820

/*
 * Register : GICD_ITARGETSR9
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR9.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR9. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR9_s  ALT_GIC_DIST_GICD_ITARGETSR9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR9 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR9_OFST        0x824

/*
 * Register : GICD_ITARGETSR10
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR10.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR10. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR10_s  ALT_GIC_DIST_GICD_ITARGETSR10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR10 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR10_OFST        0x828

/*
 * Register : GICD_ITARGETSR11
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR11.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR11. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR11_s  ALT_GIC_DIST_GICD_ITARGETSR11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR11 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR11_OFST        0x82c

/*
 * Register : GICD_ITARGETSR12
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR12.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR12. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR12_s  ALT_GIC_DIST_GICD_ITARGETSR12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR12 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR12_OFST        0x830

/*
 * Register : GICD_ITARGETSR13
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR13.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR13. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR13_s  ALT_GIC_DIST_GICD_ITARGETSR13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR13 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR13_OFST        0x834

/*
 * Register : GICD_ITARGETSR14
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR14.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR14. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR14_s  ALT_GIC_DIST_GICD_ITARGETSR14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR14 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR14_OFST        0x838

/*
 * Register : GICD_ITARGETSR15
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR15.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR15. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR15_s  ALT_GIC_DIST_GICD_ITARGETSR15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR15 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR15_OFST        0x83c

/*
 * Register : GICD_ITARGETSR16
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR16_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR16_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR16_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR16_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR16.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR16_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR16. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR16_s  ALT_GIC_DIST_GICD_ITARGETSR16_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR16 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR16 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR16_OFST        0x840

/*
 * Register : GICD_ITARGETSR17
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR17_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR17_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR17_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR17_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR17.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR17_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR17. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR17_s  ALT_GIC_DIST_GICD_ITARGETSR17_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR17 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR17 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR17_OFST        0x844

/*
 * Register : GICD_ITARGETSR18
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR18_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR18_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR18_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR18_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR18.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR18_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR18. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR18_s  ALT_GIC_DIST_GICD_ITARGETSR18_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR18 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR18 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR18_OFST        0x848

/*
 * Register : GICD_ITARGETSR19
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR19_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR19_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR19_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR19_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR19.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR19_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR19. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR19_s  ALT_GIC_DIST_GICD_ITARGETSR19_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR19 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR19 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR19_OFST        0x84c

/*
 * Register : GICD_ITARGETSR20
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR20_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR20_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR20_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR20_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR20.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR20_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR20. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR20_s  ALT_GIC_DIST_GICD_ITARGETSR20_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR20 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR20 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR20_OFST        0x850

/*
 * Register : GICD_ITARGETSR21
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR21_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR21_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR21_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR21_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR21.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR21_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR21. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR21_s  ALT_GIC_DIST_GICD_ITARGETSR21_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR21 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR21 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR21_OFST        0x854

/*
 * Register : GICD_ITARGETSR22
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR22_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR22_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR22_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR22_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR22.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR22_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR22. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR22_s  ALT_GIC_DIST_GICD_ITARGETSR22_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR22 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR22 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR22_OFST        0x858

/*
 * Register : GICD_ITARGETSR23
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR23_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR23_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR23_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR23_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR23.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR23_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR23. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR23_s  ALT_GIC_DIST_GICD_ITARGETSR23_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR23 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR23 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR23_OFST        0x85c

/*
 * Register : GICD_ITARGETSR24
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR24_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR24_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR24_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR24_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR24.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR24_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR24. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR24_s  ALT_GIC_DIST_GICD_ITARGETSR24_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR24 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR24 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR24_OFST        0x860

/*
 * Register : GICD_ITARGETSR25
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR25_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR25_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR25_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR25_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR25.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR25_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR25. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR25_s  ALT_GIC_DIST_GICD_ITARGETSR25_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR25 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR25 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR25_OFST        0x864

/*
 * Register : GICD_ITARGETSR26
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR26_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR26_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR26_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR26_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR26.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR26_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR26. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR26_s  ALT_GIC_DIST_GICD_ITARGETSR26_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR26 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR26 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR26_OFST        0x868

/*
 * Register : GICD_ITARGETSR27
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR27_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR27_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR27_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR27_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR27.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR27_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR27. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR27_s  ALT_GIC_DIST_GICD_ITARGETSR27_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR27 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR27 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR27_OFST        0x86c

/*
 * Register : GICD_ITARGETSR28
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR28_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR28_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR28_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR28_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR28.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR28_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR28. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR28_s  ALT_GIC_DIST_GICD_ITARGETSR28_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR28 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR28 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR28_OFST        0x870

/*
 * Register : GICD_ITARGETSR29
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR29_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR29_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR29_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR29_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR29.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR29_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR29. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR29_s  ALT_GIC_DIST_GICD_ITARGETSR29_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR29 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR29 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR29_OFST        0x874

/*
 * Register : GICD_ITARGETSR30
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR30_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR30_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR30_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR30_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR30.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR30_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR30. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR30_s  ALT_GIC_DIST_GICD_ITARGETSR30_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR30 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR30 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR30_OFST        0x878

/*
 * Register : GICD_ITARGETSR31
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR31_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR31_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR31_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR31_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR31.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR31_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR31. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR31_s  ALT_GIC_DIST_GICD_ITARGETSR31_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR31 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR31 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR31_OFST        0x87c

/*
 * Register : GICD_ITARGETSR32
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR32_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR32_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR32_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR32_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR32_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR32_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR32_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR32_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR32.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR32_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR32. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR32_s  ALT_GIC_DIST_GICD_ITARGETSR32_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR32 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR32 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR32_OFST        0x880

/*
 * Register : GICD_ITARGETSR33
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR33_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR33_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR33_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR33_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR33_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR33_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR33_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR33_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR33.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR33_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR33. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR33_s  ALT_GIC_DIST_GICD_ITARGETSR33_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR33 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR33 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR33_OFST        0x884

/*
 * Register : GICD_ITARGETSR34
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR34_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR34_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR34_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR34_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR34_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR34_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR34_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR34_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR34.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR34_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR34. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR34_s  ALT_GIC_DIST_GICD_ITARGETSR34_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR34 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR34 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR34_OFST        0x888

/*
 * Register : GICD_ITARGETSR35
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR35_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR35_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR35_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR35_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR35_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR35_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR35_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR35_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR35.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR35_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR35. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR35_s  ALT_GIC_DIST_GICD_ITARGETSR35_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR35 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR35 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR35_OFST        0x88c

/*
 * Register : GICD_ITARGETSR36
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR36_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR36_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR36_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR36_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR36_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR36_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR36_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR36_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR36.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR36_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR36. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR36_s  ALT_GIC_DIST_GICD_ITARGETSR36_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR36 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR36 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR36_OFST        0x890

/*
 * Register : GICD_ITARGETSR37
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR37_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR37_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR37_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR37_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR37_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR37_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR37_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR37_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR37.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR37_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR37. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR37_s  ALT_GIC_DIST_GICD_ITARGETSR37_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR37 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR37 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR37_OFST        0x894

/*
 * Register : GICD_ITARGETSR38
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR38_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR38_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR38_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR38_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR38_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR38_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR38_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR38_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR38.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR38_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR38. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR38_s  ALT_GIC_DIST_GICD_ITARGETSR38_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR38 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR38 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR38_OFST        0x898

/*
 * Register : GICD_ITARGETSR39
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR39_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR39_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR39_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR39_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR39_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR39_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR39_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR39_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR39.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR39_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR39. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR39_s  ALT_GIC_DIST_GICD_ITARGETSR39_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR39 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR39 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR39_OFST        0x89c

/*
 * Register : GICD_ITARGETSR40
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR40_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR40_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR40_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR40_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR40_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR40_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR40_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR40_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR40.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR40_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR40. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR40_s  ALT_GIC_DIST_GICD_ITARGETSR40_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR40 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR40 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR40_OFST        0x8a0

/*
 * Register : GICD_ITARGETSR41
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR41_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR41_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR41_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR41_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR41_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR41_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR41_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR41_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR41.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR41_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR41. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR41_s  ALT_GIC_DIST_GICD_ITARGETSR41_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR41 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR41 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR41_OFST        0x8a4

/*
 * Register : GICD_ITARGETSR42
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR42_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR42_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR42_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR42_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR42_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR42_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR42_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR42_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR42.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR42_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR42. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR42_s  ALT_GIC_DIST_GICD_ITARGETSR42_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR42 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR42 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR42_OFST        0x8a8

/*
 * Register : GICD_ITARGETSR43
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR43_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR43_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR43_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR43_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR43_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR43_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR43_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR43_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR43.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR43_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR43. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR43_s  ALT_GIC_DIST_GICD_ITARGETSR43_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR43 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR43 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR43_OFST        0x8ac

/*
 * Register : GICD_ITARGETSR44
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR44_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR44_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR44_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR44_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR44_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR44_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR44_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR44_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR44.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR44_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR44. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR44_s  ALT_GIC_DIST_GICD_ITARGETSR44_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR44 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR44 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR44_OFST        0x8b0

/*
 * Register : GICD_ITARGETSR45
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR45_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR45_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR45_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR45_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR45_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR45_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR45_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR45_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR45.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR45_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR45. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR45_s  ALT_GIC_DIST_GICD_ITARGETSR45_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR45 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR45 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR45_OFST        0x8b4

/*
 * Register : GICD_ITARGETSR46
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR46_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR46_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR46_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR46_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR46_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR46_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR46_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR46_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR46.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR46_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR46. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR46_s  ALT_GIC_DIST_GICD_ITARGETSR46_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR46 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR46 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR46_OFST        0x8b8

/*
 * Register : GICD_ITARGETSR47
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR47_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR47_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR47_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR47_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR47_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR47_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR47_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR47_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR47.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR47_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR47. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR47_s  ALT_GIC_DIST_GICD_ITARGETSR47_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR47 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR47 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR47_OFST        0x8bc

/*
 * Register : GICD_ITARGETSR48
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR48_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR48_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR48_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR48_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR48_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR48_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR48_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR48_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR48.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR48_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR48. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR48_s  ALT_GIC_DIST_GICD_ITARGETSR48_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR48 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR48 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR48_OFST        0x8c0

/*
 * Register : GICD_ITARGETSR49
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR49_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR49_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR49_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR49_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR49_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR49_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR49_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR49_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR49.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR49_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR49. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR49_s  ALT_GIC_DIST_GICD_ITARGETSR49_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR49 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR49 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR49_OFST        0x8c4

/*
 * Register : GICD_ITARGETSR50
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR50_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR50_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR50_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR50_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR50_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR50_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR50_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR50_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR50.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR50_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR50. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR50_s  ALT_GIC_DIST_GICD_ITARGETSR50_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR50 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR50 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR50_OFST        0x8c8

/*
 * Register : GICD_ITARGETSR51
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR51_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR51_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR51_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR51_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR51_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR51_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR51_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR51_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR51.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR51_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR51. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR51_s  ALT_GIC_DIST_GICD_ITARGETSR51_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR51 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR51 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR51_OFST        0x8cc

/*
 * Register : GICD_ITARGETSR52
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR52_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR52_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR52_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR52_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR52_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR52_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR52_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR52_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR52.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR52_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR52. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR52_s  ALT_GIC_DIST_GICD_ITARGETSR52_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR52 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR52 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR52_OFST        0x8d0

/*
 * Register : GICD_ITARGETSR53
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR53_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR53_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR53_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR53_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR53_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR53_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR53_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR53_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR53.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR53_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR53. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR53_s  ALT_GIC_DIST_GICD_ITARGETSR53_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR53 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR53 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR53_OFST        0x8d4

/*
 * Register : GICD_ITARGETSR54
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR54_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR54_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR54_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR54_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR54_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR54_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR54_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR54_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR54.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR54_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR54. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR54_s  ALT_GIC_DIST_GICD_ITARGETSR54_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR54 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR54 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR54_OFST        0x8d8

/*
 * Register : GICD_ITARGETSR55
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR55_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR55_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR55_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR55_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR55_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR55_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR55_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR55_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR55.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR55_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR55. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR55_s  ALT_GIC_DIST_GICD_ITARGETSR55_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR55 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR55 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR55_OFST        0x8dc

/*
 * Register : GICD_ITARGETSR56
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR56_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR56_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR56_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR56_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR56_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR56_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR56_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR56_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR56.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR56_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR56. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR56_s  ALT_GIC_DIST_GICD_ITARGETSR56_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR56 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR56 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR56_OFST        0x8e0

/*
 * Register : GICD_ITARGETSR57
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR57_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR57_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR57_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR57_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR57_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR57_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR57_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR57_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR57.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR57_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR57. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR57_s  ALT_GIC_DIST_GICD_ITARGETSR57_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR57 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR57 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR57_OFST        0x8e4

/*
 * Register : GICD_ITARGETSR58
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR58_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR58_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR58_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR58_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR58_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR58_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR58_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR58_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR58.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR58_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR58. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR58_s  ALT_GIC_DIST_GICD_ITARGETSR58_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR58 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR58 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR58_OFST        0x8e8

/*
 * Register : GICD_ITARGETSR59
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR59_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR59_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR59_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR59_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR59_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR59_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR59_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR59_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR59.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR59_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR59. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR59_s  ALT_GIC_DIST_GICD_ITARGETSR59_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR59 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR59 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR59_OFST        0x8ec

/*
 * Register : GICD_ITARGETSR60
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR60_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR60_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR60_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR60_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR60_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR60_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR60_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR60_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR60.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR60_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR60. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR60_s  ALT_GIC_DIST_GICD_ITARGETSR60_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR60 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR60 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR60_OFST        0x8f0

/*
 * Register : GICD_ITARGETSR61
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR61_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR61_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR61_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR61_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR61_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR61_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR61_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR61_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR61.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR61_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR61. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR61_s  ALT_GIC_DIST_GICD_ITARGETSR61_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR61 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR61 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR61_OFST        0x8f4

/*
 * Register : GICD_ITARGETSR62
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR62_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR62_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR62_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR62_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR62_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR62_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR62_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR62_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR62.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR62_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR62. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR62_s  ALT_GIC_DIST_GICD_ITARGETSR62_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR62 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR62 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR62_OFST        0x8f8

/*
 * Register : GICD_ITARGETSR63
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR63_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR63_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR63_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR63_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR63_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR63_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR63_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR63_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR63.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR63_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR63. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR63_s  ALT_GIC_DIST_GICD_ITARGETSR63_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR63 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR63 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR63_OFST        0x8fc

/*
 * Register : GICD_ITARGETSR64
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR64_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR64_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR64_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR64_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR64_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR64_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR64_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR64_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR64.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR64_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR64. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR64_s  ALT_GIC_DIST_GICD_ITARGETSR64_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR64 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR64 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR64_OFST        0x900

/*
 * Register : GICD_ITARGETSR65
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR65_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR65_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR65_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR65_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR65_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR65_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR65_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR65_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR65.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR65_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR65. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR65_s  ALT_GIC_DIST_GICD_ITARGETSR65_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR65 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR65 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR65_OFST        0x904

/*
 * Register : GICD_ITARGETSR66
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR66_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR66_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR66_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR66_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR66_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR66_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR66_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR66_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR66.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR66_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR66. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR66_s  ALT_GIC_DIST_GICD_ITARGETSR66_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR66 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR66 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR66_OFST        0x908

/*
 * Register : GICD_ITARGETSR67
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR67_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR67_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR67_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR67_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR67_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR67_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR67_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR67_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR67.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR67_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR67. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR67_s  ALT_GIC_DIST_GICD_ITARGETSR67_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR67 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR67 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR67_OFST        0x90c

/*
 * Register : GICD_ITARGETSR68
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR68_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR68_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR68_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR68_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR68_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR68_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR68_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR68_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR68.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR68_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR68. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR68_s  ALT_GIC_DIST_GICD_ITARGETSR68_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR68 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR68 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR68_OFST        0x910

/*
 * Register : GICD_ITARGETSR69
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR69_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR69_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR69_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR69_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR69_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR69_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR69_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR69_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR69.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR69_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR69. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR69_s  ALT_GIC_DIST_GICD_ITARGETSR69_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR69 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR69 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR69_OFST        0x914

/*
 * Register : GICD_ITARGETSR70
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR70_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR70_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR70_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR70_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR70_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR70_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR70_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR70_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR70.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR70_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR70. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR70_s  ALT_GIC_DIST_GICD_ITARGETSR70_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR70 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR70 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR70_OFST        0x918

/*
 * Register : GICD_ITARGETSR71
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR71_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR71_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR71_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR71_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR71_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR71_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR71_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR71_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR71.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR71_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR71. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR71_s  ALT_GIC_DIST_GICD_ITARGETSR71_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR71 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR71 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR71_OFST        0x91c

/*
 * Register : GICD_ITARGETSR72
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR72_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR72_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR72_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR72_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR72_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR72_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR72_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR72_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR72.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR72_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR72. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR72_s  ALT_GIC_DIST_GICD_ITARGETSR72_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR72 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR72 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR72_OFST        0x920

/*
 * Register : GICD_ITARGETSR73
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR73_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR73_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR73_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR73_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR73_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR73_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR73_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR73_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR73.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR73_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR73. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR73_s  ALT_GIC_DIST_GICD_ITARGETSR73_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR73 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR73 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR73_OFST        0x924

/*
 * Register : GICD_ITARGETSR74
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR74_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR74_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR74_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR74_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR74_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR74_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR74_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR74_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR74.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR74_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR74. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR74_s  ALT_GIC_DIST_GICD_ITARGETSR74_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR74 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR74 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR74_OFST        0x928

/*
 * Register : GICD_ITARGETSR75
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR75_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR75_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR75_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR75_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR75_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR75_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR75_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR75_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR75.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR75_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR75. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR75_s  ALT_GIC_DIST_GICD_ITARGETSR75_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR75 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR75 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR75_OFST        0x92c

/*
 * Register : GICD_ITARGETSR76
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR76_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR76_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR76_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR76_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR76_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR76_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR76_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR76_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR76.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR76_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR76. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR76_s  ALT_GIC_DIST_GICD_ITARGETSR76_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR76 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR76 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR76_OFST        0x930

/*
 * Register : GICD_ITARGETSR77
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR77_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR77_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR77_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR77_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR77_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR77_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR77_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR77_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR77.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR77_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR77. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR77_s  ALT_GIC_DIST_GICD_ITARGETSR77_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR77 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR77 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR77_OFST        0x934

/*
 * Register : GICD_ITARGETSR78
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR78_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR78_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR78_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR78_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR78_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR78_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR78_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR78_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR78.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR78_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR78. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR78_s  ALT_GIC_DIST_GICD_ITARGETSR78_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR78 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR78 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR78_OFST        0x938

/*
 * Register : GICD_ITARGETSR79
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR79_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR79_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR79_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR79_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR79_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR79_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR79_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR79_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR79.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR79_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR79. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR79_s  ALT_GIC_DIST_GICD_ITARGETSR79_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR79 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR79 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR79_OFST        0x93c

/*
 * Register : GICD_ITARGETSR80
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR80_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR80_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR80_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR80_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR80_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR80_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR80_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR80_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR80.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR80_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR80. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR80_s  ALT_GIC_DIST_GICD_ITARGETSR80_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR80 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR80 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR80_OFST        0x940

/*
 * Register : GICD_ITARGETSR81
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR81_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR81_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR81_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR81_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR81_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR81_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR81_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR81_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR81.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR81_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR81. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR81_s  ALT_GIC_DIST_GICD_ITARGETSR81_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR81 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR81 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR81_OFST        0x944

/*
 * Register : GICD_ITARGETSR82
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR82_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR82_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR82_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR82_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR82_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR82_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR82_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR82_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR82.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR82_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR82. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR82_s  ALT_GIC_DIST_GICD_ITARGETSR82_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR82 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR82 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR82_OFST        0x948

/*
 * Register : GICD_ITARGETSR83
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR83_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR83_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR83_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR83_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR83_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR83_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR83_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR83_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR83.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR83_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR83. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR83_s  ALT_GIC_DIST_GICD_ITARGETSR83_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR83 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR83 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR83_OFST        0x94c

/*
 * Register : GICD_ITARGETSR84
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR84_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR84_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR84_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR84_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR84_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR84_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR84_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR84_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR84.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR84_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR84. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR84_s  ALT_GIC_DIST_GICD_ITARGETSR84_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR84 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR84 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR84_OFST        0x950

/*
 * Register : GICD_ITARGETSR85
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR85_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR85_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR85_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR85_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR85_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR85_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR85_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR85_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR85.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR85_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR85. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR85_s  ALT_GIC_DIST_GICD_ITARGETSR85_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR85 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR85 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR85_OFST        0x954

/*
 * Register : GICD_ITARGETSR86
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR86_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR86_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR86_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR86_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR86_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR86_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR86_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR86_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR86.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR86_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR86. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR86_s  ALT_GIC_DIST_GICD_ITARGETSR86_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR86 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR86 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR86_OFST        0x958

/*
 * Register : GICD_ITARGETSR87
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR87_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR87_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR87_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR87_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR87_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR87_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR87_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR87_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR87.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR87_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR87. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR87_s  ALT_GIC_DIST_GICD_ITARGETSR87_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR87 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR87 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR87_OFST        0x95c

/*
 * Register : GICD_ITARGETSR88
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR88_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR88_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR88_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR88_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR88_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR88_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR88_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR88_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR88.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR88_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR88. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR88_s  ALT_GIC_DIST_GICD_ITARGETSR88_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR88 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR88 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR88_OFST        0x960

/*
 * Register : GICD_ITARGETSR89
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR89_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR89_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR89_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR89_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR89_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR89_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR89_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR89_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR89.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR89_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR89. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR89_s  ALT_GIC_DIST_GICD_ITARGETSR89_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR89 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR89 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR89_OFST        0x964

/*
 * Register : GICD_ITARGETSR90
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR90_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR90_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR90_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR90_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR90_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR90_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR90_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR90_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR90.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR90_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR90. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR90_s  ALT_GIC_DIST_GICD_ITARGETSR90_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR90 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR90 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR90_OFST        0x968

/*
 * Register : GICD_ITARGETSR91
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR91_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR91_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR91_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR91_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR91_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR91_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR91_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR91_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR91.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR91_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR91. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR91_s  ALT_GIC_DIST_GICD_ITARGETSR91_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR91 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR91 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR91_OFST        0x96c

/*
 * Register : GICD_ITARGETSR92
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR92_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR92_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR92_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR92_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR92_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR92_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR92_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR92_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR92.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR92_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR92. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR92_s  ALT_GIC_DIST_GICD_ITARGETSR92_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR92 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR92 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR92_OFST        0x970

/*
 * Register : GICD_ITARGETSR93
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR93_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR93_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR93_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR93_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR93_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR93_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR93_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR93_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR93.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR93_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR93. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR93_s  ALT_GIC_DIST_GICD_ITARGETSR93_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR93 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR93 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR93_OFST        0x974

/*
 * Register : GICD_ITARGETSR94
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR94_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR94_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR94_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR94_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR94_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR94_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR94_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR94_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR94.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR94_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR94. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR94_s  ALT_GIC_DIST_GICD_ITARGETSR94_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR94 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR94 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR94_OFST        0x978

/*
 * Register : GICD_ITARGETSR95
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR95_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR95_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR95_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR95_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR95_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR95_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR95_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR95_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR95.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR95_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR95. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR95_s  ALT_GIC_DIST_GICD_ITARGETSR95_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR95 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR95 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR95_OFST        0x97c

/*
 * Register : GICD_ITARGETSR96
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR96_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR96_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR96_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR96_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR96_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR96_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR96_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR96_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR96.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR96_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR96. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR96_s  ALT_GIC_DIST_GICD_ITARGETSR96_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR96 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR96 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR96_OFST        0x980

/*
 * Register : GICD_ITARGETSR97
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR97_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR97_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR97_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR97_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR97_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR97_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR97_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR97_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR97.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR97_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR97. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR97_s  ALT_GIC_DIST_GICD_ITARGETSR97_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR97 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR97 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR97_OFST        0x984

/*
 * Register : GICD_ITARGETSR98
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR98_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR98_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR98_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR98_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR98_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR98_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR98_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR98_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR98.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR98_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR98. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR98_s  ALT_GIC_DIST_GICD_ITARGETSR98_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR98 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR98 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR98_OFST        0x988

/*
 * Register : GICD_ITARGETSR99
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR99_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR99_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR99_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR99_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR99_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR99_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR99_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR99_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR99.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR99_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR99. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR99_s  ALT_GIC_DIST_GICD_ITARGETSR99_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR99 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR99 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR99_OFST        0x98c

/*
 * Register : GICD_ITARGETSR100
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR100_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR100_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR100_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR100_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR100_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR100_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR100_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR100_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR100.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR100_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR100. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR100_s  ALT_GIC_DIST_GICD_ITARGETSR100_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR100 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR100 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR100_OFST        0x990

/*
 * Register : GICD_ITARGETSR101
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR101_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR101_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR101_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR101_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR101_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR101_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR101_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR101_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR101.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR101_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR101. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR101_s  ALT_GIC_DIST_GICD_ITARGETSR101_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR101 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR101 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR101_OFST        0x994

/*
 * Register : GICD_ITARGETSR102
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR102_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR102_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR102_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR102_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR102_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR102_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR102_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR102_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR102.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR102_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR102. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR102_s  ALT_GIC_DIST_GICD_ITARGETSR102_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR102 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR102 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR102_OFST        0x998

/*
 * Register : GICD_ITARGETSR103
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR103_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR103_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR103_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR103_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR103_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR103_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR103_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR103_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR103.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR103_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR103. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR103_s  ALT_GIC_DIST_GICD_ITARGETSR103_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR103 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR103 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR103_OFST        0x99c

/*
 * Register : GICD_ITARGETSR104
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR104_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR104_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR104_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR104_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR104_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR104_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR104_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR104_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR104.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR104_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR104. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR104_s  ALT_GIC_DIST_GICD_ITARGETSR104_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR104 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR104 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR104_OFST        0x9a0

/*
 * Register : GICD_ITARGETSR105
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR105_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR105_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR105_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR105_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR105_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR105_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR105_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR105_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR105.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR105_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR105. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR105_s  ALT_GIC_DIST_GICD_ITARGETSR105_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR105 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR105 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR105_OFST        0x9a4

/*
 * Register : GICD_ITARGETSR106
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR106_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR106_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR106_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR106_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR106_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR106_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR106_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR106_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR106.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR106_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR106. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR106_s  ALT_GIC_DIST_GICD_ITARGETSR106_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR106 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR106 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR106_OFST        0x9a8

/*
 * Register : GICD_ITARGETSR107
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR107_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR107_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR107_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR107_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR107_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR107_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR107_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR107_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR107.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR107_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR107. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR107_s  ALT_GIC_DIST_GICD_ITARGETSR107_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR107 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR107 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR107_OFST        0x9ac

/*
 * Register : GICD_ITARGETSR108
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR108_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR108_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR108_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR108_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR108_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR108_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR108_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR108_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR108.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR108_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR108. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR108_s  ALT_GIC_DIST_GICD_ITARGETSR108_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR108 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR108 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR108_OFST        0x9b0

/*
 * Register : GICD_ITARGETSR109
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR109_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR109_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR109_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR109_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR109_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR109_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR109_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR109_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR109.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR109_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR109. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR109_s  ALT_GIC_DIST_GICD_ITARGETSR109_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR109 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR109 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR109_OFST        0x9b4

/*
 * Register : GICD_ITARGETSR110
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR110_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR110_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR110_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR110_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR110_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR110_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR110_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR110_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR110.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR110_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR110. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR110_s  ALT_GIC_DIST_GICD_ITARGETSR110_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR110 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR110 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR110_OFST        0x9b8

/*
 * Register : GICD_ITARGETSR111
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR111_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR111_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR111_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR111_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR111_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR111_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR111_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR111_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR111.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR111_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR111. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR111_s  ALT_GIC_DIST_GICD_ITARGETSR111_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR111 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR111 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR111_OFST        0x9bc

/*
 * Register : GICD_ITARGETSR112
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR112_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR112_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR112_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR112_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR112_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR112_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR112_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR112_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR112.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR112_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR112. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR112_s  ALT_GIC_DIST_GICD_ITARGETSR112_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR112 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR112 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR112_OFST        0x9c0

/*
 * Register : GICD_ITARGETSR113
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR113_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR113_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR113_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR113_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR113_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR113_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR113_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR113_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR113.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR113_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR113. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR113_s  ALT_GIC_DIST_GICD_ITARGETSR113_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR113 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR113 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR113_OFST        0x9c4

/*
 * Register : GICD_ITARGETSR114
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR114_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR114_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR114_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR114_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR114_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR114_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR114_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR114_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR114.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR114_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR114. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR114_s  ALT_GIC_DIST_GICD_ITARGETSR114_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR114 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR114 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR114_OFST        0x9c8

/*
 * Register : GICD_ITARGETSR115
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR115_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR115_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR115_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR115_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR115_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR115_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR115_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR115_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR115.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR115_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR115. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR115_s  ALT_GIC_DIST_GICD_ITARGETSR115_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR115 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR115 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR115_OFST        0x9cc

/*
 * Register : GICD_ITARGETSR116
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR116_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR116_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR116_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR116_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR116_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR116_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR116_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR116_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR116.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR116_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR116. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR116_s  ALT_GIC_DIST_GICD_ITARGETSR116_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR116 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR116 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR116_OFST        0x9d0

/*
 * Register : GICD_ITARGETSR117
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR117_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR117_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR117_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR117_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR117_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR117_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR117_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR117_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR117.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR117_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR117. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR117_s  ALT_GIC_DIST_GICD_ITARGETSR117_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR117 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR117 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR117_OFST        0x9d4

/*
 * Register : GICD_ITARGETSR118
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR118_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR118_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR118_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR118_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR118_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR118_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR118_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR118_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR118.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR118_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR118. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR118_s  ALT_GIC_DIST_GICD_ITARGETSR118_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR118 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR118 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR118_OFST        0x9d8

/*
 * Register : GICD_ITARGETSR119
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR119_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR119_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR119_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR119_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR119_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR119_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR119_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR119_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR119.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR119_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR119. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR119_s  ALT_GIC_DIST_GICD_ITARGETSR119_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR119 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR119 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR119_OFST        0x9dc

/*
 * Register : GICD_ITARGETSR120
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR120_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR120_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR120_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR120_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR120_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR120_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR120_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR120_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR120.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR120_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR120. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR120_s  ALT_GIC_DIST_GICD_ITARGETSR120_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR120 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR120 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR120_OFST        0x9e0

/*
 * Register : GICD_ITARGETSR121
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR121_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR121_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR121_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR121_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR121_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR121_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR121_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR121_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR121.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR121_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR121. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR121_s  ALT_GIC_DIST_GICD_ITARGETSR121_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR121 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR121 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR121_OFST        0x9e4

/*
 * Register : GICD_ITARGETSR122
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR122_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR122_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR122_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR122_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR122_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR122_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR122_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR122_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR122.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR122_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR122. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR122_s  ALT_GIC_DIST_GICD_ITARGETSR122_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR122 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR122 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR122_OFST        0x9e8

/*
 * Register : GICD_ITARGETSR123
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR123_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR123_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR123_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR123_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR123_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR123_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR123_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR123_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR123.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR123_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR123. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR123_s  ALT_GIC_DIST_GICD_ITARGETSR123_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR123 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR123 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR123_OFST        0x9ec

/*
 * Register : GICD_ITARGETSR124
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR124_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR124_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR124_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR124_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR124_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR124_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR124_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR124_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR124.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR124_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR124. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR124_s  ALT_GIC_DIST_GICD_ITARGETSR124_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR124 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR124 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR124_OFST        0x9f0

/*
 * Register : GICD_ITARGETSR125
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR125_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR125_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR125_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR125_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR125_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR125_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR125_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR125_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR125.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR125_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR125. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR125_s  ALT_GIC_DIST_GICD_ITARGETSR125_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR125 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR125 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR125_OFST        0x9f4

/*
 * Register : GICD_ITARGETSR126
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR126_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR126_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR126_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR126_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR126_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR126_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR126_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR126_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR126.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR126_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR126. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR126_s  ALT_GIC_DIST_GICD_ITARGETSR126_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR126 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR126 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR126_OFST        0x9f8

/*
 * Register : GICD_ITARGETSR127
 * 
 * Interrupt Processor Targets Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ITARGETSR127_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ITARGETSR127_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ITARGETSR127_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ITARGETSR127_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ITARGETSR127_FLD register field value. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR127_FLD register field. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ITARGETSR127_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ITARGETSR127_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ITARGETSR127.
 */
struct ALT_GIC_DIST_GICD_ITARGETSR127_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ITARGETSR127. */
typedef struct ALT_GIC_DIST_GICD_ITARGETSR127_s  ALT_GIC_DIST_GICD_ITARGETSR127_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ITARGETSR127 register. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_ITARGETSR127 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ITARGETSR127_OFST        0x9fc

/*
 * Register : GICD_ICFGR0
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0xaaaaaaaa | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR0_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_RESET      0xaaaaaaaa
/* Extracts the ALT_GIC_DIST_GICD_ICFGR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR0.
 */
struct ALT_GIC_DIST_GICD_ICFGR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR0. */
typedef struct ALT_GIC_DIST_GICD_ICFGR0_s  ALT_GIC_DIST_GICD_ICFGR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR0 register. */
#define ALT_GIC_DIST_GICD_ICFGR0_RESET       0xaaaaaaaa
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR0_OFST        0xc00

/*
 * Register : GICD_ICFGR1
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR1_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR1_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_ICFGR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR1.
 */
struct ALT_GIC_DIST_GICD_ICFGR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR1. */
typedef struct ALT_GIC_DIST_GICD_ICFGR1_s  ALT_GIC_DIST_GICD_ICFGR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR1 register. */
#define ALT_GIC_DIST_GICD_ICFGR1_RESET       0x55540000
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR1_OFST        0xc04

/*
 * Register : GICD_ICFGR2
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR2_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR2.
 */
struct ALT_GIC_DIST_GICD_ICFGR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR2. */
typedef struct ALT_GIC_DIST_GICD_ICFGR2_s  ALT_GIC_DIST_GICD_ICFGR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR2 register. */
#define ALT_GIC_DIST_GICD_ICFGR2_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR2_OFST        0xc08

/*
 * Register : GICD_ICFGR3
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR3_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR3.
 */
struct ALT_GIC_DIST_GICD_ICFGR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR3. */
typedef struct ALT_GIC_DIST_GICD_ICFGR3_s  ALT_GIC_DIST_GICD_ICFGR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR3 register. */
#define ALT_GIC_DIST_GICD_ICFGR3_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR3_OFST        0xc0c

/*
 * Register : GICD_ICFGR4
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR4_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR4.
 */
struct ALT_GIC_DIST_GICD_ICFGR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR4. */
typedef struct ALT_GIC_DIST_GICD_ICFGR4_s  ALT_GIC_DIST_GICD_ICFGR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR4 register. */
#define ALT_GIC_DIST_GICD_ICFGR4_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR4_OFST        0xc10

/*
 * Register : GICD_ICFGR5
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR5_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR5.
 */
struct ALT_GIC_DIST_GICD_ICFGR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR5. */
typedef struct ALT_GIC_DIST_GICD_ICFGR5_s  ALT_GIC_DIST_GICD_ICFGR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR5 register. */
#define ALT_GIC_DIST_GICD_ICFGR5_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR5_OFST        0xc14

/*
 * Register : GICD_ICFGR6
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR6_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR6.
 */
struct ALT_GIC_DIST_GICD_ICFGR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR6. */
typedef struct ALT_GIC_DIST_GICD_ICFGR6_s  ALT_GIC_DIST_GICD_ICFGR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR6 register. */
#define ALT_GIC_DIST_GICD_ICFGR6_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR6_OFST        0xc18

/*
 * Register : GICD_ICFGR7
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR7_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR7.
 */
struct ALT_GIC_DIST_GICD_ICFGR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR7. */
typedef struct ALT_GIC_DIST_GICD_ICFGR7_s  ALT_GIC_DIST_GICD_ICFGR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR7 register. */
#define ALT_GIC_DIST_GICD_ICFGR7_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR7_OFST        0xc1c

/*
 * Register : GICD_ICFGR8
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR8_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR8.
 */
struct ALT_GIC_DIST_GICD_ICFGR8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR8. */
typedef struct ALT_GIC_DIST_GICD_ICFGR8_s  ALT_GIC_DIST_GICD_ICFGR8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR8 register. */
#define ALT_GIC_DIST_GICD_ICFGR8_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR8_OFST        0xc20

/*
 * Register : GICD_ICFGR9
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR9_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR9.
 */
struct ALT_GIC_DIST_GICD_ICFGR9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR9. */
typedef struct ALT_GIC_DIST_GICD_ICFGR9_s  ALT_GIC_DIST_GICD_ICFGR9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR9 register. */
#define ALT_GIC_DIST_GICD_ICFGR9_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR9_OFST        0xc24

/*
 * Register : GICD_ICFGR10
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR10_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR10.
 */
struct ALT_GIC_DIST_GICD_ICFGR10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR10. */
typedef struct ALT_GIC_DIST_GICD_ICFGR10_s  ALT_GIC_DIST_GICD_ICFGR10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR10 register. */
#define ALT_GIC_DIST_GICD_ICFGR10_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR10_OFST        0xc28

/*
 * Register : GICD_ICFGR11
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR11_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR11.
 */
struct ALT_GIC_DIST_GICD_ICFGR11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR11. */
typedef struct ALT_GIC_DIST_GICD_ICFGR11_s  ALT_GIC_DIST_GICD_ICFGR11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR11 register. */
#define ALT_GIC_DIST_GICD_ICFGR11_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR11_OFST        0xc2c

/*
 * Register : GICD_ICFGR12
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR12_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR12.
 */
struct ALT_GIC_DIST_GICD_ICFGR12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR12. */
typedef struct ALT_GIC_DIST_GICD_ICFGR12_s  ALT_GIC_DIST_GICD_ICFGR12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR12 register. */
#define ALT_GIC_DIST_GICD_ICFGR12_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR12_OFST        0xc30

/*
 * Register : GICD_ICFGR13
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR13_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR13.
 */
struct ALT_GIC_DIST_GICD_ICFGR13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR13. */
typedef struct ALT_GIC_DIST_GICD_ICFGR13_s  ALT_GIC_DIST_GICD_ICFGR13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR13 register. */
#define ALT_GIC_DIST_GICD_ICFGR13_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR13_OFST        0xc34

/*
 * Register : GICD_ICFGR14
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR14_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR14.
 */
struct ALT_GIC_DIST_GICD_ICFGR14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR14. */
typedef struct ALT_GIC_DIST_GICD_ICFGR14_s  ALT_GIC_DIST_GICD_ICFGR14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR14 register. */
#define ALT_GIC_DIST_GICD_ICFGR14_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR14_OFST        0xc38

/*
 * Register : GICD_ICFGR15
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR15_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR15_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR15_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR15_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR15_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR15.
 */
struct ALT_GIC_DIST_GICD_ICFGR15_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR15. */
typedef struct ALT_GIC_DIST_GICD_ICFGR15_s  ALT_GIC_DIST_GICD_ICFGR15_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR15 register. */
#define ALT_GIC_DIST_GICD_ICFGR15_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR15 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR15_OFST        0xc3c

/*
 * Register : GICD_ICFGR16
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR16_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR16_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR16_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR16_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR16_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR16_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR16.
 */
struct ALT_GIC_DIST_GICD_ICFGR16_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR16. */
typedef struct ALT_GIC_DIST_GICD_ICFGR16_s  ALT_GIC_DIST_GICD_ICFGR16_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR16 register. */
#define ALT_GIC_DIST_GICD_ICFGR16_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR16 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR16_OFST        0xc40

/*
 * Register : GICD_ICFGR17
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR17_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR17_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR17_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR17_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR17_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR17_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR17.
 */
struct ALT_GIC_DIST_GICD_ICFGR17_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR17. */
typedef struct ALT_GIC_DIST_GICD_ICFGR17_s  ALT_GIC_DIST_GICD_ICFGR17_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR17 register. */
#define ALT_GIC_DIST_GICD_ICFGR17_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR17 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR17_OFST        0xc44

/*
 * Register : GICD_ICFGR18
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR18_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR18_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR18_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR18_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR18_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR18_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR18.
 */
struct ALT_GIC_DIST_GICD_ICFGR18_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR18. */
typedef struct ALT_GIC_DIST_GICD_ICFGR18_s  ALT_GIC_DIST_GICD_ICFGR18_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR18 register. */
#define ALT_GIC_DIST_GICD_ICFGR18_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR18 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR18_OFST        0xc48

/*
 * Register : GICD_ICFGR19
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR19_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR19_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR19_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR19_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR19_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR19_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR19.
 */
struct ALT_GIC_DIST_GICD_ICFGR19_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR19. */
typedef struct ALT_GIC_DIST_GICD_ICFGR19_s  ALT_GIC_DIST_GICD_ICFGR19_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR19 register. */
#define ALT_GIC_DIST_GICD_ICFGR19_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR19 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR19_OFST        0xc4c

/*
 * Register : GICD_ICFGR20
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR20_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR20_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR20_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR20_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR20_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR20_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR20.
 */
struct ALT_GIC_DIST_GICD_ICFGR20_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR20. */
typedef struct ALT_GIC_DIST_GICD_ICFGR20_s  ALT_GIC_DIST_GICD_ICFGR20_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR20 register. */
#define ALT_GIC_DIST_GICD_ICFGR20_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR20 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR20_OFST        0xc50

/*
 * Register : GICD_ICFGR21
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR21_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR21_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR21_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR21_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR21_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR21_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR21.
 */
struct ALT_GIC_DIST_GICD_ICFGR21_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR21. */
typedef struct ALT_GIC_DIST_GICD_ICFGR21_s  ALT_GIC_DIST_GICD_ICFGR21_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR21 register. */
#define ALT_GIC_DIST_GICD_ICFGR21_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR21 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR21_OFST        0xc54

/*
 * Register : GICD_ICFGR22
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR22_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR22_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR22_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR22_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR22_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR22_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR22.
 */
struct ALT_GIC_DIST_GICD_ICFGR22_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR22. */
typedef struct ALT_GIC_DIST_GICD_ICFGR22_s  ALT_GIC_DIST_GICD_ICFGR22_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR22 register. */
#define ALT_GIC_DIST_GICD_ICFGR22_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR22 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR22_OFST        0xc58

/*
 * Register : GICD_ICFGR23
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR23_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR23_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR23_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR23_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR23_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR23_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR23.
 */
struct ALT_GIC_DIST_GICD_ICFGR23_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR23. */
typedef struct ALT_GIC_DIST_GICD_ICFGR23_s  ALT_GIC_DIST_GICD_ICFGR23_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR23 register. */
#define ALT_GIC_DIST_GICD_ICFGR23_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR23 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR23_OFST        0xc5c

/*
 * Register : GICD_ICFGR24
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR24_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR24_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR24_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR24_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR24_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR24_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR24.
 */
struct ALT_GIC_DIST_GICD_ICFGR24_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR24. */
typedef struct ALT_GIC_DIST_GICD_ICFGR24_s  ALT_GIC_DIST_GICD_ICFGR24_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR24 register. */
#define ALT_GIC_DIST_GICD_ICFGR24_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR24 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR24_OFST        0xc60

/*
 * Register : GICD_ICFGR25
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR25_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR25_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR25_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR25_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR25_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR25_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR25.
 */
struct ALT_GIC_DIST_GICD_ICFGR25_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR25. */
typedef struct ALT_GIC_DIST_GICD_ICFGR25_s  ALT_GIC_DIST_GICD_ICFGR25_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR25 register. */
#define ALT_GIC_DIST_GICD_ICFGR25_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR25 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR25_OFST        0xc64

/*
 * Register : GICD_ICFGR26
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR26_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR26_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR26_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR26_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR26_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR26_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR26.
 */
struct ALT_GIC_DIST_GICD_ICFGR26_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR26. */
typedef struct ALT_GIC_DIST_GICD_ICFGR26_s  ALT_GIC_DIST_GICD_ICFGR26_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR26 register. */
#define ALT_GIC_DIST_GICD_ICFGR26_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR26 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR26_OFST        0xc68

/*
 * Register : GICD_ICFGR27
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR27_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR27_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR27_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR27_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR27_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR27_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR27.
 */
struct ALT_GIC_DIST_GICD_ICFGR27_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR27. */
typedef struct ALT_GIC_DIST_GICD_ICFGR27_s  ALT_GIC_DIST_GICD_ICFGR27_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR27 register. */
#define ALT_GIC_DIST_GICD_ICFGR27_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR27 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR27_OFST        0xc6c

/*
 * Register : GICD_ICFGR28
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR28_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR28_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR28_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR28_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR28_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR28_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR28.
 */
struct ALT_GIC_DIST_GICD_ICFGR28_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR28. */
typedef struct ALT_GIC_DIST_GICD_ICFGR28_s  ALT_GIC_DIST_GICD_ICFGR28_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR28 register. */
#define ALT_GIC_DIST_GICD_ICFGR28_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR28 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR28_OFST        0xc70

/*
 * Register : GICD_ICFGR29
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR29_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR29_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR29_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR29_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR29_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR29_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR29.
 */
struct ALT_GIC_DIST_GICD_ICFGR29_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR29. */
typedef struct ALT_GIC_DIST_GICD_ICFGR29_s  ALT_GIC_DIST_GICD_ICFGR29_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR29 register. */
#define ALT_GIC_DIST_GICD_ICFGR29_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR29 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR29_OFST        0xc74

/*
 * Register : GICD_ICFGR30
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR30_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR30_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR30_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR30_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR30_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR30_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR30.
 */
struct ALT_GIC_DIST_GICD_ICFGR30_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR30. */
typedef struct ALT_GIC_DIST_GICD_ICFGR30_s  ALT_GIC_DIST_GICD_ICFGR30_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR30 register. */
#define ALT_GIC_DIST_GICD_ICFGR30_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR30 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR30_OFST        0xc78

/*
 * Register : GICD_ICFGR31
 * 
 * Interrupt Configuration Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x55555555 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_ICFGR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_ICFGR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_ICFGR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_ICFGR31_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_ICFGR31_FLD register field value. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_ICFGR31_FLD register field. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_RESET      0x55555555
/* Extracts the ALT_GIC_DIST_GICD_ICFGR31_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_ICFGR31_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_ICFGR31_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_ICFGR31.
 */
struct ALT_GIC_DIST_GICD_ICFGR31_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_ICFGR31. */
typedef struct ALT_GIC_DIST_GICD_ICFGR31_s  ALT_GIC_DIST_GICD_ICFGR31_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_ICFGR31 register. */
#define ALT_GIC_DIST_GICD_ICFGR31_RESET       0x55555555
/* The byte offset of the ALT_GIC_DIST_GICD_ICFGR31 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_ICFGR31_OFST        0xc7c

/*
 * Register : GICD_PPISR
 * 
 * Private Peripheral Interrupt Status Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PPISR_FLD register field. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PPISR_FLD register field. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PPISR_FLD register field. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PPISR_FLD register field value. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PPISR_FLD register field value. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PPISR_FLD register field. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_PPISR_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PPISR_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PPISR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PPISR.
 */
struct ALT_GIC_DIST_GICD_PPISR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PPISR. */
typedef struct ALT_GIC_DIST_GICD_PPISR_s  ALT_GIC_DIST_GICD_PPISR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PPISR register. */
#define ALT_GIC_DIST_GICD_PPISR_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_PPISR register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PPISR_OFST        0xd00

/*
 * Register : GICD_SPISR0
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR0.
 */
struct ALT_GIC_DIST_GICD_SPISR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR0. */
typedef struct ALT_GIC_DIST_GICD_SPISR0_s  ALT_GIC_DIST_GICD_SPISR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR0 register. */
#define ALT_GIC_DIST_GICD_SPISR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR0_OFST        0xd04

/*
 * Register : GICD_SPISR1
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR1.
 */
struct ALT_GIC_DIST_GICD_SPISR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR1. */
typedef struct ALT_GIC_DIST_GICD_SPISR1_s  ALT_GIC_DIST_GICD_SPISR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR1 register. */
#define ALT_GIC_DIST_GICD_SPISR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR1_OFST        0xd08

/*
 * Register : GICD_SPISR2
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR2.
 */
struct ALT_GIC_DIST_GICD_SPISR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR2. */
typedef struct ALT_GIC_DIST_GICD_SPISR2_s  ALT_GIC_DIST_GICD_SPISR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR2 register. */
#define ALT_GIC_DIST_GICD_SPISR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR2_OFST        0xd0c

/*
 * Register : GICD_SPISR3
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR3.
 */
struct ALT_GIC_DIST_GICD_SPISR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR3. */
typedef struct ALT_GIC_DIST_GICD_SPISR3_s  ALT_GIC_DIST_GICD_SPISR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR3 register. */
#define ALT_GIC_DIST_GICD_SPISR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR3_OFST        0xd10

/*
 * Register : GICD_SPISR4
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR4_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR4_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR4_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR4_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR4.
 */
struct ALT_GIC_DIST_GICD_SPISR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR4. */
typedef struct ALT_GIC_DIST_GICD_SPISR4_s  ALT_GIC_DIST_GICD_SPISR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR4 register. */
#define ALT_GIC_DIST_GICD_SPISR4_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR4_OFST        0xd14

/*
 * Register : GICD_SPISR5
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR5_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR5_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR5_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR5_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR5.
 */
struct ALT_GIC_DIST_GICD_SPISR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR5. */
typedef struct ALT_GIC_DIST_GICD_SPISR5_s  ALT_GIC_DIST_GICD_SPISR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR5 register. */
#define ALT_GIC_DIST_GICD_SPISR5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR5_OFST        0xd18

/*
 * Register : GICD_SPISR6
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR6_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR6_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR6_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR6_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR6.
 */
struct ALT_GIC_DIST_GICD_SPISR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR6. */
typedef struct ALT_GIC_DIST_GICD_SPISR6_s  ALT_GIC_DIST_GICD_SPISR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR6 register. */
#define ALT_GIC_DIST_GICD_SPISR6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR6_OFST        0xd1c

/*
 * Register : GICD_SPISR7
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR7_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR7_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR7_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR7_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR7.
 */
struct ALT_GIC_DIST_GICD_SPISR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR7. */
typedef struct ALT_GIC_DIST_GICD_SPISR7_s  ALT_GIC_DIST_GICD_SPISR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR7 register. */
#define ALT_GIC_DIST_GICD_SPISR7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR7_OFST        0xd20

/*
 * Register : GICD_SPISR8
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR8_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR8_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR8_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR8_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR8_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR8_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR8_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR8_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR8.
 */
struct ALT_GIC_DIST_GICD_SPISR8_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR8. */
typedef struct ALT_GIC_DIST_GICD_SPISR8_s  ALT_GIC_DIST_GICD_SPISR8_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR8 register. */
#define ALT_GIC_DIST_GICD_SPISR8_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR8 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR8_OFST        0xd24

/*
 * Register : GICD_SPISR9
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR9_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR9_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR9_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR9_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR9_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR9_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR9_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR9_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR9.
 */
struct ALT_GIC_DIST_GICD_SPISR9_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR9. */
typedef struct ALT_GIC_DIST_GICD_SPISR9_s  ALT_GIC_DIST_GICD_SPISR9_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR9 register. */
#define ALT_GIC_DIST_GICD_SPISR9_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR9 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR9_OFST        0xd28

/*
 * Register : GICD_SPISR10
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR10_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR10_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR10_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR10_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR10_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR10_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR10_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR10_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR10.
 */
struct ALT_GIC_DIST_GICD_SPISR10_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR10. */
typedef struct ALT_GIC_DIST_GICD_SPISR10_s  ALT_GIC_DIST_GICD_SPISR10_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR10 register. */
#define ALT_GIC_DIST_GICD_SPISR10_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR10 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR10_OFST        0xd2c

/*
 * Register : GICD_SPISR11
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR11_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR11_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR11_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR11_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR11_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR11_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR11_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR11_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR11.
 */
struct ALT_GIC_DIST_GICD_SPISR11_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR11. */
typedef struct ALT_GIC_DIST_GICD_SPISR11_s  ALT_GIC_DIST_GICD_SPISR11_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR11 register. */
#define ALT_GIC_DIST_GICD_SPISR11_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR11 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR11_OFST        0xd30

/*
 * Register : GICD_SPISR12
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR12_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR12_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR12_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR12_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR12_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR12_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR12_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR12_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR12.
 */
struct ALT_GIC_DIST_GICD_SPISR12_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR12. */
typedef struct ALT_GIC_DIST_GICD_SPISR12_s  ALT_GIC_DIST_GICD_SPISR12_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR12 register. */
#define ALT_GIC_DIST_GICD_SPISR12_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR12 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR12_OFST        0xd34

/*
 * Register : GICD_SPISR13
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR13_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR13_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR13_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR13_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR13_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR13_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR13_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR13_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR13.
 */
struct ALT_GIC_DIST_GICD_SPISR13_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR13. */
typedef struct ALT_GIC_DIST_GICD_SPISR13_s  ALT_GIC_DIST_GICD_SPISR13_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR13 register. */
#define ALT_GIC_DIST_GICD_SPISR13_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR13 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR13_OFST        0xd38

/*
 * Register : GICD_SPISR14
 * 
 * Shared Peripheral Interrupt Status Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPISR14_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPISR14_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPISR14_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPISR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPISR14_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPISR14_FLD register field. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPISR14_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPISR14_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPISR14_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPISR14.
 */
struct ALT_GIC_DIST_GICD_SPISR14_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPISR14. */
typedef struct ALT_GIC_DIST_GICD_SPISR14_s  ALT_GIC_DIST_GICD_SPISR14_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPISR14 register. */
#define ALT_GIC_DIST_GICD_SPISR14_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPISR14 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPISR14_OFST        0xd3c

/*
 * Register : GICD_SGIR
 * 
 * Software Generated Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SGIR_FLD register field. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SGIR_FLD register field. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SGIR_FLD register field. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SGIR_FLD register field value. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SGIR_FLD register field value. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SGIR_FLD register field is UNKNOWN. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SGIR_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SGIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SGIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SGIR.
 */
struct ALT_GIC_DIST_GICD_SGIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SGIR. */
typedef struct ALT_GIC_DIST_GICD_SGIR_s  ALT_GIC_DIST_GICD_SGIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SGIR register. */
#define ALT_GIC_DIST_GICD_SGIR_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SGIR register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SGIR_OFST        0xf00

/*
 * Register : GICD_CPENDSGIR0
 * 
 * SGI Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CPENDSGIR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CPENDSGIR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_CPENDSGIR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CPENDSGIR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CPENDSGIR0.
 */
struct ALT_GIC_DIST_GICD_CPENDSGIR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CPENDSGIR0. */
typedef struct ALT_GIC_DIST_GICD_CPENDSGIR0_s  ALT_GIC_DIST_GICD_CPENDSGIR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR0 register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_CPENDSGIR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CPENDSGIR0_OFST        0xf10

/*
 * Register : GICD_CPENDSGIR1
 * 
 * SGI Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CPENDSGIR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CPENDSGIR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_CPENDSGIR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CPENDSGIR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CPENDSGIR1.
 */
struct ALT_GIC_DIST_GICD_CPENDSGIR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CPENDSGIR1. */
typedef struct ALT_GIC_DIST_GICD_CPENDSGIR1_s  ALT_GIC_DIST_GICD_CPENDSGIR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR1 register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_CPENDSGIR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CPENDSGIR1_OFST        0xf14

/*
 * Register : GICD_CPENDSGIR2
 * 
 * SGI Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CPENDSGIR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CPENDSGIR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_CPENDSGIR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CPENDSGIR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CPENDSGIR2.
 */
struct ALT_GIC_DIST_GICD_CPENDSGIR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CPENDSGIR2. */
typedef struct ALT_GIC_DIST_GICD_CPENDSGIR2_s  ALT_GIC_DIST_GICD_CPENDSGIR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR2 register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_CPENDSGIR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CPENDSGIR2_OFST        0xf18

/*
 * Register : GICD_CPENDSGIR3
 * 
 * SGI Clear-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CPENDSGIR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CPENDSGIR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_CPENDSGIR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CPENDSGIR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CPENDSGIR3.
 */
struct ALT_GIC_DIST_GICD_CPENDSGIR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CPENDSGIR3. */
typedef struct ALT_GIC_DIST_GICD_CPENDSGIR3_s  ALT_GIC_DIST_GICD_CPENDSGIR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CPENDSGIR3 register. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_CPENDSGIR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CPENDSGIR3_OFST        0xf1c

/*
 * Register : GICD_SPENDSGIR0
 * 
 * SGI Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPENDSGIR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPENDSGIR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR0_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPENDSGIR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPENDSGIR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPENDSGIR0.
 */
struct ALT_GIC_DIST_GICD_SPENDSGIR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPENDSGIR0. */
typedef struct ALT_GIC_DIST_GICD_SPENDSGIR0_s  ALT_GIC_DIST_GICD_SPENDSGIR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR0 register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPENDSGIR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPENDSGIR0_OFST        0xf20

/*
 * Register : GICD_SPENDSGIR1
 * 
 * SGI Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPENDSGIR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPENDSGIR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR1_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPENDSGIR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPENDSGIR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPENDSGIR1.
 */
struct ALT_GIC_DIST_GICD_SPENDSGIR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPENDSGIR1. */
typedef struct ALT_GIC_DIST_GICD_SPENDSGIR1_s  ALT_GIC_DIST_GICD_SPENDSGIR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR1 register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPENDSGIR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPENDSGIR1_OFST        0xf24

/*
 * Register : GICD_SPENDSGIR2
 * 
 * SGI Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPENDSGIR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPENDSGIR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR2_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPENDSGIR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPENDSGIR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPENDSGIR2.
 */
struct ALT_GIC_DIST_GICD_SPENDSGIR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPENDSGIR2. */
typedef struct ALT_GIC_DIST_GICD_SPENDSGIR2_s  ALT_GIC_DIST_GICD_SPENDSGIR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR2 register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPENDSGIR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPENDSGIR2_OFST        0xf28

/*
 * Register : GICD_SPENDSGIR3
 * 
 * SGI Set-Pending Registers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_SPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_SPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_SPENDSGIR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_SPENDSGIR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR3_FLD register field. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_SPENDSGIR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_SPENDSGIR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_SPENDSGIR3.
 */
struct ALT_GIC_DIST_GICD_SPENDSGIR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_SPENDSGIR3. */
typedef struct ALT_GIC_DIST_GICD_SPENDSGIR3_s  ALT_GIC_DIST_GICD_SPENDSGIR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_SPENDSGIR3 register. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_SPENDSGIR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_SPENDSGIR3_OFST        0xf2c

/*
 * Register : GICD_PIDR4
 * 
 * Peripheral ID4 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x4   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR4_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR4_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_RESET      0x4
/* Extracts the ALT_GIC_DIST_GICD_PIDR4_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR4_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR4_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR4.
 */
struct ALT_GIC_DIST_GICD_PIDR4_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR4. */
typedef struct ALT_GIC_DIST_GICD_PIDR4_s  ALT_GIC_DIST_GICD_PIDR4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR4 register. */
#define ALT_GIC_DIST_GICD_PIDR4_RESET       0x00000004
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR4 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR4_OFST        0xfd0

/*
 * Register : GICD_PIDR5
 * 
 * Peripheral ID5 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR5_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR5_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_PIDR5_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR5_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR5_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR5.
 */
struct ALT_GIC_DIST_GICD_PIDR5_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR5. */
typedef struct ALT_GIC_DIST_GICD_PIDR5_s  ALT_GIC_DIST_GICD_PIDR5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR5 register. */
#define ALT_GIC_DIST_GICD_PIDR5_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR5 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR5_OFST        0xfd4

/*
 * Register : GICD_PIDR6
 * 
 * Peripheral ID6 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR6_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR6_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_PIDR6_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR6_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR6_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR6.
 */
struct ALT_GIC_DIST_GICD_PIDR6_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR6. */
typedef struct ALT_GIC_DIST_GICD_PIDR6_s  ALT_GIC_DIST_GICD_PIDR6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR6 register. */
#define ALT_GIC_DIST_GICD_PIDR6_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR6 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR6_OFST        0xfd8

/*
 * Register : GICD_PIDR7
 * 
 * Peripheral ID7 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR7_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR7_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_PIDR7_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR7_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR7_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR7.
 */
struct ALT_GIC_DIST_GICD_PIDR7_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR7. */
typedef struct ALT_GIC_DIST_GICD_PIDR7_s  ALT_GIC_DIST_GICD_PIDR7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR7 register. */
#define ALT_GIC_DIST_GICD_PIDR7_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR7 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR7_OFST        0xfdc

/*
 * Register : GICD_PIDR0
 * 
 * Peripheral ID0 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x90  | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_RESET      0x90
/* Extracts the ALT_GIC_DIST_GICD_PIDR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR0.
 */
struct ALT_GIC_DIST_GICD_PIDR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR0. */
typedef struct ALT_GIC_DIST_GICD_PIDR0_s  ALT_GIC_DIST_GICD_PIDR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR0 register. */
#define ALT_GIC_DIST_GICD_PIDR0_RESET       0x00000090
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR0_OFST        0xfe0

/*
 * Register : GICD_PIDR1
 * 
 * Peripheral ID1 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0xb4  | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_RESET      0xb4
/* Extracts the ALT_GIC_DIST_GICD_PIDR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR1.
 */
struct ALT_GIC_DIST_GICD_PIDR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR1. */
typedef struct ALT_GIC_DIST_GICD_PIDR1_s  ALT_GIC_DIST_GICD_PIDR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR1 register. */
#define ALT_GIC_DIST_GICD_PIDR1_RESET       0x000000b4
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR1_OFST        0xfe4

/*
 * Register : GICD_PIDR2
 * 
 * Peripheral ID2 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x2b  | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_RESET      0x2b
/* Extracts the ALT_GIC_DIST_GICD_PIDR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR2.
 */
struct ALT_GIC_DIST_GICD_PIDR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR2. */
typedef struct ALT_GIC_DIST_GICD_PIDR2_s  ALT_GIC_DIST_GICD_PIDR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR2 register. */
#define ALT_GIC_DIST_GICD_PIDR2_RESET       0x0000002b
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR2_OFST        0xfe8

/*
 * Register : GICD_PIDR3
 * 
 * Peripheral ID3 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_PIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_PIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_PIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_PIDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_PIDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_PIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_DIST_GICD_PIDR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_PIDR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_PIDR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_PIDR3.
 */
struct ALT_GIC_DIST_GICD_PIDR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_PIDR3. */
typedef struct ALT_GIC_DIST_GICD_PIDR3_s  ALT_GIC_DIST_GICD_PIDR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_PIDR3 register. */
#define ALT_GIC_DIST_GICD_PIDR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_DIST_GICD_PIDR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_PIDR3_OFST        0xfec

/*
 * Register : GICD_CIDR0
 * 
 * Component ID0 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0xd   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CIDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CIDR0_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CIDR0_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_RESET      0xd
/* Extracts the ALT_GIC_DIST_GICD_CIDR0_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CIDR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CIDR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CIDR0.
 */
struct ALT_GIC_DIST_GICD_CIDR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CIDR0. */
typedef struct ALT_GIC_DIST_GICD_CIDR0_s  ALT_GIC_DIST_GICD_CIDR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CIDR0 register. */
#define ALT_GIC_DIST_GICD_CIDR0_RESET       0x0000000d
/* The byte offset of the ALT_GIC_DIST_GICD_CIDR0 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CIDR0_OFST        0xff0

/*
 * Register : GICD_CIDR1
 * 
 * Component ID1 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0xf0  | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CIDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CIDR1_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CIDR1_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_RESET      0xf0
/* Extracts the ALT_GIC_DIST_GICD_CIDR1_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CIDR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CIDR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CIDR1.
 */
struct ALT_GIC_DIST_GICD_CIDR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CIDR1. */
typedef struct ALT_GIC_DIST_GICD_CIDR1_s  ALT_GIC_DIST_GICD_CIDR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CIDR1 register. */
#define ALT_GIC_DIST_GICD_CIDR1_RESET       0x000000f0
/* The byte offset of the ALT_GIC_DIST_GICD_CIDR1 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CIDR1_OFST        0xff4

/*
 * Register : GICD_CIDR2
 * 
 * Component ID2 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x5   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CIDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CIDR2_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CIDR2_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_RESET      0x5
/* Extracts the ALT_GIC_DIST_GICD_CIDR2_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CIDR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CIDR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CIDR2.
 */
struct ALT_GIC_DIST_GICD_CIDR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CIDR2. */
typedef struct ALT_GIC_DIST_GICD_CIDR2_s  ALT_GIC_DIST_GICD_CIDR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CIDR2 register. */
#define ALT_GIC_DIST_GICD_CIDR2_RESET       0x00000005
/* The byte offset of the ALT_GIC_DIST_GICD_CIDR2 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CIDR2_OFST        0xff8

/*
 * Register : GICD_CIDR3
 * 
 * Component ID3 Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0xb1  | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_DIST_GICD_CIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_DIST_GICD_CIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_DIST_GICD_CIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_DIST_GICD_CIDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_DIST_GICD_CIDR3_FLD register field value. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_DIST_GICD_CIDR3_FLD register field. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_RESET      0xb1
/* Extracts the ALT_GIC_DIST_GICD_CIDR3_FLD field value from a register. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_DIST_GICD_CIDR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_DIST_GICD_CIDR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_DIST_GICD_CIDR3.
 */
struct ALT_GIC_DIST_GICD_CIDR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_DIST_GICD_CIDR3. */
typedef struct ALT_GIC_DIST_GICD_CIDR3_s  ALT_GIC_DIST_GICD_CIDR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_DIST_GICD_CIDR3 register. */
#define ALT_GIC_DIST_GICD_CIDR3_RESET       0x000000b1
/* The byte offset of the ALT_GIC_DIST_GICD_CIDR3 register from the beginning of the component. */
#define ALT_GIC_DIST_GICD_CIDR3_OFST        0xffc

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_GIC_DIST.
 */
struct ALT_GIC_DIST_s
{
    volatile ALT_GIC_DIST_GICD_CTLR_t           GICD_CTLR;              /* ALT_GIC_DIST_GICD_CTLR */
    volatile ALT_GIC_DIST_GICD_TYPER_t          GICD_TYPER;             /* ALT_GIC_DIST_GICD_TYPER */
    volatile ALT_GIC_DIST_GICD_IIDR_t           GICD_IIDR;              /* ALT_GIC_DIST_GICD_IIDR */
    volatile uint32_t                           _pad_0xc_0x7f[29];      /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_IGROUPR0_t       GICD_IGROUPR0;          /* ALT_GIC_DIST_GICD_IGROUPR0 */
    volatile ALT_GIC_DIST_GICD_IGROUPR1_t       GICD_IGROUPR1;          /* ALT_GIC_DIST_GICD_IGROUPR1 */
    volatile ALT_GIC_DIST_GICD_IGROUPR2_t       GICD_IGROUPR2;          /* ALT_GIC_DIST_GICD_IGROUPR2 */
    volatile ALT_GIC_DIST_GICD_IGROUPR3_t       GICD_IGROUPR3;          /* ALT_GIC_DIST_GICD_IGROUPR3 */
    volatile ALT_GIC_DIST_GICD_IGROUPR4_t       GICD_IGROUPR4;          /* ALT_GIC_DIST_GICD_IGROUPR4 */
    volatile ALT_GIC_DIST_GICD_IGROUPR5_t       GICD_IGROUPR5;          /* ALT_GIC_DIST_GICD_IGROUPR5 */
    volatile ALT_GIC_DIST_GICD_IGROUPR6_t       GICD_IGROUPR6;          /* ALT_GIC_DIST_GICD_IGROUPR6 */
    volatile ALT_GIC_DIST_GICD_IGROUPR7_t       GICD_IGROUPR7;          /* ALT_GIC_DIST_GICD_IGROUPR7 */
    volatile ALT_GIC_DIST_GICD_IGROUPR8_t       GICD_IGROUPR8;          /* ALT_GIC_DIST_GICD_IGROUPR8 */
    volatile ALT_GIC_DIST_GICD_IGROUPR9_t       GICD_IGROUPR9;          /* ALT_GIC_DIST_GICD_IGROUPR9 */
    volatile ALT_GIC_DIST_GICD_IGROUPR10_t      GICD_IGROUPR10;         /* ALT_GIC_DIST_GICD_IGROUPR10 */
    volatile ALT_GIC_DIST_GICD_IGROUPR11_t      GICD_IGROUPR11;         /* ALT_GIC_DIST_GICD_IGROUPR11 */
    volatile ALT_GIC_DIST_GICD_IGROUPR12_t      GICD_IGROUPR12;         /* ALT_GIC_DIST_GICD_IGROUPR12 */
    volatile ALT_GIC_DIST_GICD_IGROUPR13_t      GICD_IGROUPR13;         /* ALT_GIC_DIST_GICD_IGROUPR13 */
    volatile ALT_GIC_DIST_GICD_IGROUPR14_t      GICD_IGROUPR14;         /* ALT_GIC_DIST_GICD_IGROUPR14 */
    volatile ALT_GIC_DIST_GICD_IGROUPR15_t      GICD_IGROUPR15;         /* ALT_GIC_DIST_GICD_IGROUPR15 */
    volatile uint32_t                           _pad_0xc0_0xff[16];     /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ISENABLER0_t     GICD_ISENABLER0;        /* ALT_GIC_DIST_GICD_ISENABLER0 */
    volatile ALT_GIC_DIST_GICD_ISENABLER1_t     GICD_ISENABLER1;        /* ALT_GIC_DIST_GICD_ISENABLER1 */
    volatile ALT_GIC_DIST_GICD_ISENABLER2_t     GICD_ISENABLER2;        /* ALT_GIC_DIST_GICD_ISENABLER2 */
    volatile ALT_GIC_DIST_GICD_ISENABLER3_t     GICD_ISENABLER3;        /* ALT_GIC_DIST_GICD_ISENABLER3 */
    volatile ALT_GIC_DIST_GICD_ISENABLER4_t     GICD_ISENABLER4;        /* ALT_GIC_DIST_GICD_ISENABLER4 */
    volatile ALT_GIC_DIST_GICD_ISENABLER5_t     GICD_ISENABLER5;        /* ALT_GIC_DIST_GICD_ISENABLER5 */
    volatile ALT_GIC_DIST_GICD_ISENABLER6_t     GICD_ISENABLER6;        /* ALT_GIC_DIST_GICD_ISENABLER6 */
    volatile ALT_GIC_DIST_GICD_ISENABLER7_t     GICD_ISENABLER7;        /* ALT_GIC_DIST_GICD_ISENABLER7 */
    volatile ALT_GIC_DIST_GICD_ISENABLER8_t     GICD_ISENABLER8;        /* ALT_GIC_DIST_GICD_ISENABLER8 */
    volatile ALT_GIC_DIST_GICD_ISENABLER9_t     GICD_ISENABLER9;        /* ALT_GIC_DIST_GICD_ISENABLER9 */
    volatile ALT_GIC_DIST_GICD_ISENABLER10_t    GICD_ISENABLER10;       /* ALT_GIC_DIST_GICD_ISENABLER10 */
    volatile ALT_GIC_DIST_GICD_ISENABLER11_t    GICD_ISENABLER11;       /* ALT_GIC_DIST_GICD_ISENABLER11 */
    volatile ALT_GIC_DIST_GICD_ISENABLER12_t    GICD_ISENABLER12;       /* ALT_GIC_DIST_GICD_ISENABLER12 */
    volatile ALT_GIC_DIST_GICD_ISENABLER13_t    GICD_ISENABLER13;       /* ALT_GIC_DIST_GICD_ISENABLER13 */
    volatile ALT_GIC_DIST_GICD_ISENABLER14_t    GICD_ISENABLER14;       /* ALT_GIC_DIST_GICD_ISENABLER14 */
    volatile ALT_GIC_DIST_GICD_ISENABLER15_t    GICD_ISENABLER15;       /* ALT_GIC_DIST_GICD_ISENABLER15 */
    volatile uint32_t                           _pad_0x140_0x17f[16];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ICENABLER0_t     GICD_ICENABLER0;        /* ALT_GIC_DIST_GICD_ICENABLER0 */
    volatile ALT_GIC_DIST_GICD_ICENABLER1_t     GICD_ICENABLER1;        /* ALT_GIC_DIST_GICD_ICENABLER1 */
    volatile ALT_GIC_DIST_GICD_ICENABLER2_t     GICD_ICENABLER2;        /* ALT_GIC_DIST_GICD_ICENABLER2 */
    volatile ALT_GIC_DIST_GICD_ICENABLER3_t     GICD_ICENABLER3;        /* ALT_GIC_DIST_GICD_ICENABLER3 */
    volatile ALT_GIC_DIST_GICD_ICENABLER4_t     GICD_ICENABLER4;        /* ALT_GIC_DIST_GICD_ICENABLER4 */
    volatile ALT_GIC_DIST_GICD_ICENABLER5_t     GICD_ICENABLER5;        /* ALT_GIC_DIST_GICD_ICENABLER5 */
    volatile ALT_GIC_DIST_GICD_ICENABLER6_t     GICD_ICENABLER6;        /* ALT_GIC_DIST_GICD_ICENABLER6 */
    volatile ALT_GIC_DIST_GICD_ICENABLER7_t     GICD_ICENABLER7;        /* ALT_GIC_DIST_GICD_ICENABLER7 */
    volatile ALT_GIC_DIST_GICD_ICENABLER8_t     GICD_ICENABLER8;        /* ALT_GIC_DIST_GICD_ICENABLER8 */
    volatile ALT_GIC_DIST_GICD_ICENABLER9_t     GICD_ICENABLER9;        /* ALT_GIC_DIST_GICD_ICENABLER9 */
    volatile ALT_GIC_DIST_GICD_ICENABLER10_t    GICD_ICENABLER10;       /* ALT_GIC_DIST_GICD_ICENABLER10 */
    volatile ALT_GIC_DIST_GICD_ICENABLER11_t    GICD_ICENABLER11;       /* ALT_GIC_DIST_GICD_ICENABLER11 */
    volatile ALT_GIC_DIST_GICD_ICENABLER12_t    GICD_ICENABLER12;       /* ALT_GIC_DIST_GICD_ICENABLER12 */
    volatile ALT_GIC_DIST_GICD_ICENABLER13_t    GICD_ICENABLER13;       /* ALT_GIC_DIST_GICD_ICENABLER13 */
    volatile ALT_GIC_DIST_GICD_ICENABLER14_t    GICD_ICENABLER14;       /* ALT_GIC_DIST_GICD_ICENABLER14 */
    volatile ALT_GIC_DIST_GICD_ICENABLER15_t    GICD_ICENABLER15;       /* ALT_GIC_DIST_GICD_ICENABLER15 */
    volatile uint32_t                           _pad_0x1c0_0x1ff[16];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ISPENDR0_t       GICD_ISPENDR0;          /* ALT_GIC_DIST_GICD_ISPENDR0 */
    volatile ALT_GIC_DIST_GICD_ISPENDR1_t       GICD_ISPENDR1;          /* ALT_GIC_DIST_GICD_ISPENDR1 */
    volatile ALT_GIC_DIST_GICD_ISPENDR2_t       GICD_ISPENDR2;          /* ALT_GIC_DIST_GICD_ISPENDR2 */
    volatile ALT_GIC_DIST_GICD_ISPENDR3_t       GICD_ISPENDR3;          /* ALT_GIC_DIST_GICD_ISPENDR3 */
    volatile ALT_GIC_DIST_GICD_ISPENDR4_t       GICD_ISPENDR4;          /* ALT_GIC_DIST_GICD_ISPENDR4 */
    volatile ALT_GIC_DIST_GICD_ISPENDR5_t       GICD_ISPENDR5;          /* ALT_GIC_DIST_GICD_ISPENDR5 */
    volatile ALT_GIC_DIST_GICD_ISPENDR6_t       GICD_ISPENDR6;          /* ALT_GIC_DIST_GICD_ISPENDR6 */
    volatile ALT_GIC_DIST_GICD_ISPENDR7_t       GICD_ISPENDR7;          /* ALT_GIC_DIST_GICD_ISPENDR7 */
    volatile ALT_GIC_DIST_GICD_ISPENDR8_t       GICD_ISPENDR8;          /* ALT_GIC_DIST_GICD_ISPENDR8 */
    volatile ALT_GIC_DIST_GICD_ISPENDR9_t       GICD_ISPENDR9;          /* ALT_GIC_DIST_GICD_ISPENDR9 */
    volatile ALT_GIC_DIST_GICD_ISPENDR10_t      GICD_ISPENDR10;         /* ALT_GIC_DIST_GICD_ISPENDR10 */
    volatile ALT_GIC_DIST_GICD_ISPENDR11_t      GICD_ISPENDR11;         /* ALT_GIC_DIST_GICD_ISPENDR11 */
    volatile ALT_GIC_DIST_GICD_ISPENDR12_t      GICD_ISPENDR12;         /* ALT_GIC_DIST_GICD_ISPENDR12 */
    volatile ALT_GIC_DIST_GICD_ISPENDR13_t      GICD_ISPENDR13;         /* ALT_GIC_DIST_GICD_ISPENDR13 */
    volatile ALT_GIC_DIST_GICD_ISPENDR14_t      GICD_ISPENDR14;         /* ALT_GIC_DIST_GICD_ISPENDR14 */
    volatile ALT_GIC_DIST_GICD_ISPENDR15_t      GICD_ISPENDR15;         /* ALT_GIC_DIST_GICD_ISPENDR15 */
    volatile uint32_t                           _pad_0x240_0x27f[16];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ICPENDR0_t       GICD_ICPENDR0;          /* ALT_GIC_DIST_GICD_ICPENDR0 */
    volatile ALT_GIC_DIST_GICD_ICPENDR1_t       GICD_ICPENDR1;          /* ALT_GIC_DIST_GICD_ICPENDR1 */
    volatile ALT_GIC_DIST_GICD_ICPENDR2_t       GICD_ICPENDR2;          /* ALT_GIC_DIST_GICD_ICPENDR2 */
    volatile ALT_GIC_DIST_GICD_ICPENDR3_t       GICD_ICPENDR3;          /* ALT_GIC_DIST_GICD_ICPENDR3 */
    volatile ALT_GIC_DIST_GICD_ICPENDR4_t       GICD_ICPENDR4;          /* ALT_GIC_DIST_GICD_ICPENDR4 */
    volatile ALT_GIC_DIST_GICD_ICPENDR5_t       GICD_ICPENDR5;          /* ALT_GIC_DIST_GICD_ICPENDR5 */
    volatile ALT_GIC_DIST_GICD_ICPENDR6_t       GICD_ICPENDR6;          /* ALT_GIC_DIST_GICD_ICPENDR6 */
    volatile ALT_GIC_DIST_GICD_ICPENDR7_t       GICD_ICPENDR7;          /* ALT_GIC_DIST_GICD_ICPENDR7 */
    volatile ALT_GIC_DIST_GICD_ICPENDR8_t       GICD_ICPENDR8;          /* ALT_GIC_DIST_GICD_ICPENDR8 */
    volatile ALT_GIC_DIST_GICD_ICPENDR9_t       GICD_ICPENDR9;          /* ALT_GIC_DIST_GICD_ICPENDR9 */
    volatile ALT_GIC_DIST_GICD_ICPENDR10_t      GICD_ICPENDR10;         /* ALT_GIC_DIST_GICD_ICPENDR10 */
    volatile ALT_GIC_DIST_GICD_ICPENDR11_t      GICD_ICPENDR11;         /* ALT_GIC_DIST_GICD_ICPENDR11 */
    volatile ALT_GIC_DIST_GICD_ICPENDR12_t      GICD_ICPENDR12;         /* ALT_GIC_DIST_GICD_ICPENDR12 */
    volatile ALT_GIC_DIST_GICD_ICPENDR13_t      GICD_ICPENDR13;         /* ALT_GIC_DIST_GICD_ICPENDR13 */
    volatile ALT_GIC_DIST_GICD_ICPENDR14_t      GICD_ICPENDR14;         /* ALT_GIC_DIST_GICD_ICPENDR14 */
    volatile ALT_GIC_DIST_GICD_ICPENDR15_t      GICD_ICPENDR15;         /* ALT_GIC_DIST_GICD_ICPENDR15 */
    volatile uint32_t                           _pad_0x2c0_0x2ff[16];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ISACTIVER0_t     GICD_ISACTIVER0;        /* ALT_GIC_DIST_GICD_ISACTIVER0 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER1_t     GICD_ISACTIVER1;        /* ALT_GIC_DIST_GICD_ISACTIVER1 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER2_t     GICD_ISACTIVER2;        /* ALT_GIC_DIST_GICD_ISACTIVER2 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER3_t     GICD_ISACTIVER3;        /* ALT_GIC_DIST_GICD_ISACTIVER3 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER4_t     GICD_ISACTIVER4;        /* ALT_GIC_DIST_GICD_ISACTIVER4 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER5_t     GICD_ISACTIVER5;        /* ALT_GIC_DIST_GICD_ISACTIVER5 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER6_t     GICD_ISACTIVER6;        /* ALT_GIC_DIST_GICD_ISACTIVER6 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER7_t     GICD_ISACTIVER7;        /* ALT_GIC_DIST_GICD_ISACTIVER7 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER8_t     GICD_ISACTIVER8;        /* ALT_GIC_DIST_GICD_ISACTIVER8 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER9_t     GICD_ISACTIVER9;        /* ALT_GIC_DIST_GICD_ISACTIVER9 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER10_t    GICD_ISACTIVER10;       /* ALT_GIC_DIST_GICD_ISACTIVER10 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER11_t    GICD_ISACTIVER11;       /* ALT_GIC_DIST_GICD_ISACTIVER11 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER12_t    GICD_ISACTIVER12;       /* ALT_GIC_DIST_GICD_ISACTIVER12 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER13_t    GICD_ISACTIVER13;       /* ALT_GIC_DIST_GICD_ISACTIVER13 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER14_t    GICD_ISACTIVER14;       /* ALT_GIC_DIST_GICD_ISACTIVER14 */
    volatile ALT_GIC_DIST_GICD_ISACTIVER15_t    GICD_ISACTIVER15;       /* ALT_GIC_DIST_GICD_ISACTIVER15 */
    volatile uint32_t                           _pad_0x340_0x37f[16];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ICACTIVER0_t     GICD_ICACTIVER0;        /* ALT_GIC_DIST_GICD_ICACTIVER0 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER1_t     GICD_ICACTIVER1;        /* ALT_GIC_DIST_GICD_ICACTIVER1 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER2_t     GICD_ICACTIVER2;        /* ALT_GIC_DIST_GICD_ICACTIVER2 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER3_t     GICD_ICACTIVER3;        /* ALT_GIC_DIST_GICD_ICACTIVER3 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER4_t     GICD_ICACTIVER4;        /* ALT_GIC_DIST_GICD_ICACTIVER4 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER5_t     GICD_ICACTIVER5;        /* ALT_GIC_DIST_GICD_ICACTIVER5 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER6_t     GICD_ICACTIVER6;        /* ALT_GIC_DIST_GICD_ICACTIVER6 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER7_t     GICD_ICACTIVER7;        /* ALT_GIC_DIST_GICD_ICACTIVER7 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER8_t     GICD_ICACTIVER8;        /* ALT_GIC_DIST_GICD_ICACTIVER8 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER9_t     GICD_ICACTIVER9;        /* ALT_GIC_DIST_GICD_ICACTIVER9 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER10_t    GICD_ICACTIVER10;       /* ALT_GIC_DIST_GICD_ICACTIVER10 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER11_t    GICD_ICACTIVER11;       /* ALT_GIC_DIST_GICD_ICACTIVER11 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER12_t    GICD_ICACTIVER12;       /* ALT_GIC_DIST_GICD_ICACTIVER12 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER13_t    GICD_ICACTIVER13;       /* ALT_GIC_DIST_GICD_ICACTIVER13 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER14_t    GICD_ICACTIVER14;       /* ALT_GIC_DIST_GICD_ICACTIVER14 */
    volatile ALT_GIC_DIST_GICD_ICACTIVER15_t    GICD_ICACTIVER15;       /* ALT_GIC_DIST_GICD_ICACTIVER15 */
    volatile uint32_t                           _pad_0x3c0_0x3ff[16];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR0_t    GICD_IPRIORITYR0;       /* ALT_GIC_DIST_GICD_IPRIORITYR0 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR1_t    GICD_IPRIORITYR1;       /* ALT_GIC_DIST_GICD_IPRIORITYR1 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR2_t    GICD_IPRIORITYR2;       /* ALT_GIC_DIST_GICD_IPRIORITYR2 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR3_t    GICD_IPRIORITYR3;       /* ALT_GIC_DIST_GICD_IPRIORITYR3 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR4_t    GICD_IPRIORITYR4;       /* ALT_GIC_DIST_GICD_IPRIORITYR4 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR5_t    GICD_IPRIORITYR5;       /* ALT_GIC_DIST_GICD_IPRIORITYR5 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR6_t    GICD_IPRIORITYR6;       /* ALT_GIC_DIST_GICD_IPRIORITYR6 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR7_t    GICD_IPRIORITYR7;       /* ALT_GIC_DIST_GICD_IPRIORITYR7 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR8_t    GICD_IPRIORITYR8;       /* ALT_GIC_DIST_GICD_IPRIORITYR8 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR9_t    GICD_IPRIORITYR9;       /* ALT_GIC_DIST_GICD_IPRIORITYR9 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR10_t   GICD_IPRIORITYR10;      /* ALT_GIC_DIST_GICD_IPRIORITYR10 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR11_t   GICD_IPRIORITYR11;      /* ALT_GIC_DIST_GICD_IPRIORITYR11 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR12_t   GICD_IPRIORITYR12;      /* ALT_GIC_DIST_GICD_IPRIORITYR12 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR13_t   GICD_IPRIORITYR13;      /* ALT_GIC_DIST_GICD_IPRIORITYR13 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR14_t   GICD_IPRIORITYR14;      /* ALT_GIC_DIST_GICD_IPRIORITYR14 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR15_t   GICD_IPRIORITYR15;      /* ALT_GIC_DIST_GICD_IPRIORITYR15 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR16_t   GICD_IPRIORITYR16;      /* ALT_GIC_DIST_GICD_IPRIORITYR16 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR17_t   GICD_IPRIORITYR17;      /* ALT_GIC_DIST_GICD_IPRIORITYR17 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR18_t   GICD_IPRIORITYR18;      /* ALT_GIC_DIST_GICD_IPRIORITYR18 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR19_t   GICD_IPRIORITYR19;      /* ALT_GIC_DIST_GICD_IPRIORITYR19 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR20_t   GICD_IPRIORITYR20;      /* ALT_GIC_DIST_GICD_IPRIORITYR20 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR21_t   GICD_IPRIORITYR21;      /* ALT_GIC_DIST_GICD_IPRIORITYR21 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR22_t   GICD_IPRIORITYR22;      /* ALT_GIC_DIST_GICD_IPRIORITYR22 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR23_t   GICD_IPRIORITYR23;      /* ALT_GIC_DIST_GICD_IPRIORITYR23 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR24_t   GICD_IPRIORITYR24;      /* ALT_GIC_DIST_GICD_IPRIORITYR24 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR25_t   GICD_IPRIORITYR25;      /* ALT_GIC_DIST_GICD_IPRIORITYR25 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR26_t   GICD_IPRIORITYR26;      /* ALT_GIC_DIST_GICD_IPRIORITYR26 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR27_t   GICD_IPRIORITYR27;      /* ALT_GIC_DIST_GICD_IPRIORITYR27 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR28_t   GICD_IPRIORITYR28;      /* ALT_GIC_DIST_GICD_IPRIORITYR28 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR29_t   GICD_IPRIORITYR29;      /* ALT_GIC_DIST_GICD_IPRIORITYR29 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR30_t   GICD_IPRIORITYR30;      /* ALT_GIC_DIST_GICD_IPRIORITYR30 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR31_t   GICD_IPRIORITYR31;      /* ALT_GIC_DIST_GICD_IPRIORITYR31 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR32_t   GICD_IPRIORITYR32;      /* ALT_GIC_DIST_GICD_IPRIORITYR32 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR33_t   GICD_IPRIORITYR33;      /* ALT_GIC_DIST_GICD_IPRIORITYR33 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR34_t   GICD_IPRIORITYR34;      /* ALT_GIC_DIST_GICD_IPRIORITYR34 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR35_t   GICD_IPRIORITYR35;      /* ALT_GIC_DIST_GICD_IPRIORITYR35 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR36_t   GICD_IPRIORITYR36;      /* ALT_GIC_DIST_GICD_IPRIORITYR36 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR37_t   GICD_IPRIORITYR37;      /* ALT_GIC_DIST_GICD_IPRIORITYR37 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR38_t   GICD_IPRIORITYR38;      /* ALT_GIC_DIST_GICD_IPRIORITYR38 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR39_t   GICD_IPRIORITYR39;      /* ALT_GIC_DIST_GICD_IPRIORITYR39 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR40_t   GICD_IPRIORITYR40;      /* ALT_GIC_DIST_GICD_IPRIORITYR40 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR41_t   GICD_IPRIORITYR41;      /* ALT_GIC_DIST_GICD_IPRIORITYR41 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR42_t   GICD_IPRIORITYR42;      /* ALT_GIC_DIST_GICD_IPRIORITYR42 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR43_t   GICD_IPRIORITYR43;      /* ALT_GIC_DIST_GICD_IPRIORITYR43 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR44_t   GICD_IPRIORITYR44;      /* ALT_GIC_DIST_GICD_IPRIORITYR44 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR45_t   GICD_IPRIORITYR45;      /* ALT_GIC_DIST_GICD_IPRIORITYR45 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR46_t   GICD_IPRIORITYR46;      /* ALT_GIC_DIST_GICD_IPRIORITYR46 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR47_t   GICD_IPRIORITYR47;      /* ALT_GIC_DIST_GICD_IPRIORITYR47 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR48_t   GICD_IPRIORITYR48;      /* ALT_GIC_DIST_GICD_IPRIORITYR48 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR49_t   GICD_IPRIORITYR49;      /* ALT_GIC_DIST_GICD_IPRIORITYR49 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR50_t   GICD_IPRIORITYR50;      /* ALT_GIC_DIST_GICD_IPRIORITYR50 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR51_t   GICD_IPRIORITYR51;      /* ALT_GIC_DIST_GICD_IPRIORITYR51 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR52_t   GICD_IPRIORITYR52;      /* ALT_GIC_DIST_GICD_IPRIORITYR52 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR53_t   GICD_IPRIORITYR53;      /* ALT_GIC_DIST_GICD_IPRIORITYR53 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR54_t   GICD_IPRIORITYR54;      /* ALT_GIC_DIST_GICD_IPRIORITYR54 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR55_t   GICD_IPRIORITYR55;      /* ALT_GIC_DIST_GICD_IPRIORITYR55 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR56_t   GICD_IPRIORITYR56;      /* ALT_GIC_DIST_GICD_IPRIORITYR56 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR57_t   GICD_IPRIORITYR57;      /* ALT_GIC_DIST_GICD_IPRIORITYR57 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR58_t   GICD_IPRIORITYR58;      /* ALT_GIC_DIST_GICD_IPRIORITYR58 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR59_t   GICD_IPRIORITYR59;      /* ALT_GIC_DIST_GICD_IPRIORITYR59 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR60_t   GICD_IPRIORITYR60;      /* ALT_GIC_DIST_GICD_IPRIORITYR60 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR61_t   GICD_IPRIORITYR61;      /* ALT_GIC_DIST_GICD_IPRIORITYR61 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR62_t   GICD_IPRIORITYR62;      /* ALT_GIC_DIST_GICD_IPRIORITYR62 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR63_t   GICD_IPRIORITYR63;      /* ALT_GIC_DIST_GICD_IPRIORITYR63 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR64_t   GICD_IPRIORITYR64;      /* ALT_GIC_DIST_GICD_IPRIORITYR64 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR65_t   GICD_IPRIORITYR65;      /* ALT_GIC_DIST_GICD_IPRIORITYR65 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR66_t   GICD_IPRIORITYR66;      /* ALT_GIC_DIST_GICD_IPRIORITYR66 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR67_t   GICD_IPRIORITYR67;      /* ALT_GIC_DIST_GICD_IPRIORITYR67 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR68_t   GICD_IPRIORITYR68;      /* ALT_GIC_DIST_GICD_IPRIORITYR68 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR69_t   GICD_IPRIORITYR69;      /* ALT_GIC_DIST_GICD_IPRIORITYR69 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR70_t   GICD_IPRIORITYR70;      /* ALT_GIC_DIST_GICD_IPRIORITYR70 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR71_t   GICD_IPRIORITYR71;      /* ALT_GIC_DIST_GICD_IPRIORITYR71 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR72_t   GICD_IPRIORITYR72;      /* ALT_GIC_DIST_GICD_IPRIORITYR72 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR73_t   GICD_IPRIORITYR73;      /* ALT_GIC_DIST_GICD_IPRIORITYR73 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR74_t   GICD_IPRIORITYR74;      /* ALT_GIC_DIST_GICD_IPRIORITYR74 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR75_t   GICD_IPRIORITYR75;      /* ALT_GIC_DIST_GICD_IPRIORITYR75 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR76_t   GICD_IPRIORITYR76;      /* ALT_GIC_DIST_GICD_IPRIORITYR76 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR77_t   GICD_IPRIORITYR77;      /* ALT_GIC_DIST_GICD_IPRIORITYR77 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR78_t   GICD_IPRIORITYR78;      /* ALT_GIC_DIST_GICD_IPRIORITYR78 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR79_t   GICD_IPRIORITYR79;      /* ALT_GIC_DIST_GICD_IPRIORITYR79 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR80_t   GICD_IPRIORITYR80;      /* ALT_GIC_DIST_GICD_IPRIORITYR80 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR81_t   GICD_IPRIORITYR81;      /* ALT_GIC_DIST_GICD_IPRIORITYR81 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR82_t   GICD_IPRIORITYR82;      /* ALT_GIC_DIST_GICD_IPRIORITYR82 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR83_t   GICD_IPRIORITYR83;      /* ALT_GIC_DIST_GICD_IPRIORITYR83 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR84_t   GICD_IPRIORITYR84;      /* ALT_GIC_DIST_GICD_IPRIORITYR84 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR85_t   GICD_IPRIORITYR85;      /* ALT_GIC_DIST_GICD_IPRIORITYR85 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR86_t   GICD_IPRIORITYR86;      /* ALT_GIC_DIST_GICD_IPRIORITYR86 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR87_t   GICD_IPRIORITYR87;      /* ALT_GIC_DIST_GICD_IPRIORITYR87 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR88_t   GICD_IPRIORITYR88;      /* ALT_GIC_DIST_GICD_IPRIORITYR88 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR89_t   GICD_IPRIORITYR89;      /* ALT_GIC_DIST_GICD_IPRIORITYR89 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR90_t   GICD_IPRIORITYR90;      /* ALT_GIC_DIST_GICD_IPRIORITYR90 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR91_t   GICD_IPRIORITYR91;      /* ALT_GIC_DIST_GICD_IPRIORITYR91 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR92_t   GICD_IPRIORITYR92;      /* ALT_GIC_DIST_GICD_IPRIORITYR92 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR93_t   GICD_IPRIORITYR93;      /* ALT_GIC_DIST_GICD_IPRIORITYR93 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR94_t   GICD_IPRIORITYR94;      /* ALT_GIC_DIST_GICD_IPRIORITYR94 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR95_t   GICD_IPRIORITYR95;      /* ALT_GIC_DIST_GICD_IPRIORITYR95 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR96_t   GICD_IPRIORITYR96;      /* ALT_GIC_DIST_GICD_IPRIORITYR96 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR97_t   GICD_IPRIORITYR97;      /* ALT_GIC_DIST_GICD_IPRIORITYR97 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR98_t   GICD_IPRIORITYR98;      /* ALT_GIC_DIST_GICD_IPRIORITYR98 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR99_t   GICD_IPRIORITYR99;      /* ALT_GIC_DIST_GICD_IPRIORITYR99 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR100_t  GICD_IPRIORITYR100;     /* ALT_GIC_DIST_GICD_IPRIORITYR100 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR101_t  GICD_IPRIORITYR101;     /* ALT_GIC_DIST_GICD_IPRIORITYR101 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR102_t  GICD_IPRIORITYR102;     /* ALT_GIC_DIST_GICD_IPRIORITYR102 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR103_t  GICD_IPRIORITYR103;     /* ALT_GIC_DIST_GICD_IPRIORITYR103 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR104_t  GICD_IPRIORITYR104;     /* ALT_GIC_DIST_GICD_IPRIORITYR104 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR105_t  GICD_IPRIORITYR105;     /* ALT_GIC_DIST_GICD_IPRIORITYR105 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR106_t  GICD_IPRIORITYR106;     /* ALT_GIC_DIST_GICD_IPRIORITYR106 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR107_t  GICD_IPRIORITYR107;     /* ALT_GIC_DIST_GICD_IPRIORITYR107 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR108_t  GICD_IPRIORITYR108;     /* ALT_GIC_DIST_GICD_IPRIORITYR108 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR109_t  GICD_IPRIORITYR109;     /* ALT_GIC_DIST_GICD_IPRIORITYR109 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR110_t  GICD_IPRIORITYR110;     /* ALT_GIC_DIST_GICD_IPRIORITYR110 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR111_t  GICD_IPRIORITYR111;     /* ALT_GIC_DIST_GICD_IPRIORITYR111 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR112_t  GICD_IPRIORITYR112;     /* ALT_GIC_DIST_GICD_IPRIORITYR112 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR113_t  GICD_IPRIORITYR113;     /* ALT_GIC_DIST_GICD_IPRIORITYR113 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR114_t  GICD_IPRIORITYR114;     /* ALT_GIC_DIST_GICD_IPRIORITYR114 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR115_t  GICD_IPRIORITYR115;     /* ALT_GIC_DIST_GICD_IPRIORITYR115 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR116_t  GICD_IPRIORITYR116;     /* ALT_GIC_DIST_GICD_IPRIORITYR116 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR117_t  GICD_IPRIORITYR117;     /* ALT_GIC_DIST_GICD_IPRIORITYR117 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR118_t  GICD_IPRIORITYR118;     /* ALT_GIC_DIST_GICD_IPRIORITYR118 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR119_t  GICD_IPRIORITYR119;     /* ALT_GIC_DIST_GICD_IPRIORITYR119 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR120_t  GICD_IPRIORITYR120;     /* ALT_GIC_DIST_GICD_IPRIORITYR120 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR121_t  GICD_IPRIORITYR121;     /* ALT_GIC_DIST_GICD_IPRIORITYR121 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR122_t  GICD_IPRIORITYR122;     /* ALT_GIC_DIST_GICD_IPRIORITYR122 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR123_t  GICD_IPRIORITYR123;     /* ALT_GIC_DIST_GICD_IPRIORITYR123 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR124_t  GICD_IPRIORITYR124;     /* ALT_GIC_DIST_GICD_IPRIORITYR124 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR125_t  GICD_IPRIORITYR125;     /* ALT_GIC_DIST_GICD_IPRIORITYR125 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR126_t  GICD_IPRIORITYR126;     /* ALT_GIC_DIST_GICD_IPRIORITYR126 */
    volatile ALT_GIC_DIST_GICD_IPRIORITYR127_t  GICD_IPRIORITYR127;     /* ALT_GIC_DIST_GICD_IPRIORITYR127 */
    volatile uint32_t                           _pad_0x600_0x7ff[128];  /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ITARGETSR0_t     GICD_ITARGETSR0;        /* ALT_GIC_DIST_GICD_ITARGETSR0 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR1_t     GICD_ITARGETSR1;        /* ALT_GIC_DIST_GICD_ITARGETSR1 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR2_t     GICD_ITARGETSR2;        /* ALT_GIC_DIST_GICD_ITARGETSR2 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR3_t     GICD_ITARGETSR3;        /* ALT_GIC_DIST_GICD_ITARGETSR3 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR4_t     GICD_ITARGETSR4;        /* ALT_GIC_DIST_GICD_ITARGETSR4 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR5_t     GICD_ITARGETSR5;        /* ALT_GIC_DIST_GICD_ITARGETSR5 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR6_t     GICD_ITARGETSR6;        /* ALT_GIC_DIST_GICD_ITARGETSR6 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR7_t     GICD_ITARGETSR7;        /* ALT_GIC_DIST_GICD_ITARGETSR7 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR8_t     GICD_ITARGETSR8;        /* ALT_GIC_DIST_GICD_ITARGETSR8 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR9_t     GICD_ITARGETSR9;        /* ALT_GIC_DIST_GICD_ITARGETSR9 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR10_t    GICD_ITARGETSR10;       /* ALT_GIC_DIST_GICD_ITARGETSR10 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR11_t    GICD_ITARGETSR11;       /* ALT_GIC_DIST_GICD_ITARGETSR11 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR12_t    GICD_ITARGETSR12;       /* ALT_GIC_DIST_GICD_ITARGETSR12 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR13_t    GICD_ITARGETSR13;       /* ALT_GIC_DIST_GICD_ITARGETSR13 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR14_t    GICD_ITARGETSR14;       /* ALT_GIC_DIST_GICD_ITARGETSR14 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR15_t    GICD_ITARGETSR15;       /* ALT_GIC_DIST_GICD_ITARGETSR15 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR16_t    GICD_ITARGETSR16;       /* ALT_GIC_DIST_GICD_ITARGETSR16 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR17_t    GICD_ITARGETSR17;       /* ALT_GIC_DIST_GICD_ITARGETSR17 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR18_t    GICD_ITARGETSR18;       /* ALT_GIC_DIST_GICD_ITARGETSR18 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR19_t    GICD_ITARGETSR19;       /* ALT_GIC_DIST_GICD_ITARGETSR19 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR20_t    GICD_ITARGETSR20;       /* ALT_GIC_DIST_GICD_ITARGETSR20 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR21_t    GICD_ITARGETSR21;       /* ALT_GIC_DIST_GICD_ITARGETSR21 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR22_t    GICD_ITARGETSR22;       /* ALT_GIC_DIST_GICD_ITARGETSR22 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR23_t    GICD_ITARGETSR23;       /* ALT_GIC_DIST_GICD_ITARGETSR23 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR24_t    GICD_ITARGETSR24;       /* ALT_GIC_DIST_GICD_ITARGETSR24 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR25_t    GICD_ITARGETSR25;       /* ALT_GIC_DIST_GICD_ITARGETSR25 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR26_t    GICD_ITARGETSR26;       /* ALT_GIC_DIST_GICD_ITARGETSR26 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR27_t    GICD_ITARGETSR27;       /* ALT_GIC_DIST_GICD_ITARGETSR27 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR28_t    GICD_ITARGETSR28;       /* ALT_GIC_DIST_GICD_ITARGETSR28 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR29_t    GICD_ITARGETSR29;       /* ALT_GIC_DIST_GICD_ITARGETSR29 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR30_t    GICD_ITARGETSR30;       /* ALT_GIC_DIST_GICD_ITARGETSR30 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR31_t    GICD_ITARGETSR31;       /* ALT_GIC_DIST_GICD_ITARGETSR31 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR32_t    GICD_ITARGETSR32;       /* ALT_GIC_DIST_GICD_ITARGETSR32 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR33_t    GICD_ITARGETSR33;       /* ALT_GIC_DIST_GICD_ITARGETSR33 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR34_t    GICD_ITARGETSR34;       /* ALT_GIC_DIST_GICD_ITARGETSR34 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR35_t    GICD_ITARGETSR35;       /* ALT_GIC_DIST_GICD_ITARGETSR35 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR36_t    GICD_ITARGETSR36;       /* ALT_GIC_DIST_GICD_ITARGETSR36 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR37_t    GICD_ITARGETSR37;       /* ALT_GIC_DIST_GICD_ITARGETSR37 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR38_t    GICD_ITARGETSR38;       /* ALT_GIC_DIST_GICD_ITARGETSR38 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR39_t    GICD_ITARGETSR39;       /* ALT_GIC_DIST_GICD_ITARGETSR39 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR40_t    GICD_ITARGETSR40;       /* ALT_GIC_DIST_GICD_ITARGETSR40 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR41_t    GICD_ITARGETSR41;       /* ALT_GIC_DIST_GICD_ITARGETSR41 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR42_t    GICD_ITARGETSR42;       /* ALT_GIC_DIST_GICD_ITARGETSR42 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR43_t    GICD_ITARGETSR43;       /* ALT_GIC_DIST_GICD_ITARGETSR43 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR44_t    GICD_ITARGETSR44;       /* ALT_GIC_DIST_GICD_ITARGETSR44 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR45_t    GICD_ITARGETSR45;       /* ALT_GIC_DIST_GICD_ITARGETSR45 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR46_t    GICD_ITARGETSR46;       /* ALT_GIC_DIST_GICD_ITARGETSR46 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR47_t    GICD_ITARGETSR47;       /* ALT_GIC_DIST_GICD_ITARGETSR47 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR48_t    GICD_ITARGETSR48;       /* ALT_GIC_DIST_GICD_ITARGETSR48 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR49_t    GICD_ITARGETSR49;       /* ALT_GIC_DIST_GICD_ITARGETSR49 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR50_t    GICD_ITARGETSR50;       /* ALT_GIC_DIST_GICD_ITARGETSR50 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR51_t    GICD_ITARGETSR51;       /* ALT_GIC_DIST_GICD_ITARGETSR51 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR52_t    GICD_ITARGETSR52;       /* ALT_GIC_DIST_GICD_ITARGETSR52 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR53_t    GICD_ITARGETSR53;       /* ALT_GIC_DIST_GICD_ITARGETSR53 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR54_t    GICD_ITARGETSR54;       /* ALT_GIC_DIST_GICD_ITARGETSR54 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR55_t    GICD_ITARGETSR55;       /* ALT_GIC_DIST_GICD_ITARGETSR55 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR56_t    GICD_ITARGETSR56;       /* ALT_GIC_DIST_GICD_ITARGETSR56 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR57_t    GICD_ITARGETSR57;       /* ALT_GIC_DIST_GICD_ITARGETSR57 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR58_t    GICD_ITARGETSR58;       /* ALT_GIC_DIST_GICD_ITARGETSR58 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR59_t    GICD_ITARGETSR59;       /* ALT_GIC_DIST_GICD_ITARGETSR59 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR60_t    GICD_ITARGETSR60;       /* ALT_GIC_DIST_GICD_ITARGETSR60 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR61_t    GICD_ITARGETSR61;       /* ALT_GIC_DIST_GICD_ITARGETSR61 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR62_t    GICD_ITARGETSR62;       /* ALT_GIC_DIST_GICD_ITARGETSR62 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR63_t    GICD_ITARGETSR63;       /* ALT_GIC_DIST_GICD_ITARGETSR63 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR64_t    GICD_ITARGETSR64;       /* ALT_GIC_DIST_GICD_ITARGETSR64 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR65_t    GICD_ITARGETSR65;       /* ALT_GIC_DIST_GICD_ITARGETSR65 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR66_t    GICD_ITARGETSR66;       /* ALT_GIC_DIST_GICD_ITARGETSR66 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR67_t    GICD_ITARGETSR67;       /* ALT_GIC_DIST_GICD_ITARGETSR67 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR68_t    GICD_ITARGETSR68;       /* ALT_GIC_DIST_GICD_ITARGETSR68 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR69_t    GICD_ITARGETSR69;       /* ALT_GIC_DIST_GICD_ITARGETSR69 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR70_t    GICD_ITARGETSR70;       /* ALT_GIC_DIST_GICD_ITARGETSR70 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR71_t    GICD_ITARGETSR71;       /* ALT_GIC_DIST_GICD_ITARGETSR71 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR72_t    GICD_ITARGETSR72;       /* ALT_GIC_DIST_GICD_ITARGETSR72 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR73_t    GICD_ITARGETSR73;       /* ALT_GIC_DIST_GICD_ITARGETSR73 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR74_t    GICD_ITARGETSR74;       /* ALT_GIC_DIST_GICD_ITARGETSR74 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR75_t    GICD_ITARGETSR75;       /* ALT_GIC_DIST_GICD_ITARGETSR75 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR76_t    GICD_ITARGETSR76;       /* ALT_GIC_DIST_GICD_ITARGETSR76 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR77_t    GICD_ITARGETSR77;       /* ALT_GIC_DIST_GICD_ITARGETSR77 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR78_t    GICD_ITARGETSR78;       /* ALT_GIC_DIST_GICD_ITARGETSR78 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR79_t    GICD_ITARGETSR79;       /* ALT_GIC_DIST_GICD_ITARGETSR79 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR80_t    GICD_ITARGETSR80;       /* ALT_GIC_DIST_GICD_ITARGETSR80 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR81_t    GICD_ITARGETSR81;       /* ALT_GIC_DIST_GICD_ITARGETSR81 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR82_t    GICD_ITARGETSR82;       /* ALT_GIC_DIST_GICD_ITARGETSR82 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR83_t    GICD_ITARGETSR83;       /* ALT_GIC_DIST_GICD_ITARGETSR83 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR84_t    GICD_ITARGETSR84;       /* ALT_GIC_DIST_GICD_ITARGETSR84 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR85_t    GICD_ITARGETSR85;       /* ALT_GIC_DIST_GICD_ITARGETSR85 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR86_t    GICD_ITARGETSR86;       /* ALT_GIC_DIST_GICD_ITARGETSR86 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR87_t    GICD_ITARGETSR87;       /* ALT_GIC_DIST_GICD_ITARGETSR87 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR88_t    GICD_ITARGETSR88;       /* ALT_GIC_DIST_GICD_ITARGETSR88 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR89_t    GICD_ITARGETSR89;       /* ALT_GIC_DIST_GICD_ITARGETSR89 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR90_t    GICD_ITARGETSR90;       /* ALT_GIC_DIST_GICD_ITARGETSR90 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR91_t    GICD_ITARGETSR91;       /* ALT_GIC_DIST_GICD_ITARGETSR91 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR92_t    GICD_ITARGETSR92;       /* ALT_GIC_DIST_GICD_ITARGETSR92 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR93_t    GICD_ITARGETSR93;       /* ALT_GIC_DIST_GICD_ITARGETSR93 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR94_t    GICD_ITARGETSR94;       /* ALT_GIC_DIST_GICD_ITARGETSR94 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR95_t    GICD_ITARGETSR95;       /* ALT_GIC_DIST_GICD_ITARGETSR95 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR96_t    GICD_ITARGETSR96;       /* ALT_GIC_DIST_GICD_ITARGETSR96 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR97_t    GICD_ITARGETSR97;       /* ALT_GIC_DIST_GICD_ITARGETSR97 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR98_t    GICD_ITARGETSR98;       /* ALT_GIC_DIST_GICD_ITARGETSR98 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR99_t    GICD_ITARGETSR99;       /* ALT_GIC_DIST_GICD_ITARGETSR99 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR100_t   GICD_ITARGETSR100;      /* ALT_GIC_DIST_GICD_ITARGETSR100 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR101_t   GICD_ITARGETSR101;      /* ALT_GIC_DIST_GICD_ITARGETSR101 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR102_t   GICD_ITARGETSR102;      /* ALT_GIC_DIST_GICD_ITARGETSR102 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR103_t   GICD_ITARGETSR103;      /* ALT_GIC_DIST_GICD_ITARGETSR103 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR104_t   GICD_ITARGETSR104;      /* ALT_GIC_DIST_GICD_ITARGETSR104 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR105_t   GICD_ITARGETSR105;      /* ALT_GIC_DIST_GICD_ITARGETSR105 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR106_t   GICD_ITARGETSR106;      /* ALT_GIC_DIST_GICD_ITARGETSR106 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR107_t   GICD_ITARGETSR107;      /* ALT_GIC_DIST_GICD_ITARGETSR107 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR108_t   GICD_ITARGETSR108;      /* ALT_GIC_DIST_GICD_ITARGETSR108 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR109_t   GICD_ITARGETSR109;      /* ALT_GIC_DIST_GICD_ITARGETSR109 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR110_t   GICD_ITARGETSR110;      /* ALT_GIC_DIST_GICD_ITARGETSR110 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR111_t   GICD_ITARGETSR111;      /* ALT_GIC_DIST_GICD_ITARGETSR111 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR112_t   GICD_ITARGETSR112;      /* ALT_GIC_DIST_GICD_ITARGETSR112 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR113_t   GICD_ITARGETSR113;      /* ALT_GIC_DIST_GICD_ITARGETSR113 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR114_t   GICD_ITARGETSR114;      /* ALT_GIC_DIST_GICD_ITARGETSR114 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR115_t   GICD_ITARGETSR115;      /* ALT_GIC_DIST_GICD_ITARGETSR115 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR116_t   GICD_ITARGETSR116;      /* ALT_GIC_DIST_GICD_ITARGETSR116 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR117_t   GICD_ITARGETSR117;      /* ALT_GIC_DIST_GICD_ITARGETSR117 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR118_t   GICD_ITARGETSR118;      /* ALT_GIC_DIST_GICD_ITARGETSR118 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR119_t   GICD_ITARGETSR119;      /* ALT_GIC_DIST_GICD_ITARGETSR119 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR120_t   GICD_ITARGETSR120;      /* ALT_GIC_DIST_GICD_ITARGETSR120 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR121_t   GICD_ITARGETSR121;      /* ALT_GIC_DIST_GICD_ITARGETSR121 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR122_t   GICD_ITARGETSR122;      /* ALT_GIC_DIST_GICD_ITARGETSR122 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR123_t   GICD_ITARGETSR123;      /* ALT_GIC_DIST_GICD_ITARGETSR123 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR124_t   GICD_ITARGETSR124;      /* ALT_GIC_DIST_GICD_ITARGETSR124 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR125_t   GICD_ITARGETSR125;      /* ALT_GIC_DIST_GICD_ITARGETSR125 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR126_t   GICD_ITARGETSR126;      /* ALT_GIC_DIST_GICD_ITARGETSR126 */
    volatile ALT_GIC_DIST_GICD_ITARGETSR127_t   GICD_ITARGETSR127;      /* ALT_GIC_DIST_GICD_ITARGETSR127 */
    volatile uint32_t                           _pad_0xa00_0xbff[128];  /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_ICFGR0_t         GICD_ICFGR0;            /* ALT_GIC_DIST_GICD_ICFGR0 */
    volatile ALT_GIC_DIST_GICD_ICFGR1_t         GICD_ICFGR1;            /* ALT_GIC_DIST_GICD_ICFGR1 */
    volatile ALT_GIC_DIST_GICD_ICFGR2_t         GICD_ICFGR2;            /* ALT_GIC_DIST_GICD_ICFGR2 */
    volatile ALT_GIC_DIST_GICD_ICFGR3_t         GICD_ICFGR3;            /* ALT_GIC_DIST_GICD_ICFGR3 */
    volatile ALT_GIC_DIST_GICD_ICFGR4_t         GICD_ICFGR4;            /* ALT_GIC_DIST_GICD_ICFGR4 */
    volatile ALT_GIC_DIST_GICD_ICFGR5_t         GICD_ICFGR5;            /* ALT_GIC_DIST_GICD_ICFGR5 */
    volatile ALT_GIC_DIST_GICD_ICFGR6_t         GICD_ICFGR6;            /* ALT_GIC_DIST_GICD_ICFGR6 */
    volatile ALT_GIC_DIST_GICD_ICFGR7_t         GICD_ICFGR7;            /* ALT_GIC_DIST_GICD_ICFGR7 */
    volatile ALT_GIC_DIST_GICD_ICFGR8_t         GICD_ICFGR8;            /* ALT_GIC_DIST_GICD_ICFGR8 */
    volatile ALT_GIC_DIST_GICD_ICFGR9_t         GICD_ICFGR9;            /* ALT_GIC_DIST_GICD_ICFGR9 */
    volatile ALT_GIC_DIST_GICD_ICFGR10_t        GICD_ICFGR10;           /* ALT_GIC_DIST_GICD_ICFGR10 */
    volatile ALT_GIC_DIST_GICD_ICFGR11_t        GICD_ICFGR11;           /* ALT_GIC_DIST_GICD_ICFGR11 */
    volatile ALT_GIC_DIST_GICD_ICFGR12_t        GICD_ICFGR12;           /* ALT_GIC_DIST_GICD_ICFGR12 */
    volatile ALT_GIC_DIST_GICD_ICFGR13_t        GICD_ICFGR13;           /* ALT_GIC_DIST_GICD_ICFGR13 */
    volatile ALT_GIC_DIST_GICD_ICFGR14_t        GICD_ICFGR14;           /* ALT_GIC_DIST_GICD_ICFGR14 */
    volatile ALT_GIC_DIST_GICD_ICFGR15_t        GICD_ICFGR15;           /* ALT_GIC_DIST_GICD_ICFGR15 */
    volatile ALT_GIC_DIST_GICD_ICFGR16_t        GICD_ICFGR16;           /* ALT_GIC_DIST_GICD_ICFGR16 */
    volatile ALT_GIC_DIST_GICD_ICFGR17_t        GICD_ICFGR17;           /* ALT_GIC_DIST_GICD_ICFGR17 */
    volatile ALT_GIC_DIST_GICD_ICFGR18_t        GICD_ICFGR18;           /* ALT_GIC_DIST_GICD_ICFGR18 */
    volatile ALT_GIC_DIST_GICD_ICFGR19_t        GICD_ICFGR19;           /* ALT_GIC_DIST_GICD_ICFGR19 */
    volatile ALT_GIC_DIST_GICD_ICFGR20_t        GICD_ICFGR20;           /* ALT_GIC_DIST_GICD_ICFGR20 */
    volatile ALT_GIC_DIST_GICD_ICFGR21_t        GICD_ICFGR21;           /* ALT_GIC_DIST_GICD_ICFGR21 */
    volatile ALT_GIC_DIST_GICD_ICFGR22_t        GICD_ICFGR22;           /* ALT_GIC_DIST_GICD_ICFGR22 */
    volatile ALT_GIC_DIST_GICD_ICFGR23_t        GICD_ICFGR23;           /* ALT_GIC_DIST_GICD_ICFGR23 */
    volatile ALT_GIC_DIST_GICD_ICFGR24_t        GICD_ICFGR24;           /* ALT_GIC_DIST_GICD_ICFGR24 */
    volatile ALT_GIC_DIST_GICD_ICFGR25_t        GICD_ICFGR25;           /* ALT_GIC_DIST_GICD_ICFGR25 */
    volatile ALT_GIC_DIST_GICD_ICFGR26_t        GICD_ICFGR26;           /* ALT_GIC_DIST_GICD_ICFGR26 */
    volatile ALT_GIC_DIST_GICD_ICFGR27_t        GICD_ICFGR27;           /* ALT_GIC_DIST_GICD_ICFGR27 */
    volatile ALT_GIC_DIST_GICD_ICFGR28_t        GICD_ICFGR28;           /* ALT_GIC_DIST_GICD_ICFGR28 */
    volatile ALT_GIC_DIST_GICD_ICFGR29_t        GICD_ICFGR29;           /* ALT_GIC_DIST_GICD_ICFGR29 */
    volatile ALT_GIC_DIST_GICD_ICFGR30_t        GICD_ICFGR30;           /* ALT_GIC_DIST_GICD_ICFGR30 */
    volatile ALT_GIC_DIST_GICD_ICFGR31_t        GICD_ICFGR31;           /* ALT_GIC_DIST_GICD_ICFGR31 */
    volatile uint32_t                           _pad_0xc80_0xcff[32];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_PPISR_t          GICD_PPISR;             /* ALT_GIC_DIST_GICD_PPISR */
    volatile ALT_GIC_DIST_GICD_SPISR0_t         GICD_SPISR0;            /* ALT_GIC_DIST_GICD_SPISR0 */
    volatile ALT_GIC_DIST_GICD_SPISR1_t         GICD_SPISR1;            /* ALT_GIC_DIST_GICD_SPISR1 */
    volatile ALT_GIC_DIST_GICD_SPISR2_t         GICD_SPISR2;            /* ALT_GIC_DIST_GICD_SPISR2 */
    volatile ALT_GIC_DIST_GICD_SPISR3_t         GICD_SPISR3;            /* ALT_GIC_DIST_GICD_SPISR3 */
    volatile ALT_GIC_DIST_GICD_SPISR4_t         GICD_SPISR4;            /* ALT_GIC_DIST_GICD_SPISR4 */
    volatile ALT_GIC_DIST_GICD_SPISR5_t         GICD_SPISR5;            /* ALT_GIC_DIST_GICD_SPISR5 */
    volatile ALT_GIC_DIST_GICD_SPISR6_t         GICD_SPISR6;            /* ALT_GIC_DIST_GICD_SPISR6 */
    volatile ALT_GIC_DIST_GICD_SPISR7_t         GICD_SPISR7;            /* ALT_GIC_DIST_GICD_SPISR7 */
    volatile ALT_GIC_DIST_GICD_SPISR8_t         GICD_SPISR8;            /* ALT_GIC_DIST_GICD_SPISR8 */
    volatile ALT_GIC_DIST_GICD_SPISR9_t         GICD_SPISR9;            /* ALT_GIC_DIST_GICD_SPISR9 */
    volatile ALT_GIC_DIST_GICD_SPISR10_t        GICD_SPISR10;           /* ALT_GIC_DIST_GICD_SPISR10 */
    volatile ALT_GIC_DIST_GICD_SPISR11_t        GICD_SPISR11;           /* ALT_GIC_DIST_GICD_SPISR11 */
    volatile ALT_GIC_DIST_GICD_SPISR12_t        GICD_SPISR12;           /* ALT_GIC_DIST_GICD_SPISR12 */
    volatile ALT_GIC_DIST_GICD_SPISR13_t        GICD_SPISR13;           /* ALT_GIC_DIST_GICD_SPISR13 */
    volatile ALT_GIC_DIST_GICD_SPISR14_t        GICD_SPISR14;           /* ALT_GIC_DIST_GICD_SPISR14 */
    volatile uint32_t                           _pad_0xd40_0xeff[112];  /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_SGIR_t           GICD_SGIR;              /* ALT_GIC_DIST_GICD_SGIR */
    volatile uint32_t                           _pad_0xf04_0xf0f[3];    /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_CPENDSGIR0_t     GICD_CPENDSGIR0;        /* ALT_GIC_DIST_GICD_CPENDSGIR0 */
    volatile ALT_GIC_DIST_GICD_CPENDSGIR1_t     GICD_CPENDSGIR1;        /* ALT_GIC_DIST_GICD_CPENDSGIR1 */
    volatile ALT_GIC_DIST_GICD_CPENDSGIR2_t     GICD_CPENDSGIR2;        /* ALT_GIC_DIST_GICD_CPENDSGIR2 */
    volatile ALT_GIC_DIST_GICD_CPENDSGIR3_t     GICD_CPENDSGIR3;        /* ALT_GIC_DIST_GICD_CPENDSGIR3 */
    volatile ALT_GIC_DIST_GICD_SPENDSGIR0_t     GICD_SPENDSGIR0;        /* ALT_GIC_DIST_GICD_SPENDSGIR0 */
    volatile ALT_GIC_DIST_GICD_SPENDSGIR1_t     GICD_SPENDSGIR1;        /* ALT_GIC_DIST_GICD_SPENDSGIR1 */
    volatile ALT_GIC_DIST_GICD_SPENDSGIR2_t     GICD_SPENDSGIR2;        /* ALT_GIC_DIST_GICD_SPENDSGIR2 */
    volatile ALT_GIC_DIST_GICD_SPENDSGIR3_t     GICD_SPENDSGIR3;        /* ALT_GIC_DIST_GICD_SPENDSGIR3 */
    volatile uint32_t                           _pad_0xf30_0xfcf[40];   /* *UNDEFINED* */
    volatile ALT_GIC_DIST_GICD_PIDR4_t          GICD_PIDR4;             /* ALT_GIC_DIST_GICD_PIDR4 */
    volatile ALT_GIC_DIST_GICD_PIDR5_t          GICD_PIDR5;             /* ALT_GIC_DIST_GICD_PIDR5 */
    volatile ALT_GIC_DIST_GICD_PIDR6_t          GICD_PIDR6;             /* ALT_GIC_DIST_GICD_PIDR6 */
    volatile ALT_GIC_DIST_GICD_PIDR7_t          GICD_PIDR7;             /* ALT_GIC_DIST_GICD_PIDR7 */
    volatile ALT_GIC_DIST_GICD_PIDR0_t          GICD_PIDR0;             /* ALT_GIC_DIST_GICD_PIDR0 */
    volatile ALT_GIC_DIST_GICD_PIDR1_t          GICD_PIDR1;             /* ALT_GIC_DIST_GICD_PIDR1 */
    volatile ALT_GIC_DIST_GICD_PIDR2_t          GICD_PIDR2;             /* ALT_GIC_DIST_GICD_PIDR2 */
    volatile ALT_GIC_DIST_GICD_PIDR3_t          GICD_PIDR3;             /* ALT_GIC_DIST_GICD_PIDR3 */
    volatile ALT_GIC_DIST_GICD_CIDR0_t          GICD_CIDR0;             /* ALT_GIC_DIST_GICD_CIDR0 */
    volatile ALT_GIC_DIST_GICD_CIDR1_t          GICD_CIDR1;             /* ALT_GIC_DIST_GICD_CIDR1 */
    volatile ALT_GIC_DIST_GICD_CIDR2_t          GICD_CIDR2;             /* ALT_GIC_DIST_GICD_CIDR2 */
    volatile ALT_GIC_DIST_GICD_CIDR3_t          GICD_CIDR3;             /* ALT_GIC_DIST_GICD_CIDR3 */
};

/* The typedef declaration for register group ALT_GIC_DIST. */
typedef struct ALT_GIC_DIST_s  ALT_GIC_DIST_t;
/* The struct declaration for the raw register contents of register group ALT_GIC_DIST. */
struct ALT_GIC_DIST_raw_s
{
    volatile uint32_t  GICD_CTLR;              /* ALT_GIC_DIST_GICD_CTLR */
    volatile uint32_t  GICD_TYPER;             /* ALT_GIC_DIST_GICD_TYPER */
    volatile uint32_t  GICD_IIDR;              /* ALT_GIC_DIST_GICD_IIDR */
    volatile uint32_t  _pad_0xc_0x7f[29];      /* *UNDEFINED* */
    volatile uint32_t  GICD_IGROUPR0;          /* ALT_GIC_DIST_GICD_IGROUPR0 */
    volatile uint32_t  GICD_IGROUPR1;          /* ALT_GIC_DIST_GICD_IGROUPR1 */
    volatile uint32_t  GICD_IGROUPR2;          /* ALT_GIC_DIST_GICD_IGROUPR2 */
    volatile uint32_t  GICD_IGROUPR3;          /* ALT_GIC_DIST_GICD_IGROUPR3 */
    volatile uint32_t  GICD_IGROUPR4;          /* ALT_GIC_DIST_GICD_IGROUPR4 */
    volatile uint32_t  GICD_IGROUPR5;          /* ALT_GIC_DIST_GICD_IGROUPR5 */
    volatile uint32_t  GICD_IGROUPR6;          /* ALT_GIC_DIST_GICD_IGROUPR6 */
    volatile uint32_t  GICD_IGROUPR7;          /* ALT_GIC_DIST_GICD_IGROUPR7 */
    volatile uint32_t  GICD_IGROUPR8;          /* ALT_GIC_DIST_GICD_IGROUPR8 */
    volatile uint32_t  GICD_IGROUPR9;          /* ALT_GIC_DIST_GICD_IGROUPR9 */
    volatile uint32_t  GICD_IGROUPR10;         /* ALT_GIC_DIST_GICD_IGROUPR10 */
    volatile uint32_t  GICD_IGROUPR11;         /* ALT_GIC_DIST_GICD_IGROUPR11 */
    volatile uint32_t  GICD_IGROUPR12;         /* ALT_GIC_DIST_GICD_IGROUPR12 */
    volatile uint32_t  GICD_IGROUPR13;         /* ALT_GIC_DIST_GICD_IGROUPR13 */
    volatile uint32_t  GICD_IGROUPR14;         /* ALT_GIC_DIST_GICD_IGROUPR14 */
    volatile uint32_t  GICD_IGROUPR15;         /* ALT_GIC_DIST_GICD_IGROUPR15 */
    volatile uint32_t  _pad_0xc0_0xff[16];     /* *UNDEFINED* */
    volatile uint32_t  GICD_ISENABLER0;        /* ALT_GIC_DIST_GICD_ISENABLER0 */
    volatile uint32_t  GICD_ISENABLER1;        /* ALT_GIC_DIST_GICD_ISENABLER1 */
    volatile uint32_t  GICD_ISENABLER2;        /* ALT_GIC_DIST_GICD_ISENABLER2 */
    volatile uint32_t  GICD_ISENABLER3;        /* ALT_GIC_DIST_GICD_ISENABLER3 */
    volatile uint32_t  GICD_ISENABLER4;        /* ALT_GIC_DIST_GICD_ISENABLER4 */
    volatile uint32_t  GICD_ISENABLER5;        /* ALT_GIC_DIST_GICD_ISENABLER5 */
    volatile uint32_t  GICD_ISENABLER6;        /* ALT_GIC_DIST_GICD_ISENABLER6 */
    volatile uint32_t  GICD_ISENABLER7;        /* ALT_GIC_DIST_GICD_ISENABLER7 */
    volatile uint32_t  GICD_ISENABLER8;        /* ALT_GIC_DIST_GICD_ISENABLER8 */
    volatile uint32_t  GICD_ISENABLER9;        /* ALT_GIC_DIST_GICD_ISENABLER9 */
    volatile uint32_t  GICD_ISENABLER10;       /* ALT_GIC_DIST_GICD_ISENABLER10 */
    volatile uint32_t  GICD_ISENABLER11;       /* ALT_GIC_DIST_GICD_ISENABLER11 */
    volatile uint32_t  GICD_ISENABLER12;       /* ALT_GIC_DIST_GICD_ISENABLER12 */
    volatile uint32_t  GICD_ISENABLER13;       /* ALT_GIC_DIST_GICD_ISENABLER13 */
    volatile uint32_t  GICD_ISENABLER14;       /* ALT_GIC_DIST_GICD_ISENABLER14 */
    volatile uint32_t  GICD_ISENABLER15;       /* ALT_GIC_DIST_GICD_ISENABLER15 */
    volatile uint32_t  _pad_0x140_0x17f[16];   /* *UNDEFINED* */
    volatile uint32_t  GICD_ICENABLER0;        /* ALT_GIC_DIST_GICD_ICENABLER0 */
    volatile uint32_t  GICD_ICENABLER1;        /* ALT_GIC_DIST_GICD_ICENABLER1 */
    volatile uint32_t  GICD_ICENABLER2;        /* ALT_GIC_DIST_GICD_ICENABLER2 */
    volatile uint32_t  GICD_ICENABLER3;        /* ALT_GIC_DIST_GICD_ICENABLER3 */
    volatile uint32_t  GICD_ICENABLER4;        /* ALT_GIC_DIST_GICD_ICENABLER4 */
    volatile uint32_t  GICD_ICENABLER5;        /* ALT_GIC_DIST_GICD_ICENABLER5 */
    volatile uint32_t  GICD_ICENABLER6;        /* ALT_GIC_DIST_GICD_ICENABLER6 */
    volatile uint32_t  GICD_ICENABLER7;        /* ALT_GIC_DIST_GICD_ICENABLER7 */
    volatile uint32_t  GICD_ICENABLER8;        /* ALT_GIC_DIST_GICD_ICENABLER8 */
    volatile uint32_t  GICD_ICENABLER9;        /* ALT_GIC_DIST_GICD_ICENABLER9 */
    volatile uint32_t  GICD_ICENABLER10;       /* ALT_GIC_DIST_GICD_ICENABLER10 */
    volatile uint32_t  GICD_ICENABLER11;       /* ALT_GIC_DIST_GICD_ICENABLER11 */
    volatile uint32_t  GICD_ICENABLER12;       /* ALT_GIC_DIST_GICD_ICENABLER12 */
    volatile uint32_t  GICD_ICENABLER13;       /* ALT_GIC_DIST_GICD_ICENABLER13 */
    volatile uint32_t  GICD_ICENABLER14;       /* ALT_GIC_DIST_GICD_ICENABLER14 */
    volatile uint32_t  GICD_ICENABLER15;       /* ALT_GIC_DIST_GICD_ICENABLER15 */
    volatile uint32_t  _pad_0x1c0_0x1ff[16];   /* *UNDEFINED* */
    volatile uint32_t  GICD_ISPENDR0;          /* ALT_GIC_DIST_GICD_ISPENDR0 */
    volatile uint32_t  GICD_ISPENDR1;          /* ALT_GIC_DIST_GICD_ISPENDR1 */
    volatile uint32_t  GICD_ISPENDR2;          /* ALT_GIC_DIST_GICD_ISPENDR2 */
    volatile uint32_t  GICD_ISPENDR3;          /* ALT_GIC_DIST_GICD_ISPENDR3 */
    volatile uint32_t  GICD_ISPENDR4;          /* ALT_GIC_DIST_GICD_ISPENDR4 */
    volatile uint32_t  GICD_ISPENDR5;          /* ALT_GIC_DIST_GICD_ISPENDR5 */
    volatile uint32_t  GICD_ISPENDR6;          /* ALT_GIC_DIST_GICD_ISPENDR6 */
    volatile uint32_t  GICD_ISPENDR7;          /* ALT_GIC_DIST_GICD_ISPENDR7 */
    volatile uint32_t  GICD_ISPENDR8;          /* ALT_GIC_DIST_GICD_ISPENDR8 */
    volatile uint32_t  GICD_ISPENDR9;          /* ALT_GIC_DIST_GICD_ISPENDR9 */
    volatile uint32_t  GICD_ISPENDR10;         /* ALT_GIC_DIST_GICD_ISPENDR10 */
    volatile uint32_t  GICD_ISPENDR11;         /* ALT_GIC_DIST_GICD_ISPENDR11 */
    volatile uint32_t  GICD_ISPENDR12;         /* ALT_GIC_DIST_GICD_ISPENDR12 */
    volatile uint32_t  GICD_ISPENDR13;         /* ALT_GIC_DIST_GICD_ISPENDR13 */
    volatile uint32_t  GICD_ISPENDR14;         /* ALT_GIC_DIST_GICD_ISPENDR14 */
    volatile uint32_t  GICD_ISPENDR15;         /* ALT_GIC_DIST_GICD_ISPENDR15 */
    volatile uint32_t  _pad_0x240_0x27f[16];   /* *UNDEFINED* */
    volatile uint32_t  GICD_ICPENDR0;          /* ALT_GIC_DIST_GICD_ICPENDR0 */
    volatile uint32_t  GICD_ICPENDR1;          /* ALT_GIC_DIST_GICD_ICPENDR1 */
    volatile uint32_t  GICD_ICPENDR2;          /* ALT_GIC_DIST_GICD_ICPENDR2 */
    volatile uint32_t  GICD_ICPENDR3;          /* ALT_GIC_DIST_GICD_ICPENDR3 */
    volatile uint32_t  GICD_ICPENDR4;          /* ALT_GIC_DIST_GICD_ICPENDR4 */
    volatile uint32_t  GICD_ICPENDR5;          /* ALT_GIC_DIST_GICD_ICPENDR5 */
    volatile uint32_t  GICD_ICPENDR6;          /* ALT_GIC_DIST_GICD_ICPENDR6 */
    volatile uint32_t  GICD_ICPENDR7;          /* ALT_GIC_DIST_GICD_ICPENDR7 */
    volatile uint32_t  GICD_ICPENDR8;          /* ALT_GIC_DIST_GICD_ICPENDR8 */
    volatile uint32_t  GICD_ICPENDR9;          /* ALT_GIC_DIST_GICD_ICPENDR9 */
    volatile uint32_t  GICD_ICPENDR10;         /* ALT_GIC_DIST_GICD_ICPENDR10 */
    volatile uint32_t  GICD_ICPENDR11;         /* ALT_GIC_DIST_GICD_ICPENDR11 */
    volatile uint32_t  GICD_ICPENDR12;         /* ALT_GIC_DIST_GICD_ICPENDR12 */
    volatile uint32_t  GICD_ICPENDR13;         /* ALT_GIC_DIST_GICD_ICPENDR13 */
    volatile uint32_t  GICD_ICPENDR14;         /* ALT_GIC_DIST_GICD_ICPENDR14 */
    volatile uint32_t  GICD_ICPENDR15;         /* ALT_GIC_DIST_GICD_ICPENDR15 */
    volatile uint32_t  _pad_0x2c0_0x2ff[16];   /* *UNDEFINED* */
    volatile uint32_t  GICD_ISACTIVER0;        /* ALT_GIC_DIST_GICD_ISACTIVER0 */
    volatile uint32_t  GICD_ISACTIVER1;        /* ALT_GIC_DIST_GICD_ISACTIVER1 */
    volatile uint32_t  GICD_ISACTIVER2;        /* ALT_GIC_DIST_GICD_ISACTIVER2 */
    volatile uint32_t  GICD_ISACTIVER3;        /* ALT_GIC_DIST_GICD_ISACTIVER3 */
    volatile uint32_t  GICD_ISACTIVER4;        /* ALT_GIC_DIST_GICD_ISACTIVER4 */
    volatile uint32_t  GICD_ISACTIVER5;        /* ALT_GIC_DIST_GICD_ISACTIVER5 */
    volatile uint32_t  GICD_ISACTIVER6;        /* ALT_GIC_DIST_GICD_ISACTIVER6 */
    volatile uint32_t  GICD_ISACTIVER7;        /* ALT_GIC_DIST_GICD_ISACTIVER7 */
    volatile uint32_t  GICD_ISACTIVER8;        /* ALT_GIC_DIST_GICD_ISACTIVER8 */
    volatile uint32_t  GICD_ISACTIVER9;        /* ALT_GIC_DIST_GICD_ISACTIVER9 */
    volatile uint32_t  GICD_ISACTIVER10;       /* ALT_GIC_DIST_GICD_ISACTIVER10 */
    volatile uint32_t  GICD_ISACTIVER11;       /* ALT_GIC_DIST_GICD_ISACTIVER11 */
    volatile uint32_t  GICD_ISACTIVER12;       /* ALT_GIC_DIST_GICD_ISACTIVER12 */
    volatile uint32_t  GICD_ISACTIVER13;       /* ALT_GIC_DIST_GICD_ISACTIVER13 */
    volatile uint32_t  GICD_ISACTIVER14;       /* ALT_GIC_DIST_GICD_ISACTIVER14 */
    volatile uint32_t  GICD_ISACTIVER15;       /* ALT_GIC_DIST_GICD_ISACTIVER15 */
    volatile uint32_t  _pad_0x340_0x37f[16];   /* *UNDEFINED* */
    volatile uint32_t  GICD_ICACTIVER0;        /* ALT_GIC_DIST_GICD_ICACTIVER0 */
    volatile uint32_t  GICD_ICACTIVER1;        /* ALT_GIC_DIST_GICD_ICACTIVER1 */
    volatile uint32_t  GICD_ICACTIVER2;        /* ALT_GIC_DIST_GICD_ICACTIVER2 */
    volatile uint32_t  GICD_ICACTIVER3;        /* ALT_GIC_DIST_GICD_ICACTIVER3 */
    volatile uint32_t  GICD_ICACTIVER4;        /* ALT_GIC_DIST_GICD_ICACTIVER4 */
    volatile uint32_t  GICD_ICACTIVER5;        /* ALT_GIC_DIST_GICD_ICACTIVER5 */
    volatile uint32_t  GICD_ICACTIVER6;        /* ALT_GIC_DIST_GICD_ICACTIVER6 */
    volatile uint32_t  GICD_ICACTIVER7;        /* ALT_GIC_DIST_GICD_ICACTIVER7 */
    volatile uint32_t  GICD_ICACTIVER8;        /* ALT_GIC_DIST_GICD_ICACTIVER8 */
    volatile uint32_t  GICD_ICACTIVER9;        /* ALT_GIC_DIST_GICD_ICACTIVER9 */
    volatile uint32_t  GICD_ICACTIVER10;       /* ALT_GIC_DIST_GICD_ICACTIVER10 */
    volatile uint32_t  GICD_ICACTIVER11;       /* ALT_GIC_DIST_GICD_ICACTIVER11 */
    volatile uint32_t  GICD_ICACTIVER12;       /* ALT_GIC_DIST_GICD_ICACTIVER12 */
    volatile uint32_t  GICD_ICACTIVER13;       /* ALT_GIC_DIST_GICD_ICACTIVER13 */
    volatile uint32_t  GICD_ICACTIVER14;       /* ALT_GIC_DIST_GICD_ICACTIVER14 */
    volatile uint32_t  GICD_ICACTIVER15;       /* ALT_GIC_DIST_GICD_ICACTIVER15 */
    volatile uint32_t  _pad_0x3c0_0x3ff[16];   /* *UNDEFINED* */
    volatile uint32_t  GICD_IPRIORITYR0;       /* ALT_GIC_DIST_GICD_IPRIORITYR0 */
    volatile uint32_t  GICD_IPRIORITYR1;       /* ALT_GIC_DIST_GICD_IPRIORITYR1 */
    volatile uint32_t  GICD_IPRIORITYR2;       /* ALT_GIC_DIST_GICD_IPRIORITYR2 */
    volatile uint32_t  GICD_IPRIORITYR3;       /* ALT_GIC_DIST_GICD_IPRIORITYR3 */
    volatile uint32_t  GICD_IPRIORITYR4;       /* ALT_GIC_DIST_GICD_IPRIORITYR4 */
    volatile uint32_t  GICD_IPRIORITYR5;       /* ALT_GIC_DIST_GICD_IPRIORITYR5 */
    volatile uint32_t  GICD_IPRIORITYR6;       /* ALT_GIC_DIST_GICD_IPRIORITYR6 */
    volatile uint32_t  GICD_IPRIORITYR7;       /* ALT_GIC_DIST_GICD_IPRIORITYR7 */
    volatile uint32_t  GICD_IPRIORITYR8;       /* ALT_GIC_DIST_GICD_IPRIORITYR8 */
    volatile uint32_t  GICD_IPRIORITYR9;       /* ALT_GIC_DIST_GICD_IPRIORITYR9 */
    volatile uint32_t  GICD_IPRIORITYR10;      /* ALT_GIC_DIST_GICD_IPRIORITYR10 */
    volatile uint32_t  GICD_IPRIORITYR11;      /* ALT_GIC_DIST_GICD_IPRIORITYR11 */
    volatile uint32_t  GICD_IPRIORITYR12;      /* ALT_GIC_DIST_GICD_IPRIORITYR12 */
    volatile uint32_t  GICD_IPRIORITYR13;      /* ALT_GIC_DIST_GICD_IPRIORITYR13 */
    volatile uint32_t  GICD_IPRIORITYR14;      /* ALT_GIC_DIST_GICD_IPRIORITYR14 */
    volatile uint32_t  GICD_IPRIORITYR15;      /* ALT_GIC_DIST_GICD_IPRIORITYR15 */
    volatile uint32_t  GICD_IPRIORITYR16;      /* ALT_GIC_DIST_GICD_IPRIORITYR16 */
    volatile uint32_t  GICD_IPRIORITYR17;      /* ALT_GIC_DIST_GICD_IPRIORITYR17 */
    volatile uint32_t  GICD_IPRIORITYR18;      /* ALT_GIC_DIST_GICD_IPRIORITYR18 */
    volatile uint32_t  GICD_IPRIORITYR19;      /* ALT_GIC_DIST_GICD_IPRIORITYR19 */
    volatile uint32_t  GICD_IPRIORITYR20;      /* ALT_GIC_DIST_GICD_IPRIORITYR20 */
    volatile uint32_t  GICD_IPRIORITYR21;      /* ALT_GIC_DIST_GICD_IPRIORITYR21 */
    volatile uint32_t  GICD_IPRIORITYR22;      /* ALT_GIC_DIST_GICD_IPRIORITYR22 */
    volatile uint32_t  GICD_IPRIORITYR23;      /* ALT_GIC_DIST_GICD_IPRIORITYR23 */
    volatile uint32_t  GICD_IPRIORITYR24;      /* ALT_GIC_DIST_GICD_IPRIORITYR24 */
    volatile uint32_t  GICD_IPRIORITYR25;      /* ALT_GIC_DIST_GICD_IPRIORITYR25 */
    volatile uint32_t  GICD_IPRIORITYR26;      /* ALT_GIC_DIST_GICD_IPRIORITYR26 */
    volatile uint32_t  GICD_IPRIORITYR27;      /* ALT_GIC_DIST_GICD_IPRIORITYR27 */
    volatile uint32_t  GICD_IPRIORITYR28;      /* ALT_GIC_DIST_GICD_IPRIORITYR28 */
    volatile uint32_t  GICD_IPRIORITYR29;      /* ALT_GIC_DIST_GICD_IPRIORITYR29 */
    volatile uint32_t  GICD_IPRIORITYR30;      /* ALT_GIC_DIST_GICD_IPRIORITYR30 */
    volatile uint32_t  GICD_IPRIORITYR31;      /* ALT_GIC_DIST_GICD_IPRIORITYR31 */
    volatile uint32_t  GICD_IPRIORITYR32;      /* ALT_GIC_DIST_GICD_IPRIORITYR32 */
    volatile uint32_t  GICD_IPRIORITYR33;      /* ALT_GIC_DIST_GICD_IPRIORITYR33 */
    volatile uint32_t  GICD_IPRIORITYR34;      /* ALT_GIC_DIST_GICD_IPRIORITYR34 */
    volatile uint32_t  GICD_IPRIORITYR35;      /* ALT_GIC_DIST_GICD_IPRIORITYR35 */
    volatile uint32_t  GICD_IPRIORITYR36;      /* ALT_GIC_DIST_GICD_IPRIORITYR36 */
    volatile uint32_t  GICD_IPRIORITYR37;      /* ALT_GIC_DIST_GICD_IPRIORITYR37 */
    volatile uint32_t  GICD_IPRIORITYR38;      /* ALT_GIC_DIST_GICD_IPRIORITYR38 */
    volatile uint32_t  GICD_IPRIORITYR39;      /* ALT_GIC_DIST_GICD_IPRIORITYR39 */
    volatile uint32_t  GICD_IPRIORITYR40;      /* ALT_GIC_DIST_GICD_IPRIORITYR40 */
    volatile uint32_t  GICD_IPRIORITYR41;      /* ALT_GIC_DIST_GICD_IPRIORITYR41 */
    volatile uint32_t  GICD_IPRIORITYR42;      /* ALT_GIC_DIST_GICD_IPRIORITYR42 */
    volatile uint32_t  GICD_IPRIORITYR43;      /* ALT_GIC_DIST_GICD_IPRIORITYR43 */
    volatile uint32_t  GICD_IPRIORITYR44;      /* ALT_GIC_DIST_GICD_IPRIORITYR44 */
    volatile uint32_t  GICD_IPRIORITYR45;      /* ALT_GIC_DIST_GICD_IPRIORITYR45 */
    volatile uint32_t  GICD_IPRIORITYR46;      /* ALT_GIC_DIST_GICD_IPRIORITYR46 */
    volatile uint32_t  GICD_IPRIORITYR47;      /* ALT_GIC_DIST_GICD_IPRIORITYR47 */
    volatile uint32_t  GICD_IPRIORITYR48;      /* ALT_GIC_DIST_GICD_IPRIORITYR48 */
    volatile uint32_t  GICD_IPRIORITYR49;      /* ALT_GIC_DIST_GICD_IPRIORITYR49 */
    volatile uint32_t  GICD_IPRIORITYR50;      /* ALT_GIC_DIST_GICD_IPRIORITYR50 */
    volatile uint32_t  GICD_IPRIORITYR51;      /* ALT_GIC_DIST_GICD_IPRIORITYR51 */
    volatile uint32_t  GICD_IPRIORITYR52;      /* ALT_GIC_DIST_GICD_IPRIORITYR52 */
    volatile uint32_t  GICD_IPRIORITYR53;      /* ALT_GIC_DIST_GICD_IPRIORITYR53 */
    volatile uint32_t  GICD_IPRIORITYR54;      /* ALT_GIC_DIST_GICD_IPRIORITYR54 */
    volatile uint32_t  GICD_IPRIORITYR55;      /* ALT_GIC_DIST_GICD_IPRIORITYR55 */
    volatile uint32_t  GICD_IPRIORITYR56;      /* ALT_GIC_DIST_GICD_IPRIORITYR56 */
    volatile uint32_t  GICD_IPRIORITYR57;      /* ALT_GIC_DIST_GICD_IPRIORITYR57 */
    volatile uint32_t  GICD_IPRIORITYR58;      /* ALT_GIC_DIST_GICD_IPRIORITYR58 */
    volatile uint32_t  GICD_IPRIORITYR59;      /* ALT_GIC_DIST_GICD_IPRIORITYR59 */
    volatile uint32_t  GICD_IPRIORITYR60;      /* ALT_GIC_DIST_GICD_IPRIORITYR60 */
    volatile uint32_t  GICD_IPRIORITYR61;      /* ALT_GIC_DIST_GICD_IPRIORITYR61 */
    volatile uint32_t  GICD_IPRIORITYR62;      /* ALT_GIC_DIST_GICD_IPRIORITYR62 */
    volatile uint32_t  GICD_IPRIORITYR63;      /* ALT_GIC_DIST_GICD_IPRIORITYR63 */
    volatile uint32_t  GICD_IPRIORITYR64;      /* ALT_GIC_DIST_GICD_IPRIORITYR64 */
    volatile uint32_t  GICD_IPRIORITYR65;      /* ALT_GIC_DIST_GICD_IPRIORITYR65 */
    volatile uint32_t  GICD_IPRIORITYR66;      /* ALT_GIC_DIST_GICD_IPRIORITYR66 */
    volatile uint32_t  GICD_IPRIORITYR67;      /* ALT_GIC_DIST_GICD_IPRIORITYR67 */
    volatile uint32_t  GICD_IPRIORITYR68;      /* ALT_GIC_DIST_GICD_IPRIORITYR68 */
    volatile uint32_t  GICD_IPRIORITYR69;      /* ALT_GIC_DIST_GICD_IPRIORITYR69 */
    volatile uint32_t  GICD_IPRIORITYR70;      /* ALT_GIC_DIST_GICD_IPRIORITYR70 */
    volatile uint32_t  GICD_IPRIORITYR71;      /* ALT_GIC_DIST_GICD_IPRIORITYR71 */
    volatile uint32_t  GICD_IPRIORITYR72;      /* ALT_GIC_DIST_GICD_IPRIORITYR72 */
    volatile uint32_t  GICD_IPRIORITYR73;      /* ALT_GIC_DIST_GICD_IPRIORITYR73 */
    volatile uint32_t  GICD_IPRIORITYR74;      /* ALT_GIC_DIST_GICD_IPRIORITYR74 */
    volatile uint32_t  GICD_IPRIORITYR75;      /* ALT_GIC_DIST_GICD_IPRIORITYR75 */
    volatile uint32_t  GICD_IPRIORITYR76;      /* ALT_GIC_DIST_GICD_IPRIORITYR76 */
    volatile uint32_t  GICD_IPRIORITYR77;      /* ALT_GIC_DIST_GICD_IPRIORITYR77 */
    volatile uint32_t  GICD_IPRIORITYR78;      /* ALT_GIC_DIST_GICD_IPRIORITYR78 */
    volatile uint32_t  GICD_IPRIORITYR79;      /* ALT_GIC_DIST_GICD_IPRIORITYR79 */
    volatile uint32_t  GICD_IPRIORITYR80;      /* ALT_GIC_DIST_GICD_IPRIORITYR80 */
    volatile uint32_t  GICD_IPRIORITYR81;      /* ALT_GIC_DIST_GICD_IPRIORITYR81 */
    volatile uint32_t  GICD_IPRIORITYR82;      /* ALT_GIC_DIST_GICD_IPRIORITYR82 */
    volatile uint32_t  GICD_IPRIORITYR83;      /* ALT_GIC_DIST_GICD_IPRIORITYR83 */
    volatile uint32_t  GICD_IPRIORITYR84;      /* ALT_GIC_DIST_GICD_IPRIORITYR84 */
    volatile uint32_t  GICD_IPRIORITYR85;      /* ALT_GIC_DIST_GICD_IPRIORITYR85 */
    volatile uint32_t  GICD_IPRIORITYR86;      /* ALT_GIC_DIST_GICD_IPRIORITYR86 */
    volatile uint32_t  GICD_IPRIORITYR87;      /* ALT_GIC_DIST_GICD_IPRIORITYR87 */
    volatile uint32_t  GICD_IPRIORITYR88;      /* ALT_GIC_DIST_GICD_IPRIORITYR88 */
    volatile uint32_t  GICD_IPRIORITYR89;      /* ALT_GIC_DIST_GICD_IPRIORITYR89 */
    volatile uint32_t  GICD_IPRIORITYR90;      /* ALT_GIC_DIST_GICD_IPRIORITYR90 */
    volatile uint32_t  GICD_IPRIORITYR91;      /* ALT_GIC_DIST_GICD_IPRIORITYR91 */
    volatile uint32_t  GICD_IPRIORITYR92;      /* ALT_GIC_DIST_GICD_IPRIORITYR92 */
    volatile uint32_t  GICD_IPRIORITYR93;      /* ALT_GIC_DIST_GICD_IPRIORITYR93 */
    volatile uint32_t  GICD_IPRIORITYR94;      /* ALT_GIC_DIST_GICD_IPRIORITYR94 */
    volatile uint32_t  GICD_IPRIORITYR95;      /* ALT_GIC_DIST_GICD_IPRIORITYR95 */
    volatile uint32_t  GICD_IPRIORITYR96;      /* ALT_GIC_DIST_GICD_IPRIORITYR96 */
    volatile uint32_t  GICD_IPRIORITYR97;      /* ALT_GIC_DIST_GICD_IPRIORITYR97 */
    volatile uint32_t  GICD_IPRIORITYR98;      /* ALT_GIC_DIST_GICD_IPRIORITYR98 */
    volatile uint32_t  GICD_IPRIORITYR99;      /* ALT_GIC_DIST_GICD_IPRIORITYR99 */
    volatile uint32_t  GICD_IPRIORITYR100;     /* ALT_GIC_DIST_GICD_IPRIORITYR100 */
    volatile uint32_t  GICD_IPRIORITYR101;     /* ALT_GIC_DIST_GICD_IPRIORITYR101 */
    volatile uint32_t  GICD_IPRIORITYR102;     /* ALT_GIC_DIST_GICD_IPRIORITYR102 */
    volatile uint32_t  GICD_IPRIORITYR103;     /* ALT_GIC_DIST_GICD_IPRIORITYR103 */
    volatile uint32_t  GICD_IPRIORITYR104;     /* ALT_GIC_DIST_GICD_IPRIORITYR104 */
    volatile uint32_t  GICD_IPRIORITYR105;     /* ALT_GIC_DIST_GICD_IPRIORITYR105 */
    volatile uint32_t  GICD_IPRIORITYR106;     /* ALT_GIC_DIST_GICD_IPRIORITYR106 */
    volatile uint32_t  GICD_IPRIORITYR107;     /* ALT_GIC_DIST_GICD_IPRIORITYR107 */
    volatile uint32_t  GICD_IPRIORITYR108;     /* ALT_GIC_DIST_GICD_IPRIORITYR108 */
    volatile uint32_t  GICD_IPRIORITYR109;     /* ALT_GIC_DIST_GICD_IPRIORITYR109 */
    volatile uint32_t  GICD_IPRIORITYR110;     /* ALT_GIC_DIST_GICD_IPRIORITYR110 */
    volatile uint32_t  GICD_IPRIORITYR111;     /* ALT_GIC_DIST_GICD_IPRIORITYR111 */
    volatile uint32_t  GICD_IPRIORITYR112;     /* ALT_GIC_DIST_GICD_IPRIORITYR112 */
    volatile uint32_t  GICD_IPRIORITYR113;     /* ALT_GIC_DIST_GICD_IPRIORITYR113 */
    volatile uint32_t  GICD_IPRIORITYR114;     /* ALT_GIC_DIST_GICD_IPRIORITYR114 */
    volatile uint32_t  GICD_IPRIORITYR115;     /* ALT_GIC_DIST_GICD_IPRIORITYR115 */
    volatile uint32_t  GICD_IPRIORITYR116;     /* ALT_GIC_DIST_GICD_IPRIORITYR116 */
    volatile uint32_t  GICD_IPRIORITYR117;     /* ALT_GIC_DIST_GICD_IPRIORITYR117 */
    volatile uint32_t  GICD_IPRIORITYR118;     /* ALT_GIC_DIST_GICD_IPRIORITYR118 */
    volatile uint32_t  GICD_IPRIORITYR119;     /* ALT_GIC_DIST_GICD_IPRIORITYR119 */
    volatile uint32_t  GICD_IPRIORITYR120;     /* ALT_GIC_DIST_GICD_IPRIORITYR120 */
    volatile uint32_t  GICD_IPRIORITYR121;     /* ALT_GIC_DIST_GICD_IPRIORITYR121 */
    volatile uint32_t  GICD_IPRIORITYR122;     /* ALT_GIC_DIST_GICD_IPRIORITYR122 */
    volatile uint32_t  GICD_IPRIORITYR123;     /* ALT_GIC_DIST_GICD_IPRIORITYR123 */
    volatile uint32_t  GICD_IPRIORITYR124;     /* ALT_GIC_DIST_GICD_IPRIORITYR124 */
    volatile uint32_t  GICD_IPRIORITYR125;     /* ALT_GIC_DIST_GICD_IPRIORITYR125 */
    volatile uint32_t  GICD_IPRIORITYR126;     /* ALT_GIC_DIST_GICD_IPRIORITYR126 */
    volatile uint32_t  GICD_IPRIORITYR127;     /* ALT_GIC_DIST_GICD_IPRIORITYR127 */
    volatile uint32_t  _pad_0x600_0x7ff[128];  /* *UNDEFINED* */
    volatile uint32_t  GICD_ITARGETSR0;        /* ALT_GIC_DIST_GICD_ITARGETSR0 */
    volatile uint32_t  GICD_ITARGETSR1;        /* ALT_GIC_DIST_GICD_ITARGETSR1 */
    volatile uint32_t  GICD_ITARGETSR2;        /* ALT_GIC_DIST_GICD_ITARGETSR2 */
    volatile uint32_t  GICD_ITARGETSR3;        /* ALT_GIC_DIST_GICD_ITARGETSR3 */
    volatile uint32_t  GICD_ITARGETSR4;        /* ALT_GIC_DIST_GICD_ITARGETSR4 */
    volatile uint32_t  GICD_ITARGETSR5;        /* ALT_GIC_DIST_GICD_ITARGETSR5 */
    volatile uint32_t  GICD_ITARGETSR6;        /* ALT_GIC_DIST_GICD_ITARGETSR6 */
    volatile uint32_t  GICD_ITARGETSR7;        /* ALT_GIC_DIST_GICD_ITARGETSR7 */
    volatile uint32_t  GICD_ITARGETSR8;        /* ALT_GIC_DIST_GICD_ITARGETSR8 */
    volatile uint32_t  GICD_ITARGETSR9;        /* ALT_GIC_DIST_GICD_ITARGETSR9 */
    volatile uint32_t  GICD_ITARGETSR10;       /* ALT_GIC_DIST_GICD_ITARGETSR10 */
    volatile uint32_t  GICD_ITARGETSR11;       /* ALT_GIC_DIST_GICD_ITARGETSR11 */
    volatile uint32_t  GICD_ITARGETSR12;       /* ALT_GIC_DIST_GICD_ITARGETSR12 */
    volatile uint32_t  GICD_ITARGETSR13;       /* ALT_GIC_DIST_GICD_ITARGETSR13 */
    volatile uint32_t  GICD_ITARGETSR14;       /* ALT_GIC_DIST_GICD_ITARGETSR14 */
    volatile uint32_t  GICD_ITARGETSR15;       /* ALT_GIC_DIST_GICD_ITARGETSR15 */
    volatile uint32_t  GICD_ITARGETSR16;       /* ALT_GIC_DIST_GICD_ITARGETSR16 */
    volatile uint32_t  GICD_ITARGETSR17;       /* ALT_GIC_DIST_GICD_ITARGETSR17 */
    volatile uint32_t  GICD_ITARGETSR18;       /* ALT_GIC_DIST_GICD_ITARGETSR18 */
    volatile uint32_t  GICD_ITARGETSR19;       /* ALT_GIC_DIST_GICD_ITARGETSR19 */
    volatile uint32_t  GICD_ITARGETSR20;       /* ALT_GIC_DIST_GICD_ITARGETSR20 */
    volatile uint32_t  GICD_ITARGETSR21;       /* ALT_GIC_DIST_GICD_ITARGETSR21 */
    volatile uint32_t  GICD_ITARGETSR22;       /* ALT_GIC_DIST_GICD_ITARGETSR22 */
    volatile uint32_t  GICD_ITARGETSR23;       /* ALT_GIC_DIST_GICD_ITARGETSR23 */
    volatile uint32_t  GICD_ITARGETSR24;       /* ALT_GIC_DIST_GICD_ITARGETSR24 */
    volatile uint32_t  GICD_ITARGETSR25;       /* ALT_GIC_DIST_GICD_ITARGETSR25 */
    volatile uint32_t  GICD_ITARGETSR26;       /* ALT_GIC_DIST_GICD_ITARGETSR26 */
    volatile uint32_t  GICD_ITARGETSR27;       /* ALT_GIC_DIST_GICD_ITARGETSR27 */
    volatile uint32_t  GICD_ITARGETSR28;       /* ALT_GIC_DIST_GICD_ITARGETSR28 */
    volatile uint32_t  GICD_ITARGETSR29;       /* ALT_GIC_DIST_GICD_ITARGETSR29 */
    volatile uint32_t  GICD_ITARGETSR30;       /* ALT_GIC_DIST_GICD_ITARGETSR30 */
    volatile uint32_t  GICD_ITARGETSR31;       /* ALT_GIC_DIST_GICD_ITARGETSR31 */
    volatile uint32_t  GICD_ITARGETSR32;       /* ALT_GIC_DIST_GICD_ITARGETSR32 */
    volatile uint32_t  GICD_ITARGETSR33;       /* ALT_GIC_DIST_GICD_ITARGETSR33 */
    volatile uint32_t  GICD_ITARGETSR34;       /* ALT_GIC_DIST_GICD_ITARGETSR34 */
    volatile uint32_t  GICD_ITARGETSR35;       /* ALT_GIC_DIST_GICD_ITARGETSR35 */
    volatile uint32_t  GICD_ITARGETSR36;       /* ALT_GIC_DIST_GICD_ITARGETSR36 */
    volatile uint32_t  GICD_ITARGETSR37;       /* ALT_GIC_DIST_GICD_ITARGETSR37 */
    volatile uint32_t  GICD_ITARGETSR38;       /* ALT_GIC_DIST_GICD_ITARGETSR38 */
    volatile uint32_t  GICD_ITARGETSR39;       /* ALT_GIC_DIST_GICD_ITARGETSR39 */
    volatile uint32_t  GICD_ITARGETSR40;       /* ALT_GIC_DIST_GICD_ITARGETSR40 */
    volatile uint32_t  GICD_ITARGETSR41;       /* ALT_GIC_DIST_GICD_ITARGETSR41 */
    volatile uint32_t  GICD_ITARGETSR42;       /* ALT_GIC_DIST_GICD_ITARGETSR42 */
    volatile uint32_t  GICD_ITARGETSR43;       /* ALT_GIC_DIST_GICD_ITARGETSR43 */
    volatile uint32_t  GICD_ITARGETSR44;       /* ALT_GIC_DIST_GICD_ITARGETSR44 */
    volatile uint32_t  GICD_ITARGETSR45;       /* ALT_GIC_DIST_GICD_ITARGETSR45 */
    volatile uint32_t  GICD_ITARGETSR46;       /* ALT_GIC_DIST_GICD_ITARGETSR46 */
    volatile uint32_t  GICD_ITARGETSR47;       /* ALT_GIC_DIST_GICD_ITARGETSR47 */
    volatile uint32_t  GICD_ITARGETSR48;       /* ALT_GIC_DIST_GICD_ITARGETSR48 */
    volatile uint32_t  GICD_ITARGETSR49;       /* ALT_GIC_DIST_GICD_ITARGETSR49 */
    volatile uint32_t  GICD_ITARGETSR50;       /* ALT_GIC_DIST_GICD_ITARGETSR50 */
    volatile uint32_t  GICD_ITARGETSR51;       /* ALT_GIC_DIST_GICD_ITARGETSR51 */
    volatile uint32_t  GICD_ITARGETSR52;       /* ALT_GIC_DIST_GICD_ITARGETSR52 */
    volatile uint32_t  GICD_ITARGETSR53;       /* ALT_GIC_DIST_GICD_ITARGETSR53 */
    volatile uint32_t  GICD_ITARGETSR54;       /* ALT_GIC_DIST_GICD_ITARGETSR54 */
    volatile uint32_t  GICD_ITARGETSR55;       /* ALT_GIC_DIST_GICD_ITARGETSR55 */
    volatile uint32_t  GICD_ITARGETSR56;       /* ALT_GIC_DIST_GICD_ITARGETSR56 */
    volatile uint32_t  GICD_ITARGETSR57;       /* ALT_GIC_DIST_GICD_ITARGETSR57 */
    volatile uint32_t  GICD_ITARGETSR58;       /* ALT_GIC_DIST_GICD_ITARGETSR58 */
    volatile uint32_t  GICD_ITARGETSR59;       /* ALT_GIC_DIST_GICD_ITARGETSR59 */
    volatile uint32_t  GICD_ITARGETSR60;       /* ALT_GIC_DIST_GICD_ITARGETSR60 */
    volatile uint32_t  GICD_ITARGETSR61;       /* ALT_GIC_DIST_GICD_ITARGETSR61 */
    volatile uint32_t  GICD_ITARGETSR62;       /* ALT_GIC_DIST_GICD_ITARGETSR62 */
    volatile uint32_t  GICD_ITARGETSR63;       /* ALT_GIC_DIST_GICD_ITARGETSR63 */
    volatile uint32_t  GICD_ITARGETSR64;       /* ALT_GIC_DIST_GICD_ITARGETSR64 */
    volatile uint32_t  GICD_ITARGETSR65;       /* ALT_GIC_DIST_GICD_ITARGETSR65 */
    volatile uint32_t  GICD_ITARGETSR66;       /* ALT_GIC_DIST_GICD_ITARGETSR66 */
    volatile uint32_t  GICD_ITARGETSR67;       /* ALT_GIC_DIST_GICD_ITARGETSR67 */
    volatile uint32_t  GICD_ITARGETSR68;       /* ALT_GIC_DIST_GICD_ITARGETSR68 */
    volatile uint32_t  GICD_ITARGETSR69;       /* ALT_GIC_DIST_GICD_ITARGETSR69 */
    volatile uint32_t  GICD_ITARGETSR70;       /* ALT_GIC_DIST_GICD_ITARGETSR70 */
    volatile uint32_t  GICD_ITARGETSR71;       /* ALT_GIC_DIST_GICD_ITARGETSR71 */
    volatile uint32_t  GICD_ITARGETSR72;       /* ALT_GIC_DIST_GICD_ITARGETSR72 */
    volatile uint32_t  GICD_ITARGETSR73;       /* ALT_GIC_DIST_GICD_ITARGETSR73 */
    volatile uint32_t  GICD_ITARGETSR74;       /* ALT_GIC_DIST_GICD_ITARGETSR74 */
    volatile uint32_t  GICD_ITARGETSR75;       /* ALT_GIC_DIST_GICD_ITARGETSR75 */
    volatile uint32_t  GICD_ITARGETSR76;       /* ALT_GIC_DIST_GICD_ITARGETSR76 */
    volatile uint32_t  GICD_ITARGETSR77;       /* ALT_GIC_DIST_GICD_ITARGETSR77 */
    volatile uint32_t  GICD_ITARGETSR78;       /* ALT_GIC_DIST_GICD_ITARGETSR78 */
    volatile uint32_t  GICD_ITARGETSR79;       /* ALT_GIC_DIST_GICD_ITARGETSR79 */
    volatile uint32_t  GICD_ITARGETSR80;       /* ALT_GIC_DIST_GICD_ITARGETSR80 */
    volatile uint32_t  GICD_ITARGETSR81;       /* ALT_GIC_DIST_GICD_ITARGETSR81 */
    volatile uint32_t  GICD_ITARGETSR82;       /* ALT_GIC_DIST_GICD_ITARGETSR82 */
    volatile uint32_t  GICD_ITARGETSR83;       /* ALT_GIC_DIST_GICD_ITARGETSR83 */
    volatile uint32_t  GICD_ITARGETSR84;       /* ALT_GIC_DIST_GICD_ITARGETSR84 */
    volatile uint32_t  GICD_ITARGETSR85;       /* ALT_GIC_DIST_GICD_ITARGETSR85 */
    volatile uint32_t  GICD_ITARGETSR86;       /* ALT_GIC_DIST_GICD_ITARGETSR86 */
    volatile uint32_t  GICD_ITARGETSR87;       /* ALT_GIC_DIST_GICD_ITARGETSR87 */
    volatile uint32_t  GICD_ITARGETSR88;       /* ALT_GIC_DIST_GICD_ITARGETSR88 */
    volatile uint32_t  GICD_ITARGETSR89;       /* ALT_GIC_DIST_GICD_ITARGETSR89 */
    volatile uint32_t  GICD_ITARGETSR90;       /* ALT_GIC_DIST_GICD_ITARGETSR90 */
    volatile uint32_t  GICD_ITARGETSR91;       /* ALT_GIC_DIST_GICD_ITARGETSR91 */
    volatile uint32_t  GICD_ITARGETSR92;       /* ALT_GIC_DIST_GICD_ITARGETSR92 */
    volatile uint32_t  GICD_ITARGETSR93;       /* ALT_GIC_DIST_GICD_ITARGETSR93 */
    volatile uint32_t  GICD_ITARGETSR94;       /* ALT_GIC_DIST_GICD_ITARGETSR94 */
    volatile uint32_t  GICD_ITARGETSR95;       /* ALT_GIC_DIST_GICD_ITARGETSR95 */
    volatile uint32_t  GICD_ITARGETSR96;       /* ALT_GIC_DIST_GICD_ITARGETSR96 */
    volatile uint32_t  GICD_ITARGETSR97;       /* ALT_GIC_DIST_GICD_ITARGETSR97 */
    volatile uint32_t  GICD_ITARGETSR98;       /* ALT_GIC_DIST_GICD_ITARGETSR98 */
    volatile uint32_t  GICD_ITARGETSR99;       /* ALT_GIC_DIST_GICD_ITARGETSR99 */
    volatile uint32_t  GICD_ITARGETSR100;      /* ALT_GIC_DIST_GICD_ITARGETSR100 */
    volatile uint32_t  GICD_ITARGETSR101;      /* ALT_GIC_DIST_GICD_ITARGETSR101 */
    volatile uint32_t  GICD_ITARGETSR102;      /* ALT_GIC_DIST_GICD_ITARGETSR102 */
    volatile uint32_t  GICD_ITARGETSR103;      /* ALT_GIC_DIST_GICD_ITARGETSR103 */
    volatile uint32_t  GICD_ITARGETSR104;      /* ALT_GIC_DIST_GICD_ITARGETSR104 */
    volatile uint32_t  GICD_ITARGETSR105;      /* ALT_GIC_DIST_GICD_ITARGETSR105 */
    volatile uint32_t  GICD_ITARGETSR106;      /* ALT_GIC_DIST_GICD_ITARGETSR106 */
    volatile uint32_t  GICD_ITARGETSR107;      /* ALT_GIC_DIST_GICD_ITARGETSR107 */
    volatile uint32_t  GICD_ITARGETSR108;      /* ALT_GIC_DIST_GICD_ITARGETSR108 */
    volatile uint32_t  GICD_ITARGETSR109;      /* ALT_GIC_DIST_GICD_ITARGETSR109 */
    volatile uint32_t  GICD_ITARGETSR110;      /* ALT_GIC_DIST_GICD_ITARGETSR110 */
    volatile uint32_t  GICD_ITARGETSR111;      /* ALT_GIC_DIST_GICD_ITARGETSR111 */
    volatile uint32_t  GICD_ITARGETSR112;      /* ALT_GIC_DIST_GICD_ITARGETSR112 */
    volatile uint32_t  GICD_ITARGETSR113;      /* ALT_GIC_DIST_GICD_ITARGETSR113 */
    volatile uint32_t  GICD_ITARGETSR114;      /* ALT_GIC_DIST_GICD_ITARGETSR114 */
    volatile uint32_t  GICD_ITARGETSR115;      /* ALT_GIC_DIST_GICD_ITARGETSR115 */
    volatile uint32_t  GICD_ITARGETSR116;      /* ALT_GIC_DIST_GICD_ITARGETSR116 */
    volatile uint32_t  GICD_ITARGETSR117;      /* ALT_GIC_DIST_GICD_ITARGETSR117 */
    volatile uint32_t  GICD_ITARGETSR118;      /* ALT_GIC_DIST_GICD_ITARGETSR118 */
    volatile uint32_t  GICD_ITARGETSR119;      /* ALT_GIC_DIST_GICD_ITARGETSR119 */
    volatile uint32_t  GICD_ITARGETSR120;      /* ALT_GIC_DIST_GICD_ITARGETSR120 */
    volatile uint32_t  GICD_ITARGETSR121;      /* ALT_GIC_DIST_GICD_ITARGETSR121 */
    volatile uint32_t  GICD_ITARGETSR122;      /* ALT_GIC_DIST_GICD_ITARGETSR122 */
    volatile uint32_t  GICD_ITARGETSR123;      /* ALT_GIC_DIST_GICD_ITARGETSR123 */
    volatile uint32_t  GICD_ITARGETSR124;      /* ALT_GIC_DIST_GICD_ITARGETSR124 */
    volatile uint32_t  GICD_ITARGETSR125;      /* ALT_GIC_DIST_GICD_ITARGETSR125 */
    volatile uint32_t  GICD_ITARGETSR126;      /* ALT_GIC_DIST_GICD_ITARGETSR126 */
    volatile uint32_t  GICD_ITARGETSR127;      /* ALT_GIC_DIST_GICD_ITARGETSR127 */
    volatile uint32_t  _pad_0xa00_0xbff[128];  /* *UNDEFINED* */
    volatile uint32_t  GICD_ICFGR0;            /* ALT_GIC_DIST_GICD_ICFGR0 */
    volatile uint32_t  GICD_ICFGR1;            /* ALT_GIC_DIST_GICD_ICFGR1 */
    volatile uint32_t  GICD_ICFGR2;            /* ALT_GIC_DIST_GICD_ICFGR2 */
    volatile uint32_t  GICD_ICFGR3;            /* ALT_GIC_DIST_GICD_ICFGR3 */
    volatile uint32_t  GICD_ICFGR4;            /* ALT_GIC_DIST_GICD_ICFGR4 */
    volatile uint32_t  GICD_ICFGR5;            /* ALT_GIC_DIST_GICD_ICFGR5 */
    volatile uint32_t  GICD_ICFGR6;            /* ALT_GIC_DIST_GICD_ICFGR6 */
    volatile uint32_t  GICD_ICFGR7;            /* ALT_GIC_DIST_GICD_ICFGR7 */
    volatile uint32_t  GICD_ICFGR8;            /* ALT_GIC_DIST_GICD_ICFGR8 */
    volatile uint32_t  GICD_ICFGR9;            /* ALT_GIC_DIST_GICD_ICFGR9 */
    volatile uint32_t  GICD_ICFGR10;           /* ALT_GIC_DIST_GICD_ICFGR10 */
    volatile uint32_t  GICD_ICFGR11;           /* ALT_GIC_DIST_GICD_ICFGR11 */
    volatile uint32_t  GICD_ICFGR12;           /* ALT_GIC_DIST_GICD_ICFGR12 */
    volatile uint32_t  GICD_ICFGR13;           /* ALT_GIC_DIST_GICD_ICFGR13 */
    volatile uint32_t  GICD_ICFGR14;           /* ALT_GIC_DIST_GICD_ICFGR14 */
    volatile uint32_t  GICD_ICFGR15;           /* ALT_GIC_DIST_GICD_ICFGR15 */
    volatile uint32_t  GICD_ICFGR16;           /* ALT_GIC_DIST_GICD_ICFGR16 */
    volatile uint32_t  GICD_ICFGR17;           /* ALT_GIC_DIST_GICD_ICFGR17 */
    volatile uint32_t  GICD_ICFGR18;           /* ALT_GIC_DIST_GICD_ICFGR18 */
    volatile uint32_t  GICD_ICFGR19;           /* ALT_GIC_DIST_GICD_ICFGR19 */
    volatile uint32_t  GICD_ICFGR20;           /* ALT_GIC_DIST_GICD_ICFGR20 */
    volatile uint32_t  GICD_ICFGR21;           /* ALT_GIC_DIST_GICD_ICFGR21 */
    volatile uint32_t  GICD_ICFGR22;           /* ALT_GIC_DIST_GICD_ICFGR22 */
    volatile uint32_t  GICD_ICFGR23;           /* ALT_GIC_DIST_GICD_ICFGR23 */
    volatile uint32_t  GICD_ICFGR24;           /* ALT_GIC_DIST_GICD_ICFGR24 */
    volatile uint32_t  GICD_ICFGR25;           /* ALT_GIC_DIST_GICD_ICFGR25 */
    volatile uint32_t  GICD_ICFGR26;           /* ALT_GIC_DIST_GICD_ICFGR26 */
    volatile uint32_t  GICD_ICFGR27;           /* ALT_GIC_DIST_GICD_ICFGR27 */
    volatile uint32_t  GICD_ICFGR28;           /* ALT_GIC_DIST_GICD_ICFGR28 */
    volatile uint32_t  GICD_ICFGR29;           /* ALT_GIC_DIST_GICD_ICFGR29 */
    volatile uint32_t  GICD_ICFGR30;           /* ALT_GIC_DIST_GICD_ICFGR30 */
    volatile uint32_t  GICD_ICFGR31;           /* ALT_GIC_DIST_GICD_ICFGR31 */
    volatile uint32_t  _pad_0xc80_0xcff[32];   /* *UNDEFINED* */
    volatile uint32_t  GICD_PPISR;             /* ALT_GIC_DIST_GICD_PPISR */
    volatile uint32_t  GICD_SPISR0;            /* ALT_GIC_DIST_GICD_SPISR0 */
    volatile uint32_t  GICD_SPISR1;            /* ALT_GIC_DIST_GICD_SPISR1 */
    volatile uint32_t  GICD_SPISR2;            /* ALT_GIC_DIST_GICD_SPISR2 */
    volatile uint32_t  GICD_SPISR3;            /* ALT_GIC_DIST_GICD_SPISR3 */
    volatile uint32_t  GICD_SPISR4;            /* ALT_GIC_DIST_GICD_SPISR4 */
    volatile uint32_t  GICD_SPISR5;            /* ALT_GIC_DIST_GICD_SPISR5 */
    volatile uint32_t  GICD_SPISR6;            /* ALT_GIC_DIST_GICD_SPISR6 */
    volatile uint32_t  GICD_SPISR7;            /* ALT_GIC_DIST_GICD_SPISR7 */
    volatile uint32_t  GICD_SPISR8;            /* ALT_GIC_DIST_GICD_SPISR8 */
    volatile uint32_t  GICD_SPISR9;            /* ALT_GIC_DIST_GICD_SPISR9 */
    volatile uint32_t  GICD_SPISR10;           /* ALT_GIC_DIST_GICD_SPISR10 */
    volatile uint32_t  GICD_SPISR11;           /* ALT_GIC_DIST_GICD_SPISR11 */
    volatile uint32_t  GICD_SPISR12;           /* ALT_GIC_DIST_GICD_SPISR12 */
    volatile uint32_t  GICD_SPISR13;           /* ALT_GIC_DIST_GICD_SPISR13 */
    volatile uint32_t  GICD_SPISR14;           /* ALT_GIC_DIST_GICD_SPISR14 */
    volatile uint32_t  _pad_0xd40_0xeff[112];  /* *UNDEFINED* */
    volatile uint32_t  GICD_SGIR;              /* ALT_GIC_DIST_GICD_SGIR */
    volatile uint32_t  _pad_0xf04_0xf0f[3];    /* *UNDEFINED* */
    volatile uint32_t  GICD_CPENDSGIR0;        /* ALT_GIC_DIST_GICD_CPENDSGIR0 */
    volatile uint32_t  GICD_CPENDSGIR1;        /* ALT_GIC_DIST_GICD_CPENDSGIR1 */
    volatile uint32_t  GICD_CPENDSGIR2;        /* ALT_GIC_DIST_GICD_CPENDSGIR2 */
    volatile uint32_t  GICD_CPENDSGIR3;        /* ALT_GIC_DIST_GICD_CPENDSGIR3 */
    volatile uint32_t  GICD_SPENDSGIR0;        /* ALT_GIC_DIST_GICD_SPENDSGIR0 */
    volatile uint32_t  GICD_SPENDSGIR1;        /* ALT_GIC_DIST_GICD_SPENDSGIR1 */
    volatile uint32_t  GICD_SPENDSGIR2;        /* ALT_GIC_DIST_GICD_SPENDSGIR2 */
    volatile uint32_t  GICD_SPENDSGIR3;        /* ALT_GIC_DIST_GICD_SPENDSGIR3 */
    volatile uint32_t  _pad_0xf30_0xfcf[40];   /* *UNDEFINED* */
    volatile uint32_t  GICD_PIDR4;             /* ALT_GIC_DIST_GICD_PIDR4 */
    volatile uint32_t  GICD_PIDR5;             /* ALT_GIC_DIST_GICD_PIDR5 */
    volatile uint32_t  GICD_PIDR6;             /* ALT_GIC_DIST_GICD_PIDR6 */
    volatile uint32_t  GICD_PIDR7;             /* ALT_GIC_DIST_GICD_PIDR7 */
    volatile uint32_t  GICD_PIDR0;             /* ALT_GIC_DIST_GICD_PIDR0 */
    volatile uint32_t  GICD_PIDR1;             /* ALT_GIC_DIST_GICD_PIDR1 */
    volatile uint32_t  GICD_PIDR2;             /* ALT_GIC_DIST_GICD_PIDR2 */
    volatile uint32_t  GICD_PIDR3;             /* ALT_GIC_DIST_GICD_PIDR3 */
    volatile uint32_t  GICD_CIDR0;             /* ALT_GIC_DIST_GICD_CIDR0 */
    volatile uint32_t  GICD_CIDR1;             /* ALT_GIC_DIST_GICD_CIDR1 */
    volatile uint32_t  GICD_CIDR2;             /* ALT_GIC_DIST_GICD_CIDR2 */
    volatile uint32_t  GICD_CIDR3;             /* ALT_GIC_DIST_GICD_CIDR3 */
};

/* The typedef declaration for the raw register contents of register group ALT_GIC_DIST. */
typedef struct ALT_GIC_DIST_raw_s  ALT_GIC_DIST_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : CPU interface memory map - GIC_CPUIF
 * CPU interface memory map
 * 
 * Memory map for the GIC CPU interface blocks. Contains all registers with the
 * GICC prefix. Note: The CPU interface block for each CPU is separate.
 * 
 */
/*
 * Register : GICC_CTLR
 * 
 * CPU Interface Control Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_CTLR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_CTLR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_CTLR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_CTLR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_CTLR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_CTLR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_CTLR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_CTLR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_CTLR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_CTLR.
 */
struct ALT_GIC_CPUIF_GICC_CTLR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_CTLR. */
typedef struct ALT_GIC_CPUIF_GICC_CTLR_s  ALT_GIC_CPUIF_GICC_CTLR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_CTLR register. */
#define ALT_GIC_CPUIF_GICC_CTLR_RESET       0x00000000
/* The byte offset of the ALT_GIC_CPUIF_GICC_CTLR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_CTLR_OFST        0x0

/*
 * Register : GICC_PMR
 * 
 * Interrupt Priority Mask Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_PMR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_PMR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_PMR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_PMR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_PMR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_PMR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_PMR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_PMR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_PMR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_PMR.
 */
struct ALT_GIC_CPUIF_GICC_PMR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_PMR. */
typedef struct ALT_GIC_CPUIF_GICC_PMR_s  ALT_GIC_CPUIF_GICC_PMR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_PMR register. */
#define ALT_GIC_CPUIF_GICC_PMR_RESET       0x00000000
/* The byte offset of the ALT_GIC_CPUIF_GICC_PMR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_PMR_OFST        0x4

/*
 * Register : GICC_BPR
 * 
 * Binary Point Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_BPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_BPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_BPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_BPR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_BPR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_BPR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_BPR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_BPR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_BPR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_BPR.
 */
struct ALT_GIC_CPUIF_GICC_BPR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_BPR. */
typedef struct ALT_GIC_CPUIF_GICC_BPR_s  ALT_GIC_CPUIF_GICC_BPR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_BPR register. */
#define ALT_GIC_CPUIF_GICC_BPR_RESET       0x00000002
/* The byte offset of the ALT_GIC_CPUIF_GICC_BPR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_BPR_OFST        0x8

/*
 * Register : GICC_IAR
 * 
 * Interrupt Acknowledge Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_IAR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_IAR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_IAR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_IAR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_IAR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_IAR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_IAR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_IAR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_IAR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_IAR.
 */
struct ALT_GIC_CPUIF_GICC_IAR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_IAR. */
typedef struct ALT_GIC_CPUIF_GICC_IAR_s  ALT_GIC_CPUIF_GICC_IAR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_IAR register. */
#define ALT_GIC_CPUIF_GICC_IAR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_CPUIF_GICC_IAR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_IAR_OFST        0xc

/*
 * Register : GICC_EOIR
 * 
 * End of Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_EOIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_EOIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_EOIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_EOIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_EOIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_EOIR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_EOIR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_EOIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_EOIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_EOIR.
 */
struct ALT_GIC_CPUIF_GICC_EOIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_EOIR. */
typedef struct ALT_GIC_CPUIF_GICC_EOIR_s  ALT_GIC_CPUIF_GICC_EOIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_EOIR register. */
#define ALT_GIC_CPUIF_GICC_EOIR_RESET       0x00000000
/* The byte offset of the ALT_GIC_CPUIF_GICC_EOIR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_EOIR_OFST        0x10

/*
 * Register : GICC_RPR
 * 
 * Running Priority Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_RPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_RPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_RPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_RPR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_RPR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_RPR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_RPR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_RPR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_RPR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_RPR.
 */
struct ALT_GIC_CPUIF_GICC_RPR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_RPR. */
typedef struct ALT_GIC_CPUIF_GICC_RPR_s  ALT_GIC_CPUIF_GICC_RPR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_RPR register. */
#define ALT_GIC_CPUIF_GICC_RPR_RESET       0x000000ff
/* The byte offset of the ALT_GIC_CPUIF_GICC_RPR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_RPR_OFST        0x14

/*
 * Register : GICC_HPPIR
 * 
 * Highest Priority Pending Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_HPPIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_HPPIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_HPPIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_HPPIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_HPPIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_HPPIR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_HPPIR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_HPPIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_HPPIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_HPPIR.
 */
struct ALT_GIC_CPUIF_GICC_HPPIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_HPPIR. */
typedef struct ALT_GIC_CPUIF_GICC_HPPIR_s  ALT_GIC_CPUIF_GICC_HPPIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_HPPIR register. */
#define ALT_GIC_CPUIF_GICC_HPPIR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_CPUIF_GICC_HPPIR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_HPPIR_OFST        0x18

/*
 * Register : GICC_ABPR
 * 
 * Aliased Binary Point Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_ABPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_ABPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_ABPR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_ABPR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_ABPR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_ABPR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_ABPR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_ABPR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_ABPR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_ABPR.
 */
struct ALT_GIC_CPUIF_GICC_ABPR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_ABPR. */
typedef struct ALT_GIC_CPUIF_GICC_ABPR_s  ALT_GIC_CPUIF_GICC_ABPR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_ABPR register. */
#define ALT_GIC_CPUIF_GICC_ABPR_RESET       0x00000003
/* The byte offset of the ALT_GIC_CPUIF_GICC_ABPR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_ABPR_OFST        0x1c

/*
 * Register : GICC_AIAR
 * 
 * Aliased Interrupt Acknowledge Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_AIAR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_AIAR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_AIAR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_AIAR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_AIAR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_AIAR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_AIAR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_AIAR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_AIAR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_AIAR.
 */
struct ALT_GIC_CPUIF_GICC_AIAR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_AIAR. */
typedef struct ALT_GIC_CPUIF_GICC_AIAR_s  ALT_GIC_CPUIF_GICC_AIAR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_AIAR register. */
#define ALT_GIC_CPUIF_GICC_AIAR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_CPUIF_GICC_AIAR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_AIAR_OFST        0x20

/*
 * Register : GICC_AEOIR
 * 
 * Aliased End of Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_AEOIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_AEOIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_AEOIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_AEOIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_AEOIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_AEOIR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_AEOIR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_AEOIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_AEOIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_AEOIR.
 */
struct ALT_GIC_CPUIF_GICC_AEOIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_AEOIR. */
typedef struct ALT_GIC_CPUIF_GICC_AEOIR_s  ALT_GIC_CPUIF_GICC_AEOIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_AEOIR register. */
#define ALT_GIC_CPUIF_GICC_AEOIR_RESET       0x00000000
/* The byte offset of the ALT_GIC_CPUIF_GICC_AEOIR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_AEOIR_OFST        0x24

/*
 * Register : GICC_AHPPIR
 * 
 * Aliased Highest Priority Pending Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_AHPPIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_AHPPIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_AHPPIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_AHPPIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_AHPPIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_AHPPIR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_AHPPIR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_AHPPIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_AHPPIR.
 */
struct ALT_GIC_CPUIF_GICC_AHPPIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_AHPPIR. */
typedef struct ALT_GIC_CPUIF_GICC_AHPPIR_s  ALT_GIC_CPUIF_GICC_AHPPIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_AHPPIR register. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_CPUIF_GICC_AHPPIR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_AHPPIR_OFST        0x28

/*
 * Register : GICC_APR0
 * 
 * Active Priority Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_APR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_APR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_APR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_APR0_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_APR0_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_APR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_APR0_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_APR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_APR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_APR0.
 */
struct ALT_GIC_CPUIF_GICC_APR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_APR0. */
typedef struct ALT_GIC_CPUIF_GICC_APR0_s  ALT_GIC_CPUIF_GICC_APR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_APR0 register. */
#define ALT_GIC_CPUIF_GICC_APR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_CPUIF_GICC_APR0 register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_APR0_OFST        0xd0

/*
 * Register : GICC_NSAPR0
 * 
 * Non-Secure Active Priority Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_NSAPR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_NSAPR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_NSAPR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_NSAPR0_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_NSAPR0_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_NSAPR0_FLD register field. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_NSAPR0_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_NSAPR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_NSAPR0.
 */
struct ALT_GIC_CPUIF_GICC_NSAPR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_NSAPR0. */
typedef struct ALT_GIC_CPUIF_GICC_NSAPR0_s  ALT_GIC_CPUIF_GICC_NSAPR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_NSAPR0 register. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_CPUIF_GICC_NSAPR0 register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_NSAPR0_OFST        0xe0

/*
 * Register : GICC_IIDR
 * 
 * CPU Interface Identification Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset     | Description
 * :-------|:-------|:----------|:------------
 *  [31:0] | RW     | 0x202143b | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_IIDR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_IIDR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_IIDR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_IIDR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_IIDR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_IIDR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_RESET      0x202143b
/* Extracts the ALT_GIC_CPUIF_GICC_IIDR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_IIDR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_IIDR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_IIDR.
 */
struct ALT_GIC_CPUIF_GICC_IIDR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_IIDR. */
typedef struct ALT_GIC_CPUIF_GICC_IIDR_s  ALT_GIC_CPUIF_GICC_IIDR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_IIDR register. */
#define ALT_GIC_CPUIF_GICC_IIDR_RESET       0x0202143b
/* The byte offset of the ALT_GIC_CPUIF_GICC_IIDR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_IIDR_OFST        0xfc

/*
 * Register : GICC_DIR
 * 
 * Deactivate Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_CPUIF_GICC_DIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_CPUIF_GICC_DIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_CPUIF_GICC_DIR_FLD register field. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_CPUIF_GICC_DIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_CPUIF_GICC_DIR_FLD register field value. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_CPUIF_GICC_DIR_FLD register field is UNKNOWN. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_CPUIF_GICC_DIR_FLD field value from a register. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_CPUIF_GICC_DIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_CPUIF_GICC_DIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_CPUIF_GICC_DIR.
 */
struct ALT_GIC_CPUIF_GICC_DIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_CPUIF_GICC_DIR. */
typedef struct ALT_GIC_CPUIF_GICC_DIR_s  ALT_GIC_CPUIF_GICC_DIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_CPUIF_GICC_DIR register. */
#define ALT_GIC_CPUIF_GICC_DIR_RESET       0x00000000
/* The byte offset of the ALT_GIC_CPUIF_GICC_DIR register from the beginning of the component. */
#define ALT_GIC_CPUIF_GICC_DIR_OFST        0x1000

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_GIC_CPUIF.
 */
struct ALT_GIC_CPUIF_s
{
    volatile ALT_GIC_CPUIF_GICC_CTLR_t    GICC_CTLR;                 /* ALT_GIC_CPUIF_GICC_CTLR */
    volatile ALT_GIC_CPUIF_GICC_PMR_t     GICC_PMR;                  /* ALT_GIC_CPUIF_GICC_PMR */
    volatile ALT_GIC_CPUIF_GICC_BPR_t     GICC_BPR;                  /* ALT_GIC_CPUIF_GICC_BPR */
    volatile ALT_GIC_CPUIF_GICC_IAR_t     GICC_IAR;                  /* ALT_GIC_CPUIF_GICC_IAR */
    volatile ALT_GIC_CPUIF_GICC_EOIR_t    GICC_EOIR;                 /* ALT_GIC_CPUIF_GICC_EOIR */
    volatile ALT_GIC_CPUIF_GICC_RPR_t     GICC_RPR;                  /* ALT_GIC_CPUIF_GICC_RPR */
    volatile ALT_GIC_CPUIF_GICC_HPPIR_t   GICC_HPPIR;                /* ALT_GIC_CPUIF_GICC_HPPIR */
    volatile ALT_GIC_CPUIF_GICC_ABPR_t    GICC_ABPR;                 /* ALT_GIC_CPUIF_GICC_ABPR */
    volatile ALT_GIC_CPUIF_GICC_AIAR_t    GICC_AIAR;                 /* ALT_GIC_CPUIF_GICC_AIAR */
    volatile ALT_GIC_CPUIF_GICC_AEOIR_t   GICC_AEOIR;                /* ALT_GIC_CPUIF_GICC_AEOIR */
    volatile ALT_GIC_CPUIF_GICC_AHPPIR_t  GICC_AHPPIR;               /* ALT_GIC_CPUIF_GICC_AHPPIR */
    volatile uint32_t                     _pad_0x2c_0xcf[41];        /* *UNDEFINED* */
    volatile ALT_GIC_CPUIF_GICC_APR0_t    GICC_APR0;                 /* ALT_GIC_CPUIF_GICC_APR0 */
    volatile uint32_t                     _pad_0xd4_0xdf[3];         /* *UNDEFINED* */
    volatile ALT_GIC_CPUIF_GICC_NSAPR0_t  GICC_NSAPR0;               /* ALT_GIC_CPUIF_GICC_NSAPR0 */
    volatile uint32_t                     _pad_0xe4_0xfb[6];         /* *UNDEFINED* */
    volatile ALT_GIC_CPUIF_GICC_IIDR_t    GICC_IIDR;                 /* ALT_GIC_CPUIF_GICC_IIDR */
    volatile uint32_t                     _pad_0x100_0xfff[960];     /* *UNDEFINED* */
    volatile ALT_GIC_CPUIF_GICC_DIR_t     GICC_DIR;                  /* ALT_GIC_CPUIF_GICC_DIR */
    volatile uint32_t                     _pad_0x1004_0x2000[1023];  /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_GIC_CPUIF. */
typedef struct ALT_GIC_CPUIF_s  ALT_GIC_CPUIF_t;
/* The struct declaration for the raw register contents of register group ALT_GIC_CPUIF. */
struct ALT_GIC_CPUIF_raw_s
{
    volatile uint32_t  GICC_CTLR;                 /* ALT_GIC_CPUIF_GICC_CTLR */
    volatile uint32_t  GICC_PMR;                  /* ALT_GIC_CPUIF_GICC_PMR */
    volatile uint32_t  GICC_BPR;                  /* ALT_GIC_CPUIF_GICC_BPR */
    volatile uint32_t  GICC_IAR;                  /* ALT_GIC_CPUIF_GICC_IAR */
    volatile uint32_t  GICC_EOIR;                 /* ALT_GIC_CPUIF_GICC_EOIR */
    volatile uint32_t  GICC_RPR;                  /* ALT_GIC_CPUIF_GICC_RPR */
    volatile uint32_t  GICC_HPPIR;                /* ALT_GIC_CPUIF_GICC_HPPIR */
    volatile uint32_t  GICC_ABPR;                 /* ALT_GIC_CPUIF_GICC_ABPR */
    volatile uint32_t  GICC_AIAR;                 /* ALT_GIC_CPUIF_GICC_AIAR */
    volatile uint32_t  GICC_AEOIR;                /* ALT_GIC_CPUIF_GICC_AEOIR */
    volatile uint32_t  GICC_AHPPIR;               /* ALT_GIC_CPUIF_GICC_AHPPIR */
    volatile uint32_t  _pad_0x2c_0xcf[41];        /* *UNDEFINED* */
    volatile uint32_t  GICC_APR0;                 /* ALT_GIC_CPUIF_GICC_APR0 */
    volatile uint32_t  _pad_0xd4_0xdf[3];         /* *UNDEFINED* */
    volatile uint32_t  GICC_NSAPR0;               /* ALT_GIC_CPUIF_GICC_NSAPR0 */
    volatile uint32_t  _pad_0xe4_0xfb[6];         /* *UNDEFINED* */
    volatile uint32_t  GICC_IIDR;                 /* ALT_GIC_CPUIF_GICC_IIDR */
    volatile uint32_t  _pad_0x100_0xfff[960];     /* *UNDEFINED* */
    volatile uint32_t  GICC_DIR;                  /* ALT_GIC_CPUIF_GICC_DIR */
    volatile uint32_t  _pad_0x1004_0x2000[1023];  /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_GIC_CPUIF. */
typedef struct ALT_GIC_CPUIF_raw_s  ALT_GIC_CPUIF_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : Virtual CPU interface control registers - GIC_VCPUIF
 * Virtual CPU interface control registers
 * 
 * Memory map for the GIC virtual CPU interface control registers. Contains all
 * registers with the GICH prefix. Note: This provides access to the control
 * registers for the current CPU. It is expected that this block will only be made
 * accessible to the hypervisor.
 * 
 */
/*
 * Register : GICH_HCR
 * 
 * Hypervisor Control Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_HCR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_HCR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_HCR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_HCR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_HCR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_HCR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_HCR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_HCR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_HCR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_HCR.
 */
struct ALT_GIC_VCPUIF_GICH_HCR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_HCR. */
typedef struct ALT_GIC_VCPUIF_GICH_HCR_s  ALT_GIC_VCPUIF_GICH_HCR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_HCR register. */
#define ALT_GIC_VCPUIF_GICH_HCR_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_HCR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_HCR_OFST        0x0
/* The address of the ALT_GIC_VCPUIF_GICH_HCR register. */
#define ALT_GIC_VCPUIF_GICH_HCR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_HCR_OFST))

/*
 * Register : GICH_VTR
 * 
 * VGIC Type Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description
 * :-------|:-------|:-----------|:------------
 *  [31:0] | RW     | 0x90000003 | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_VTR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_VTR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_VTR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_VTR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_VTR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_VTR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_RESET      0x90000003
/* Extracts the ALT_GIC_VCPUIF_GICH_VTR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_VTR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_VTR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_VTR.
 */
struct ALT_GIC_VCPUIF_GICH_VTR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_VTR. */
typedef struct ALT_GIC_VCPUIF_GICH_VTR_s  ALT_GIC_VCPUIF_GICH_VTR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_VTR register. */
#define ALT_GIC_VCPUIF_GICH_VTR_RESET       0x90000003
/* The byte offset of the ALT_GIC_VCPUIF_GICH_VTR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_VTR_OFST        0x4
/* The address of the ALT_GIC_VCPUIF_GICH_VTR register. */
#define ALT_GIC_VCPUIF_GICH_VTR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_VTR_OFST))

/*
 * Register : GICH_VMCR
 * 
 * Virtual Machine Control Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_VMCR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_VMCR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_VMCR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_VMCR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_VMCR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_VMCR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_VMCR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_VMCR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_VMCR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_VMCR.
 */
struct ALT_GIC_VCPUIF_GICH_VMCR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_VMCR. */
typedef struct ALT_GIC_VCPUIF_GICH_VMCR_s  ALT_GIC_VCPUIF_GICH_VMCR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_VMCR register. */
#define ALT_GIC_VCPUIF_GICH_VMCR_RESET       0x004c0000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_VMCR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_VMCR_OFST        0x8
/* The address of the ALT_GIC_VCPUIF_GICH_VMCR register. */
#define ALT_GIC_VCPUIF_GICH_VMCR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_VMCR_OFST))

/*
 * Register : GICH_MISR
 * 
 * Maintenance Interrupt Status Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_MISR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_MISR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_MISR_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_MISR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_MISR_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_MISR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_MISR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_MISR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_MISR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_MISR.
 */
struct ALT_GIC_VCPUIF_GICH_MISR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_MISR. */
typedef struct ALT_GIC_VCPUIF_GICH_MISR_s  ALT_GIC_VCPUIF_GICH_MISR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_MISR register. */
#define ALT_GIC_VCPUIF_GICH_MISR_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_MISR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_MISR_OFST        0x10
/* The address of the ALT_GIC_VCPUIF_GICH_MISR register. */
#define ALT_GIC_VCPUIF_GICH_MISR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_MISR_OFST))

/*
 * Register : GICH_EISR0
 * 
 * End of Interrupt Status Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_EISR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_EISR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_EISR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_EISR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_EISR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_EISR0_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_EISR0_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_EISR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_EISR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_EISR0.
 */
struct ALT_GIC_VCPUIF_GICH_EISR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_EISR0. */
typedef struct ALT_GIC_VCPUIF_GICH_EISR0_s  ALT_GIC_VCPUIF_GICH_EISR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_EISR0 register. */
#define ALT_GIC_VCPUIF_GICH_EISR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_EISR0 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_EISR0_OFST        0x20
/* The address of the ALT_GIC_VCPUIF_GICH_EISR0 register. */
#define ALT_GIC_VCPUIF_GICH_EISR0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_EISR0_OFST))

/*
 * Register : GICH_ELSR0
 * 
 * Empty List register Status Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_ELSR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_ELSR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_ELSR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_ELSR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_ELSR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_ELSR0_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_ELSR0_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_ELSR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_ELSR0.
 */
struct ALT_GIC_VCPUIF_GICH_ELSR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_ELSR0. */
typedef struct ALT_GIC_VCPUIF_GICH_ELSR0_s  ALT_GIC_VCPUIF_GICH_ELSR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_ELSR0 register. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_RESET       0x0000000f
/* The byte offset of the ALT_GIC_VCPUIF_GICH_ELSR0 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_OFST        0x30
/* The address of the ALT_GIC_VCPUIF_GICH_ELSR0 register. */
#define ALT_GIC_VCPUIF_GICH_ELSR0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_ELSR0_OFST))

/*
 * Register : GICH_APR0
 * 
 * Active Priority Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_APR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_APR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_APR0_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_APR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_APR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_APR0.
 */
struct ALT_GIC_VCPUIF_GICH_APR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_APR0. */
typedef struct ALT_GIC_VCPUIF_GICH_APR0_s  ALT_GIC_VCPUIF_GICH_APR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_APR0 register. */
#define ALT_GIC_VCPUIF_GICH_APR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_APR0 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_APR0_OFST        0xf0
/* The address of the ALT_GIC_VCPUIF_GICH_APR0 register. */
#define ALT_GIC_VCPUIF_GICH_APR0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_APR0_OFST))

/*
 * Register : GICH_LR0
 * 
 * List Register 0
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_LR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_LR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_LR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_LR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_LR0_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_LR0_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_LR0_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_LR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_LR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_LR0.
 */
struct ALT_GIC_VCPUIF_GICH_LR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_LR0. */
typedef struct ALT_GIC_VCPUIF_GICH_LR0_s  ALT_GIC_VCPUIF_GICH_LR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_LR0 register. */
#define ALT_GIC_VCPUIF_GICH_LR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_LR0 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_LR0_OFST        0x100
/* The address of the ALT_GIC_VCPUIF_GICH_LR0 register. */
#define ALT_GIC_VCPUIF_GICH_LR0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_LR0_OFST))

/*
 * Register : GICH_LR1
 * 
 * List Register 1
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_LR1_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_LR1_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_LR1_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_LR1_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_LR1_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_LR1_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_LR1_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_LR1_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_LR1_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_LR1.
 */
struct ALT_GIC_VCPUIF_GICH_LR1_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_LR1. */
typedef struct ALT_GIC_VCPUIF_GICH_LR1_s  ALT_GIC_VCPUIF_GICH_LR1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_LR1 register. */
#define ALT_GIC_VCPUIF_GICH_LR1_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_LR1 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_LR1_OFST        0x104
/* The address of the ALT_GIC_VCPUIF_GICH_LR1 register. */
#define ALT_GIC_VCPUIF_GICH_LR1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_LR1_OFST))

/*
 * Register : GICH_LR2
 * 
 * List Register 2
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_LR2_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_LR2_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_LR2_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_LR2_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_LR2_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_LR2_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_LR2_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_LR2_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_LR2_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_LR2.
 */
struct ALT_GIC_VCPUIF_GICH_LR2_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_LR2. */
typedef struct ALT_GIC_VCPUIF_GICH_LR2_s  ALT_GIC_VCPUIF_GICH_LR2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_LR2 register. */
#define ALT_GIC_VCPUIF_GICH_LR2_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_LR2 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_LR2_OFST        0x108
/* The address of the ALT_GIC_VCPUIF_GICH_LR2 register. */
#define ALT_GIC_VCPUIF_GICH_LR2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_LR2_OFST))

/*
 * Register : GICH_LR3
 * 
 * List Register 3
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_GICH_LR3_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_GICH_LR3_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_GICH_LR3_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_GICH_LR3_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_GICH_LR3_FLD register field value. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_GICH_LR3_FLD register field. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_GICH_LR3_FLD field value from a register. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_GICH_LR3_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_GICH_LR3_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_GICH_LR3.
 */
struct ALT_GIC_VCPUIF_GICH_LR3_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_GICH_LR3. */
typedef struct ALT_GIC_VCPUIF_GICH_LR3_s  ALT_GIC_VCPUIF_GICH_LR3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_GICH_LR3 register. */
#define ALT_GIC_VCPUIF_GICH_LR3_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_GICH_LR3 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_GICH_LR3_OFST        0x10c
/* The address of the ALT_GIC_VCPUIF_GICH_LR3 register. */
#define ALT_GIC_VCPUIF_GICH_LR3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_GIC_VCPUIF_GICH_LR3_OFST))

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_GIC_VCPUIF.
 */
struct ALT_GIC_VCPUIF_s
{
    volatile ALT_GIC_VCPUIF_GICH_HCR_t    GICH_HCR;              /* ALT_GIC_VCPUIF_GICH_HCR */
    volatile ALT_GIC_VCPUIF_GICH_VTR_t    GICH_VTR;              /* ALT_GIC_VCPUIF_GICH_VTR */
    volatile ALT_GIC_VCPUIF_GICH_VMCR_t   GICH_VMCR;             /* ALT_GIC_VCPUIF_GICH_VMCR */
    volatile uint32_t                     _pad_0xc_0xf;          /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_GICH_MISR_t   GICH_MISR;             /* ALT_GIC_VCPUIF_GICH_MISR */
    volatile uint32_t                     _pad_0x14_0x1f[3];     /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_GICH_EISR0_t  GICH_EISR0;            /* ALT_GIC_VCPUIF_GICH_EISR0 */
    volatile uint32_t                     _pad_0x24_0x2f[3];     /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_GICH_ELSR0_t  GICH_ELSR0;            /* ALT_GIC_VCPUIF_GICH_ELSR0 */
    volatile uint32_t                     _pad_0x34_0xef[47];    /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_GICH_APR0_t   GICH_APR0;             /* ALT_GIC_VCPUIF_GICH_APR0 */
    volatile uint32_t                     _pad_0xf4_0xff[3];     /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_GICH_LR0_t    GICH_LR0;              /* ALT_GIC_VCPUIF_GICH_LR0 */
    volatile ALT_GIC_VCPUIF_GICH_LR1_t    GICH_LR1;              /* ALT_GIC_VCPUIF_GICH_LR1 */
    volatile ALT_GIC_VCPUIF_GICH_LR2_t    GICH_LR2;              /* ALT_GIC_VCPUIF_GICH_LR2 */
    volatile ALT_GIC_VCPUIF_GICH_LR3_t    GICH_LR3;              /* ALT_GIC_VCPUIF_GICH_LR3 */
    volatile uint32_t                     _pad_0x110_0x200[60];  /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_GIC_VCPUIF. */
typedef struct ALT_GIC_VCPUIF_s  ALT_GIC_VCPUIF_t;
/* The struct declaration for the raw register contents of register group ALT_GIC_VCPUIF. */
struct ALT_GIC_VCPUIF_raw_s
{
    volatile uint32_t  GICH_HCR;              /* ALT_GIC_VCPUIF_GICH_HCR */
    volatile uint32_t  GICH_VTR;              /* ALT_GIC_VCPUIF_GICH_VTR */
    volatile uint32_t  GICH_VMCR;             /* ALT_GIC_VCPUIF_GICH_VMCR */
    volatile uint32_t  _pad_0xc_0xf;          /* *UNDEFINED* */
    volatile uint32_t  GICH_MISR;             /* ALT_GIC_VCPUIF_GICH_MISR */
    volatile uint32_t  _pad_0x14_0x1f[3];     /* *UNDEFINED* */
    volatile uint32_t  GICH_EISR0;            /* ALT_GIC_VCPUIF_GICH_EISR0 */
    volatile uint32_t  _pad_0x24_0x2f[3];     /* *UNDEFINED* */
    volatile uint32_t  GICH_ELSR0;            /* ALT_GIC_VCPUIF_GICH_ELSR0 */
    volatile uint32_t  _pad_0x34_0xef[47];    /* *UNDEFINED* */
    volatile uint32_t  GICH_APR0;             /* ALT_GIC_VCPUIF_GICH_APR0 */
    volatile uint32_t  _pad_0xf4_0xff[3];     /* *UNDEFINED* */
    volatile uint32_t  GICH_LR0;              /* ALT_GIC_VCPUIF_GICH_LR0 */
    volatile uint32_t  GICH_LR1;              /* ALT_GIC_VCPUIF_GICH_LR1 */
    volatile uint32_t  GICH_LR2;              /* ALT_GIC_VCPUIF_GICH_LR2 */
    volatile uint32_t  GICH_LR3;              /* ALT_GIC_VCPUIF_GICH_LR3 */
    volatile uint32_t  _pad_0x110_0x200[60];  /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_GIC_VCPUIF. */
typedef struct ALT_GIC_VCPUIF_raw_s  ALT_GIC_VCPUIF_raw_t;
#endif  /* __ASSEMBLY__ */


/*
 * Component : Virtual CPU interface memory map - GIC_VCPUIF_HYP_VM
 * Virtual CPU interface memory map
 * 
 * Memory map for the GIC virtual CPU interface. Contains all registers with the
 * GICV prefix. Note: This provides access to the virtual CPU interface for the
 * current CPU. It is expected that software will use the translation tables to
 * make this block accessible to the virtual machine in the address space normall
 * used for the (physical) CPU interface.
 * 
 */
/*
 * Register : GICV_CTLR
 * 
 * Virtual Machine Control Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_OFST        0x0

/*
 * Register : GICV_PMR
 * 
 * VM Priority Mask Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_PMR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_PMR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_PMR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_OFST        0x4

/*
 * Register : GICV_BPR
 * 
 * VM Binary Point Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_BPR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_BPR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_RESET       0x00000002
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_BPR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_OFST        0x8

/*
 * Register : GICV_IAR
 * 
 * VM Interrupt Acknowledge Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_IAR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_IAR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_IAR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_OFST        0xc

/*
 * Register : GICV_EOIR
 * 
 * VM End of Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_OFST        0x10

/*
 * Register : GICV_RPR
 * 
 * VM Running Priority Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_RPR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_RPR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_RESET       0x000000ff
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_RPR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_OFST        0x14

/*
 * Register : GICV_HPPIR
 * 
 * VM Highest Priority Pending Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_OFST        0x18

/*
 * Register : GICV_ABPR
 * 
 * VM Aliased Binary Point Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_RESET       0x00000003
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_OFST        0x1c

/*
 * Register : GICV_AIAR
 * 
 * VM Aliased Interrupt Acknowledge Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_OFST        0x20

/*
 * Register : GICV_AEOIR
 * 
 * VM Aliased End of Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_OFST        0x24

/*
 * Register : GICV_AHPPIR
 * 
 * VM Aliased Highest Priority Pending Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_RESET       0x000003ff
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_OFST        0x28

/*
 * Register : GICV_APR0
 * 
 * VM Active Priority Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [31:0] | RW     | 0x0   | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_APR0.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_APR0. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_s  ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0 register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_APR0 register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_OFST        0xd0

/*
 * Register : GICV_IIDR
 * 
 * VM CPU Interface Identification Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset     | Description
 * :-------|:-------|:----------|:------------
 *  [31:0] | RW     | 0x202143b | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_RESET      0x202143b
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_RESET       0x0202143b
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_OFST        0xfc

/*
 * Register : GICV_DIR
 * 
 * VM Deactivate Interrupt Register
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset   | Description
 * :-------|:-------|:--------|:------------
 *  [31:0] | RW     | Unknown | Empty      
 * 
 */
/*
 * Field : Empty - fld
 * 
 * Placeholder
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_MSB        31
/* The width in bits of the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD register field. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_WIDTH      32
/* The mask used to set the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD register field value. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_CLR_MSK    0x00000000
/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD register field is UNKNOWN. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_RESET      0x0
/* Extracts the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD field value from a register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD register field value suitable for setting the register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_FLD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_DIR.
 */
struct ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_s
{
    volatile uint32_t  fld : 32;  /* Empty */
};

/* The typedef declaration for register ALT_GIC_VCPUIF_HYP_VM_GICV_DIR. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_s  ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR register. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_RESET       0x00000000
/* The byte offset of the ALT_GIC_VCPUIF_HYP_VM_GICV_DIR register from the beginning of the component. */
#define ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_OFST        0x1000

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_GIC_VCPUIF_HYP_VM.
 */
struct ALT_GIC_VCPUIF_HYP_VM_s
{
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR_t    GICV_CTLR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_PMR_t     GICV_PMR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_PMR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_BPR_t     GICV_BPR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_BPR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_IAR_t     GICV_IAR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_IAR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR_t    GICV_EOIR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_RPR_t     GICV_RPR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_RPR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR_t   GICV_HPPIR;                /* ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR_t    GICV_ABPR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR_t    GICV_AIAR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR_t   GICV_AEOIR;                /* ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR_t  GICV_AHPPIR;               /* ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR */
    volatile uint32_t                             _pad_0x2c_0xcf[41];        /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_APR0_t    GICV_APR0;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_APR0 */
    volatile uint32_t                             _pad_0xd4_0xfb[10];        /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR_t    GICV_IIDR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR */
    volatile uint32_t                             _pad_0x100_0xfff[960];     /* *UNDEFINED* */
    volatile ALT_GIC_VCPUIF_HYP_VM_GICV_DIR_t     GICV_DIR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_DIR */
    volatile uint32_t                             _pad_0x1004_0x2000[1023];  /* *UNDEFINED* */
};

/* The typedef declaration for register group ALT_GIC_VCPUIF_HYP_VM. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_s  ALT_GIC_VCPUIF_HYP_VM_t;
/* The struct declaration for the raw register contents of register group ALT_GIC_VCPUIF_HYP_VM. */
struct ALT_GIC_VCPUIF_HYP_VM_raw_s
{
    volatile uint32_t  GICV_CTLR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_CTLR */
    volatile uint32_t  GICV_PMR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_PMR */
    volatile uint32_t  GICV_BPR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_BPR */
    volatile uint32_t  GICV_IAR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_IAR */
    volatile uint32_t  GICV_EOIR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_EOIR */
    volatile uint32_t  GICV_RPR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_RPR */
    volatile uint32_t  GICV_HPPIR;                /* ALT_GIC_VCPUIF_HYP_VM_GICV_HPPIR */
    volatile uint32_t  GICV_ABPR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_ABPR */
    volatile uint32_t  GICV_AIAR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_AIAR */
    volatile uint32_t  GICV_AEOIR;                /* ALT_GIC_VCPUIF_HYP_VM_GICV_AEOIR */
    volatile uint32_t  GICV_AHPPIR;               /* ALT_GIC_VCPUIF_HYP_VM_GICV_AHPPIR */
    volatile uint32_t  _pad_0x2c_0xcf[41];        /* *UNDEFINED* */
    volatile uint32_t  GICV_APR0;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_APR0 */
    volatile uint32_t  _pad_0xd4_0xfb[10];        /* *UNDEFINED* */
    volatile uint32_t  GICV_IIDR;                 /* ALT_GIC_VCPUIF_HYP_VM_GICV_IIDR */
    volatile uint32_t  _pad_0x100_0xfff[960];     /* *UNDEFINED* */
    volatile uint32_t  GICV_DIR;                  /* ALT_GIC_VCPUIF_HYP_VM_GICV_DIR */
    volatile uint32_t  _pad_0x1004_0x2000[1023];  /* *UNDEFINED* */
};

/* The typedef declaration for the raw register contents of register group ALT_GIC_VCPUIF_HYP_VM. */
typedef struct ALT_GIC_VCPUIF_HYP_VM_raw_s  ALT_GIC_VCPUIF_HYP_VM_raw_t;
#endif  /* __ASSEMBLY__ */


#ifdef __cplusplus
}
#endif  /* __cplusplus */
#endif  /* __ALT_SOCAL_GIC_H__ */

