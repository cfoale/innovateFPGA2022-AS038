/***********************************************************************************
*                                                                                  *
* Copyright 2013-2015 Altera Corporation. All Rights Reserved.                     *
*                                                                                  *
* Redistribution and use in source and binary forms, with or without               *
* modification, are permitted provided that the following conditions are met:      *
*                                                                                  *
* 1. Redistributions of source code must retain the above copyright notice,        *
*    this list of conditions and the following disclaimer.                         *
*                                                                                  *
* 2. Redistributions in binary form must reproduce the above copyright notice,     *
*    this list of conditions and the following disclaimer in the documentation     *
*    and/or other materials provided with the distribution.                        *
*                                                                                  *
* 3. Neither the name of the copyright holder nor the names of its contributors    *
*    may be used to endorse or promote products derived from this software without *
*    specific prior written permission.                                            *
*                                                                                  *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"      *
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE        *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE       *
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE        *
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR              *
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF             *
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS         *
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN          *
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)          *
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                      *
*                                                                                  *
***********************************************************************************/

/* Altera - ALT_EMAC */

#ifndef __ALT_SOCAL_EMAC_H__
#define __ALT_SOCAL_EMAC_H__

#ifndef __ASSEMBLY__
#ifdef __cplusplus
#include <cstdint>
extern "C"
{
#else   /* __cplusplus */
#include <stdint.h>
#endif  /* __cplusplus */
#endif  /* __ASSEMBLY__ */

/*
 * Component : EMAC
 * The address block GMAC contains up to 736 Registers : MAC_Configuration to
 * MAC_Address127_Low
 * 
 */
/*
 * Register : gmacgrp_mac_configuration
 * 
 * <b> Register 0 (MAC Configuration Register)  </b>
 * 
 * The MAC Configuration register establishes receive and transmit operating modes.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                   
 * :--------|:-------|:------|:-----------------------------------------------
 *  [1:0]   | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN     
 *  [2]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE         
 *  [3]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE         
 *  [4]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC         
 *  [6:5]   | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL         
 *  [7]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS        
 *  [8]     | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD        
 *  [9]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR         
 *  [10]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC        
 *  [11]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM         
 *  [12]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM         
 *  [13]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO         
 *  [14]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES        
 *  [15]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS         
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS       
 *  [19:17] | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG        
 *  [20]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE         
 *  [21]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE         
 *  [22]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD         
 *  [23]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD         
 *  [24]    | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC         
 *  [25]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST        
 *  [26]    | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR     
 *  [27]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE     
 *  [30:28] | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC       
 *  [31]    | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31
 * 
 */
/*
 * Field : prelen
 * 
 * Preamble Length for Transmit Frames
 * 
 * These bits control the number of preamble bytes that are added to the beginning
 * of every Transmit frame. The preamble reduction occurs only when the MAC is
 * operating in the full-duplex mode.
 * 
 * * 2'b00: 7 bytes of preamble
 * 
 * * 2'b01: 5 byte of preamble
 * 
 * * 2'b10: 3 bytes of preamble
 * 
 * * 2'b11: 1 byte of preamble
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                    | Value | Description
 * :--------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM7BYTES | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM5BYTES | 0x1   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM3BYTES | 0x2   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM1BYTE  | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM7BYTES 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM5BYTES 0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM3BYTES 0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_E_PREAM1BYTE  0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_SET_MSK    0x00000003
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_CLR_MSK    0xfffffffc
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_GET(value) (((value) & 0x00000003) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN_SET(value) (((value) << 0) & 0x00000003)

/*
 * Field : re
 * 
 * Receiver Enable
 * 
 * When this bit is set, the receiver state machine of the MAC is enabled for
 * receiving frames from the GMII or MII. When this bit is reset, the MAC receive
 * state machine is disabled after the completion of the reception of the current
 * frame, and does not receive any further frames from the GMII or MII.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : te
 * 
 * Transmitter Enable
 * 
 * When this bit is set, the transmit state machine of the MAC is enabled for
 * transmission on the GMII or MII. When this bit is reset, the MAC transmit state
 * machine is disabled after the completion of the transmission of the current
 * frame, and does not transmit any further frames.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : dc
 * 
 * Deferral Check
 * 
 * When this bit is set, the deferral check function is enabled in the MAC. The MAC
 * issues a Frame Abort status, along with the excessive deferral error bit set in
 * the transmit frame status, when the transmit state machine is deferred for more
 * than 24,288 bit times in the 10 or 100 Mbps mode.
 * 
 * If the MAC is configured for 1000 Mbps operation or if the Jumbo frame mode is
 * enabled in the 10 or 100 Mbps mode, the threshold for deferral is 155,680 bits
 * times. Deferral begins when the transmitter is ready to transmit, but it is
 * prevented because of an active carrier sense signal (CRS) on GMII or MII.
 * 
 * The defer time is not cumulative. For example, if the transmitter defers for
 * 10,000 bit times because the CRS signal is active and then the CRS signal
 * becomes inactive, the transmitter transmits and collision happens. Because of
 * collision, the transmitter needs to back off and then defer again after back off
 * completion. In such a scenario, the deferral timer is reset to 0 and it is
 * restarted.
 * 
 * When this bit is reset, the deferral check function is disabled and the MAC
 * defers until the CRS signal goes inactive. This bit is applicable only in the
 * half-duplex mode and is reserved (RO) in the full-duplex-only configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : bl
 * 
 * Back-Off Limit
 * 
 * The Back-Off limit determines the random integer number (r) of slot time delays
 * (4,096 bit times for 1000 Mbps and 512 bit times for 10/100 Mbps) for which the
 * MAC waits before rescheduling a transmission attempt during retries after a
 * collision. This bit is applicable only in the half-duplex mode and is reserved
 * (RO) in the full-duplex-only configuration.
 * 
 * * 00: k = min (n, 10)
 * 
 * * 01: k = min (n, 8)
 * 
 * * 10: k = min (n, 4)
 * 
 * * 11: k = min (n, 1)
 * 
 * where <i> n </i> = retransmission attempt. The random integer <i> r </i> takes
 * the value in the
 * 
 * range 0 <= r < kth power of 2
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMTR10 | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMIRT8 | 0x1   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMITR4 | 0x2   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMITR1 | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMTR10 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMIRT8 0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMITR4 0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_E_BACKLIMITR1 0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_SET_MSK    0x00000060
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_CLR_MSK    0xffffff9f
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_GET(value) (((value) & 0x00000060) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL_SET(value) (((value) << 5) & 0x00000060)

/*
 * Field : acs
 * 
 * Automatic Pad or CRC Stripping
 * 
 * When this bit is set, the MAC strips the Pad or FCS field on the incoming frames
 * only if the value of the length field is less than 1,536 bytes. All received
 * frames with length field greater than or equal to 1,536 bytes are passed to the
 * application without stripping the Pad or FCS field.
 * 
 * When this bit is reset, the MAC passes all incoming frames, without modifying
 * them, to the Host.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : lud
 * 
 * Link Up or Down
 * 
 * This bit indicates whether the link is up or down during the transmission of
 * configuration in the RGMII, SGMII, or SMII interface:
 * 
 * * 0: Link Down
 * 
 * * 1: Link Up
 * 
 * This bit is reserved (RO with default value) and is enabled when the RGMII,
 * SGMII, or SMII interface is enabled during core configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : dr
 * 
 * Disable Retry
 * 
 * When this bit is set, the MAC attempts only one transmission. When a collision
 * occurs on the GMII or MII interface, the MAC ignores the current frame
 * transmission and reports a Frame Abort with excessive collision error in the
 * transmit frame status.
 * 
 * When this bit is reset, the MAC attempts retries based on the settings of the BL
 * field (Bits [6:5]). This bit is applicable only in the half-duplex mode and is
 * reserved (RO with default value) in the full-duplex-only configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_E_ENABLED  | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_E_DISABLED | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_E_ENABLED     0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_E_DISABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : ipc
 * 
 * Checksum Offload
 * 
 * When this bit is set, the MAC calculates the 16-bit one's complement of the
 * one's complement sum of all received Ethernet frame payloads. It also checks
 * whether the IPv4 Header checksum (assumed to be bytes 2526 or 2930 (VLAN-tagged)
 * of the received Ethernet frame) is correct for the received frame and gives the
 * status in the receive status word. The MAC also appends the 16-bit checksum
 * calculated for the IP header datagram payload (bytes after the IPv4 header) and
 * appends it to the Ethernet frame transferred to the application (when Type 2 COE
 * is deselected).
 * 
 * When this bit is reset, this function is disabled.
 * 
 * When Type 2 COE is selected, this bit, when set, enables the IPv4 header
 * checksum checking and IPv4 or IPv6 TCP, UDP, or ICMP payload checksum checking.
 * When this bit is reset, the COE function in the receiver is disabled and the
 * corresponding PCE and IP HCE status bits are always cleared.
 * 
 * If the IP Checksum Offload feature is not enabled during core configuration,
 * this bit is reserved (RO with default value).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : dm
 * 
 * Duplex Mode
 * 
 * When this bit is set, the MAC operates in the full-duplex mode where it can
 * transmit and receive simultaneously. This bit is RO with default value of 1'b1
 * in the full-duplex-only configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : lm
 * 
 * Loopback Mode
 * 
 * When this bit is set, the MAC operates in the loopback mode at GMII or MII. The
 * (G)MII Receive clock input (clk_rx_i) is required for the loopback to work
 * properly, because the Transmit clock is not looped-back internally.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : do
 * 
 * Disable Receive Own
 * 
 * When this bit is set, the MAC disables the reception of frames when the
 * phy_txen_o is asserted in the half-duplex mode.
 * 
 * When this bit is reset, the MAC receives all packets that are given by the PHY
 * while transmitting.
 * 
 * This bit is not applicable if the MAC is operating in the full-duplex mode. This
 * bit is reserved (RO with default value) if the MAC is configured for the full-
 * duplex-only operation.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_E_ENABLED  | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_E_DISABLED | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_E_ENABLED     0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_E_DISABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : fes
 * 
 * Speed
 * 
 * This bit selects the speed in the MII, RMII, SMII, RGMII, SGMII, or RevMII
 * interface
 * 
 * * 0: 10 Mbps
 * 
 * * 1: 100 Mbps
 * 
 * This bit is reserved (RO) by default and is enabled only when the parameter
 * SPEED_SELECT = Enabled. This bit generates link speed encoding when Bit 24 (TC)
 * is set in the RGMII, SMII, or SGMII mode. This bit is always enabled for RGMII,
 * SGMII, SMII, or RevMII interface.
 * 
 * In configurations with RGMII, SGMII, SMII, or RevMII interface, this bit is
 * driven as an output signal (mac_speed_o[0]) to reflect the value of this bit in
 * the mac_speed_o signal. In configurations with RMII, MII, or GMII interface, you
 * can optionally drive this bit as an output signal (mac_speed_o[0]) to reflect
 * its value in the mac_speed_o signal.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_E_SPEED10  | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_E_SPEED100 | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_E_SPEED10    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_E_SPEED100   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_MSB        14
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : ps
 * 
 * Port Select
 * 
 * This bit selects the Ethernet line speed:
 * 
 * * 0: For 1000 Mbps operations
 * 
 * * 1: For 10 or 100 Mbps operations
 * 
 * In 10 or 100 Mbps operations, this bit, along with FES bit, selects the exact
 * line speed. In the 10 or 100 Mbps-only (always 1) or 1000 Mbps-only (always 0)
 * configurations, this bit is read-only with the appropriate value. In default 10,
 * 100, or 1000 Mbps configuration, this bit is R_W. The mac_portselect_o signal
 * reflects the value of this bit.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_E_GMII1000SEL | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_E_MII10100SEL | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_E_GMII1000SEL 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_E_MII10100SEL 0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : dcrs
 * 
 * Disable Carrier Sense During Transmission
 * 
 * When set high, this bit makes the MAC transmitter ignore the (G)MII CRS signal
 * during frame transmission in the half-duplex mode. This request results in no
 * errors generated because of Loss of Carrier or No Carrier during such
 * transmission. When this bit is low, the MAC transmitter generates such errors
 * because of Carrier Sense and can even abort the transmissions.
 * 
 * This bit is reserved (and RO) in the full-duplex-only configurations.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : ifg
 * 
 * Inter-Frame Gap
 * 
 * These bits control the minimum IFG between frames during transmission.
 * 
 * * 000: 96 bit times
 * 
 * * 001: 88 bit times
 * 
 * * 010: 80 bit times
 * 
 * * ...
 * 
 * * 111: 40 bit times
 * 
 * In the half-duplex mode, the minimum IFG can be configured only for 64 bit times
 * (IFG = 100). Lower values are not considered. In the 1000-Mbps mode, the minimum
 * IFG supported is 64 bit times (and above) in the GMAC-CORE configuration and 80
 * bit times (and above) in other configurations.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                   | Value | Description
 * :-------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG96BITTIMES | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG88BITTIMES | 0x1   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG80BITTIMES | 0x2   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG72BITTIMES | 0x3   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG64BITTIMES | 0x4   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG56BITTIMES | 0x5   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG48BITTIMES | 0x6   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG40BITTIMES | 0x7   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG96BITTIMES  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG88BITTIMES  0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG80BITTIMES  0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG72BITTIMES  0x3
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG64BITTIMES  0x4
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG56BITTIMES  0x5
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG48BITTIMES  0x6
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_E_IFG40BITTIMES  0x7

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_WIDTH      3
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_SET_MSK    0x000e0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_CLR_MSK    0xfff1ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_GET(value) (((value) & 0x000e0000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG_SET(value) (((value) << 17) & 0x000e0000)

/*
 * Field : je
 * 
 * Jumbo Frame Enable
 * 
 * When this bit is set, the MAC allows Jumbo frames of 9,018 bytes (9,022 bytes
 * for VLAN tagged frames) without reporting a giant frame error in the receive
 * frame status.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : be
 * 
 * Frame Burst Enable
 * 
 * When this bit is set, the MAC allows frame bursting during transmission in the
 * GMII half-duplex mode. This bit is reserved (and RO) in the 10/100 Mbps only or
 * full-duplex-only configurations.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : jd
 * 
 * Jabber Disable
 * 
 * When this bit is set, the MAC disables the jabber timer on the transmitter. The
 * MAC can transfer frames of up to 16,384 bytes.
 * 
 * When this bit is reset, the MAC cuts off the transmitter if the application
 * sends out more than 2,048 bytes of data (10,240 if JE is set high) during
 * transmission.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_E_ENABLED  | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_E_DISABLED | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_E_ENABLED     0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_E_DISABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : wd
 * 
 * Watchdog Disable
 * 
 * When this bit is set, the MAC disables the watchdog timer on the receiver. The
 * MAC can receive frames of up to 16,384 bytes.
 * 
 * When this bit is reset, the MAC does not allow a receive frame which more than
 * 2,048 bytes (10,240 if JE is set high) or the value programmed in Register 55
 * (Watchdog Timeout Register).
 * 
 * The MAC cuts off any bytes received after the watchdog limit number of bytes.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_E_ENABLED  | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_E_DISABLED | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_E_ENABLED     0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_E_DISABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : tc
 * 
 * Transmit Configuration in RGMII, SGMII, or SMII
 * 
 * When set, this bit enables the transmission of duplex mode, link speed, and link
 * up or down information to the PHY in the RGMII, SMII, or SGMII port. When this
 * bit is reset, no such information is driven to the PHY. This bit is reserved
 * (and RO) if the RGMII, SMII, or SGMII PHY port is not selected during core
 * configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : cst
 * 
 * CRC Stripping for Type Frames
 * 
 * When this bit is set, the last 4 bytes (FCS) of all frames of Ether type
 * (Length/Type field greater than or equal to 1,536) are stripped and dropped
 * before forwarding the frame to the application. This function is not valid when
 * the IP Checksum Engine (Type 1) is enabled in the MAC receiver. This function is
 * valid when Type 2 Checksum Offload Engine is enabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : sfterr
 * 
 * SMII Force Transmit Error
 * 
 * When set, this bit indicates to the PHY to force a transmit error in the SMII
 * frame being transmitted. This bit is reserved if the SMII PHY port is not
 * selected during core configuration.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : twokpe
 * 
 * IEEE 802.3as Support for 2K Packets
 * 
 * When set, the MAC considers all frames, with up to 2,000 bytes length, as normal
 * packets.
 * 
 * When Bit 20 (JE) is not set, the MAC considers all received frames of size more
 * than 2K bytes as Giant frames. When this bit is reset and Bit 20 (JE) is not
 * set, the MAC considers all received frames of size more than 1,518 bytes (1,522
 * bytes for tagged) as Giant frames. When Bit 20 is set, setting this bit has no
 * effect on Giant Frame status.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : sarc
 * 
 * Source Address Insertion or Replacement Control
 * 
 * This field controls the source address insertion or replacement for all
 * transmitted frames. Bit 30 specifies which MAC Address register (0 or 1) is used
 * for source address insertion or replacement based on the values of Bits [29:28]:
 * 
 * * 2'b0x: The input signals mti_sa_ctrl_i and ati_sa_ctrl_i control the SA field
 *   generation.
 * 
 * * 2'b10:
 * 
 *     - If Bit 30 is set to 0, the MAC inserts the content of the MAC Address 0
 *       registers (registers 16 and 17) in the SA field of all transmitted frames.
 * 
 *     - If Bit 30 is set to 1 and the Enable MAC Address Register 1 option is
 *       selected during core configuration, the MAC inserts the content of the MAC
 *       Address 1 registers (registers 18 and 19) in the SA field of all
 *       transmitted frames.
 * 
 * * 2'b11:
 * 
 *     - If Bit 30 is set to 0, the MAC replaces the content of the MAC Address 0
 *       registers (registers 16 and 17) in the SA field of all transmitted frames.
 * 
 *     - If Bit 30 is set to 1 and the Enable MAC Address Register 1 option is
 *       selected during core configuration, the MAC replaces the content of the
 *       MAC Address 1 registers (registers 18 and 19) in the SA field of all
 *       transmitted frames.
 * 
 * Note:
 * 
 *     - Changes to this field take effect only on the start of a frame. If you
 *       write this register field when a frame is being transmitted, only the
 *       subsequent frame can use the updated value, that is, the current frame
 *       does not use the updated value.
 * 
 *     - These bits are reserved and RO when the Enable SA, VLAN, and CRC Insertion
 *       on TX feature is not selected during core configuration.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_WIDTH      3
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_SET_MSK    0x70000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_CLR_MSK    0x8fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_GET(value) (((value) & 0x70000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC_SET(value) (((value) << 28) & 0x70000000)

/*
 * Field : reserved_31
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 register field value. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 register field. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_CONFIGURATION.
 */
struct ALT_EMAC_GMACGRP_MAC_CONFIGURATION_s
{
    volatile uint32_t        prelen      :  2;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PRELEN */
    volatile uint32_t        re          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RE */
    volatile uint32_t        te          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TE */
    volatile uint32_t        dc          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DC */
    volatile uint32_t        bl          :  2;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BL */
    volatile uint32_t        acs         :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ACS */
    const volatile uint32_t  lud         :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LUD */
    volatile uint32_t        dr          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DR */
    volatile uint32_t        ipc         :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IPC */
    volatile uint32_t        dm          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DM */
    volatile uint32_t        lm          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_LM */
    volatile uint32_t        do_         :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DO */
    volatile uint32_t        fes         :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_FES */
    volatile uint32_t        ps          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_PS */
    volatile uint32_t        dcrs        :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_DCRS */
    volatile uint32_t        ifg         :  3;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_IFG */
    volatile uint32_t        je          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JE */
    volatile uint32_t        be          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_BE */
    volatile uint32_t        jd          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_JD */
    volatile uint32_t        wd          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_WD */
    const volatile uint32_t  tc          :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TC */
    volatile uint32_t        cst         :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_CST */
    const volatile uint32_t  sfterr      :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SFTERR */
    volatile uint32_t        twokpe      :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_TWOKPE */
    volatile uint32_t        sarc        :  3;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_SARC */
    const volatile uint32_t  reserved_31 :  1;  /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESERVED_31 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_CONFIGURATION. */
typedef struct ALT_EMAC_GMACGRP_MAC_CONFIGURATION_s  ALT_EMAC_GMACGRP_MAC_CONFIGURATION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_OFST        0x0
/* The address of the ALT_EMAC_GMACGRP_MAC_CONFIGURATION register. */
#define ALT_EMAC_GMACGRP_MAC_CONFIGURATION_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_CONFIGURATION_OFST))

/*
 * Register : gmacgrp_mac_frame_filter
 * 
 * <b> Register 1 (MAC Frame Filter) </b>
 * 
 * The MAC Frame Filter register contains the filter controls for receiving frames.
 * Some of the controls from this register go to the address check block of the
 * MAC, which performs the first level of address filtering. The second level of
 * filtering is performed on the incoming frame, based on other controls such as
 * Pass Bad Frames and Pass Control Frames.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                     
 * :--------|:-------|:------|:-------------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR            
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC           
 *  [2]     | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC           
 *  [3]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF          
 *  [4]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM            
 *  [5]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF           
 *  [7:6]   | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF           
 *  [8]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF          
 *  [9]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF           
 *  [10]    | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF           
 *  [15:11] | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE          
 *  [19:17] | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17
 *  [20]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE          
 *  [21]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU          
 *  [30:22] | R      | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22
 *  [31]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA            
 * 
 */
/*
 * Field : pr
 * 
 * Promiscuous Mode
 * 
 * When this bit is set, the Address Filter module passes all incoming frames
 * regardless of its destination or source address. The SA or DA Filter Fails
 * status bits of the Receive Status Word are always cleared when PR is set.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : huc
 * 
 * Hash Unicast
 * 
 * When set, MAC performs destination address filtering of unicast frames according
 * to the hash table.
 * 
 * When reset, the MAC performs a perfect destination address filtering for unicast
 * frames, that is, it compares the DA field with the values programmed in DA
 * registers.
 * 
 * If Hash Filter is not selected during core configuration, this bit is reserved
 * (and RO).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : hmc
 * 
 * Hash Multicast
 * 
 * When set, MAC performs destination address filtering of received multicast
 * frames according to the hash table.
 * 
 * When reset, the MAC performs a perfect destination address filtering for
 * multicast frames, that is, it compares the DA field with the values programmed
 * in DA registers.
 * 
 * If Hash Filter is not selected during core configuration, this bit is reserved
 * (and RO).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : daif
 * 
 * DA Inverse Filtering
 * 
 * When this bit is set, the Address Check block operates in inverse filtering mode
 * for the DA address comparison for both unicast and multicast frames.
 * 
 * When reset, normal filtering of frames is performed.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : pm
 * 
 * Pass All Multicast
 * 
 * When set, this bit indicates that all received frames with a multicast
 * destination address (first bit in the destination address field is '1') are
 * passed.
 * 
 * When reset, filtering of multicast frame depends on HMC bit.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : dbf
 * 
 * Disable Broadcast Frames
 * 
 * When this bit is set, the AFM module filters all incoming broadcast frames. In
 * addition, it overrides all other filter settings.
 * 
 * When this bit is reset, the AFM module passes all received broadcast frames.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : pcf
 * 
 * Pass Control Frames
 * 
 * These bits control the forwarding of all control frames (including unicast and
 * multicast PAUSE frames).
 * 
 * * 00: MAC filters all control frames from reaching the application.
 * 
 * * 01: MAC forwards all control frames except PAUSE control frames to application
 *   even if they fail the Address filter.
 * 
 * * 10: MAC forwards all control frames to application even if they fail the
 *   Address Filter.
 * 
 * * 11: MAC forwards control frames that pass the Address Filter.
 * 
 * The following conditions should be true for the PAUSE control frames processing:
 * 
 * * Condition 1: The MAC is in the full-duplex mode and flow control is enabled by
 *   setting Bit 2 (RFE) of Register 6 (Flow Control Register) to 1.
 * 
 * * Condition 2: The destination address (DA) of the received frame matches the
 *   special multicast address or the MAC Address 0 when Bit 3 (UP) of the Register
 *   6 (Flow Control Register) is set.
 * 
 * * Condition 3: The Type field of the received frame is 0x8808 and the OPCODE
 *   field is 0x0001.
 * 
 * Note:
 * 
 * This field should be set to 01 only when the Condition 1 is true, that is, the
 * MAC is programmed to operate in the full-duplex mode and the RFE bit is enabled.
 * Otherwise, the PAUSE frame filtering may be inconsistent. When Condition 1 is
 * false, the PAUSE frames are considered as generic control frames. Therefore, to
 * pass all control frames (including PAUSE control frames) when the full-duplex
 * mode and flow control is not enabled, you should set the PCF field to 10 or 11
 * (as required by the application).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFLTALLCFR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFWDXPAUSE | 0x1   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFWDFAIL   | 0x2   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFWDPASS   | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFLTALLCFR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFWDXPAUSE    0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFWDFAIL      0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_E_MACFWDPASS      0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_SET_MSK    0x000000c0
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_CLR_MSK    0xffffff3f
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_GET(value) (((value) & 0x000000c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF_SET(value) (((value) << 6) & 0x000000c0)

/*
 * Field : saif
 * 
 * SA Inverse Filtering
 * 
 * When this bit is set, the Address Check block operates in inverse filtering mode
 * for the SA address comparison. The frames whose SA matches the SA registers are
 * marked as failing the SA Address filter.
 * 
 * When this bit is reset, frames whose SA does not match the SA registers are
 * marked as failing the SA Address filter.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : saf
 * 
 * Source Address Filter Enable
 * 
 * When this bit is set, the MAC compares the SA field of the received frames with
 * the values programmed in the enabled SA registers. If the comparison fails, the
 * MAC drops the frame.
 * 
 * When this bit is reset, the MAC forwards the received frame to the application
 * with updated SAF bit of the Rx Status depending on the SA address comparison.
 * 
 * Note: According to the IEEE specification, Bit 47 of the SA is reserved and set
 * to 0. However, in DWC_gmac, the MAC compares all 48 bits. The software driver
 * should take this into consideration while programming the MAC address registers
 * for SA.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : hpf
 * 
 * Hash or Perfect Filter
 * 
 * When this bit is set, it configures the address filter to pass a frame if it
 * matches either the perfect filtering or the hash filtering as set by the HMC or
 * HUC bits.
 * 
 * When this bit is low and the HUC or HMC bit is set, the frame is passed only if
 * it matches the Hash filter. This bit is reserved (and RO) if the Hash filter is
 * not selected during core configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : reserved_15_11
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_SET_MSK    0x0000f800
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_CLR_MSK    0xffff07ff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_GET(value) (((value) & 0x0000f800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11_SET(value) (((value) << 11) & 0x0000f800)

/*
 * Field : vtfe
 * 
 * VLAN Tag Filter Enable
 * 
 * When set, this bit enables the MAC to drop VLAN tagged frames that do not match
 * the VLAN Tag comparison.
 * 
 * When reset, the MAC forwards all frames irrespective of the match status of the
 * VLAN Tag.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_E_NODROP | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_E_DROP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_E_NODROP 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_E_DROP   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : reserved_19_17
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_WIDTH      3
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_SET_MSK    0x000e0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_CLR_MSK    0xfff1ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_GET(value) (((value) & 0x000e0000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17_SET(value) (((value) << 17) & 0x000e0000)

/*
 * Field : ipfe
 * 
 * Layer 3 and Layer 4 Filter Enable
 * 
 * When set, this bit enables the MAC to drop frames that do not match the enabled
 * Layer 3 and Layer 4 filters. If Layer 3 or Layer 4 filters are not enabled for
 * matching, this bit does not have any effect.
 * 
 * When reset, the MAC forwards all frames irrespective of the match status of the
 * Layer 3 and Layer 4 fields.
 * 
 * If the Layer 3 and Layer 4 Filtering feature is not selected during core
 * configuration, this bit is reserved (RO with default value).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_E_NODROP | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_E_DROP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_E_NODROP 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_E_DROP   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : dntu
 * 
 * Drop non-TCP/UDP over IP Frames
 * 
 * When set, this bit enables the MAC to drop the non-TCP or UDP over IP frames.
 * The MAC forward only those frames that are processed by the Layer 4 filter.
 * 
 * When reset, this bit enables the MAC to forward all non-TCP or UDP over IP
 * frames.
 * 
 * If the Layer 3 and Layer 4 Filtering feature is not selected during core
 * configuration, this bit is reserved (RO with default value).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_E_NODROP | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_E_DROP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_E_NODROP 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_E_DROP   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : reserved_30_22
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_WIDTH      9
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_SET_MSK    0x7fc00000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_CLR_MSK    0x803fffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_GET(value) (((value) & 0x7fc00000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22_SET(value) (((value) << 22) & 0x7fc00000)

/*
 * Field : ra
 * 
 * Receive All
 * 
 * When this bit is set, the MAC Receiver module passes all received frames,
 * irrespective of whether they pass the address filter or not, to the Application.
 * The result of the SA or DA filtering is updated (pass or fail) in the
 * corresponding bits in the Receive Status Word.
 * 
 * When this bit is reset, the Receiver module passes only those frames to the
 * Application that pass the SA or DA address filter.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA register field value. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA register field. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_FRAME_FILTER.
 */
struct ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_s
{
    volatile uint32_t        pr             :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PR */
    const volatile uint32_t  huc            :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HUC */
    const volatile uint32_t  hmc            :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HMC */
    volatile uint32_t        daif           :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DAIF */
    volatile uint32_t        pm             :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PM */
    volatile uint32_t        dbf            :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DBF */
    volatile uint32_t        pcf            :  2;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_PCF */
    volatile uint32_t        saif           :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAIF */
    volatile uint32_t        saf            :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_SAF */
    const volatile uint32_t  hpf            :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_HPF */
    const volatile uint32_t  reserved_15_11 :  5;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_15_11 */
    volatile uint32_t        vtfe           :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_VTFE */
    const volatile uint32_t  reserved_19_17 :  3;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_19_17 */
    volatile uint32_t        ipfe           :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_IPFE */
    volatile uint32_t        dntu           :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_DNTU */
    const volatile uint32_t  reserved_30_22 :  9;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESERVED_30_22 */
    volatile uint32_t        ra             :  1;  /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RA */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_FRAME_FILTER. */
typedef struct ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_s  ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_OFST        0x4
/* The address of the ALT_EMAC_GMACGRP_MAC_FRAME_FILTER register. */
#define ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_OFST))

/*
 * Register : gmacgrp_gmii_address
 * 
 * <b> Register 4 (GMII Address Register) </b>
 * 
 * The GMII Address register controls the management cycles to the external PHY
 * through the management interface.
 * 
 * Note: This register is present for all PHY interface when you select the Station
 * Management (MDIO) feature in coreConsultant.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                 
 * :--------|:-------|:------|:---------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_GMACGRP_GMII_ADDRESS_GB            
 *  [1]     | RW     | 0x0   | ALT_EMAC_GMACGRP_GMII_ADDRESS_GW            
 *  [5:2]   | RW     | 0x0   | ALT_EMAC_GMACGRP_GMII_ADDRESS_CR            
 *  [10:6]  | RW     | 0x0   | ALT_EMAC_GMACGRP_GMII_ADDRESS_GR            
 *  [15:11] | RW     | 0x0   | ALT_EMAC_GMACGRP_GMII_ADDRESS_PA            
 *  [31:16] | R      | 0x0   | ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16
 * 
 */
/*
 * Field : gb
 * 
 * GMII Busy
 * 
 * This bit should read logic 0 before writing to Register 4 and Register 5. During
 * a PHY or RevMII register access, the software sets this bit to 1'b1 to indicate
 * that a Read or Write access is in progress.
 * 
 * Register 5 is invalid until this bit is cleared by the MAC. Therefore, Register
 * 5 (GMII Data) should be kept valid until the MAC clears this bit during a PHY
 * Write operation. Similarly for a read operation, the contents of Register 5 are
 * not valid until this bit is cleared.
 * 
 * The subsequent read or write operation should happen only after the previous
 * operation is complete. Because there is no acknowledgment from the PHY to MAC
 * after a read or write operation is completed, there is no change in the
 * functionality of this bit even when the PHY is not present.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_GB
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_GB
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GB register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GB register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GB register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_ADDRESS_GB register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_ADDRESS_GB register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GB register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_ADDRESS_GB field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_GMII_ADDRESS_GB register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GB_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : gw
 * 
 * GMII Write
 * 
 * When set, this bit indicates to the PHY or RevMII that this is a Write operation
 * using the GMII Data register. If this bit is not set, it indicates that this is
 * a Read operation, that is, placing the data in the GMII Data register.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_GW
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_GW
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GW register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GW register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GW register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_ADDRESS_GW register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_ADDRESS_GW register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GW register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_ADDRESS_GW field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_GMII_ADDRESS_GW register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GW_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : cr
 * 
 * CSR Clock Range
 * 
 * The CSR Clock Range selection determines the frequency of the MDC clock
 * according to the CSR clock frequency used in your design.
 * 
 * The suggested range of CSR clock frequency applicable for each value (when
 * Bit[5] = 0) ensures that the MDC clock is approximately between the frequency
 * range 1.0 MHz - 2.5 MHz.
 * 
 * * 0000: The frequency of the CSR clock is 60-100 MHz and the MDC clock is CSR
 *   clock/42.
 * 
 * * 0001: The frequency of the CSR clock is 100-150 MHz and the MDC clock is CSR
 *   clock/62.
 * 
 * * 0010: The frequency of the CSR clock is 20-35 MHz and the MDC clock is CSR
 *   clock/16.
 * 
 * * 0011: The frequency of the CSR clock is 35-60 MHz and the MDC clock is CSR
 *   clock/26.
 * 
 * * 0100: The frequency of the CSR clock is 150-250 MHz and the MDC clock is CSR
 *   clock/102.
 * 
 * * 0100: The frequency of the CSR clock is 250-300 MHz and the MDC clock is CSR
 *   clock/124.
 * 
 * * 0110 and 0111: Reserved
 * 
 * When Bit 5 is set, you can achieve MDC clock of frequency higher than the IEEE
 * 802.3 specified frequency limit of 2.5 MHz and program a clock divider of lower
 * value. For example, when CSR clock is of 100 MHz frequency and you program these
 * bits as 1010, then the resultant MDC clock is of 12.5 MHz which is outside the
 * limit of IEEE 802.3 specified range.
 * 
 * Program the following values only if the interfacing chips support faster MDC
 * clocks:
 * 
 * * 1000: CSR clock/4
 * 
 * * 1001: CSR clock/6
 * 
 * * 1010: CSR clock/8
 * 
 * * 1011: CSR clock/10
 * 
 * * 1100: CSR clock/12
 * 
 * * 1101: CSR clock/14
 * 
 * * 1110: CSR clock/16
 * 
 * * 1111: CSR clock/18
 * 
 * These bits are not used for accessing RevMII. These bits are read-only if the
 * RevMII interface is selected as single PHY interface.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV42      | 0x0   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV62      | 0x1   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV16      | 0x2   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV26      | 0x3   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV102     | 0x4   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV124     | 0x5   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV4       | 0x8   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV6       | 0x9   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV8       | 0xa   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV10      | 0xb   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV12      | 0xc   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV14      | 0xd   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV16AGAIN | 0xe   |            
 *  ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV18      | 0xf   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV42        0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV62        0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV16        0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV26        0x3
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV102       0x4
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV124       0x5
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV4         0x8
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV6         0x9
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV8         0xa
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV10        0xb
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV12        0xc
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV14        0xd
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV16AGAIN   0xe
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_GMII_ADDRESS_CR
 * 
 */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_E_DIV18        0xf

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_CR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_CR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_ADDRESS_CR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_WIDTH      4
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_ADDRESS_CR register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_SET_MSK    0x0000003c
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_ADDRESS_CR register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_CLR_MSK    0xffffffc3
/* The reset value of the ALT_EMAC_GMACGRP_GMII_ADDRESS_CR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_ADDRESS_CR field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_GET(value) (((value) & 0x0000003c) >> 2)
/* Produces a ALT_EMAC_GMACGRP_GMII_ADDRESS_CR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_CR_SET(value) (((value) << 2) & 0x0000003c)

/*
 * Field : gr
 * 
 * GMII Register
 * 
 * These bits select the desired GMII register in the selected PHY device.
 * 
 * For RevMII, these bits select the desired CSR register in the RevMII Registers
 * set.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_ADDRESS_GR register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_SET_MSK    0x000007c0
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_ADDRESS_GR register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_CLR_MSK    0xfffff83f
/* The reset value of the ALT_EMAC_GMACGRP_GMII_ADDRESS_GR register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_ADDRESS_GR field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_GET(value) (((value) & 0x000007c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_GMII_ADDRESS_GR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_GR_SET(value) (((value) << 6) & 0x000007c0)

/*
 * Field : pa
 * 
 * Physical Layer Address
 * 
 * This field indicates which of the 32 possible PHY devices are being accessed.
 * 
 * For RevMII, this field gives the PHY Address of the RevMII module.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_PA register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_PA register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_ADDRESS_PA register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_ADDRESS_PA register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_SET_MSK    0x0000f800
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_ADDRESS_PA register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_CLR_MSK    0xffff07ff
/* The reset value of the ALT_EMAC_GMACGRP_GMII_ADDRESS_PA register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_ADDRESS_PA field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_GET(value) (((value) & 0x0000f800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_GMII_ADDRESS_PA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_PA_SET(value) (((value) << 11) & 0x0000f800)

/*
 * Field : reserved_31_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 register field value. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_GMII_ADDRESS.
 */
struct ALT_EMAC_GMACGRP_GMII_ADDRESS_s
{
    volatile uint32_t        gb             :  1;  /* ALT_EMAC_GMACGRP_GMII_ADDRESS_GB */
    volatile uint32_t        gw             :  1;  /* ALT_EMAC_GMACGRP_GMII_ADDRESS_GW */
    volatile uint32_t        cr             :  4;  /* ALT_EMAC_GMACGRP_GMII_ADDRESS_CR */
    volatile uint32_t        gr             :  5;  /* ALT_EMAC_GMACGRP_GMII_ADDRESS_GR */
    volatile uint32_t        pa             :  5;  /* ALT_EMAC_GMACGRP_GMII_ADDRESS_PA */
    const volatile uint32_t  reserved_31_16 : 16;  /* ALT_EMAC_GMACGRP_GMII_ADDRESS_RESERVED_31_16 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_GMII_ADDRESS. */
typedef struct ALT_EMAC_GMACGRP_GMII_ADDRESS_s  ALT_EMAC_GMACGRP_GMII_ADDRESS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_GMII_ADDRESS register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_GMII_ADDRESS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_OFST        0x10
/* The address of the ALT_EMAC_GMACGRP_GMII_ADDRESS register. */
#define ALT_EMAC_GMACGRP_GMII_ADDRESS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_GMII_ADDRESS_OFST))

/*
 * Register : gmacgrp_gmii_data
 * 
 * <b> Register 5 (GMII Data Register) </b>
 * 
 * The GMII Data register stores Write data to be written to the PHY register
 * located at the address specified in Register 4 (GMII Address Register). This
 * register also stores the Read data from the PHY register located at the address
 * specified by Register 4.
 * 
 * Note: This register is present for all PHY interface when you select the Station
 * Management (MDIO) feature in coreConsultant.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                              
 * :--------|:-------|:------|:------------------------------------------
 *  [15:0]  | RW     | 0x0   | ALT_EMAC_GMACGRP_GMII_DATA_GD            
 *  [31:16] | R      | 0x0   | ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16
 * 
 */
/*
 * Field : gd
 * 
 * GMII Data
 * 
 * This field contains the 16-bit data value read from the PHY or RevMII after a
 * Management Read operation or the 16-bit data value to be written to the PHY or
 * RevMII before a Management Write operation.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_DATA_GD register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_DATA_GD register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_DATA_GD register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_DATA_GD register field value. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_DATA_GD register field value. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_GMII_DATA_GD register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_DATA_GD field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_GMII_DATA_GD register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_DATA_GD_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_31_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 register field value. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 register field value. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 field value from a register. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_GMII_DATA.
 */
struct ALT_EMAC_GMACGRP_GMII_DATA_s
{
    volatile uint32_t        gd             : 16;  /* ALT_EMAC_GMACGRP_GMII_DATA_GD */
    const volatile uint32_t  reserved_31_16 : 16;  /* ALT_EMAC_GMACGRP_GMII_DATA_RESERVED_31_16 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_GMII_DATA. */
typedef struct ALT_EMAC_GMACGRP_GMII_DATA_s  ALT_EMAC_GMACGRP_GMII_DATA_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_GMII_DATA register. */
#define ALT_EMAC_GMACGRP_GMII_DATA_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_GMII_DATA register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_GMII_DATA_OFST        0x14
/* The address of the ALT_EMAC_GMACGRP_GMII_DATA register. */
#define ALT_EMAC_GMACGRP_GMII_DATA_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_GMII_DATA_OFST))

/*
 * Register : gmacgrp_flow_control
 * 
 * <b> Register 6 (Flow Control Register) </b>
 * 
 * The Flow Control register controls the generation and reception of the Control
 * (Pause Command) frames by the MAC's Flow control module. A Write to a register
 * with the Busy bit set to '1' triggers the Flow Control block to generate a Pause
 * Control frame. The fields of the control frame are selected as specified in the
 * 802.3x specification, and the Pause Time value from this register is used in the
 * Pause Time field of the control frame. The Busy bit remains set until the
 * control frame is transferred onto the cable. The Host must make sure that the
 * Busy bit is cleared before writing to the register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                
 * :--------|:-------|:------|:--------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA      
 *  [1]     | RW     | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE          
 *  [2]     | RW     | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE          
 *  [3]     | RW     | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_UP           
 *  [5:4]   | RW     | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT          
 *  [6]     | R      | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6   
 *  [7]     | RW     | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ         
 *  [15:8]  | R      | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8
 *  [31:16] | RW     | 0x0   | ALT_EMAC_GMACGRP_FLOW_CONTROL_PT           
 * 
 */
/*
 * Field : fca_bpa
 * 
 * Flow Control Busy or Backpressure Activate
 * 
 * This bit initiates a Pause Control frame in the full-duplex mode and activates
 * the backpressure function in the half-duplex mode if the TFE bit is set.
 * 
 * In the full-duplex mode, this bit should be read as 1'b0 before writing to the
 * Flow Control register. To initiate a Pause control frame, the Application must
 * set this bit to 1'b1. During a transfer of the Control Frame, this bit continues
 * to be set to signify that a frame transmission is in progress. After the
 * completion of Pause control frame transmission, the MAC resets this bit to 1'b0.
 * The Flow Control register should not be written to until this bit is cleared.
 * 
 * In the half-duplex mode, when this bit is set (and TFE is set), then
 * backpressure is asserted by the MAC. During backpressure, when the MAC receives
 * a new frame, the transmitter starts sending a JAM pattern resulting in a
 * collision. This control register bit is logically ORed with the mti_flowctrl_i
 * input signal for the backpressure function. When the MAC is configured for the
 * full-duplex mode, the BPA is automatically disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : tfe
 * 
 * Transmit Flow Control Enable
 * 
 * In the full-duplex mode, when this bit is set, the MAC enables the flow control
 * operation to transmit Pause frames. When this bit is reset, the flow control
 * operation in the MAC is disabled, and the MAC does not transmit any Pause
 * frames.
 * 
 * In half-duplex mode, when this bit is set, the MAC enables the back-pressure
 * operation. When this bit is reset, the back-pressure feature is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : rfe
 * 
 * Receive Flow Control Enable
 * 
 * When this bit is set, the MAC decodes the received Pause frame and disables its
 * transmitter for a specified (Pause) time. When this bit is reset, the decode
 * function of the Pause frame is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : up
 * 
 * Unicast Pause Frame Detect
 * 
 * A pause frame is processed when it has the unique multicast address specified in
 * the IEEE Std 802.3. When this bit is set, the MAC can also detect Pause frames
 * with unicast address of the station. This unicast address should be as specified
 * in the MAC Address0 High Register and MAC Address0 Low Register.
 * 
 * When this bit is reset, the MAC only detects Pause frames with unique multicast
 * address.
 * 
 * Note: The MAC does not process a Pause frame if the multicast address of
 * received frame is different from the unique multicast address.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_UP
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_UP
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_UP register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_UP register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_UP register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_UP register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_UP register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_UP register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_UP field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_UP register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_UP_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : plt
 * 
 * Pause Low Threshold
 * 
 * This field configures the threshold of the PAUSE timer at which the input flow
 * control signal mti_flowctrl_i (or sbd_flowctrl_i) is checked for automatic
 * retransmission of PAUSE Frame.
 * 
 * The threshold values should be always less than the Pause Time configured in
 * Bits[31:16]. For example, if PT = 100H (256 slot-times), and PLT = 01, then a
 * second PAUSE frame is automatically transmitted if the mti_flowctrl_i signal is
 * asserted at 228 (256 - 28) slot times after the first PAUSE frame is
 * transmitted.
 * 
 * The following list provides the threshold values for different values:
 * 
 * * 00: The threshold is Pause time minus 4 slot times (PT - 4 slot times).
 * 
 * * 01: The threshold is Pause time minus 28 slot times (PT - 28 slot times).
 * 
 * * 10: The threshold is Pause time minus 144 slot times (PT - 144 slot times).
 * 
 * * 11: The threshold is Pause time minus 256 slot times (PT - 256 slot times).
 * 
 * The slot time is defined as the time taken to transmit 512 bits (64 bytes) on
 * the GMII or MII interface.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_4   | 0x0   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_28  | 0x1   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_144 | 0x2   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_256 | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_4     0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_28    0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_144   0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_E_PAUSETIME_256   0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_SET_MSK    0x00000030
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_CLR_MSK    0xffffffcf
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_GET(value) (((value) & 0x00000030) >> 4)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT_SET(value) (((value) << 4) & 0x00000030)

/*
 * Field : reserved_6
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : dzpq
 * 
 * Disable Zero-Quanta Pause
 * 
 * When this bit is set, it disables the automatic generation of the Zero-Quanta
 * Pause Control frames on the de-assertion of the flow-control signal from the
 * FIFO layer (MTL or external sideband flow control signal
 * sbd_flowctrl_i/mti_flowctrl_i).
 * 
 * When this bit is reset, normal operation with automatic Zero-Quanta Pause
 * Control frame generation is enabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ
 * 
 */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : reserved_15_8
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_CLR_MSK    0xffff00ff
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : pt
 * 
 * Pause Time
 * 
 * This field holds the value to be used in the Pause Time field in the transmit
 * control frame. If the Pause Time bits is configured to be double-synchronized to
 * the (G)MII clock domain, then consecutive writes to this register should be
 * performed only after at least four clock cycles in the destination clock domain.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_FLOW_CONTROL_PT register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_FLOW_CONTROL_PT register field value. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL_PT register field. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_FLOW_CONTROL_PT field value from a register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_FLOW_CONTROL_PT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_PT_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_FLOW_CONTROL.
 */
struct ALT_EMAC_GMACGRP_FLOW_CONTROL_s
{
    volatile uint32_t        fca_bpa       :  1;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_FCA_BPA */
    volatile uint32_t        tfe           :  1;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_TFE */
    volatile uint32_t        rfe           :  1;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_RFE */
    volatile uint32_t        up            :  1;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_UP */
    volatile uint32_t        plt           :  2;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_PLT */
    const volatile uint32_t  reserved_6    :  1;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_6 */
    volatile uint32_t        dzpq          :  1;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_DZPQ */
    const volatile uint32_t  reserved_15_8 :  8;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_RESERVED_15_8 */
    volatile uint32_t        pt            : 16;  /* ALT_EMAC_GMACGRP_FLOW_CONTROL_PT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_FLOW_CONTROL. */
typedef struct ALT_EMAC_GMACGRP_FLOW_CONTROL_s  ALT_EMAC_GMACGRP_FLOW_CONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_FLOW_CONTROL register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_FLOW_CONTROL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_OFST        0x18
/* The address of the ALT_EMAC_GMACGRP_FLOW_CONTROL register. */
#define ALT_EMAC_GMACGRP_FLOW_CONTROL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_FLOW_CONTROL_OFST))

/*
 * Register : gmacgrp_vlan_tag
 * 
 * <b> Register 7 (VLAN Tag Register) </b>
 * 
 * The VLAN Tag register contains the IEEE 802.1Q VLAN Tag to identify the VLAN
 * frames. The MAC compares the 13th and 14th bytes of the receiving frame
 * (Length/Type) with 16'h8100, and the following two bytes are compared with the
 * VLAN tag. If a match occurs, the MAC sets the received VLAN bit in the receive
 * frame status. The legal length of the frame is increased from 1,518 bytes to
 * 1,522 bytes.
 * 
 * If the VLAN Tag register is configured to be double-synchronized to the (G)MII
 * clock domain, then consecutive writes to these register should be performed only
 * after at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                             
 * :--------|:-------|:------|:-----------------------------------------
 *  [15:0]  | RW     | 0x0   | ALT_EMAC_GMACGRP_VLAN_TAG_VL            
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_VLAN_TAG_ETV           
 *  [17]    | RW     | 0x0   | ALT_EMAC_GMACGRP_VLAN_TAG_VTIM          
 *  [18]    | RW     | 0x0   | ALT_EMAC_GMACGRP_VLAN_TAG_ESVL          
 *  [19]    | R      | 0x0   | ALT_EMAC_GMACGRP_VLAN_TAG_VTHM          
 *  [31:20] | R      | 0x0   | ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20
 * 
 */
/*
 * Field : vl
 * 
 * VLAN Tag Identifier for Receive Frames
 * 
 * This field contains the 802.1Q VLAN tag to identify the VLAN frames and is
 * compared to the 15th and 16th bytes of the frames being received for VLAN
 * frames. The following list describes the bits of this field:
 * 
 * * Bits [15:13]: User Priority
 * 
 * * Bit 12: Canonical Format Indicator (CFI) or Drop Eligible Indicator (DEI)
 * 
 * * Bits[11:0]: VLAN tag's VLAN Identifier (VID) field
 * 
 * When the ETV bit is set, only the VID (Bits[11:0]) is used for comparison.
 * 
 * If VL (VL[11:0] if ETV is set) is all zeros, the MAC does not check the
 * fifteenth and 16th bytes for VLAN tag comparison, and declares all frames with a
 * Type field value of 0x8100 or 0x88a8 as VLAN frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_VL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_VL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_TAG_VL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_TAG_VL register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_TAG_VL register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_TAG_VL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_TAG_VL field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_VLAN_TAG_VL register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VL_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : etv
 * 
 * Enable 12-Bit VLAN Tag Comparison
 * 
 * When this bit is set, a 12-bit VLAN identifier is used for comparing and
 * filtering instead of the complete 16-bit VLAN tag. Bits [11:0] of VLAN tag are
 * compared with the corresponding field in the received VLAN-tagged frame.
 * Similarly, when enabled, only 12 bits of the VLAN tag in the received frame are
 * used for hash-based VLAN filtering.
 * 
 * When this bit is reset, all 16 bits of the 15th and 16th bytes of the received
 * VLAN frame are used for comparison and VLAN hash filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_VLAN_TAG_ETV_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_VLAN_TAG_ETV_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_VLAN_TAG_ETV
 * 
 */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_VLAN_TAG_ETV
 * 
 */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_ETV register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_ETV register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_TAG_ETV register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_TAG_ETV register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_TAG_ETV register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_TAG_ETV register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_TAG_ETV field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_VLAN_TAG_ETV register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ETV_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : vtim
 * 
 * VLAN Tag Inverse Match Enable
 * 
 * When set, this bit enables the VLAN Tag inverse matching. The frames that do not
 * have matching VLAN Tag are marked as matched.
 * 
 * When reset, this bit enables the VLAN Tag perfect matching. The frames with
 * matched VLAN Tag are marked as matched.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_VTIM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_VTIM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_TAG_VTIM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_TAG_VTIM register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_TAG_VTIM register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_TAG_VTIM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_TAG_VTIM field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_VLAN_TAG_VTIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTIM_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : esvl
 * 
 * Enable S-VLAN
 * 
 * When this bit is set, the MAC transmitter and receiver also consider the S-VLAN
 * (Type = 0x88A8) frames as valid VLAN tagged frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_ESVL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_ESVL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_TAG_ESVL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_TAG_ESVL register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_TAG_ESVL register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_TAG_ESVL register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_TAG_ESVL field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_VLAN_TAG_ESVL register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ESVL_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : vthm
 * 
 * VLAN Tag Hash Table Match Enable
 * 
 * When set, the most significant four bits of the VLAN tag's CRC are used to index
 * the content of Register 354 (VLAN Hash Table Register). A value of 1 in the VLAN
 * Hash Table register, corresponding to the index, indicates that the frame
 * matched the VLAN hash table.
 * 
 * When Bit 16 (ETV) is set, the CRC of the 12-bit VLAN Identifier (VID) is used
 * for comparison whereas when ETV is reset, the CRC of the 16-bit VLAN tag is used
 * for comparison.
 * 
 * When reset, the VLAN Hash Match operation is not performed. If the VLAN Hash
 * feature is not enabled during core configuration, this bit is reserved (RO with
 * default value).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_VTHM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_VTHM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_TAG_VTHM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_TAG_VTHM register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_TAG_VTHM register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_TAG_VTHM register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_TAG_VTHM field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_VLAN_TAG_VTHM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_VTHM_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : reserved_31_20
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_WIDTH      12
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_SET_MSK    0xfff00000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 register field value. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_CLR_MSK    0x000fffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_GET(value) (((value) & 0xfff00000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20_SET(value) (((value) << 20) & 0xfff00000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_VLAN_TAG.
 */
struct ALT_EMAC_GMACGRP_VLAN_TAG_s
{
    volatile uint32_t        vl             : 16;  /* ALT_EMAC_GMACGRP_VLAN_TAG_VL */
    volatile uint32_t        etv            :  1;  /* ALT_EMAC_GMACGRP_VLAN_TAG_ETV */
    volatile uint32_t        vtim           :  1;  /* ALT_EMAC_GMACGRP_VLAN_TAG_VTIM */
    volatile uint32_t        esvl           :  1;  /* ALT_EMAC_GMACGRP_VLAN_TAG_ESVL */
    const volatile uint32_t  vthm           :  1;  /* ALT_EMAC_GMACGRP_VLAN_TAG_VTHM */
    const volatile uint32_t  reserved_31_20 : 12;  /* ALT_EMAC_GMACGRP_VLAN_TAG_RESERVED_31_20 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_VLAN_TAG. */
typedef struct ALT_EMAC_GMACGRP_VLAN_TAG_s  ALT_EMAC_GMACGRP_VLAN_TAG_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_VLAN_TAG register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_VLAN_TAG register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_OFST        0x1c
/* The address of the ALT_EMAC_GMACGRP_VLAN_TAG register. */
#define ALT_EMAC_GMACGRP_VLAN_TAG_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_VLAN_TAG_OFST))

/*
 * Register : gmacgrp_version
 * 
 * <b> Register 8 (Version Register) </b>
 * 
 * The Version registers identifies the version of the DWC_gmac. This register
 * contains two bytes: one that Synopsys uses to identify the core release number,
 * and the other that you set during core configuration.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                            
 * :--------|:-------|:------|:----------------------------------------
 *  [7:0]   | R      | 0x37  | ALT_EMAC_GMACGRP_VERSION_SNPSVER       
 *  [15:8]  | R      | 0x11  | ALT_EMAC_GMACGRP_VERSION_USERVER       
 *  [31:16] | R      | 0x0   | ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16
 * 
 */
/*
 * Field : snpsver
 * 
 * Synopsys-defined Version (3.7)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VERSION_SNPSVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VERSION_SNPSVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_VERSION_SNPSVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_VERSION_SNPSVER register field value. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_SET_MSK    0x000000ff
/* The mask used to clear the ALT_EMAC_GMACGRP_VERSION_SNPSVER register field value. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_CLR_MSK    0xffffff00
/* The reset value of the ALT_EMAC_GMACGRP_VERSION_SNPSVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_RESET      0x37
/* Extracts the ALT_EMAC_GMACGRP_VERSION_SNPSVER field value from a register. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_VERSION_SNPSVER register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VERSION_SNPSVER_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : userver
 * 
 * User-defined Version (Configured with the coreConsultant)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VERSION_USERVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VERSION_USERVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_VERSION_USERVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_VERSION_USERVER register field value. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_SET_MSK    0x0000ff00
/* The mask used to clear the ALT_EMAC_GMACGRP_VERSION_USERVER register field value. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_CLR_MSK    0xffff00ff
/* The reset value of the ALT_EMAC_GMACGRP_VERSION_USERVER register field. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_RESET      0x11
/* Extracts the ALT_EMAC_GMACGRP_VERSION_USERVER field value from a register. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_GET(value) (((value) & 0x0000ff00) >> 8)
/* Produces a ALT_EMAC_GMACGRP_VERSION_USERVER register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VERSION_USERVER_SET(value) (((value) << 8) & 0x0000ff00)

/*
 * Field : reserved_31_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 register field value. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 register field value. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 register field. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 field value from a register. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_VERSION.
 */
struct ALT_EMAC_GMACGRP_VERSION_s
{
    const volatile uint32_t  snpsver        :  8;  /* ALT_EMAC_GMACGRP_VERSION_SNPSVER */
    const volatile uint32_t  userver        :  8;  /* ALT_EMAC_GMACGRP_VERSION_USERVER */
    const volatile uint32_t  reserved_31_16 : 16;  /* ALT_EMAC_GMACGRP_VERSION_RESERVED_31_16 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_VERSION. */
typedef struct ALT_EMAC_GMACGRP_VERSION_s  ALT_EMAC_GMACGRP_VERSION_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_VERSION register. */
#define ALT_EMAC_GMACGRP_VERSION_RESET       0x00001137
/* The byte offset of the ALT_EMAC_GMACGRP_VERSION register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_VERSION_OFST        0x20
/* The address of the ALT_EMAC_GMACGRP_VERSION register. */
#define ALT_EMAC_GMACGRP_VERSION_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_VERSION_OFST))

/*
 * Register : gmacgrp_debug
 * 
 * <b> Register 9 (Debug Register) </b>
 * 
 * The Debug register gives the status of all main modules of the transmit and
 * receive data-paths and the FIFOs. An all-zero status indicates that the MAC is
 * in idle state (and FIFOs are empty) and no activity is going on in the data-
 * paths.
 * 
 * Note:
 * 
 * The reset values, given for the Debug register, are valid only if the  following
 * clocks are present during the reset operation:
 * 
 * * clk_csr_i, clk_app_i, hclk_i, or aclk_i
 * 
 * * clk_tx_i
 * 
 * * clk_rx_i
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RPESTS        
 *  [2:1]   | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS      
 *  [3]     | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RESERVED_3    
 *  [4]     | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RWCSTS        
 *  [6:5]   | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RRCSTS        
 *  [7]     | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RESERVED_7    
 *  [9:8]   | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RXFSTS        
 *  [15:10] | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10
 *  [16]    | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_TPESTS        
 *  [18:17] | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_TFCSTS        
 *  [19]    | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_TXPAUSED      
 *  [21:20] | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_TRCSTS        
 *  [22]    | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_TWCSTS        
 *  [23]    | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RESERVED_23   
 *  [24]    | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_TXFSTS        
 *  [25]    | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS     
 *  [31:26] | R      | 0x0   | ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26
 * 
 */
/*
 * Field : rpests
 * 
 * MAC GMII or MII Receive Protocol Engine Status
 * 
 * When high, this bit indicates that the MAC GMII or MII receive protocol engine
 * is actively receiving data and not in IDLE state.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_RPESTS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RPESTS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RPESTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RPESTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RPESTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RPESTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RPESTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RPESTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RPESTS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : rfcfcsts
 * 
 * MAC Receive Frame Controller FIFO Status
 * 
 * When high, this field indicates the active state of the small FIFO Read and
 * Write controllers of the MAC Receive Frame Controller Module.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_SET_MSK    0x00000006
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_CLR_MSK    0xfffffff9
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_GET(value) (((value) & 0x00000006) >> 1)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS_SET(value) (((value) << 1) & 0x00000006)

/*
 * Field : reserved_3
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_3_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : rwcsts
 * 
 * MTL Rx FIFO Write Controller Active Status
 * 
 * When high, this bit indicates that the MTL Rx FIFO Write Controller is active
 * and is transferring a received frame to the FIFO.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_RWCSTS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RWCSTS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RWCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RWCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RWCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RWCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RWCSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RWCSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RWCSTS_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : rrcsts
 * 
 * MTL Rx FIFO Read Controller State
 * 
 * This field gives the state of the Rx FIFO read Controller:
 * 
 * * 00: IDLE state
 * 
 * * 01: Reading frame data
 * 
 * * 10: Reading frame status (or timestamp)
 * 
 * * 11: Flushing the frame data and status
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_IDLE        | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_RDFRAMEDATA | 0x1   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_RDFRAMESTAT | 0x2   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_FLUSHFRDS   | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_IDLE        0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_RDFRAMEDATA 0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_RDFRAMESTAT 0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_E_FLUSHFRDS   0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RRCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_SET_MSK    0x00000060
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RRCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_CLR_MSK    0xffffff9f
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RRCSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_GET(value) (((value) & 0x00000060) >> 5)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RRCSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RRCSTS_SET(value) (((value) << 5) & 0x00000060)

/*
 * Field : reserved_7
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_7_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : rxfsts
 * 
 * MTL Rx FIFO Fill-level Status
 * 
 * This field gives the status of the fill-level of the Rx FIFO:
 * 
 * * 00: Rx FIFO Empty
 * 
 * * 01: Rx FIFO fill level is below the flow-control deactivate threshold
 * 
 * * 10: Rx FIFO fill level is above the flow-control activate threshold
 * 
 * * 11: Rx FIFO Full
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOEMPTY  | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOBELLVL | 0x1   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOABLVL  | 0x2   |            
 *  ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOFULL   | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RXFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOEMPTY     0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RXFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOBELLVL    0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RXFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOABLVL     0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_RXFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_E_RXFIFOFULL      0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RXFSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_SET_MSK    0x00000300
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RXFSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_CLR_MSK    0xfffffcff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RXFSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_GET(value) (((value) & 0x00000300) >> 8)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RXFSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RXFSTS_SET(value) (((value) << 8) & 0x00000300)

/*
 * Field : reserved_15_10
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_SET_MSK    0x0000fc00
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_CLR_MSK    0xffff03ff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_GET(value) (((value) & 0x0000fc00) >> 10)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10_SET(value) (((value) << 10) & 0x0000fc00)

/*
 * Field : tpests
 * 
 * MAC GMII or MII Transmit Protocol Engine Status
 * 
 * When high, this bit indicates that the MAC GMII or MII transmit protocol engine
 * is actively transmitting data and is not in the IDLE state.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_TPESTS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TPESTS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TPESTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TPESTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_TPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_TPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_TPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_TPESTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_TPESTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_TPESTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_TPESTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_TPESTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_TPESTS_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : tfcsts
 * 
 * MAC Transmit Frame Controller Status
 * 
 * This field indicates the state of the MAC Transmit Frame Controller module:
 * 
 * * 00: IDLE state
 * 
 * * 01: Waiting for Status of previous frame or IFG or backoff period to be over
 * 
 * * 10: Generating and transmitting a PAUSE control frame (in the full-duplex
 *   mode)
 * 
 * * 11: Transferring input frame for transmission
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                    | Value | Description
 * :----------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_IDLE    | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_WAITIFG | 0x1   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_XTPAUSE | 0x2   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_XTINFRM | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TFCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_IDLE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TFCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_WAITIFG 0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TFCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_XTPAUSE 0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TFCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_E_XTINFRM 0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_TFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_TFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_TFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_TFCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_SET_MSK    0x00060000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_TFCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_CLR_MSK    0xfff9ffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_TFCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_TFCSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_GET(value) (((value) & 0x00060000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_TFCSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_TFCSTS_SET(value) (((value) << 17) & 0x00060000)

/*
 * Field : txpaused
 * 
 * MAC transmitter in PAUSE
 * 
 * When high, this bit indicates that the MAC transmitter is in the PAUSE condition
 * (in the full-duplex only mode) and hence does not schedule any frame for
 * transmission.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                      | Value | Description
 * :------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_E_DISABLE | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_E_ENABLED | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TXPAUSED
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_E_DISABLE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TXPAUSED
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_TXPAUSED register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_TXPAUSED register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_TXPAUSED register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_TXPAUSED register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_TXPAUSED register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_TXPAUSED register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_TXPAUSED field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_TXPAUSED register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_TXPAUSED_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : trcsts
 * 
 * MTL Tx FIFO Read Controller Status
 * 
 * This field indicates the state of the Tx FIFO Read Controller:
 * 
 * * 00: IDLE state
 * 
 * * 01: READ state (transferring data to MAC transmitter)
 * 
 * * 10: Waiting for TxStatus from MAC transmitter
 * 
 * * 11: Writing the received TxStatus or flushing the Tx FIFO
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_IDLE       | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_READSTATE  | 0x1   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_WAITTXSTAT | 0x2   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_WRTXSTAT   | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_IDLE        0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_READSTATE   0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_WAITTXSTAT  0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TRCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_E_WRTXSTAT    0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_TRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_TRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_TRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_TRCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_SET_MSK    0x00300000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_TRCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_CLR_MSK    0xffcfffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_TRCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_TRCSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_GET(value) (((value) & 0x00300000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_TRCSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_TRCSTS_SET(value) (((value) << 20) & 0x00300000)

/*
 * Field : twcsts
 * 
 * MTL Tx FIFO Write Controller Active Status
 * 
 * When high, this bit indicates that the MTL Tx FIFO Write Controller is active
 * and transferring data to the Tx FIFO.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_TWCSTS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TWCSTS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TWCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TWCSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_TWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_TWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_TWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_TWCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_TWCSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_TWCSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_TWCSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_TWCSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_TWCSTS_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : reserved_23
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_23_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : txfsts
 * 
 * MTL Tx FIFO Not Empty Status
 * 
 * When high, this bit indicates that the MTL Tx FIFO is not empty and some data is
 * left for transmission.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_TXFSTS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TXFSTS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TXFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TXFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_TXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_TXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_TXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_TXFSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_TXFSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_TXFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_TXFSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_TXFSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_TXFSTS_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : txstsfsts
 * 
 * MTL TxStatus FIFO Full Status
 * 
 * When high, this bit indicates that the MTL TxStatus FIFO is full. Therefore, the
 * MTL cannot accept any more frames for transmission. This bit is reserved in the
 * GMAC-AHB and GMAC-DMA configurations.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS
 * 
 */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS register field. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : reserved_31_26
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_SET_MSK    0xfc000000
/* The mask used to clear the ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_CLR_MSK    0x03ffffff
/* The reset value of the ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 field value from a register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_GET(value) (((value) & 0xfc000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26_SET(value) (((value) << 26) & 0xfc000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_DEBUG.
 */
struct ALT_EMAC_GMACGRP_DEBUG_s
{
    const volatile uint32_t  rpests         :  1;  /* ALT_EMAC_GMACGRP_DEBUG_RPESTS */
    const volatile uint32_t  rfcfcsts       :  2;  /* ALT_EMAC_GMACGRP_DEBUG_RFCFCSTS */
    const volatile uint32_t  reserved_3     :  1;  /* ALT_EMAC_GMACGRP_DEBUG_RESERVED_3 */
    const volatile uint32_t  rwcsts         :  1;  /* ALT_EMAC_GMACGRP_DEBUG_RWCSTS */
    const volatile uint32_t  rrcsts         :  2;  /* ALT_EMAC_GMACGRP_DEBUG_RRCSTS */
    const volatile uint32_t  reserved_7     :  1;  /* ALT_EMAC_GMACGRP_DEBUG_RESERVED_7 */
    const volatile uint32_t  rxfsts         :  2;  /* ALT_EMAC_GMACGRP_DEBUG_RXFSTS */
    const volatile uint32_t  reserved_15_10 :  6;  /* ALT_EMAC_GMACGRP_DEBUG_RESERVED_15_10 */
    const volatile uint32_t  tpests         :  1;  /* ALT_EMAC_GMACGRP_DEBUG_TPESTS */
    const volatile uint32_t  tfcsts         :  2;  /* ALT_EMAC_GMACGRP_DEBUG_TFCSTS */
    const volatile uint32_t  txpaused       :  1;  /* ALT_EMAC_GMACGRP_DEBUG_TXPAUSED */
    const volatile uint32_t  trcsts         :  2;  /* ALT_EMAC_GMACGRP_DEBUG_TRCSTS */
    const volatile uint32_t  twcsts         :  1;  /* ALT_EMAC_GMACGRP_DEBUG_TWCSTS */
    const volatile uint32_t  reserved_23    :  1;  /* ALT_EMAC_GMACGRP_DEBUG_RESERVED_23 */
    const volatile uint32_t  txfsts         :  1;  /* ALT_EMAC_GMACGRP_DEBUG_TXFSTS */
    const volatile uint32_t  txstsfsts      :  1;  /* ALT_EMAC_GMACGRP_DEBUG_TXSTSFSTS */
    const volatile uint32_t  reserved_31_26 :  6;  /* ALT_EMAC_GMACGRP_DEBUG_RESERVED_31_26 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_DEBUG. */
typedef struct ALT_EMAC_GMACGRP_DEBUG_s  ALT_EMAC_GMACGRP_DEBUG_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_DEBUG register. */
#define ALT_EMAC_GMACGRP_DEBUG_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_DEBUG register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_DEBUG_OFST        0x24
/* The address of the ALT_EMAC_GMACGRP_DEBUG register. */
#define ALT_EMAC_GMACGRP_DEBUG_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_DEBUG_OFST))

/*
 * Register : gmacgrp_lpi_control_status
 * 
 * <b> Register 12 (LPI Control and Status Register) </b>
 * 
 * The LPI Control and Status Register controls the LPI functions and provides the
 * LPI interrupt status. The status bits are cleared when this register is read.
 * This register is present only when you select the Energy Efficient Ethernet
 * feature during core configuration.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                       
 * :--------|:-------|:------|:---------------------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN        
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX        
 *  [2]     | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN        
 *  [3]     | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX        
 *  [7:4]   | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4  
 *  [8]     | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST        
 *  [9]     | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST        
 *  [15:10] | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN         
 *  [17]    | RW     | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS           
 *  [18]    | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN         
 *  [19]    | RW     | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA        
 *  [31:20] | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20
 * 
 */
/*
 * Field : tlpien
 * 
 * Transmit LPI Entry
 * 
 * When set, this bit indicates that the MAC Transmitter has entered the LPI state
 * because of the setting of the LPIEN bit. This bit is cleared by a read into this
 * register.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : tlpiex
 * 
 * Transmit LPI Exit
 * 
 * When set, this bit indicates that the MAC transmitter has exited the LPI state
 * after the user has cleared the LPIEN bit and the LPI TW Timer has expired. This
 * bit is cleared by a read into this register.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : rlpien
 * 
 * Receive LPI Entry
 * 
 * When set, this bit indicates that the MAC Receiver has received an LPI pattern
 * and entered the LPI state. This bit is cleared by a read into this register.
 * 
 * Note:
 * 
 * This bit may not get set if the MAC stops receiving the LPI pattern for a very
 * short duration, such as, less than 3 clock cycles of CSR clock.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : rlpiex
 * 
 * Receive LPI Exit
 * 
 * When set, this bit indicates that the MAC Receiver has stopped receiving the LPI
 * pattern on the GMII or MII interface, exited the LPI state, and resumed the
 * normal reception. This bit is cleared by a read into this register.
 * 
 * Note:
 * 
 * This bit may not get set if the MAC stops receiving the LPI pattern for a very
 * short duration, such as, less than 3 clock cycles of CSR clock.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : reserved_7_4
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_WIDTH      4
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_SET_MSK    0x000000f0
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_CLR_MSK    0xffffff0f
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_GET(value) (((value) & 0x000000f0) >> 4)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4_SET(value) (((value) << 4) & 0x000000f0)

/*
 * Field : tlpist
 * 
 * Transmit LPI State
 * 
 * When set, this bit indicates that the MAC is transmitting the LPI pattern on the
 * GMII or MII interface.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : rlpist
 * 
 * Receive LPI State
 * 
 * When set, this bit indicates that the MAC is receiving the LPI pattern on the
 * GMII or MII interface.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : reserved_15_10
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_SET_MSK    0x0000fc00
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_CLR_MSK    0xffff03ff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_GET(value) (((value) & 0x0000fc00) >> 10)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10_SET(value) (((value) << 10) & 0x0000fc00)

/*
 * Field : lpien
 * 
 * LPI Enable
 * 
 * When set, this bit instructs the MAC Transmitter to enter the LPI state. When
 * reset, this bit instructs the MAC to exit the LPI state and resume normal
 * transmission.
 * 
 * This bit is cleared when the LPITXA bit is set and the MAC exits the LPI state
 * because of the arrival of a new packet for transmission.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : pls
 * 
 * PHY Link Status
 * 
 * This bit indicates the link status of the PHY. The MAC Transmitter asserts the
 * LPI pattern only when the link status is up (okay) at least for the time
 * indicated by the LPI LS TIMER.
 * 
 * When set, the link is considered to be okay (up) and when reset, the link is
 * considered to be down.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : plsen
 * 
 * PHY Link Status Enable
 * 
 * This bit enables the link status received on the RGMII, SGMII, or SMII receive
 * paths to be used for activating the LPI LS TIMER.
 * 
 * When set, the MAC uses the link-status bits of Register 54 (SGMII/RGMII/SMII
 * Status Register) and Bit 17 (PLS) for the LPI LS Timer trigger. When cleared,
 * the MAC ignores the link-status bits of Register 54 and takes only the PLS bit.
 * 
 * This bit is RO and reserved if you have not selected the RGMII, SGMII, or SMII
 * PHY interface.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : lpitxa
 * 
 * LPI TX Automate
 * 
 * This bit controls the behavior of the MAC when it is entering or coming out of
 * the LPI mode on the transmit side. This bit is not functional in the GMAC-CORE
 * configuration in which the Tx clock gating is done during the LPI mode.
 * 
 * If the LPITXA and LPIEN bits are set to 1, the MAC enters the LPI mode only
 * after all outstanding frames (in the core) and pending frames (in the
 * application interface) have been transmitted. The MAC comes out of the LPI mode
 * when the application sends any frame for transmission or the application issues
 * a TX FIFO Flush command. In addition, the MAC automatically clears the LPIEN bit
 * when it exits the LPI state. If TX FIFO Flush is set, in Bit 20 of Register 6
 * (Operation Mode Register), when the MAC is in the LPI mode, the MAC exits the
 * LPI mode.
 * 
 * When this bit is 0, the LPIEN bit directly controls behavior of the MAC when it
 * is entering or coming out of the LPI mode.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA
 * 
 */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : reserved_31_20
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_WIDTH      12
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_SET_MSK    0xfff00000
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 register field value. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_CLR_MSK    0x000fffff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_GET(value) (((value) & 0xfff00000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20_SET(value) (((value) << 20) & 0xfff00000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS.
 */
struct ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_s
{
    const volatile uint32_t  tlpien         :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEN */
    const volatile uint32_t  tlpiex         :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIEX */
    const volatile uint32_t  rlpien         :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEN */
    const volatile uint32_t  rlpiex         :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIEX */
    const volatile uint32_t  reserved_7_4   :  4;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_7_4 */
    const volatile uint32_t  tlpist         :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_TLPIST */
    const volatile uint32_t  rlpist         :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RLPIST */
    const volatile uint32_t  reserved_15_10 :  6;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_15_10 */
    volatile uint32_t        lpien          :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPIEN */
    volatile uint32_t        pls            :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLS */
    const volatile uint32_t  plsen          :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_PLSEN */
    volatile uint32_t        lpitxa         :  1;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_LPITXA */
    const volatile uint32_t  reserved_31_20 : 12;  /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESERVED_31_20 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS. */
typedef struct ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_s  ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_OFST        0x30
/* The address of the ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS register. */
#define ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_OFST))

/*
 * Register : gmacgrp_lpi_timers_control
 * 
 * <b> Register 13 (LPI Timers Control Register) </b>
 * 
 * The LPI Timers Control register controls the timeout values in the LPI states.
 * It specifies the time for which the MAC transmits the LPI pattern and also the
 * time for which the MAC waits before resuming the normal transmission. This
 * register is present only when you select the Energy Efficient Ethernet feature
 * during core configuration.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                       
 * :--------|:-------|:------|:---------------------------------------------------
 *  [15:0]  | RW     | 0x0   | ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT           
 *  [25:16] | RW     | 0x3e8 | ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST           
 *  [31:26] | R      | 0x0   | ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26
 * 
 */
/*
 * Field : twt
 * 
 * LPI TW Timer
 * 
 * This field specifies the minimum time (in microseconds) for which the MAC waits
 * after it stops transmitting the LPI pattern to the PHY and before it resumes the
 * normal transmission. The TLPIEX status bit is set after the expiry of this
 * timer.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT register field value. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT register field value. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : lst
 * 
 * LPI LS Timer
 * 
 * This field specifies the minimum time (in milliseconds) for which the link
 * status from the PHY should be up (OKAY) before the LPI pattern can be
 * transmitted to the PHY. The MAC does not transmit the LPI pattern even when the
 * LPIEN bit is set unless the LPI LS Timer reaches the programmed terminal count.
 * The default value of the LPI LS Timer is 1000 (1 sec) as defined in the IEEE
 * standard.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_WIDTH      10
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST register field value. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_SET_MSK    0x03ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST register field value. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_CLR_MSK    0xfc00ffff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_RESET      0x3e8
/* Extracts the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_GET(value) (((value) & 0x03ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST_SET(value) (((value) << 16) & 0x03ff0000)

/*
 * Field : reserved_31_26
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_SET_MSK    0xfc000000
/* The mask used to clear the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_CLR_MSK    0x03ffffff
/* The reset value of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 field value from a register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_GET(value) (((value) & 0xfc000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26_SET(value) (((value) << 26) & 0xfc000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL.
 */
struct ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_s
{
    volatile uint32_t        twt            : 16;  /* ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_TWT */
    volatile uint32_t        lst            : 10;  /* ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_LST */
    const volatile uint32_t  reserved_31_26 :  6;  /* ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESERVED_31_26 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL. */
typedef struct ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_s  ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_RESET       0x03e80000
/* The byte offset of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_OFST        0x34
/* The address of the ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL register. */
#define ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_OFST))

/*
 * Register : gmacgrp_interrupt_status
 * 
 * <b> Register 14 (Interrupt Register) </b>
 * 
 * The Interrupt Status register identifies the events in the MAC that can generate
 * interrupt. All interrupt events are generated only when the corresponding
 * optional feature is selected during core configuration and enabled during
 * operation. Therefore, these bits are reserved when the corresponding features
 * are not present in the core.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                     
 * :--------|:-------|:------|:-------------------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS      
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS     
 *  [2]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS      
 *  [3]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS         
 *  [4]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS         
 *  [5]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS       
 *  [6]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS       
 *  [7]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS     
 *  [8]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8    
 *  [9]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS          
 *  [10]    | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS         
 *  [11]    | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS         
 *  [31:12] | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12
 * 
 */
/*
 * Field : rgsmiiis
 * 
 * RGMII or SMII Interrupt Status
 * 
 * This bit is set because of any change in value of the Link Status of RGMII or
 * SMII interface (Bit 3 in Register 54 (SGMII/RGMII/SMII Status Register)). This
 * bit is cleared when you perform a read operation on the SGMII/RGMII/SMII Status
 * Register.
 * 
 * This bit is valid only when you select the optional RGMII or SMII PHY interface
 * during core configuration and operation.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : pcslchgis
 * 
 * PCS Link Status Changed
 * 
 * This bit is set because of any change in Link Status in the TBI, RTBI, or SGMII
 * PHY interface (Bit 2 in Register 49 (AN Status Register)). This bit is cleared
 * when you perform a read operation on the AN Status register.
 * 
 * This bit is valid only when you select the optional TBI, RTBI, or SGMII PHY
 * interface during core configuration and operation.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : pcsancis
 * 
 * PCS Auto-Negotiation Complete
 * 
 * This bit is set when the Auto-negotiation is completed in the TBI, RTBI, or
 * SGMII PHY interface (Bit 5 in Register 49 (AN Status Register)). This bit is
 * cleared when you perform a read operation to the AN Status register.
 * 
 * This bit is valid only when you select the optional TBI, RTBI, or SGMII PHY
 * interface during core configuration and operation.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : pmtis
 * 
 * PMT Interrupt Status
 * 
 * This bit is set when a Magic packet or Wake-on-LAN frame is received in the
 * power-down mode (see Bits 5 and 6 in the PMT Control and Status Register). This
 * bit is cleared when both Bits[6:5] are cleared because of a read operation to
 * the PMT Control and Status register.
 * 
 * This bit is valid only when you select the optional PMT module during core
 * configuration.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : mmcis
 * 
 * MMC Interrupt Status
 * 
 * This bit is set high when any of the Bits [7:5] is set high and cleared only
 * when all of these bits are low.
 * 
 * This bit is valid only when you select the optional MMC module during core
 * configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : mmcrxis
 * 
 * MMC Receive Interrupt Status
 * 
 * This bit is set high when an interrupt is generated in the MMC Receive Interrupt
 * Register. This bit is cleared when all the bits in this interrupt register are
 * cleared.
 * 
 * This bit is valid only when you select the optional MMC module during core
 * configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : mmctxis
 * 
 * MMC Transmit Interrupt Status
 * 
 * This bit is set high when an interrupt is generated in the MMC Transmit
 * Interrupt Register. This bit is cleared when all the bits in this interrupt
 * register are cleared.
 * 
 * This bit is valid only when you select the optional MMC module during core
 * configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : mmcrxipis
 * 
 * MMC Receive Checksum Offload Interrupt Status
 * 
 * This bit is set high when an interrupt is generated in the MMC Receive Checksum
 * Offload Interrupt Register. This bit is cleared when all the bits in this
 * interrupt register are cleared.
 * 
 * This bit is valid only when you select the optional MMC module and Checksum
 * Offload Engine (Type 2) during core configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                   | Value | Description
 * :-------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : reserved_8
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : tsis
 * 
 * Timestamp Interrupt Status
 * 
 * When the Advanced Timestamp feature is enabled, this bit is set when any of the
 * following conditions is true:
 * 
 * * The system time value equals or exceeds the value specified in the Target Time
 *   High and Low registers.
 * 
 * * There is an overflow in the seconds register.
 * 
 * * The Auxiliary snapshot trigger is asserted.
 * 
 * This bit is cleared on reading Bit 0 of the Register 458 (Timestamp Status
 * Register).
 * 
 * If default Timestamping is enabled, when set, this bit indicates that the system
 * time value is equal to or exceeds the value specified in the Target Time
 * registers. In this mode, this bit is cleared after the completion of the read of
 * this bit. In all other modes, this bit is reserved.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : lpiis
 * 
 * LPI Interrupt Status
 * 
 * When the Energy Efficient Ethernet feature is enabled, this bit is set for any
 * LPI state entry or exit in the MAC Transmitter or Receiver. This bit is cleared
 * on reading Bit 0 of Register 12 (LPI Control and Status Register). In all other
 * modes, this bit is reserved.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : gpiis
 * 
 * GPI Interrupt Status
 * 
 * When the GPIO feature is enabled, this bit is set when any active event (LL or
 * LH) occurs on GPIS field (Bits [3:0]) of Register 56 (General Purpose IO
 * Register) and the corresponding GPIE bit is enabled. This bit is cleared on
 * reading the lane 0 (GPIS) of Register 56 (Genaral Purpose IO Register). When the
 * GPIO feature is not enabled, this bit is reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : reserved_31_12
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_WIDTH      20
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_SET_MSK    0xfffff000
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_CLR_MSK    0x00000fff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_GET(value) (((value) & 0xfffff000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12_SET(value) (((value) << 12) & 0xfffff000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_INTERRUPT_STATUS.
 */
struct ALT_EMAC_GMACGRP_INTERRUPT_STATUS_s
{
    const volatile uint32_t  rgsmiiis       :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RGSMIIIS */
    const volatile uint32_t  pcslchgis      :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSLCHGIS */
    const volatile uint32_t  pcsancis       :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PCSANCIS */
    const volatile uint32_t  pmtis          :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_PMTIS */
    const volatile uint32_t  mmcis          :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCIS */
    const volatile uint32_t  mmcrxis        :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIS */
    const volatile uint32_t  mmctxis        :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCTXIS */
    const volatile uint32_t  mmcrxipis      :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_MMCRXIPIS */
    const volatile uint32_t  reserved_8     :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_8 */
    const volatile uint32_t  tsis           :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_TSIS */
    const volatile uint32_t  lpiis          :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_LPIIS */
    const volatile uint32_t  gpiis          :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_GPIIS */
    const volatile uint32_t  reserved_31_12 : 20;  /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESERVED_31_12 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_INTERRUPT_STATUS. */
typedef struct ALT_EMAC_GMACGRP_INTERRUPT_STATUS_s  ALT_EMAC_GMACGRP_INTERRUPT_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_OFST        0x38
/* The address of the ALT_EMAC_GMACGRP_INTERRUPT_STATUS register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_STATUS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_INTERRUPT_STATUS_OFST))

/*
 * Register : gmacgrp_interrupt_mask
 * 
 * <b> Register 15 (Interrupt Mask Register) </b>
 * 
 * The Interrupt Mask Register bits enable you to mask the interrupt signal because
 * of the corresponding event in the Interrupt Status Register. The interrupt
 * signal is sbd_intr_o in the GMAC-AHB, GMAC-AXI, and GMAC-DMA configuration and
 * mci_intr_o in the GMAC-MTL and GMAC-CORE configuration.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                   
 * :--------|:-------|:------|:-----------------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM      
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM     
 *  [2]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM      
 *  [3]     | RW     | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM         
 *  [8:4]   | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4  
 *  [9]     | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM          
 *  [10]    | RW     | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM         
 *  [31:11] | R      | 0x0   | ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11
 * 
 */
/*
 * Field : rgsmiiim
 * 
 * RGMII or SMII Interrupt Mask
 * 
 * When set, this bit disables the assertion of the interrupt signal because of the
 * setting of the RGMII or SMII Interrupt Status bit in Register 14 (Interrupt
 * Status Register).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : pcslchgim
 * 
 * PCS Link Status Interrupt Mask
 * 
 * When set, this bit disables the assertion of the interrupt signal because of the
 * setting of the PCS Link-status changed bit in Register 14 (Interrupt Status
 * Register).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : pcsancim
 * 
 * PCS AN Completion Interrupt Mask
 * 
 * When set, this bit disables the assertion of the interrupt signal because of the
 * setting of PCS Auto-negotiation complete bit in Register 14 (Interrupt Status
 * Register).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : pmtim
 * 
 * PMT Interrupt Mask
 * 
 * When set, this bit disables the assertion of the interrupt signal because of the
 * setting of PMT Interrupt Status bit in Register 14 (Interrupt Status Register).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : reserved_8_4
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_SET_MSK    0x000001f0
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_CLR_MSK    0xfffffe0f
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_GET(value) (((value) & 0x000001f0) >> 4)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4_SET(value) (((value) << 4) & 0x000001f0)

/*
 * Field : tsim
 * 
 * Timestamp Interrupt Mask
 * 
 * When set, this bit disables the assertion of the interrupt signal because of the
 * setting of Timestamp Interrupt Status bit in Register 14 (Interrupt Status
 * Register).
 * 
 * This bit is valid only when IEEE1588 timestamping is enabled. In all other
 * modes, this bit is reserved.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : lpiim
 * 
 * LPI Interrupt Mask
 * 
 * When set, this bit disables the assertion of the interrupt signal because of the
 * setting of the LPI Interrupt Status bit in Register 14 (Interrupt Status
 * Register).
 * 
 * This bit is valid only when you select the Energy Efficient Ethernet feature
 * during core configuration. In all other modes, this bit is reserved.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM
 * 
 */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : reserved_31_11
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_WIDTH      21
/* The mask used to set the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_SET_MSK    0xfffff800
/* The mask used to clear the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 register field value. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_CLR_MSK    0x000007ff
/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 register field. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 field value from a register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_GET(value) (((value) & 0xfffff800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11_SET(value) (((value) << 11) & 0xfffff800)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_INTERRUPT_MASK.
 */
struct ALT_EMAC_GMACGRP_INTERRUPT_MASK_s
{
    const volatile uint32_t  rgsmiiim       :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_RGSMIIIM */
    const volatile uint32_t  pcslchgim      :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSLCHGIM */
    const volatile uint32_t  pcsancim       :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_PCSANCIM */
    volatile uint32_t        pmtim          :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_PMTIM */
    const volatile uint32_t  reserved_8_4   :  5;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_8_4 */
    const volatile uint32_t  tsim           :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_TSIM */
    volatile uint32_t        lpiim          :  1;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_LPIIM */
    const volatile uint32_t  reserved_31_11 : 21;  /* ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESERVED_31_11 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_INTERRUPT_MASK. */
typedef struct ALT_EMAC_GMACGRP_INTERRUPT_MASK_s  ALT_EMAC_GMACGRP_INTERRUPT_MASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_INTERRUPT_MASK register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_OFST        0x3c
/* The address of the ALT_EMAC_GMACGRP_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_INTERRUPT_MASK_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_INTERRUPT_MASK_OFST))

/*
 * Register : gmacgrp_mac_address0_high
 * 
 * <b> Register 16 (MAC Address0 High Register) </b>
 * 
 * The MAC Address0 High register holds the upper 16 bits of the first 6-byte MAC
 * address of the station. The first DA byte that is received on the (G)MII
 * interface corresponds to the LS byte (Bits [7:0]) of the MAC Address Low
 * register. For example, if 0x112233445566 is received (0x11 in lane 0 of the
 * first column) on the (G)MII as the destination address, then the MacAddress0
 * Register [47:0] is compared with 0x665544332211.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address0 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this Address Low Register should be performed after at
 * least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16
 *  [31]    | R      | 0x1    | ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address0 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the first 6-byte MAC address.
 * The MAC uses this field for filtering the received frames and inserting the MAC
 * address in the Transmit Flow Control (PAUSE) Frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * This bit is always set to 1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_RESET      0x1
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESERVED_30_16 */
    const volatile uint32_t  ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_RESET       0x8000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_OFST        0x40
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address0_low
 * 
 * <b> Register 17 (MAC Address0 Low Register) </b>
 * 
 * The MAC Address0 Low register holds the lower 32 bits of the first 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address0 [31:0]
 * 
 * This field contains the lower 32 bits of the first 6-byte MAC address. This is
 * used by the MAC for filtering the received frames and inserting the MAC address
 * in the Transmit Flow Control (PAUSE) Frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_OFST        0x44
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_OFST))

/*
 * Register : gmacgrp_mac_address1_high
 * 
 * <b> Register 18 (MAC Address1 High Register) </b>
 * 
 * The MAC Address1 High register holds the upper 16 bits of the second 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address1 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this Address Low Register should be performed after at
 * least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address1 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the second 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address1 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address1 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address1 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address1 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address1 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address1 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address1[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address1[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the second MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_OFST        0x48
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address1_low
 * 
 * <b> Register 19 (MAC Address1 Low Register) </b>
 * 
 * The MAC Address1 Low register holds the lower 32 bits of the second 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address1 [31:0]
 * 
 * This field contains the lower 32 bits of the second 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_OFST        0x4c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_OFST))

/*
 * Register : gmacgrp_mac_address2_high
 * 
 * <b> Register 20 (MAC Address2 High Register) </b>
 * 
 * The MAC Address2 High register holds the upper 16 bits of the third 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address2 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address2 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address2 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the third 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address2 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address2 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address2 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address2 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address2 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address2 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address2[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address2[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the third MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_OFST        0x50
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address2_low
 * 
 * <b> Register 21 (MAC Address2 Low Register) </b>
 * 
 * The MAC Address2 Low register holds the lower 32 bits of the third 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address2 [31:0]
 * 
 * This field contains the lower 32 bits of the third 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_OFST        0x54
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_OFST))

/*
 * Register : gmacgrp_mac_address3_high
 * 
 * <b> Register 22 (MAC Address3 High Register) </b>
 * 
 * The MAC Address3 High register holds the upper 16 bits of the fourth 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address3 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address3 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address3 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the fourth 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address3 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address3 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address3 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address3 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address3 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address3 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address3[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address3[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the fourth MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_OFST        0x58
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address3_low
 * 
 * <b> Register 23 (MAC Address3 Low Register) </b>
 * 
 * The MAC Address3 Low register holds the lower 32 bits of the fourth 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address3 [31:0]
 * 
 * This field contains the lower 32 bits of the fourth 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_OFST        0x5c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_OFST))

/*
 * Register : gmacgrp_mac_address4_high
 * 
 * <b> Register 24 (MAC Address4 High Register) </b>
 * 
 * The MAC Address4 High register holds the upper 16 bits of the fifth 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address4 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address4 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address4 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the fifth 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address4 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address4 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address4 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address4 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address4 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address4 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address4[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address4[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the fifth MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_OFST        0x60
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address4_low
 * 
 * <b> Register 25 (MAC Address4 Low Register) </b>
 * 
 * The MAC Address4 Low register holds the lower 32 bits of the fifth 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address4 [31:0]
 * 
 * This field contains the lower 32 bits of the fifth 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_OFST        0x64
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_OFST))

/*
 * Register : gmacgrp_mac_address5_high
 * 
 * <b> Register 26 (MAC Address5 High Register) </b>
 * 
 * The MAC Address5 High register holds the upper 16 bits of the sixth 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address5 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address5 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address5 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the sixth 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address5 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address5 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address5 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address5 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address5 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address5 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address5[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address5[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the sixth MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_OFST        0x68
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address5_low
 * 
 * <b> Register 27 (MAC Address5 Low Register) </b>
 * 
 * The MAC Address5 Low register holds the lower 32 bits of the sixth 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address5 [31:0]
 * 
 * This field contains the lower 32 bits of the sixth 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_OFST        0x6c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_OFST))

/*
 * Register : gmacgrp_mac_address6_high
 * 
 * <b> Register 28 (MAC Address6 High Register) </b>
 * 
 * The MAC Address6 High register holds the upper 16 bits of the seventh 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address6 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address6 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address6 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the seventh 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address6 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address6 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address6 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address6 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address6 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address6 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address6[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address6[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the seventh MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_OFST        0x70
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address6_low
 * 
 * <b> Register 29 (MAC Address6 Low Register) </b>
 * 
 * The MAC Address6 Low register holds the lower 32 bits of the seventh 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address6 [31:0]
 * 
 * This field contains the lower 32 bits of the seventh 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_OFST        0x74
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_OFST))

/*
 * Register : gmacgrp_mac_address7_high
 * 
 * <b> Register 30 (MAC Address7 High Register) </b>
 * 
 * The MAC Address7 High register holds the upper 16 bits of the eighth 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address7 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address7 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address7 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the eighth 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address7 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address7 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address7 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address7 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address7 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address7 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address7[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address7[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the eighth MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_OFST        0x78
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address7_low
 * 
 * <b> Register 31 (MAC Address7 Low Register) </b>
 * 
 * The MAC Address7 Low register holds the lower 32 bits of the eighth 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address7 [31:0]
 * 
 * This field contains the lower 32 bits of the eighth 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_OFST        0x7c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_OFST))

/*
 * Register : gmacgrp_mac_address8_high
 * 
 * <b> Register 32 (MAC Address8 High Register) </b>
 * 
 * The MAC Address8 High register holds the upper 16 bits of the nineth 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address8 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address8 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address8 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the nineth 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address8 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address8 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address8 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address8 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address8 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address8 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address8[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address8[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the nineth MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_OFST        0x80
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address8_low
 * 
 * <b> Register 33 (MAC Address8 Low Register) </b>
 * 
 * The MAC Address8 Low register holds the lower 32 bits of the nineth 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address8 [31:0]
 * 
 * This field contains the lower 32 bits of the nineth 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_OFST        0x84
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_OFST))

/*
 * Register : gmacgrp_mac_address9_high
 * 
 * <b> Register 34 (MAC Address9 High Register) </b>
 * 
 * The MAC Address9 High register holds the upper 16 bits of the tenth 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address9 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address9 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                      
 * :--------|:-------|:-------|:--------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                
 *  [25]    | RW     | 0x0    | Mask Byte Control                                
 *  [26]    | RW     | 0x0    | Mask Byte Control                                
 *  [27]    | RW     | 0x0    | Mask Byte Control                                
 *  [28]    | RW     | 0x0    | Mask Byte Control                                
 *  [29]    | RW     | 0x0    | Mask Byte Control                                
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address9 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the tenth 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address9 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address9 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address9 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address9 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address9 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address9 high and low registers. Each
 * bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_E_UNMASKED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_E_MASKED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address9[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address9[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the tenth MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_OFST        0x88
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address9_low
 * 
 * <b> Register 35 (MAC Address9 Low Register) </b>
 * 
 * The MAC Address9 Low register holds the lower 32 bits of the tenth 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                             
 * :-------|:-------|:-----------|:-----------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address9 [31:0]
 * 
 * This field contains the lower 32 bits of the tenth 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_OFST        0x8c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_OFST))

/*
 * Register : gmacgrp_mac_address10_high
 * 
 * <b> Register 36 (MAC Address10 High Register) </b>
 * 
 * The MAC Address10 High register holds the upper 16 bits of the 11th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address10 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address10 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address10 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 11th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address10 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address10 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address10 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address10 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address10 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address10 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address10[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address10[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 11th MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_OFST        0x90
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address10_low
 * 
 * <b> Register 37 (MAC Address10 Low Register) </b>
 * 
 * The MAC Address10 Low register holds the lower 32 bits of the 11th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address10 [31:0]
 * 
 * This field contains the lower 32 bits of the 11th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_OFST        0x94
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_OFST))

/*
 * Register : gmacgrp_mac_address11_high
 * 
 * <b> Register 38 (MAC Address11 High Register) </b>
 * 
 * The MAC Address11 High register holds the upper 16 bits of the 12th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address11 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address11 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address11 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 12th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address11 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address11 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address11 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address11 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address11 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address11 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address11[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address11[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the twelfth MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_OFST        0x98
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address11_low
 * 
 * <b> Register 39 (MAC Address1 Low Register) </b>
 * 
 * The MAC Address11 Low register holds the lower 32 bits of the 12th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address11 [31:0]
 * 
 * This field contains the lower 32 bits of the 12th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_OFST        0x9c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_OFST))

/*
 * Register : gmacgrp_mac_address12_high
 * 
 * <b> Register 40 (MAC Address12 High Register ) </b>
 * 
 * The MAC Address12 High register holds the upper 16 bits of the 13th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address13 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address12 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address12 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 13th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address12 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address12 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address12 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address12 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address12 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address12 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address12[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address12[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 13th MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_OFST        0xa0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address12_low
 * 
 * <b> Register 41 (MAC Address12 Low Register) </b>
 * 
 * The MAC Address12 Low register holds the lower 32 bits of the 13th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address12 [31:0]
 * 
 * This field contains the lower 32 bits of the 13th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_OFST        0xa4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_OFST))

/*
 * Register : gmacgrp_mac_address13_high
 * 
 * <b> Register 42 (MAC Address13 High Register) </b>
 * 
 * The MAC Address13 High register holds the upper 16 bits of the 14th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address13 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address13 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address13 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 14th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address13 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address13 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address13 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address13 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address13 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address13 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address13[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address13[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 14th MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_OFST        0xa8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address13_low
 * 
 * <b> Register 43 (MAC Address13 Low Register) </b>
 * 
 * The MAC Address13 Low register holds the lower 32 bits of the 14th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address13 [31:0]
 * 
 * This field contains the lower 32 bits of the 14th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_OFST        0xac
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_OFST))

/*
 * Register : gmacgrp_mac_address14_high
 * 
 * <b> Register 44 (MAC Address14 High Register) </b>
 * 
 * The MAC Address14 High register holds the upper 16 bits of the 15th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address15 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address14 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address14 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 15th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address14 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address14 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address14 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address14 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address14 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address14 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address14[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address14[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 15th MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_OFST        0xb0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address14_low
 * 
 * <b> Register 45 (MAC Address14 Low Register) </b>
 * 
 * The MAC Address14 Low register holds the lower 32 bits of the 15th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address14 [31:0]
 * 
 * This field contains the lower 32 bits of the 15th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_OFST        0xb4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_OFST))

/*
 * Register : gmacgrp_mac_address15_high
 * 
 * <b> Register 46 (MAC Address15 High Register) </b>
 * 
 * The MAC Address15 High register holds the upper 16 bits of the 16th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then the synchronization is triggered only when
 * Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC
 * Address15 Low Register are written. For proper synchronization updates, the
 * consecutive writes to this MAC Address15 Low Register should be performed after
 * at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address15 [47:32] This field contains the upper 16 bits (47:32) of the 16th
 * 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address15 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address15 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address15 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address15 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address15 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address15 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address15[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address15[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 16th MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_OFST        0xb8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address15_low
 * 
 * <b> Register 47 (MAC Address15 Low Register) </b>
 * 
 * The MAC Address15 Low register holds the lower 32 bits of the 16th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address15 [31:0]
 * 
 * This field contains the lower 32 bits of the 16th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_OFST        0xbc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_OFST))

/*
 * Register : Register 54 (SGMII/RGMII/SMII Status Register) - gmacgrp_sgmii_rgmii_smii_control_status
 * 
 * The SGMII/RGMII/SMII Status register indicates the status signals received by
 * the RGMII interface (selected at reset) from the PHY.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description
 * :-------|:-------|:------|:------------
 *  [0]    | R      | 0x0   | Link Mode  
 *  [2:1]  | R      | 0x0   | Link Speed 
 *  [3]    | R      | 0x0   | Link Status
 *  [31:4] | ???    | 0x0   | *UNDEFINED*
 * 
 */
/*
 * Field : Link Mode - lnkmod
 * 
 * This bit indicates the current mode of operation of the link
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                              | Value | Description
 * :------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_E_HALFDUP | 0x0   |            
 *  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_E_FULLDUP | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD
 * 
 */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_E_HALFDUP   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD
 * 
 */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_E_FULLDUP   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD register field value. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD register field value. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD field value from a register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKMOD_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : Link Speed - lnkspeed
 * 
 * This bit indicates the current speed of the link. Bit 2 is reserved when the MAC
 * is configured for the SMII PHY interface.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_E_SPEED2POINT5MHZ | 0x0   |            
 *  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_E_SPEED25MHZ      | 0x1   |            
 *  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_E_SPEED125MHZ     | 0x2   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED
 * 
 */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_E_SPEED2POINT5MHZ 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED
 * 
 */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_E_SPEED25MHZ      0x1
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED
 * 
 */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_E_SPEED125MHZ     0x2

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED register field value. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_SET_MSK    0x00000006
/* The mask used to clear the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED register field value. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_CLR_MSK    0xfffffff9
/* The reset value of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED field value from a register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_GET(value) (((value) & 0x00000006) >> 1)
/* Produces a ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSPEED_SET(value) (((value) << 1) & 0x00000006)

/*
 * Field : Link Status - lnksts
 * 
 * This bit indicates whether the link is up (1'b1) or down (1'b0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_E_LINKDOWN | 0x0   |            
 *  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_E_LINKUP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS
 * 
 */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_E_LINKDOWN  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS
 * 
 */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_E_LINKUP    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS register field value. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS register field value. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS register field. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS field value from a register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_LNKSTS_SET(value) (((value) << 3) & 0x00000008)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS.
 */
struct ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_s
{
    const volatile uint32_t  lnkmod   :  1;  /* Link Mode */
    const volatile uint32_t  lnkspeed :  2;  /* Link Speed */
    const volatile uint32_t  lnksts   :  1;  /* Link Status */
    uint32_t                          : 28;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS. */
typedef struct ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_s  ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_OFST        0xd8
/* The address of the ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS register. */
#define ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_OFST))

/*
 * Register : gmacgrp_wdog_timeout
 * 
 * <b> Register 55 (Watchdog Timeout Register) </b>
 * 
 * This register controls the watchdog timeout for received frames.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                 
 * :--------|:-------|:------|:---------------------------------------------
 *  [13:0]  | RW     | 0x0   | ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO           
 *  [15:14] | R      | 0x0   | ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE           
 *  [31:17] | R      | 0x0   | ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17
 * 
 */
/*
 * Field : wto
 * 
 * Watchdog Timeout
 * 
 * When Bit 16 (PWE) is set and Bit 23 (WD) of Register 0 (MAC Configuration
 * Register) is reset, this field is used as watchdog timeout for a received frame.
 * If the length of a received frame exceeds the value of this field, such frame is
 * terminated and declared as an error frame.
 * 
 * Note: When Bit 16 (PWE) is set, the value in this field should be more than
 * 1,522 (0x05F2). Otherwise, the IEEE Std 802.3-specified valid tagged frames are
 * declared as error frames and are dropped.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_WIDTH      14
/* The mask used to set the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_SET_MSK    0x00003fff
/* The mask used to clear the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_CLR_MSK    0xffffc000
/* The reset value of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO field value from a register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_GET(value) (((value) & 0x00003fff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO_SET(value) (((value) << 0) & 0x00003fff)

/*
 * Field : reserved_15_14
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_SET_MSK    0x0000c000
/* The mask used to clear the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_CLR_MSK    0xffff3fff
/* The reset value of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 field value from a register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_GET(value) (((value) & 0x0000c000) >> 14)
/* Produces a ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14_SET(value) (((value) << 14) & 0x0000c000)

/*
 * Field : pwe
 * 
 * Programmable Watchdog Enable
 * 
 * When this bit is set and Bit 23 (WD) of Register 0 (MAC Configuration Register)
 * is reset, the WTO field (Bits[13:0]) is used as watchdog timeout for a received
 * frame.
 * 
 * When this bit is cleared, the watchdog timeout for a received frame is
 * controlled by the setting of Bit 23 (WD) and Bit 20 (JE) in Register 0 (MAC
 * Configuration Register).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE field value from a register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : reserved_31_17
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_SET_MSK    0xfffe0000
/* The mask used to clear the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 register field value. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_CLR_MSK    0x0001ffff
/* The reset value of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 register field. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 field value from a register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_GET(value) (((value) & 0xfffe0000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17_SET(value) (((value) << 17) & 0xfffe0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_WDOG_TIMEOUT.
 */
struct ALT_EMAC_GMACGRP_WDOG_TIMEOUT_s
{
    volatile uint32_t        wto            : 14;  /* ALT_EMAC_GMACGRP_WDOG_TIMEOUT_WTO */
    const volatile uint32_t  reserved_15_14 :  2;  /* ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_15_14 */
    volatile uint32_t        pwe            :  1;  /* ALT_EMAC_GMACGRP_WDOG_TIMEOUT_PWE */
    const volatile uint32_t  reserved_31_17 : 15;  /* ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESERVED_31_17 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_WDOG_TIMEOUT. */
typedef struct ALT_EMAC_GMACGRP_WDOG_TIMEOUT_s  ALT_EMAC_GMACGRP_WDOG_TIMEOUT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_OFST        0xdc
/* The address of the ALT_EMAC_GMACGRP_WDOG_TIMEOUT register. */
#define ALT_EMAC_GMACGRP_WDOG_TIMEOUT_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_WDOG_TIMEOUT_OFST))

/*
 * Register : gmacgrp_genpio
 * 
 * <b> Register 56 (General Purpose IO Register) </b>
 * 
 * This register provides the control to drive up to 4 bits of output ports (GPO)
 * and the status of up to 4 input
 * 
 * ports (GPIS). It also provides the control to generate interrupts on events
 * occurring on the gpi_i pin.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_GMACGRP_GENPIO_GPIS         
 *  [7:1]   | R      | 0x0   | ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X 
 *  [8]     | RW     | 0x0   | ALT_EMAC_GMACGRP_GENPIO_GPO          
 *  [15:9]  | R      | 0x0   | ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_GENPIO_GPIE         
 *  [23:17] | R      | 0x0   | ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X
 *  [24]    | RW     | 0x0   | ALT_EMAC_GMACGRP_GENPIO_GPIT         
 *  [31:25] | R      | 0x0   | ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X
 * 
 */
/*
 * Field : gpis
 * 
 * General Purpose Input Status
 * 
 * This field gives the status of the signals connected to the gpi_i input ports.
 * This field is of the following types based on the setting of the corresponding
 * GPIT field of this register:
 * 
 * * Latched-low (LL): This field is cleared when the corresponding gpi_i input
 *   becomes low. This field remains low until the host reads this field. After
 *   this, this field reflects the current value of the gpi_i input.
 * 
 * * Latched-high (LH): This field is set when the corresponding gpi_i input
 *   becomes high. This field remains high until the host reads this field. After
 *   this, this field reflects the current value of the gpi_i input.
 * 
 * <br>
 * 
 * The number of bits available in this field depend on the GP Input Signal Width
 * option. Other bits are not used (reserved and always reset).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPIS register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPIS register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_GPIS register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_GPIS register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_GPIS register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_GPIS register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_GPIS field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_GPIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : reserved_7_x
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_WIDTH      7
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_SET_MSK    0x000000fe
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_CLR_MSK    0xffffff01
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_GET(value) (((value) & 0x000000fe) >> 1)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X_SET(value) (((value) << 1) & 0x000000fe)

/*
 * Field : gpo
 * 
 * General Purpose Output
 * 
 * When this bit is set, it directly drives the gpo_o output ports. When this bit
 * is reset, it does not directly drive the gpo_o output ports.
 * 
 * The number of bits available in this field depend on the GP Output Signal Width
 * option. Other bits are not used (reserved and always reset).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPO register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPO register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_GPO register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_GPO register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_GPO register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_GPO register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_GPO field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_GPO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPO_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : reserved_15_x
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_WIDTH      7
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_SET_MSK    0x0000fe00
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_CLR_MSK    0xffff01ff
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_GET(value) (((value) & 0x0000fe00) >> 9)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X_SET(value) (((value) << 9) & 0x0000fe00)

/*
 * Field : gpie
 * 
 * GPI Interrupt Enable
 * 
 * When this bit is set and the programmed event (LL or LH) occurs on the
 * corresponding GPIS bit, Bit 11 (GPIIS) of Register 14 (Interrupt Status
 * Register) is set. Accordingly, the interrupt is generated on the mci_intr_o or
 * sbd_intr_o. The GPIIS bit is cleared when the host reads the Bits[7:0] of this
 * register.
 * 
 * When reset, Bit 11 (GPIIS) of Register 14 (Interrupt Status Register) is not set
 * when any event occurs on the corresponding GPIS bits.
 * 
 * The number of bits available in this field depend on the GP Input Signal Width
 * option. Other bits are not used (reserved and always reset).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPIE register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPIE register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_GPIE register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_GPIE register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_GPIE register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_GPIE register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_GPIE field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_GPIE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIE_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : reserved_23_x
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_WIDTH      7
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_SET_MSK    0x00fe0000
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_CLR_MSK    0xff01ffff
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_GET(value) (((value) & 0x00fe0000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X_SET(value) (((value) << 17) & 0x00fe0000)

/*
 * Field : gpit
 * 
 * GPI Type
 * 
 * When set, this bit indicates that the corresponding GPIS is of latched-low (LL)
 * type. When reset, this bit indicates that the corresponding GPIS is of latched-
 * high (LH) type.
 * 
 * The number of bits available in this field depend on the GP Input Signal Width
 * option. Other bits are not used (reserved and always reset).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPIT register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_GPIT register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_GPIT register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_GPIT register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_GPIT register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_GPIT register field. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_GPIT field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_GPIT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_GPIT_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : reserved_31_x
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_WIDTH      7
/* The mask used to set the ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_SET_MSK    0xfe000000
/* The mask used to clear the ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X register field value. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_CLR_MSK    0x01ffffff
/* The reset value of the ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X register field. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X field value from a register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_GET(value) (((value) & 0xfe000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X_SET(value) (((value) << 25) & 0xfe000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_GENPIO.
 */
struct ALT_EMAC_GMACGRP_GENPIO_s
{
    const volatile uint32_t  gpis          :  1;  /* ALT_EMAC_GMACGRP_GENPIO_GPIS */
    const volatile uint32_t  reserved_7_x  :  7;  /* ALT_EMAC_GMACGRP_GENPIO_RESERVED_7_X */
    volatile uint32_t        gpo           :  1;  /* ALT_EMAC_GMACGRP_GENPIO_GPO */
    const volatile uint32_t  reserved_15_x :  7;  /* ALT_EMAC_GMACGRP_GENPIO_RESERVED_15_X */
    volatile uint32_t        gpie          :  1;  /* ALT_EMAC_GMACGRP_GENPIO_GPIE */
    const volatile uint32_t  reserved_23_x :  7;  /* ALT_EMAC_GMACGRP_GENPIO_RESERVED_23_X */
    volatile uint32_t        gpit          :  1;  /* ALT_EMAC_GMACGRP_GENPIO_GPIT */
    const volatile uint32_t  reserved_31_x :  7;  /* ALT_EMAC_GMACGRP_GENPIO_RESERVED_31_X */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_GENPIO. */
typedef struct ALT_EMAC_GMACGRP_GENPIO_s  ALT_EMAC_GMACGRP_GENPIO_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_GENPIO register. */
#define ALT_EMAC_GMACGRP_GENPIO_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_GENPIO register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_GENPIO_OFST        0xe0
/* The address of the ALT_EMAC_GMACGRP_GENPIO register. */
#define ALT_EMAC_GMACGRP_GENPIO_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_GENPIO_OFST))

/*
 * Register : gmacgrp_mmc_control
 * 
 * <b> Register 64 (MMC Control Register) </b>
 * 
 * The MMC Control register establishes the operating mode of the management
 * counters.
 * 
 * Note:
 * 
 * The bit 0 (Counters Reset) has higher priority than bit 4 (Counter Preset).
 * Therefore, when the Software tries to set both bits in the same write cycle, all
 * counters are cleared and the bit 4 is not set.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                               
 * :-------|:-------|:------|:-------------------------------------------
 *  [0]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST       
 *  [1]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO    
 *  [2]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD      
 *  [3]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ     
 *  [4]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST      
 *  [5]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL   
 *  [7:6]  | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 
 *  [8]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC        
 *  [31:9] | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9
 * 
 */
/*
 * Field : cntrst
 * 
 * Counters Reset
 * 
 * When this bit is set, all counters are reset. This bit is cleared automatically
 * after one clock cycle.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : cntstopro
 * 
 * Counters Stop Rollover
 * 
 * When this bit is set, after reaching maximum value, the counter does not roll
 * over to zero.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : rstonrd
 * 
 * Reset on Read
 * 
 * When this bit is set, the MMC counters are reset to zero after Read (self-
 * clearing after reset). The counters are cleared when the least significant byte
 * lane (bits[7:0]) is read.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : cntfreez
 * 
 * MMC Counter Freeze
 * 
 * When this bit is set, it freezes all MMC counters to their current value. Until
 * this bit is reset to 0, no MMC counter is updated because of any transmitted or
 * received frame. If any MMC counter is read with the Reset on Read bit set, then
 * that counter is also cleared in this mode.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : cntprst
 * 
 * Counters Preset
 * 
 * When this bit is set, all counters are initialized or preset to almost full or
 * almost half according to bit 5. This bit is cleared automatically after 1 clock
 * cycle. This bit, along with bit 5, is useful for debugging and testing the
 * assertion of interrupts because of MMC counter becoming half-full or full.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : cntprstlvl
 * 
 * Full-Half Preset
 * 
 * When low and bit 4 is set, all MMC counters get preset to almost-half value. All
 * octet counters get preset to 0x7FFF_F800 (half - 2KBytes) and all frame-counters
 * gets preset to 0x7FFF_FFF0 (half - 16).
 * 
 * When this bit is high and bit 4 is set, all MMC counters get preset to almost-
 * full value. All octet counters get preset to 0xFFFF_F800 (full - 2KBytes) and
 * all frame-counters gets preset to 0xFFFF_FFF0 (full - 16).
 * 
 * For 16-bit counters, the almost-half preset values are 0x7800 and 0x7FF0 for the
 * respective octet and frame counters. Similarly, the almost-full preset values
 * for the 16-bit counters are 0xF800 and 0xFFF0.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_E_ALMOSTHALF | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_E_ALMOSTFULL | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_E_ALMOSTHALF    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_E_ALMOSTFULL    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : reserved_7_6
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_SET_MSK    0x000000c0
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_CLR_MSK    0xffffff3f
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_GET(value) (((value) & 0x000000c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6_SET(value) (((value) << 6) & 0x000000c0)

/*
 * Field : ucdbc
 * 
 * Update MMC Counters for Dropped Broadcast Frames
 * 
 * When set, this bit enables MAC to update all the related MMC Counters for
 * Broadcast frames dropped due to setting of DBF bit (Disable Broadcast Frames) of
 * MAC Filter Register at offset 0x0004.
 * 
 * When reset, MMC Counters are not updated for dropped Broadcast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : reserved_31_9
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_WIDTH      23
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_SET_MSK    0xfffffe00
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 register field value. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_CLR_MSK    0x000001ff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 register field. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_GET(value) (((value) & 0xfffffe00) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9_SET(value) (((value) << 9) & 0xfffffe00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MMC_CONTROL.
 */
struct ALT_EMAC_GMACGRP_MMC_CONTROL_s
{
    volatile uint32_t        cntrst        :  1;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_CNTRST */
    volatile uint32_t        cntstopro     :  1;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_CNTSTOPRO */
    volatile uint32_t        rstonrd       :  1;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_RSTONRD */
    volatile uint32_t        cntfreez      :  1;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_CNTFREEZ */
    volatile uint32_t        cntprst       :  1;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRST */
    volatile uint32_t        cntprstlvl    :  1;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_CNTPRSTLVL */
    const volatile uint32_t  reserved_7_6  :  2;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_7_6 */
    volatile uint32_t        ucdbc         :  1;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_UCDBC */
    const volatile uint32_t  reserved_31_9 : 23;  /* ALT_EMAC_GMACGRP_MMC_CONTROL_RESERVED_31_9 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MMC_CONTROL. */
typedef struct ALT_EMAC_GMACGRP_MMC_CONTROL_s  ALT_EMAC_GMACGRP_MMC_CONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MMC_CONTROL register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MMC_CONTROL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_OFST        0x100
/* The address of the ALT_EMAC_GMACGRP_MMC_CONTROL register. */
#define ALT_EMAC_GMACGRP_MMC_CONTROL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MMC_CONTROL_OFST))

/*
 * Register : gmacgrp_mmc_receive_interrupt
 * 
 * <b> Register 65 (MMC Receive Interrupt Register) </b>
 * 
 * The MMC Receive Interrupt register maintains the interrupts that are generated
 * when the following happens:
 * 
 * * Receive statistic counters reach half of their maximum values (0x8000_0000 for
 *   32-bit counter and 0x8000 for 16-bit counter).
 * 
 * * Receive statistic counters cross their maximum values (0xFFFF_FFFF for 32-bit
 *   counter and 0xFFFF for 16-bit counter).
 * 
 * When the Counter Stop Rollover is set, then interrupts are set but the counter
 * remains at all-ones. The MMC Receive Interrupt register is a 32-bit wide
 * register. An interrupt bit is cleared when the respective MMC counter that
 * caused the interrupt is read. The least significant byte lane (Bits[7:0]) of the
 * respective counter must be read in order to clear the interrupt bit.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                              
 * :--------|:-------|:------|:----------------------------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS         
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS         
 *  [2]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS          
 *  [3]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS          
 *  [4]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS          
 *  [5]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS        
 *  [6]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS       
 *  [7]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS         
 *  [8]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS        
 *  [9]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS       
 *  [10]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS       
 *  [11]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS      
 *  [12]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS  
 *  [13]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS 
 *  [14]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS 
 *  [15]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS
 *  [16]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS
 *  [17]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS          
 *  [18]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS        
 *  [19]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS       
 *  [20]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS         
 *  [21]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS          
 *  [22]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS       
 *  [23]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS         
 *  [24]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS       
 *  [25]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS         
 *  [31:26] | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26    
 * 
 */
/*
 * Field : rxgbfrmis
 * 
 * MMC Receive Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the rxframecount_bg counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_E_ALMOSTHALF | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_E_ALMOSTFULL | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_E_ALMOSTHALF   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_E_ALMOSTFULL   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : rxgboctis
 * 
 * MMC Receive Good Bad Octet Counter Interrupt Status
 * 
 * This bit is set when the rxoctetcount_bg counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : rxgoctis
 * 
 * MMC Receive Good Octet Counter Interrupt Status.
 * 
 * This bit is set when the rxoctetcount_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                       | Value | Description
 * :-----------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : rxbcgfis
 * 
 * MMC Receive Broadcast Good Frame Counter Interrupt Status.
 * 
 * This bit is set when the rxbroadcastframes_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : rxmcgfis
 * 
 * MMC Receive Multicast Good Frame Counter Interrupt Status
 * 
 * This bit is set when the rxmulticastframes_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                       | Value | Description
 * :-----------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : rxcrcerfis
 * 
 * MMC Receive CRC Error Frame Counter Interrupt Status
 * 
 * This bit is set when the rxcrcerror counter reaches half of the maximum value or
 * the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : rxalgnerfis
 * 
 * MMC Receive Alignment Error Frame Counter Interrupt Status
 * 
 * This bit is set when the rxalignmenterror counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : rxruntfis
 * 
 * MMC Receive Runt Frame Counter Interrupt Status
 * 
 * This bit is set when the rxrunterror counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : rxjaberfis
 * 
 * MMC Receive Jabber Error Frame Counter Interrupt Status
 * 
 * This bit is set when the rxjabbererror counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : rxusizegfis
 * 
 * MMC Receive Undersize Good Frame Counter Interrupt Status
 * 
 * This bit is set when the rxundersize_g counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : rxosizegfis
 * 
 * MMC Receive Oversize Good Frame Counter Interrupt Status
 * 
 * This bit is set when the rxoversize_g counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : rx64octgbfis
 * 
 * MMC Receive 64 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the rx64octets_gb counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                           | Value | Description
 * :---------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : rx65t127octgbfis
 * 
 * MMC Receive 65 to 127 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This is set when the rx65to127octets_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : rx128t255octgbfis
 * 
 * MMC Receive 128 to 255 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the rx128to255octets_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : rx256t511octgbfis
 * 
 * MMC Receive 256 to 511 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the rx256to511octets_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_MSB        14
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : rx512t1023octgbfis
 * 
 * MMC Receive 512 to 1023 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the rx512to1023octets_gb counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : rx1024tmaxoctgbfis
 * 
 * MMC Receive 1024 to Maximum Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the rx1024tomaxoctets_gb counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : rxucgfis
 * 
 * MMC Receive Unicast Good Frame Counter Interrupt Status
 * 
 * This bit is set when the rxunicastframes_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                       | Value | Description
 * :-----------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : rxlenerfis
 * 
 * MMC Receive Length Error Frame Counter Interrupt Status
 * 
 * This bit is set when the rxlengtherror counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : rxorangefis
 * 
 * MMC Receive Out Of Range Error Frame Counter Interrupt Status
 * 
 * This bit is set when the rxoutofrangetype counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : rxpausfis
 * 
 * MMC Receive Pause Frame Counter Interrupt Status
 * 
 * This bit is set when the rxpauseframe counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : rxfovfis
 * 
 * MMC Receive FIFO Overflow Frame Counter Interrupt Status
 * 
 * This bit is set when the rxfifooverflow counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                       | Value | Description
 * :-----------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_E_INACTIVE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_E_ACTIVE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : rxvlangbfis
 * 
 * MMC Receive VLAN Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the rxvlanframes_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : rxwdogfis
 * 
 * MMC Receive Watchdog Error Frame Counter Interrupt Status
 * 
 * This bit is set when the rxwatchdogerror counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : rxrcverrfis
 * 
 * MMC Receive Error Frame Counter Interrupt Status
 * 
 * This bit is set when the rxrcverror counter reaches half of the maximum value or
 * the maximum value.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : rxctrlfis
 * 
 * MMC Receive Control Frame Counter Interrupt Status
 * 
 * This bit is set when the rxctrlframes_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : reserved_31_26
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_SET_MSK    0xfc000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_CLR_MSK    0x03ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_GET(value) (((value) & 0xfc000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26_SET(value) (((value) << 26) & 0xfc000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT.
 */
struct ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_s
{
    const volatile uint32_t  rxgbfrmis          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBFRMIS */
    const volatile uint32_t  rxgboctis          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGBOCTIS */
    const volatile uint32_t  rxgoctis           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXGOCTIS */
    const volatile uint32_t  rxbcgfis           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXBCGFIS */
    const volatile uint32_t  rxmcgfis           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXMCGFIS */
    const volatile uint32_t  rxcrcerfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCRCERFIS */
    const volatile uint32_t  rxalgnerfis        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXALGNERFIS */
    const volatile uint32_t  rxruntfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRUNTFIS */
    const volatile uint32_t  rxjaberfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXJABERFIS */
    const volatile uint32_t  rxusizegfis        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS */
    const volatile uint32_t  rxosizegfis        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS */
    const volatile uint32_t  rx64octgbfis       :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS */
    const volatile uint32_t  rx65t127octgbfis   :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS */
    const volatile uint32_t  rx128t255octgbfis  :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS */
    const volatile uint32_t  rx256t511octgbfis  :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS */
    const volatile uint32_t  rx512t1023octgbfis :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS */
    const volatile uint32_t  rx1024tmaxoctgbfis :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS */
    const volatile uint32_t  rxucgfis           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXUCGFIS */
    const volatile uint32_t  rxlenerfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXLENERFIS */
    const volatile uint32_t  rxorangefis        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXORANGEFIS */
    const volatile uint32_t  rxpausfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXPAUSFIS */
    const volatile uint32_t  rxfovfis           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXFOVFIS */
    const volatile uint32_t  rxvlangbfis        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS */
    const volatile uint32_t  rxwdogfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXWDOGFIS */
    const volatile uint32_t  rxrcverrfis        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS */
    const volatile uint32_t  rxctrlfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RXCTRLFIS */
    const volatile uint32_t  reserved_31_26     :  6;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESERVED_31_26 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT. */
typedef struct ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_s  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_OFST        0x104
/* The address of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_OFST))

/*
 * Register : gmacgrp_mmc_transmit_interrupt
 * 
 * <b> Register 66 (MMC Transmit Interrupt Register) </b>
 * 
 * The MMC Transmit Interrupt register maintains the interrupts generated when
 * transmit statistic counters reach half of their maximum values (0x8000_0000 for
 * 32-bit counter and 0x8000 for 16-bit counter), and the maximum values
 * (0xFFFF_FFFF for 32-bit counter and 0xFFFF for 16-bit counter). When Counter
 * Stop Rollover is set, then interrupts are set but the counter remains at all-
 * ones. The MMC Transmit Interrupt register is a 32-bit wide register. An
 * interrupt bit is cleared when the respective MMC counter that caused the
 * interrupt is read. The least significant byte lane (Bits[7:0]) of the respective
 * counter must be read in order to clear the interrupt bit.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                               
 * :--------|:-------|:------|:-----------------------------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS         
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS         
 *  [2]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS          
 *  [3]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS          
 *  [4]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS      
 *  [5]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS  
 *  [6]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS 
 *  [7]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS 
 *  [8]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS
 *  [9]     | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS
 *  [10]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS         
 *  [11]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS         
 *  [12]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS         
 *  [13]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS      
 *  [14]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS        
 *  [15]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS        
 *  [16]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS          
 *  [17]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS       
 *  [18]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS        
 *  [19]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS        
 *  [20]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS          
 *  [21]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS          
 *  [22]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS        
 *  [23]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS         
 *  [24]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS        
 *  [25]    | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS       
 *  [31:26] | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26    
 * 
 */
/*
 * Field : txgboctis
 * 
 * MMC Transmit Good Bad Octet Counter Interrupt Status
 * 
 * This bit is set when the txoctetcount_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : txgbfrmis
 * 
 * MMC Transmit Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the txframecount_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : txbcgfis
 * 
 * MMC Transmit Broadcast Good Frame Counter Interrupt Status
 * 
 * This bit is set when the txbroadcastframes_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : txmcgfis
 * 
 * MMC Transmit Multicast Good Frame Counter Interrupt Status
 * 
 * This bit is set when the txmulticastframes_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : tx64octgbfis
 * 
 * MMC Transmit 64 Octet Good Bad Frame Counter Interrupt Status.
 * 
 * This bit is set when the tx64octets_gb counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                            | Value | Description
 * :----------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : tx65t127octgbfis
 * 
 * MMC Transmit 65 to 127 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the tx65to127octets_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_E_INACTIVE 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_E_ACTIVE   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : tx128t255octgbfis
 * 
 * MMC Transmit 128 to 255 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the tx128to255octets_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : tx256t511octgbfis
 * 
 * MMC Transmit 256 to 511 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the tx256to511octets_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : tx512t1023octgbfis
 * 
 * MMC Transmit 512 to 1023 Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the tx512to1023octets_gb counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : tx1024tmaxoctgbfis
 * 
 * MMC Transmit 1024 to Maximum Octet Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the tx1024tomaxoctets_gb counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_E_INACTIVE   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_E_ACTIVE     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : txucgbfis
 * 
 * MMC Transmit Unicast Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the txunicastframes_gb counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : txmcgbfis
 * 
 * MMC Transmit Multicast Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the txmulticastframes_gb counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_E_INACTIVE | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_E_ACTIVE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_E_INACTIVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_E_ACTIVE      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : txbcgbfis
 * 
 * MMC Transmit Broadcast Good Bad Frame Counter Interrupt Status
 * 
 * This bit is set when the txbroadcastframes_gb counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : txuflowerfis
 * 
 * MMC Transmit Underflow Error Frame Counter Interrupt Status
 * 
 * This bit is set when the txunderflowerror counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                            | Value | Description
 * :----------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : txscolgfis
 * 
 * MMC Transmit Single Collision Good Frame Counter Interrupt Status
 * 
 * This bit is set when the txsinglecol_g counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_MSB        14
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : txmcolgfis
 * 
 * MMC Transmit Multiple Collision Good Frame Counter Interrupt Status
 * 
 * This bit is set when the txmulticol_g counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : txdeffis
 * 
 * MMC Transmit Deferred Frame Counter Interrupt Status
 * 
 * This bit is set when the txdeferred counter reaches half of the maximum value or
 * the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : txlatcolfis
 * 
 * MMC Transmit Late Collision Frame Counter Interrupt Status
 * 
 * This bit is set when the txlatecol counter reaches half of the maximum value or
 * the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                           | Value | Description
 * :---------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : txexcolfis
 * 
 * MMC Transmit Excessive Collision Frame Counter Interrupt Status
 * 
 * This bit is set when the txexcesscol counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : txcarerfis
 * 
 * MMC Transmit Carrier Error Frame Counter Interrupt Status
 * 
 * This bit is set when the txcarriererror counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : txgoctis
 * 
 * MMC Transmit Good Octet Counter Interrupt Status
 * 
 * This bit is set when the txoctetcount_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : txgfrmis
 * 
 * MMC Transmit Good Frame Counter Interrupt Status
 * 
 * This bit is set when the txframecount_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : txexdeffis
 * 
 * MMC Transmit Excessive Deferral Frame Counter Interrupt Status
 * 
 * This bit is set when the txexcessdef counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : txpausfis
 * 
 * MMC Transmit Pause Frame Counter Interrupt Status
 * 
 * This bit is set when the txpauseframeserror counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : txvlangfis
 * 
 * MMC Transmit VLAN Good Frame Counter Interrupt Status
 * 
 * This bit is set when the txvlanframes_g counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : txosizegfis
 * 
 * MMC Transmit Oversize Good Frame Counter Interrupt Status
 * 
 * This bit is set when the txoversize_g counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : reserved_31_26
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_SET_MSK    0xfc000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_CLR_MSK    0x03ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_GET(value) (((value) & 0xfc000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26_SET(value) (((value) << 26) & 0xfc000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT.
 */
struct ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_s
{
    const volatile uint32_t  txgboctis          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS */
    const volatile uint32_t  txgbfrmis          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS */
    const volatile uint32_t  txbcgfis           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGFIS */
    const volatile uint32_t  txmcgfis           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGFIS */
    const volatile uint32_t  tx64octgbfis       :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS */
    const volatile uint32_t  tx65t127octgbfis   :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS */
    const volatile uint32_t  tx128t255octgbfis  :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS */
    const volatile uint32_t  tx256t511octgbfis  :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS */
    const volatile uint32_t  tx512t1023octgbfis :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS */
    const volatile uint32_t  tx1024tmaxoctgbfis :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS */
    const volatile uint32_t  txucgbfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS */
    const volatile uint32_t  txmcgbfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS */
    const volatile uint32_t  txbcgbfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS */
    const volatile uint32_t  txuflowerfis       :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS */
    const volatile uint32_t  txscolgfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS */
    const volatile uint32_t  txmcolgfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS */
    const volatile uint32_t  txdeffis           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXDEFFIS */
    const volatile uint32_t  txlatcolfis        :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS */
    const volatile uint32_t  txexcolfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS */
    const volatile uint32_t  txcarerfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXCARERFIS */
    const volatile uint32_t  txgoctis           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGOCTIS */
    const volatile uint32_t  txgfrmis           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXGFRMIS */
    const volatile uint32_t  txexdeffis         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS */
    const volatile uint32_t  txpausfis          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS */
    const volatile uint32_t  txvlangfis         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS */
    const volatile uint32_t  txosizegfis        :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS */
    const volatile uint32_t  reserved_31_26     :  6;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESERVED_31_26 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT. */
typedef struct ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_s  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_OFST        0x108
/* The address of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_OFST))

/*
 * Register : gmacgrp_mmc_receive_interrupt_mask
 * 
 * Regsiter 67 (MMC Receive Interrupt Mask Register)
 * 
 * The MMC Receive Interrupt Mask register maintains the masks for the interrupts
 * generated when the receive statistic counters reach half of their maximum value,
 * or maximum value. This register is 32-bits wide.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                                   
 * :--------|:-------|:------|:---------------------------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM         
 *  [1]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM         
 *  [2]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM          
 *  [3]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM          
 *  [4]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM          
 *  [5]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM        
 *  [6]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM       
 *  [7]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM         
 *  [8]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM        
 *  [9]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM       
 *  [10]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM       
 *  [11]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM      
 *  [12]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM  
 *  [13]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM 
 *  [14]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM 
 *  [15]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM
 *  [17]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM          
 *  [18]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM        
 *  [19]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM       
 *  [20]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM         
 *  [21]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM          
 *  [22]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM       
 *  [23]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM         
 *  [24]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM       
 *  [25]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM         
 *  [31:26] | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26    
 * 
 */
/*
 * Field : rxgbfrmim
 * 
 * MMC Receive Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxframecount_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : rxgboctim
 * 
 * MMC Receive Good Bad Octet Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxoctetcount_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : rxgoctim
 * 
 * MMC Receive Good Octet Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxoctetcount_g counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                              | Value | Description
 * :------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : rxbcgfim
 * 
 * MMC Receive Broadcast Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxbroadcastframes_g counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                              | Value | Description
 * :------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : rxmcgfim
 * 
 * MMC Receive Multicast Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxmulticastframes_g counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                              | Value | Description
 * :------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : rxcrcerfim
 * 
 * MMC Receive CRC Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxcrcerror counter reaches half of
 * the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : rxalgnerfim
 * 
 * MMC Receive Alignment Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxalignmenterror counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : rxruntfim
 * 
 * MMC Receive Runt Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxrunterror counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : rxjaberfim
 * 
 * MMC Receive Jabber Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxjabbererror counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : rxusizegfim
 * 
 * MMC Receive Undersize Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxundersize_g counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : rxosizegfim
 * 
 * MMC Receive Oversize Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxoversize_g counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : rx64octgbfim
 * 
 * MMC Receive 64 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rx64octets_gb counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : rx65t127octgbfim
 * 
 * MMC Receive 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rx65to127octets_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                      | Value | Description
 * :--------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : rx128t255octgbfim
 * 
 * MMC Receive 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rx128to255octets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                       | Value | Description
 * :---------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : rx256t511octgbfim
 * 
 * MMC Receive 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rx256to511octets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                       | Value | Description
 * :---------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_MSB        14
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : rx512t1023octgbfim
 * 
 * MMC Receive 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rx512to1023octets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : rx1024tmaxoctgbfim
 * 
 * MMC Receive 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rx1024tomaxoctets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : rxucgfim
 * 
 * MMC Receive Unicast Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxunicastframes_g counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                              | Value | Description
 * :------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : rxlenerfim
 * 
 * MMC Receive Length Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxlengtherror counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : rxorangefim
 * 
 * MMC Receive Out Of Range Error Frame Counter Interrupt  Mask
 * 
 * Setting this bit masks the interrupt when the rxoutofrangetype counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : rxpausfim
 * 
 * MMC Receive Pause Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxpauseframes counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : rxfovfim
 * 
 * MMC Receive FIFO Overflow Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxfifooverflow counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                              | Value | Description
 * :------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : rxvlangbfim
 * 
 * MMC Receive VLAN Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxvlanframes_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : rxwdogfim
 * 
 * MMC Receive Watchdog Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxwatchdog counter reaches half of
 * the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : rxrcverrfim
 * 
 * MMC Receive Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxrcverror error counter reaches
 * half the maximum value, and also when it reaches the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : rxctrlfim
 * 
 * MMC Receive Control Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the rxctrlframes counter reaches half
 * the maximum value, and also when it reaches the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : reserved_31_26
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_SET_MSK    0xfc000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_CLR_MSK    0x03ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_GET(value) (((value) & 0xfc000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26_SET(value) (((value) << 26) & 0xfc000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK.
 */
struct ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_s
{
    volatile uint32_t        rxgbfrmim          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM */
    volatile uint32_t        rxgboctim          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM */
    volatile uint32_t        rxgoctim           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM */
    volatile uint32_t        rxbcgfim           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM */
    volatile uint32_t        rxmcgfim           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM */
    volatile uint32_t        rxcrcerfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM */
    volatile uint32_t        rxalgnerfim        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM */
    volatile uint32_t        rxruntfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM */
    volatile uint32_t        rxjaberfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM */
    volatile uint32_t        rxusizegfim        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM */
    volatile uint32_t        rxosizegfim        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM */
    volatile uint32_t        rx64octgbfim       :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM */
    volatile uint32_t        rx65t127octgbfim   :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM */
    volatile uint32_t        rx128t255octgbfim  :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM */
    volatile uint32_t        rx256t511octgbfim  :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM */
    volatile uint32_t        rx512t1023octgbfim :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM */
    volatile uint32_t        rx1024tmaxoctgbfim :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM */
    volatile uint32_t        rxucgfim           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM */
    volatile uint32_t        rxlenerfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM */
    volatile uint32_t        rxorangefim        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM */
    volatile uint32_t        rxpausfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM */
    volatile uint32_t        rxfovfim           :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM */
    volatile uint32_t        rxvlangbfim        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM */
    volatile uint32_t        rxwdogfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM */
    volatile uint32_t        rxrcverrfim        :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM */
    volatile uint32_t        rxctrlfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM */
    const volatile uint32_t  reserved_31_26     :  6;  /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESERVED_31_26 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK. */
typedef struct ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_s  ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_OFST        0x10c
/* The address of the ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_OFST))

/*
 * Register : gmacgrp_mmc_transmit_interrupt_mask
 * 
 * <b> Register 68 (MMC Transmit Interrupt Mask Register) </b>
 * 
 * The MMC Transmit Interrupt Mask register maintains the masks for the interrupts
 * generated when the transmit statistic counters reach half of their maximum value
 * or maximum value. This register is 32-bits wide.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                                    
 * :--------|:-------|:------|:----------------------------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM         
 *  [1]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM         
 *  [2]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM          
 *  [3]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM          
 *  [4]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM      
 *  [5]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM  
 *  [6]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM 
 *  [7]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM 
 *  [8]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM
 *  [9]     | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM
 *  [10]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM         
 *  [11]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM         
 *  [12]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM         
 *  [13]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM      
 *  [14]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM        
 *  [15]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM        
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM          
 *  [17]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM       
 *  [18]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM        
 *  [19]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM        
 *  [20]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM          
 *  [21]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM          
 *  [22]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM        
 *  [23]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM         
 *  [24]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM        
 *  [25]    | RW     | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM       
 *  [31:26] | R      | 0x0   | ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26    
 * 
 */
/*
 * Field : txgboctim
 * 
 * MMC Transmit Good Bad Octet Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txoctetcount_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : txgbfrmim
 * 
 * MMC Transmit Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txframecount_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : txbcgfim
 * 
 * MMC Transmit Broadcast Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txbroadcastframes_g counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : txmcgfim
 * 
 * MMC Transmit Multicast Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txmulticastframes_g counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : tx64octgbfim
 * 
 * MMC Transmit 64 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the tx64octets_gb counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : tx65t127octgbfim
 * 
 * MMC Transmit 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the tx65to127octets_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                       | Value | Description
 * :---------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : tx128t255octgbfim
 * 
 * MMC Transmit 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the tx128to255octets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : tx256t511octgbfim
 * 
 * MMC Transmit 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the tx256to511octets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : tx512t1023octgbfim
 * 
 * MMC Transmit 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the tx512to1023octets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                         | Value | Description
 * :-----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : tx1024tmaxoctgbfim
 * 
 * MMC Transmit 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the tx1024tomaxoctets_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                         | Value | Description
 * :-----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : txucgbfim
 * 
 * MMC Transmit Unicast Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txunicastframes_gb counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : txmcgbfim
 * 
 * MMC Transmit Multicast Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txmulticastframes_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : txbcgbfim
 * 
 * MMC Transmit Broadcast Good Bad Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txbroadcastframes_gb counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : txuflowerfim
 * 
 * MMC Transmit Underflow Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txunderflowerror counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : txscolgfim
 * 
 * MMC Transmit Single Collision Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txsinglecol_g counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_MSB        14
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : txmcolgfim
 * 
 * MMC Transmit Multiple Collision Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txmulticol_g counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : txdeffim
 * 
 * MMC Transmit Deferred Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txdeferred counter reaches half of
 * the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : txlatcolfim
 * 
 * MMC Transmit Late Collision Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txlatecol counter reaches half of
 * the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : txexcolfim
 * 
 * MMC Transmit Excessive Collision Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txexcesscol counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : txcarerfim
 * 
 * MMC Transmit Carrier Error Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txcarriererror counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : txgoctim
 * 
 * MMC Transmit Good Octet Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txoctetcount_g counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : txgfrmim
 * 
 * MMC Transmit Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txframecount_g counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : txexdeffim
 * 
 * MMC Transmit Excessive Deferral Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txexcessdef counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : txpausfim
 * 
 * MMC Transmit Pause Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txpauseframes counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : txvlangfim
 * 
 * MMC Transmit VLAN Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txvlanframes_g counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : txosizegfim
 * 
 * MMC Transmit Oversize Good Frame Counter Interrupt Mask
 * 
 * Setting this bit masks the interrupt when the txoversize_g counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : reserved_31_26
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_WIDTH      6
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_SET_MSK    0xfc000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 register field value. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_CLR_MSK    0x03ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 register field. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_GET(value) (((value) & 0xfc000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26_SET(value) (((value) << 26) & 0xfc000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK.
 */
struct ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_s
{
    volatile uint32_t        txgboctim          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM */
    volatile uint32_t        txgbfrmim          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM */
    volatile uint32_t        txbcgfim           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM */
    volatile uint32_t        txmcgfim           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM */
    volatile uint32_t        tx64octgbfim       :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM */
    volatile uint32_t        tx65t127octgbfim   :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM */
    volatile uint32_t        tx128t255octgbfim  :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM */
    volatile uint32_t        tx256t511octgbfim  :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM */
    volatile uint32_t        tx512t1023octgbfim :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM */
    volatile uint32_t        tx1024tmaxoctgbfim :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM */
    volatile uint32_t        txucgbfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM */
    volatile uint32_t        txmcgbfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM */
    volatile uint32_t        txbcgbfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM */
    volatile uint32_t        txuflowerfim       :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM */
    volatile uint32_t        txscolgfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM */
    volatile uint32_t        txmcolgfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM */
    volatile uint32_t        txdeffim           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM */
    volatile uint32_t        txlatcolfim        :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM */
    volatile uint32_t        txexcolfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM */
    volatile uint32_t        txcarerfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM */
    volatile uint32_t        txgoctim           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM */
    volatile uint32_t        txgfrmim           :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM */
    volatile uint32_t        txexdeffim         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM */
    volatile uint32_t        txpausfim          :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM */
    volatile uint32_t        txvlangfim         :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM */
    volatile uint32_t        txosizegfim        :  1;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM */
    const volatile uint32_t  reserved_31_26     :  6;  /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESERVED_31_26 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK. */
typedef struct ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_s  ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_OFST        0x110
/* The address of the ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_OFST))

/*
 * Register : gmacgrp_txoctetcount_gb
 * 
 * <b> Register 69 (Transmit Octet Count for Good and Bad Frames) </b>
 * 
 * This register maintains the number of bytes transmitted in good and bad frames
 * exclusive of preamble and retried bytes.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                         
 * :-------|:-------|:------|:-------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of bytes transmitted in good and bad frames
 * exclusive of preamble and retried bytes.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB.
 */
struct ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB. */
typedef struct ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_s  ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB register. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_OFST        0x114
/* The address of the ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB register. */
#define ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_OFST))

/*
 * Register : gmacgrp_txframecount_gb
 * 
 * <b> Register 70 (Transmit Frame Count for Good and Bad Frames) </b>
 * 
 * This register maintains the number of good and bad frames transmitted, exclusive
 * of retried frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                         
 * :-------|:-------|:------|:-------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of good and bad frames transmitted, exclusive of
 * retried frames
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB.
 */
struct ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB. */
typedef struct ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_s  ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_OFST        0x118
/* The address of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_OFST))

/*
 * Register : gmacgrp_txbroadcastframes_g
 * 
 * <b> Register 71 (Transmit Frame Count for Good Broadcast Frames) </b>
 * 
 * This register maintains the number of transmitted good broadcast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good broadcast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G.
 */
struct ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G. */
typedef struct ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_s  ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_OFST        0x11c
/* The address of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_OFST))

/*
 * Register : gmacgrp_txmulticastframes_g
 * 
 * <b> Register 72 (Transmit Frame Count for Good Multicast Frames) </b>
 * 
 * This register maintains the number of transmitted good multicast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good multicast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G.
 */
struct ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G. */
typedef struct ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_s  ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_OFST        0x120
/* The address of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_OFST))

/*
 * Register : gmacgrp_tx64octets_gb
 * 
 * <b> Register 73 (Transmit Octet Count for Good and Bad 64 Byte Frames) </b>
 * 
 * This register maintains the number of transmitted good and bad frames with
 * length of 64 bytes, exclusive of preamble and retried frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad frames with length
 * of 64 bytes, exclusive of preamble and retried frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TX64OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_TX64OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TX64OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TX64OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_TX64OCTETS_GB_s  ALT_EMAC_GMACGRP_TX64OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TX64OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TX64OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_OFST        0x124
/* The address of the ALT_EMAC_GMACGRP_TX64OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX64OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TX64OCTETS_GB_OFST))

/*
 * Register : gmacgrp_tx65to127octets_gb
 * 
 * <b> Register 74 (Transmit Octet Count for Good and Bad 65 to 127 Bytes Frames)
 * </b>
 * 
 * This register maintains the number of transmitted good and bad frames with
 * length between 65 and 127 (inclusive) bytes, exclusive of preamble and retried
 * frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad frames with length
 * between 65 and 127 (inclusive) bytes, exclusive of preamble and retried frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_s  ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_OFST        0x128
/* The address of the ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_OFST))

/*
 * Register : gmacgrp_tx128to255octets_gb
 * 
 * <b> Register 75 (Transmit Octet Count for Good and Bad 128 to 255 Bytes Frames)
 * </b>
 * 
 * This register maintains the number of transmitted good and bad frames with
 * length between 128 and 255 (inclusive) bytes, exclusive of preamble and retried
 * frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad frames with length
 * between 128 and 255 (inclusive) bytes, exclusive of preamble and retried frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_s  ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_OFST        0x12c
/* The address of the ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_OFST))

/*
 * Register : gmacgrp_tx256to511octets_gb
 * 
 * <b> Register 76 (Transmit Octet Count for Good and Bad 256 to 511 Bytes Frames)
 * </b>
 * 
 * This register maintains the number of transmitted good and bad frames with
 * length between 256 and 511 (inclusive) bytes, exclusive of preamble and retried
 * frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad frames with length
 * between 256 and 511 (inclusive) bytes, exclusive of preamble and retried frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_s  ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_OFST        0x130
/* The address of the ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_OFST))

/*
 * Register : gmacgrp_tx512to1023octets_gb
 * 
 * <b> Register 77 (Transmit Octet Count for Good and Bad 512 to 1023 Bytes Frames)
 * </b>
 * 
 * This register maintains the number of transmitted good and bad frames with
 * length between 512 and 1,023 (inclusive) bytes, exclusive of preamble and
 * retried frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad frames with length
 * between 512 and 1,023 (inclusive) bytes, exclusive of preamble and retried
 * frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_s  ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_OFST        0x134
/* The address of the ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_OFST))

/*
 * Register : gmacgrp_tx1024tomaxoctets_gb
 * 
 * <b> Register 78 (Transmit Octet Count for Good and Bad 1024 to Maxsize Bytes
 * Frames) </b>
 * 
 * This register maintains the number of transmitted good and bad frames with
 * length between 1,024 and maxsize (inclusive) bytes, exclusive of preamble and
 * retried frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of good and bad frames transmitted with length
 * between 1,024 and maxsize (inclusive) bytes, exclusive of preamble and retried
 * frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_s  ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_OFST        0x138
/* The address of the ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB register. */
#define ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_OFST))

/*
 * Register : gmacgrp_txunicastframes_gb
 * 
 * <b> Register 79 (Transmit Frame Count for Good and Bad Unicast Frames) </b>
 * 
 * This register maintains the number of transmitted good and bad unicast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad unicast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB.
 */
struct ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB. */
typedef struct ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_s  ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_OFST        0x13c
/* The address of the ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_OFST))

/*
 * Register : gmacgrp_txmulticastframes_gb
 * 
 * <b> Register 80 (Transmit Frame Count for Good and Bad Multicast Frames) </b>
 * 
 * This register maintains the number of transmitted good and bad multicast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad multicast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB.
 */
struct ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB. */
typedef struct ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_s  ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_OFST        0x140
/* The address of the ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_OFST))

/*
 * Register : gmacgrp_txbroadcastframes_gb
 * 
 * <b> Register 81 (Transmit Frame Count for Good and Bad Broadcast Frames) </b>
 * 
 * This register maintains the number of transmitted good and bad broadcast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good and bad broadcast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB.
 */
struct ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB. */
typedef struct ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_s  ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_OFST        0x144
/* The address of the ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_OFST))

/*
 * Register : gmacgrp_txunderflowerror
 * 
 * <b> Register 82 (Transmit Frame Count for Underflow Error Frames) </b>
 * 
 * This register maintains the number of frames aborted because of frame underflow
 * error.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                          
 * :-------|:-------|:------|:--------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames aborted because of frame underflow
 * error.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXUNDERFLOWERROR.
 */
struct ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXUNDERFLOWERROR. */
typedef struct ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_s  ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR register. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_OFST        0x148
/* The address of the ALT_EMAC_GMACGRP_TXUNDERFLOWERROR register. */
#define ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_OFST))

/*
 * Register : gmacgrp_txsinglecol_g
 * 
 * <b> Register 83 (Transmit Frame Count for Frames Transmitted after Single
 * Collision) </b>
 * 
 * This register maintains the number of successfully transmitted frames after a
 * single collision in the half-duplex mode.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of successfully transmitted frames after a
 * single collision in the half-duplex mode.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXSINGLECOL_G.
 */
struct ALT_EMAC_GMACGRP_TXSINGLECOL_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXSINGLECOL_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXSINGLECOL_G. */
typedef struct ALT_EMAC_GMACGRP_TXSINGLECOL_G_s  ALT_EMAC_GMACGRP_TXSINGLECOL_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXSINGLECOL_G register. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXSINGLECOL_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_OFST        0x14c
/* The address of the ALT_EMAC_GMACGRP_TXSINGLECOL_G register. */
#define ALT_EMAC_GMACGRP_TXSINGLECOL_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXSINGLECOL_G_OFST))

/*
 * Register : gmacgrp_txmulticol_g
 * 
 * <b> Register 84 (Transmit Frame Count for Frames Transmitted after Multiple
 * Collision) </b>
 * 
 * This register maintains the number of successfully transmitted frames after
 * multiple collisions in the half-duplex mode.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of successfully transmitted frames after
 * multiple collisions in the half-duplex mode.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXMULTICOL_G.
 */
struct ALT_EMAC_GMACGRP_TXMULTICOL_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXMULTICOL_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXMULTICOL_G. */
typedef struct ALT_EMAC_GMACGRP_TXMULTICOL_G_s  ALT_EMAC_GMACGRP_TXMULTICOL_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXMULTICOL_G register. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXMULTICOL_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_OFST        0x150
/* The address of the ALT_EMAC_GMACGRP_TXMULTICOL_G register. */
#define ALT_EMAC_GMACGRP_TXMULTICOL_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXMULTICOL_G_OFST))

/*
 * Register : gmacgrp_txdeferred
 * 
 * <b> Register 85 (Transmit Frame Count for Deferred Frames) </b>
 * 
 * This register maintains the number of successfully transmitted frames after a
 * deferral in the half-duplex mode.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                    
 * :-------|:-------|:------|:--------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXDEFERRED_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of successfully transmitted frames after a
 * deferral in the half-duplex mode.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXDEFERRED_CNT register field. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXDEFERRED_CNT register field. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXDEFERRED_CNT register field. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXDEFERRED_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXDEFERRED_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXDEFERRED_CNT register field. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXDEFERRED_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXDEFERRED_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXDEFERRED.
 */
struct ALT_EMAC_GMACGRP_TXDEFERRED_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXDEFERRED_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXDEFERRED. */
typedef struct ALT_EMAC_GMACGRP_TXDEFERRED_s  ALT_EMAC_GMACGRP_TXDEFERRED_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXDEFERRED register. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXDEFERRED register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_OFST        0x154
/* The address of the ALT_EMAC_GMACGRP_TXDEFERRED register. */
#define ALT_EMAC_GMACGRP_TXDEFERRED_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXDEFERRED_OFST))

/*
 * Register : gmacgrp_txlatecol
 * 
 * <b> Register 86 (Transmit Frame Count for Late Collision Error Frames) </b>
 * 
 * This register maintains the number of frames aborted because of late collision
 * error.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                   
 * :-------|:-------|:------|:-------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXLATECOL_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames aborted because of late collision
 * error.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXLATECOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXLATECOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXLATECOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXLATECOL_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXLATECOL_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXLATECOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXLATECOL_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXLATECOL_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXLATECOL_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXLATECOL.
 */
struct ALT_EMAC_GMACGRP_TXLATECOL_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXLATECOL_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXLATECOL. */
typedef struct ALT_EMAC_GMACGRP_TXLATECOL_s  ALT_EMAC_GMACGRP_TXLATECOL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXLATECOL register. */
#define ALT_EMAC_GMACGRP_TXLATECOL_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXLATECOL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXLATECOL_OFST        0x158
/* The address of the ALT_EMAC_GMACGRP_TXLATECOL register. */
#define ALT_EMAC_GMACGRP_TXLATECOL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXLATECOL_OFST))

/*
 * Register : gmacgrp_txexesscol
 * 
 * <b> Register 87 (Transmit Frame Count for Excessive Collision Error Frames) </b>
 * 
 * This register maintains the number of frames aborted because of excessive (16)
 * collision error.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                    
 * :-------|:-------|:------|:--------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXEXESSCOL_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames aborted because of excessive (16)
 * collision error.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXEXESSCOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXEXESSCOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXEXESSCOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXEXESSCOL_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXEXESSCOL_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXEXESSCOL_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXEXESSCOL_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXEXESSCOL_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXEXESSCOL.
 */
struct ALT_EMAC_GMACGRP_TXEXESSCOL_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXEXESSCOL_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXEXESSCOL. */
typedef struct ALT_EMAC_GMACGRP_TXEXESSCOL_s  ALT_EMAC_GMACGRP_TXEXESSCOL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXEXESSCOL register. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXEXESSCOL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_OFST        0x15c
/* The address of the ALT_EMAC_GMACGRP_TXEXESSCOL register. */
#define ALT_EMAC_GMACGRP_TXEXESSCOL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXEXESSCOL_OFST))

/*
 * Register : gmacgrp_txcarriererr
 * 
 * <b> Register 88 (Transmit Frame Count for Carrier Sense Error Frames) </b>
 * 
 * This register maintains the number of frames aborted because of carrier sense
 * error (no carrier or loss of carrier).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXCARRIERERR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames aborted because of carrier sense error
 * (no carrier or loss of carrier).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXCARRIERERR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXCARRIERERR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXCARRIERERR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXCARRIERERR_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXCARRIERERR_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXCARRIERERR_CNT register field. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXCARRIERERR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXCARRIERERR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXCARRIERERR.
 */
struct ALT_EMAC_GMACGRP_TXCARRIERERR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXCARRIERERR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXCARRIERERR. */
typedef struct ALT_EMAC_GMACGRP_TXCARRIERERR_s  ALT_EMAC_GMACGRP_TXCARRIERERR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXCARRIERERR register. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXCARRIERERR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_OFST        0x160
/* The address of the ALT_EMAC_GMACGRP_TXCARRIERERR register. */
#define ALT_EMAC_GMACGRP_TXCARRIERERR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXCARRIERERR_OFST))

/*
 * Register : gmacgrp_txoctetcnt
 * 
 * <b> Register 89 (Transmit Octet Count for Good Frames) </b>
 * 
 * This register maintains the number of bytes transmitted, exclusive of preamble,
 * in good frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                               
 * :-------|:-------|:------|:-------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G
 * 
 */
/*
 * Field : txoctetcount_g
 * 
 * This field indicates the number of bytes transmitted, exclusive of preamble, in
 * good frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G register field value. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G register field value. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G register field. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G field value from a register. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXOCTETCNT.
 */
struct ALT_EMAC_GMACGRP_TXOCTETCNT_s
{
    const volatile uint32_t  txoctetcount_g : 32;  /* ALT_EMAC_GMACGRP_TXOCTETCNT_TXOCTETCOUNT_G */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXOCTETCNT. */
typedef struct ALT_EMAC_GMACGRP_TXOCTETCNT_s  ALT_EMAC_GMACGRP_TXOCTETCNT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXOCTETCNT register. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXOCTETCNT register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_OFST        0x164
/* The address of the ALT_EMAC_GMACGRP_TXOCTETCNT register. */
#define ALT_EMAC_GMACGRP_TXOCTETCNT_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXOCTETCNT_OFST))

/*
 * Register : gmacgrp_txframecount_g
 * 
 * <b> Register 90 (Transmit Frame Count for Good Frames) </b>
 * 
 * This register maintains the number of transmitted good frames, exclusive of
 * preamble.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good frames, exclusive of
 * preamble.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXFRAMECOUNT_G.
 */
struct ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXFRAMECOUNT_G. */
typedef struct ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_s  ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_OFST        0x168
/* The address of the ALT_EMAC_GMACGRP_TXFRAMECOUNT_G register. */
#define ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_OFST))

/*
 * Register : gmacgrp_txexcessdef
 * 
 * <b> Register 91 (Transmit Frame Count for Excessive Deferral Error Frames) </b>
 * 
 * This register maintains the number of frames aborted because of  excessive
 * deferral error, that is, frames deferred for more than two max-sized frame
 * times.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                     
 * :-------|:-------|:------|:---------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames aborted because of  excessive deferral
 * error, that is, frames deferred for more than two max-sized frame times.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT register field. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXEXCESSDEF.
 */
struct ALT_EMAC_GMACGRP_TXEXCESSDEF_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXEXCESSDEF_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXEXCESSDEF. */
typedef struct ALT_EMAC_GMACGRP_TXEXCESSDEF_s  ALT_EMAC_GMACGRP_TXEXCESSDEF_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXEXCESSDEF register. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXEXCESSDEF register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_OFST        0x16c
/* The address of the ALT_EMAC_GMACGRP_TXEXCESSDEF register. */
#define ALT_EMAC_GMACGRP_TXEXCESSDEF_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXEXCESSDEF_OFST))

/*
 * Register : gmacgrp_txpauseframes
 * 
 * <b> Register 92 (Transmit Frame Count for Good PAUSE Frames) </b>
 * 
 * This register maintains the number of transmitted good PAUSE frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of transmitted good PAUSE frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXPAUSEFRAMES.
 */
struct ALT_EMAC_GMACGRP_TXPAUSEFRAMES_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXPAUSEFRAMES_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXPAUSEFRAMES. */
typedef struct ALT_EMAC_GMACGRP_TXPAUSEFRAMES_s  ALT_EMAC_GMACGRP_TXPAUSEFRAMES_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXPAUSEFRAMES register. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXPAUSEFRAMES register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_OFST        0x170
/* The address of the ALT_EMAC_GMACGRP_TXPAUSEFRAMES register. */
#define ALT_EMAC_GMACGRP_TXPAUSEFRAMES_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXPAUSEFRAMES_OFST))

/*
 * Register : gmacgrp_txvlanframes_g
 * 
 * <b> Register 93 (Transmit Frame Count for Good VLAN Frames) </b>
 * 
 * This register maintains the number of transmitted good VLAN frames, exclusive of
 * retried frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This register maintains the number of transmitted good VLAN frames, exclusive of
 * retried frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXVLANFRAMES_G.
 */
struct ALT_EMAC_GMACGRP_TXVLANFRAMES_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXVLANFRAMES_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXVLANFRAMES_G. */
typedef struct ALT_EMAC_GMACGRP_TXVLANFRAMES_G_s  ALT_EMAC_GMACGRP_TXVLANFRAMES_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXVLANFRAMES_G register. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXVLANFRAMES_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_OFST        0x174
/* The address of the ALT_EMAC_GMACGRP_TXVLANFRAMES_G register. */
#define ALT_EMAC_GMACGRP_TXVLANFRAMES_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXVLANFRAMES_G_OFST))

/*
 * Register : gmacgrp_txoversize_g
 * 
 * <b> Register 94 (Transmit Frame Count for Good Oversize Frames) </b>
 * 
 * This register maintains the number of transmitted good Oversize frames,
 * exclusive of retried frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames transmitted without errors and with
 * length greater than the maxsize (1,518 or 1,522 bytes for VLAN tagged frames;
 * 2000 bytes if enabled in bit 27 of Register 0 (MAC Configuration Register)).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TXOVERSIZE_G.
 */
struct ALT_EMAC_GMACGRP_TXOVERSIZE_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_TXOVERSIZE_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TXOVERSIZE_G. */
typedef struct ALT_EMAC_GMACGRP_TXOVERSIZE_G_s  ALT_EMAC_GMACGRP_TXOVERSIZE_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TXOVERSIZE_G register. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TXOVERSIZE_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_OFST        0x178
/* The address of the ALT_EMAC_GMACGRP_TXOVERSIZE_G register. */
#define ALT_EMAC_GMACGRP_TXOVERSIZE_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TXOVERSIZE_G_OFST))

/*
 * Register : gmacgrp_rxframecount_gb
 * 
 * <b> Register 96 (Receive Frame Count for Good and Bad Frames) </b>
 * 
 * This register maintains the number of received good and bad frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                         
 * :-------|:-------|:------|:-------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB.
 */
struct ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB. */
typedef struct ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_s  ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB register. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_OFST        0x180
/* The address of the ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB register. */
#define ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_OFST))

/*
 * Register : gmacgrp_rxoctetcount_gb
 * 
 * <b> Register 97 (Receive Octet Count for Good and Bad Frames) </b>
 * 
 * This register maintains the number of bytes received, exclusive of preamble, in
 * good and bad frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                         
 * :-------|:-------|:------|:-------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of bytes received, exclusive of preamble, in
 * good and bad frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB.
 */
struct ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB. */
typedef struct ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_s  ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_OFST        0x184
/* The address of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_OFST))

/*
 * Register : gmacgrp_rxoctetcount_g
 * 
 * <b> Register 98 (Receive Octet Count for Good Frames) </b>
 * 
 * This register maintains the number of bytes received, exclusive of preamble,
 * only in good frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of bytes received, exclusive of preamble, only
 * in good frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXOCTETCOUNT_G.
 */
struct ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXOCTETCOUNT_G. */
typedef struct ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_s  ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_OFST        0x188
/* The address of the ALT_EMAC_GMACGRP_RXOCTETCOUNT_G register. */
#define ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_OFST))

/*
 * Register : gmacgrp_rxbroadcastframes_g
 * 
 * <b> Register 99 (Receive Frame Count for Good Broadcast Frames) </b>
 * 
 * This register maintains the number of received good broadcast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good broadcast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G.
 */
struct ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G. */
typedef struct ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_s  ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_OFST        0x18c
/* The address of the ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_OFST))

/*
 * Register : gmacgrp_rxmulticastframes_g
 * 
 * <b> Register 100 (Receive Frame Count for Good Multicast Frames) </b>
 * 
 * This register maintains the number of received good multicast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good multicast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G.
 */
struct ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G. */
typedef struct ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_s  ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_OFST        0x190
/* The address of the ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_OFST))

/*
 * Register : gmacgrp_rxcrcerror
 * 
 * <b> Register 101 (Receive Frame Count for CRC Error Frames) </b>
 * 
 * This register maintains the number of frames received with CRC error.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                    
 * :-------|:-------|:------|:--------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXCRCERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received with CRC error.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXCRCERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXCRCERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXCRCERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXCRCERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXCRCERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXCRCERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXCRCERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXCRCERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXCRCERROR.
 */
struct ALT_EMAC_GMACGRP_RXCRCERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXCRCERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXCRCERROR. */
typedef struct ALT_EMAC_GMACGRP_RXCRCERROR_s  ALT_EMAC_GMACGRP_RXCRCERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXCRCERROR register. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXCRCERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_OFST        0x194
/* The address of the ALT_EMAC_GMACGRP_RXCRCERROR register. */
#define ALT_EMAC_GMACGRP_RXCRCERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXCRCERROR_OFST))

/*
 * Register : gmacgrp_rxalignmenterror
 * 
 * <b> Register 102 (Receive Frame Count for Alignment Error Frames) </b>
 * 
 * This register maintains the number of frames received with alignment (dribble)
 * error. This field is valid only in the 10 or 100 Mbps mode.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                          
 * :-------|:-------|:------|:--------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received with alignment (dribble)
 * error. This field is valid only in the 10 or 100 Mbps mode.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXALIGNMENTERROR.
 */
struct ALT_EMAC_GMACGRP_RXALIGNMENTERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXALIGNMENTERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXALIGNMENTERROR. */
typedef struct ALT_EMAC_GMACGRP_RXALIGNMENTERROR_s  ALT_EMAC_GMACGRP_RXALIGNMENTERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXALIGNMENTERROR register. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXALIGNMENTERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_OFST        0x198
/* The address of the ALT_EMAC_GMACGRP_RXALIGNMENTERROR register. */
#define ALT_EMAC_GMACGRP_RXALIGNMENTERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXALIGNMENTERROR_OFST))

/*
 * Register : gmacgrp_rxrunterror
 * 
 * <b> Register 103 (Receive Frame Count for Runt Error Frames) </b>
 * 
 * This register maintains the number of frames received with runt error(<64 bytes
 * and CRC error).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                     
 * :-------|:-------|:------|:---------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXRUNTERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received with runt error(<64 bytes and
 * CRC error).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXRUNTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXRUNTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXRUNTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXRUNTERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXRUNTERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXRUNTERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXRUNTERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXRUNTERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXRUNTERROR.
 */
struct ALT_EMAC_GMACGRP_RXRUNTERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXRUNTERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXRUNTERROR. */
typedef struct ALT_EMAC_GMACGRP_RXRUNTERROR_s  ALT_EMAC_GMACGRP_RXRUNTERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXRUNTERROR register. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXRUNTERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_OFST        0x19c
/* The address of the ALT_EMAC_GMACGRP_RXRUNTERROR register. */
#define ALT_EMAC_GMACGRP_RXRUNTERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXRUNTERROR_OFST))

/*
 * Register : gmacgrp_rxjabbererror
 * 
 * <b> Register 104 (Receive Frame Count for Jabber Error Frames) </b>
 * 
 * This register maintains the number of giant frames received with length
 * (including CRC) greater than 1,518 bytes (1,522 bytes for VLAN tagged) and with
 * CRC error. If Jumbo Frame mode is enabled, then frames of length greater than
 * 9,018 bytes (9,022 for VLAN tagged) are considered as giant frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXJABBERERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of giant frames received with length (including
 * CRC) greater than 1,518 bytes (1,522 bytes for VLAN tagged) and with CRC error.
 * If Jumbo Frame mode is enabled, then frames of length greater than 9,018 bytes
 * (9,022 for VLAN tagged) are considered as giant frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXJABBERERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXJABBERERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXJABBERERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXJABBERERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXJABBERERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXJABBERERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXJABBERERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXJABBERERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXJABBERERROR.
 */
struct ALT_EMAC_GMACGRP_RXJABBERERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXJABBERERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXJABBERERROR. */
typedef struct ALT_EMAC_GMACGRP_RXJABBERERROR_s  ALT_EMAC_GMACGRP_RXJABBERERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXJABBERERROR register. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXJABBERERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_OFST        0x1a0
/* The address of the ALT_EMAC_GMACGRP_RXJABBERERROR register. */
#define ALT_EMAC_GMACGRP_RXJABBERERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXJABBERERROR_OFST))

/*
 * Register : gmacgrp_rxundersize_g
 * 
 * <b> Register 105 (Receive Frame Count for Undersize Frames) </b>
 * 
 * This register maintains the number of frames received with length less than 64
 * bytes and without errors.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received with length less than 64
 * bytes and without errors.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXUNDERSIZE_G.
 */
struct ALT_EMAC_GMACGRP_RXUNDERSIZE_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXUNDERSIZE_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXUNDERSIZE_G. */
typedef struct ALT_EMAC_GMACGRP_RXUNDERSIZE_G_s  ALT_EMAC_GMACGRP_RXUNDERSIZE_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXUNDERSIZE_G register. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXUNDERSIZE_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_OFST        0x1a4
/* The address of the ALT_EMAC_GMACGRP_RXUNDERSIZE_G register. */
#define ALT_EMAC_GMACGRP_RXUNDERSIZE_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXUNDERSIZE_G_OFST))

/*
 * Register : gmacgrp_rxoversize_g
 * 
 * <b> Register 106 (Receive Frame Count for Oversize Frames) </b>
 * 
 * This register maintains the number of frames received with length greater than
 * the maxsize (1,518 or 1,522 for VLAN tagged frames) and without errors.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                      
 * :-------|:-------|:------|:----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received without errors, with length
 * greater than the maxsize (1,518 or 1,522 for VLAN tagged frames; 2,000 bytes if
 * enabled in bit 27 of Register 0 (MAC Configuration Register)).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXOVERSIZE_G.
 */
struct ALT_EMAC_GMACGRP_RXOVERSIZE_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXOVERSIZE_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXOVERSIZE_G. */
typedef struct ALT_EMAC_GMACGRP_RXOVERSIZE_G_s  ALT_EMAC_GMACGRP_RXOVERSIZE_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXOVERSIZE_G register. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXOVERSIZE_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_OFST        0x1a8
/* The address of the ALT_EMAC_GMACGRP_RXOVERSIZE_G register. */
#define ALT_EMAC_GMACGRP_RXOVERSIZE_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXOVERSIZE_G_OFST))

/*
 * Register : gmacgrp_rx64octets_gb
 * 
 * <b> Register 107 (Receive Frame Count for Good and Bad 64 Byte Frames) </b>
 * 
 * This register maintains the number of received good and bad frames with length
 * 64 bytes, exclusive of preamble.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad frames with length 64
 * bytes, exclusive of preamble.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RX64OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_RX64OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RX64OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RX64OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_RX64OCTETS_GB_s  ALT_EMAC_GMACGRP_RX64OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RX64OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RX64OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_OFST        0x1ac
/* The address of the ALT_EMAC_GMACGRP_RX64OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX64OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RX64OCTETS_GB_OFST))

/*
 * Register : gmacgrp_rx65to127octets_gb
 * 
 * <b> Register 108 (Receive Frame Count for Good and Bad 65 to 127 Bytes Frames)
 * </b>
 * 
 * This register maintains the number of received good and bad frames received with
 * length between 65 and 127 (inclusive) bytes, exclusive of preamble.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad frames received with
 * length between 65 and 127 (inclusive) bytes, exclusive of preamble.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_s  ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_OFST        0x1b0
/* The address of the ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_OFST))

/*
 * Register : gmacgrp_rx128to255octets_gb
 * 
 * <b> Register 109 (Receive Frame Count for Good and Bad 128 to 255 Bytes Frames)
 * </b>
 * 
 * This register maintains the number of received good and bad frames with length
 * between 128 and 255 (inclusive) bytes, exclusive of preamble.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad frames with length
 * between 128 and 255 (inclusive) bytes, exclusive of preamble.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_s  ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_OFST        0x1b4
/* The address of the ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_OFST))

/*
 * Register : gmacgrp_rx256to511octets_gb
 * 
 * <b> Register 110 (Receive Frame Count for Good and Bad 256 to 511 Bytes Frames)
 * </b>
 * 
 * This register maintains the number of received good and bad frames with length
 * between 256 and 511 (inclusive) bytes, exclusive of preamble.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad frames with length
 * between 256 and 511 (inclusive) bytes, exclusive of preamble.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_s  ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_OFST        0x1b8
/* The address of the ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_OFST))

/*
 * Register : gmacgrp_rx512to1023octets_gb
 * 
 * <b> Register 111 (Receive Frame Count for Good and Bad 512 to 1,023 Bytes
 * Frames) </b>
 * 
 * This register maintains the number of received good and bad frames with length
 * between 512 and 1,023 (inclusive) bytes, exclusive of preamble.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad frames with length
 * between 512 and 1,023 (inclusive) bytes, exclusive of preamble.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_s  ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_OFST        0x1bc
/* The address of the ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_OFST))

/*
 * Register : gmacgrp_rx1024tomaxoctets_gb
 * 
 * <b> Register 112 (Receive Frame Count for Good and Bad 1,024 to Maxsize Bytes
 * Frames) </b>
 * 
 * This register maintains the number of received good and bad frames with length
 * between 1,024 and maxsize (inclusive) bytes, exclusive of preamble.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad frames with length
 * between 1,024 and maxsize (inclusive) bytes, exclusive of preamble and retried
 * frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB.
 */
struct ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB. */
typedef struct ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_s  ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_OFST        0x1c0
/* The address of the ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB register. */
#define ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_OFST))

/*
 * Register : gmacgrp_rxunicastframes_g
 * 
 * <b> Register 113 (Receive Frame Count for Good Unicast Frames)  </b>
 * 
 * This register maintains the number of received good unicast frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                           
 * :-------|:-------|:------|:---------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good unicast frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G.
 */
struct ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G. */
typedef struct ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_s  ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_OFST        0x1c4
/* The address of the ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_OFST))

/*
 * Register : gmacgrp_rxlengtherror
 * 
 * <b> Register 114 (Receive Frame Count for Length Error Frames)  </b>
 * 
 * This register maintains the number of frames received with length error (Length
 * type field not equal to frame size) for all frames with valid length field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received with length error (Length
 * type field not equal to frame size) for all frames with valid length field.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXLENGTHERROR.
 */
struct ALT_EMAC_GMACGRP_RXLENGTHERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXLENGTHERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXLENGTHERROR. */
typedef struct ALT_EMAC_GMACGRP_RXLENGTHERROR_s  ALT_EMAC_GMACGRP_RXLENGTHERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXLENGTHERROR register. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXLENGTHERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_OFST        0x1c8
/* The address of the ALT_EMAC_GMACGRP_RXLENGTHERROR register. */
#define ALT_EMAC_GMACGRP_RXLENGTHERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXLENGTHERROR_OFST))

/*
 * Register : gmacgrp_rxoutofrangetype
 * 
 * <b> Register 115 (Receive Frame Count for Out of Range Frames)  </b>
 * 
 * This register maintains the number of received frames with length field not
 * equal to the valid frame size (greater than 1,500 but less than 1,536).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                          
 * :-------|:-------|:------|:--------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received frames with length field not equal
 * to the valid frame size (greater than 1,500 but less than 1,536).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT register field. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE.
 */
struct ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE. */
typedef struct ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_s  ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE register. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_OFST        0x1cc
/* The address of the ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE register. */
#define ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_OFST))

/*
 * Register : gmacgrp_rxpauseframes
 * 
 * <b> Register 116 (Receive Frame Count for PAUSE Frames)  </b>
 * 
 * This register maintains the number of received good and valid PAUSE frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                       
 * :-------|:-------|:------|:-----------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and valid PAUSE frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT register field. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXPAUSEFRAMES.
 */
struct ALT_EMAC_GMACGRP_RXPAUSEFRAMES_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXPAUSEFRAMES_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXPAUSEFRAMES. */
typedef struct ALT_EMAC_GMACGRP_RXPAUSEFRAMES_s  ALT_EMAC_GMACGRP_RXPAUSEFRAMES_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXPAUSEFRAMES register. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXPAUSEFRAMES register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_OFST        0x1d0
/* The address of the ALT_EMAC_GMACGRP_RXPAUSEFRAMES register. */
#define ALT_EMAC_GMACGRP_RXPAUSEFRAMES_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXPAUSEFRAMES_OFST))

/*
 * Register : gmacgrp_rxfifooverflow
 * 
 * <b> Register 117 (Receive Frame Count for FIFO Overflow Frames) </b>
 * 
 * This register maintains the number of received frames missed because of FIFO
 * overflow.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the  number of received frames missed because of FIFO
 * overflow.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT register field. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXFIFOOVERFLOW.
 */
struct ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXFIFOOVERFLOW. */
typedef struct ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_s  ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW register. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_OFST        0x1d4
/* The address of the ALT_EMAC_GMACGRP_RXFIFOOVERFLOW register. */
#define ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_OFST))

/*
 * Register : gmacgrp_rxvlanframes_gb
 * 
 * <b> Register 118 (Receive Frame Count for Good and Bad VLAN Frames) </b>
 * 
 * This register maintains the number of received good and bad VLAN frames.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                         
 * :-------|:-------|:------|:-------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of received good and bad VLAN frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT register field. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXVLANFRAMES_GB.
 */
struct ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXVLANFRAMES_GB. */
typedef struct ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_s  ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_OFST        0x1d8
/* The address of the ALT_EMAC_GMACGRP_RXVLANFRAMES_GB register. */
#define ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_OFST))

/*
 * Register : gmacgrp_rxwatchdogerror
 * 
 * <b> Register 119 (Receive Frame Count for Watchdog Error Frames) </b>
 * 
 * This register maintains the number of frames received with error because of the
 * watchdog timeout error (frames with more than 2,048 bytes or value programmed in
 * Register 55 (Watchdog Timeout Register)).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                         
 * :-------|:-------|:------|:-------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received with error because of the
 * watchdog timeout error (frames with more than 2,048 bytes or value programmed in
 * Register 55 (Watchdog Timeout Register)).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXWATCHDOGERROR.
 */
struct ALT_EMAC_GMACGRP_RXWATCHDOGERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXWATCHDOGERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXWATCHDOGERROR. */
typedef struct ALT_EMAC_GMACGRP_RXWATCHDOGERROR_s  ALT_EMAC_GMACGRP_RXWATCHDOGERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXWATCHDOGERROR register. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXWATCHDOGERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_OFST        0x1dc
/* The address of the ALT_EMAC_GMACGRP_RXWATCHDOGERROR register. */
#define ALT_EMAC_GMACGRP_RXWATCHDOGERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXWATCHDOGERROR_OFST))

/*
 * Register : gmacgrp_rxrcverror
 * 
 * <b> Register 120 (Receive Frame Count for Receive Error Frames) </b>
 * 
 * This register maintains the number of frames received with error because of the
 * GMII/MII RXER error.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                    
 * :-------|:-------|:------|:--------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXRCVERROR_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of frames received with error because of the
 * GMII/MII RXER error or Frame Extension error on GMII.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXRCVERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXRCVERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXRCVERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXRCVERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXRCVERROR_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXRCVERROR_CNT register field. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXRCVERROR_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXRCVERROR_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXRCVERROR.
 */
struct ALT_EMAC_GMACGRP_RXRCVERROR_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXRCVERROR_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXRCVERROR. */
typedef struct ALT_EMAC_GMACGRP_RXRCVERROR_s  ALT_EMAC_GMACGRP_RXRCVERROR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXRCVERROR register. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXRCVERROR register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_OFST        0x1e0
/* The address of the ALT_EMAC_GMACGRP_RXRCVERROR register. */
#define ALT_EMAC_GMACGRP_RXRCVERROR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXRCVERROR_OFST))

/*
 * Register : gmacgrp_rxctrlframes_g
 * 
 * <b> Register 121 (Receive Frame Count for Good Control Frames Frames) </b>
 * 
 * This register maintains the number of good control frames received.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                        
 * :-------|:-------|:------|:------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT
 * 
 */
/*
 * Field : cnt
 * 
 * This field indicates the number of good control frames received.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT register field. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXCTRLFRAMES_G.
 */
struct ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_s
{
    const volatile uint32_t  cnt : 32;  /* ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_CNT */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXCTRLFRAMES_G. */
typedef struct ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_s  ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_OFST        0x1e4
/* The address of the ALT_EMAC_GMACGRP_RXCTRLFRAMES_G register. */
#define ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_OFST))

/*
 * Register : Register 128 (MMC Receive Checksum Offload Interrupt Mask Register) - gmacgrp_mmc_ipc_receive_interrupt_mask
 * 
 * This register maintains the mask for the interrupt generated from the receive
 * IPC statistic
 * 
 * counters.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                                        
 * :--------|:-------|:------|:--------------------------------------------------------------------
 *  [0]     | RW     | 0x0   | MMC Receive IPV4 Good Frame Counter Interrupt Mask                 
 *  [1]     | RW     | 0x0   | MMC Receive IPV4 Header Error Frame Counter Interrupt Mask         
 *  [2]     | RW     | 0x0   | MMC Receive IPV4 No Payload Frame Counter Interrupt Mask           
 *  [3]     | RW     | 0x0   | MMC Receive IPV4 Fragmented Frame Counter Interrupt Mask           
 *  [4]     | RW     | 0x0   | MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Mask
 *  [5]     | RW     | 0x0   | MMC Receive IPV6 Good Frame Counter Interrupt Mask                 
 *  [6]     | RW     | 0x0   | MMC Receive IPV6 Header Error Frame Counter Interrupt Mask         
 *  [7]     | RW     | 0x0   | MMC Receive IPV6 No Payload Frame Counter Interrupt Mask           
 *  [8]     | RW     | 0x0   | MMC Receive UDP Good Frame Counter Interrupt Mask                  
 *  [9]     | RW     | 0x0   | MMC Receive UDP Error Frame Counter Interrupt Mask                 
 *  [10]    | RW     | 0x0   | MMC Receive TCP Good Frame Counter Interrupt Mask                  
 *  [11]    | RW     | 0x0   | MMC Receive TCP Error Frame Counter Interrupt Mask                 
 *  [12]    | RW     | 0x0   | MMC Receive ICMP Good Frame Counter Interrupt Mask                 
 *  [13]    | RW     | 0x0   | MMC Receive ICMP Error Frame Counter Interrupt Mask                
 *  [15:14] | ???    | 0x0   | *UNDEFINED*                                                        
 *  [16]    | RW     | 0x0   | MMC Receive IPV4 Good Octet Counter Interrupt Mask                 
 *  [17]    | RW     | 0x0   | MMC Receive IPV4 Header Error Octet Counter Interrupt Mask         
 *  [18]    | RW     | 0x0   | MMC Receive IPV4 No Payload Octet Counter Interrupt Mask           
 *  [19]    | RW     | 0x0   | MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask           
 *  [20]    | RW     | 0x0   | MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask
 *  [21]    | RW     | 0x0   | MMC Receive IPV6 Good Octet Counter Interrupt Mask                 
 *  [22]    | RW     | 0x0   | MMC Receive IPV6 Header Error Octet Counter Interrupt Mask         
 *  [23]    | RW     | 0x0   | MMC Receive IPV6 No Payload Octet Counter Interrupt Mask           
 *  [24]    | RW     | 0x0   | MMC Receive UDP Good Octet Counter Interrupt Mask                  
 *  [25]    | RW     | 0x0   | MMC Receive UDP Error Octet Counter Interrupt Mask                 
 *  [26]    | RW     | 0x0   | MMC Receive TCP Good Octet Counter Interrupt Mask                  
 *  [27]    | RW     | 0x0   | MMC Receive TCP Error Octet Counter Interrupt Mask                 
 *  [28]    | RW     | 0x0   | MMC Receive ICMP Good Octet Counter Interrupt Mask                 
 *  [29]    | RW     | 0x0   | MMC Receive ICMP Error Octet Counter Interrupt Mask                
 *  [31:30] | ???    | 0x0   | *UNDEFINED*                                                        
 * 
 */
/*
 * Field : MMC Receive IPV4 Good Frame Counter Interrupt Mask - rxipv4gfim
 * 
 * Setting this bit masks the interrupt when the rxipv4_gd_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : MMC Receive IPV4 Header Error Frame Counter Interrupt Mask - rxipv4herfim
 * 
 * Setting this bit masks the interrupt when the rxipv4_hdrerr_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                      | Value | Description
 * :--------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : MMC Receive IPV4 No Payload Frame Counter Interrupt Mask - rxipv4nopayfim
 * 
 * Setting this bit masks the interrupt when the rxipv4_nopay_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : MMC Receive IPV4 Fragmented Frame Counter Interrupt Mask - rxipv4fragfim
 * 
 * Setting this bit masks the interrupt when the rxipv4_frag_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                       | Value | Description
 * :---------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Mask - rxipv4udsblfim
 * 
 * Setting this bit masks the interrupt when the rxipv4_udsbl_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : MMC Receive IPV6 Good Frame Counter Interrupt Mask - rxipv6gfim
 * 
 * Setting this bit masks the interrupt when the rxipv6_gd_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : MMC Receive IPV6 Header Error Frame Counter Interrupt Mask - rxipv6herfim
 * 
 * Setting this bit masks the interrupt when the rxipv6_hdrerr_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                      | Value | Description
 * :--------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : MMC Receive IPV6 No Payload Frame Counter Interrupt Mask - rxipv6nopayfim
 * 
 * Setting this bit masks the interrupt when the rxipv6_nopay_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : MMC Receive UDP Good Frame Counter Interrupt Mask - rxudpgfim
 * 
 * Setting this bit masks the interrupt when the rxudp_gd_frms counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : MMC Receive UDP Error Frame Counter Interrupt Mask - rxudperfim
 * 
 * Setting this bit masks the interrupt when the rxudp_err_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : MMC Receive TCP Good Frame Counter Interrupt Mask - rxtcpgfim
 * 
 * Setting this bit masks the interrupt when the rxtcp_gd_frms counter reaches half
 * of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : MMC Receive TCP Error Frame Counter Interrupt Mask - rxtcperfim
 * 
 * Setting this bit masks the interrupt when the rxtcp_err_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : MMC Receive ICMP Good Frame Counter Interrupt Mask - rxicmpgfim
 * 
 * Setting this bit masks the interrupt when the rxicmp_gd_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : MMC Receive ICMP Error Frame Counter Interrupt Mask - rxicmperfim
 * 
 * Setting this bit masks the interrupt when the rxicmp_err_frms counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                     | Value | Description
 * :-------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : MMC Receive IPV4 Good Octet Counter Interrupt Mask - rxipv4goim
 * 
 * Setting this bit masks the interrupt when the rxipv4_gd_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : MMC Receive IPV4 Header Error Octet Counter Interrupt Mask - rxipv4heroim
 * 
 * Setting this bit masks the interrupt when the rxipv4_hdrerr_octets counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                      | Value | Description
 * :--------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : MMC Receive IPV4 No Payload Octet Counter Interrupt Mask - rxipv4nopayoim
 * 
 * Setting this bit masks the interrupt when the rxipv4_nopay_octets counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask - rxipv4fragoim
 * 
 * Setting this bit masks the interrupt when the rxipv4_frag_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                       | Value | Description
 * :---------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask - rxipv4udsbloim
 * 
 * Setting this bit masks the interrupt when the rxipv4_udsbl_octets counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : MMC Receive IPV6 Good Octet Counter Interrupt Mask - rxipv6goim
 * 
 * Setting this bit masks the interrupt when the rxipv6_gd_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : MMC Receive IPV6 Header Error Octet Counter Interrupt Mask - rxipv6heroim
 * 
 * Setting this bit masks interrupt when the rxipv6_hdrerr_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                      | Value | Description
 * :--------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_E_NOMASKINTR   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_E_MASKINTR     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : MMC Receive IPV6 No Payload Octet Counter Interrupt Mask - rxipv6nopayoim
 * 
 * Setting this bit masks the interrupt when the rxipv6_nopay_octets counter
 * reaches half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                        | Value | Description
 * :----------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : MMC Receive UDP Good Octet Counter Interrupt Mask - rxudpgoim
 * 
 * Setting this bit masks the interrupt when the rxudp_gd_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : MMC Receive UDP Error Octet Counter Interrupt Mask - rxudperoim
 * 
 * Setting this bit masks the interrupt when the rxudp_err_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : MMC Receive TCP Good Octet Counter Interrupt Mask - rxtcpgoim
 * 
 * Setting this bit masks the interrupt when the rxtcp_gd_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_E_NOMASKINTR  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_E_MASKINTR    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : MMC Receive TCP Error Octet Counter Interrupt Mask - rxtcperoim
 * 
 * Setting this bit masks the interrupt when the rxtcp_err_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : MMC Receive ICMP Good Octet Counter Interrupt Mask - rxicmpgoim
 * 
 * Setting this bit masks the interrupt when the rxicmp_gd_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_E_NOMASKINTR 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_E_MASKINTR   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : MMC Receive ICMP Error Octet Counter Interrupt Mask - rxicmperoim
 * 
 * Setting this bit masks the interrupt when the rxicmp_err_octets counter reaches
 * half of the maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                     | Value | Description
 * :-------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_E_NOMASKINTR | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_E_MASKINTR   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_E_NOMASKINTR    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_E_MASKINTR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM_SET(value) (((value) << 29) & 0x20000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK.
 */
struct ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_s
{
    volatile uint32_t  rxipv4gfim     :  1;  /* MMC Receive IPV4 Good Frame Counter Interrupt Mask */
    volatile uint32_t  rxipv4herfim   :  1;  /* MMC Receive IPV4 Header Error Frame Counter Interrupt Mask */
    volatile uint32_t  rxipv4nopayfim :  1;  /* MMC Receive IPV4 No Payload Frame Counter Interrupt Mask */
    volatile uint32_t  rxipv4fragfim  :  1;  /* MMC Receive IPV4 Fragmented Frame Counter Interrupt Mask */
    volatile uint32_t  rxipv4udsblfim :  1;  /* MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Mask */
    volatile uint32_t  rxipv6gfim     :  1;  /* MMC Receive IPV6 Good Frame Counter Interrupt Mask */
    volatile uint32_t  rxipv6herfim   :  1;  /* MMC Receive IPV6 Header Error Frame Counter Interrupt Mask */
    volatile uint32_t  rxipv6nopayfim :  1;  /* MMC Receive IPV6 No Payload Frame Counter Interrupt Mask */
    volatile uint32_t  rxudpgfim      :  1;  /* MMC Receive UDP Good Frame Counter Interrupt Mask */
    volatile uint32_t  rxudperfim     :  1;  /* MMC Receive UDP Error Frame Counter Interrupt Mask */
    volatile uint32_t  rxtcpgfim      :  1;  /* MMC Receive TCP Good Frame Counter Interrupt Mask */
    volatile uint32_t  rxtcperfim     :  1;  /* MMC Receive TCP Error Frame Counter Interrupt Mask */
    volatile uint32_t  rxicmpgfim     :  1;  /* MMC Receive ICMP Good Frame Counter Interrupt Mask */
    volatile uint32_t  rxicmperfim    :  1;  /* MMC Receive ICMP Error Frame Counter Interrupt Mask */
    uint32_t                          :  2;  /* *UNDEFINED* */
    volatile uint32_t  rxipv4goim     :  1;  /* MMC Receive IPV4 Good Octet Counter Interrupt Mask */
    volatile uint32_t  rxipv4heroim   :  1;  /* MMC Receive IPV4 Header Error Octet Counter Interrupt Mask */
    volatile uint32_t  rxipv4nopayoim :  1;  /* MMC Receive IPV4 No Payload Octet Counter Interrupt Mask */
    volatile uint32_t  rxipv4fragoim  :  1;  /* MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask */
    volatile uint32_t  rxipv4udsbloim :  1;  /* MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask */
    volatile uint32_t  rxipv6goim     :  1;  /* MMC Receive IPV6 Good Octet Counter Interrupt Mask */
    volatile uint32_t  rxipv6heroim   :  1;  /* MMC Receive IPV6 Header Error Octet Counter Interrupt Mask */
    volatile uint32_t  rxipv6nopayoim :  1;  /* MMC Receive IPV6 No Payload Octet Counter Interrupt Mask */
    volatile uint32_t  rxudpgoim      :  1;  /* MMC Receive UDP Good Octet Counter Interrupt Mask */
    volatile uint32_t  rxudperoim     :  1;  /* MMC Receive UDP Error Octet Counter Interrupt Mask */
    volatile uint32_t  rxtcpgoim      :  1;  /* MMC Receive TCP Good Octet Counter Interrupt Mask */
    volatile uint32_t  rxtcperoim     :  1;  /* MMC Receive TCP Error Octet Counter Interrupt Mask */
    volatile uint32_t  rxicmpgoim     :  1;  /* MMC Receive ICMP Good Octet Counter Interrupt Mask */
    volatile uint32_t  rxicmperoim    :  1;  /* MMC Receive ICMP Error Octet Counter Interrupt Mask */
    uint32_t                          :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK. */
typedef struct ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_s  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_OFST        0x200
/* The address of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_OFST))

/*
 * Register : Register 130 (MMC Receive Checksum Offload Interrupt Register) - gmacgrp_mmc_ipc_receive_interrupt
 * 
 * This register maintains the interrupts generated when receive IPC statistic
 * counters reach half their maximum values (0x8000_0000 for 32-bit counter and
 * 0x8000 for 16-bit counter), and when they cross their maximum values
 * (0xFFFF_FFFF for 32-bit counter and 0xFFFF for 16-bit counter). When Counter
 * Stop Rollover is set, then interrupts are set but the counter remains at all-
 * ones. The MMC Receive Checksum Offload Interrupt register is 32-bits wide. When
 * the MMC IPC counter that caused the interrupt is read, its corresponding
 * interrupt bit is cleared. The counter's least-significant byte lane (bits[7:0])
 * must be read to clear the interrupt bit.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                                          
 * :--------|:-------|:------|:----------------------------------------------------------------------
 *  [0]     | R      | 0x0   | MMC Receive IPV4 Good Frame Counter Interrupt Status                 
 *  [1]     | R      | 0x0   | MMC Receive IPV4 Header Error Frame Counter Interrupt Status         
 *  [2]     | R      | 0x0   | MMC Receive IPV4 No Payload Frame Counter Interrupt Status           
 *  [3]     | R      | 0x0   | MMC Receive IPV4 Fragmented Frame Counter Interrupt Status           
 *  [4]     | R      | 0x0   | MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Status
 *  [5]     | R      | 0x0   | MMC Receive IPV6 Good Frame Counter Interrupt Status                 
 *  [6]     | R      | 0x0   | MMC Receive IPV6 Header Error Frame Counter Interrupt Status         
 *  [7]     | R      | 0x0   | MMC Receive IPV6 No Payload Frame Counter Interrupt Status           
 *  [8]     | R      | 0x0   | MMC Receive UDP Good Frame Counter Interrupt Status                  
 *  [9]     | R      | 0x0   | MMC Receive UDP Error Frame Counter Interrupt Status                 
 *  [10]    | R      | 0x0   | MMC Receive TCP Good Frame Counter Interrupt Status                  
 *  [11]    | R      | 0x0   | MMC Receive TCP Error Frame Counter Interrupt Status                 
 *  [12]    | R      | 0x0   | MMC Receive ICMP Good Frame Counter Interrupt Status                 
 *  [13]    | R      | 0x0   | MMC Receive ICMP Error Frame Counter Interrupt Status                
 *  [15:14] | ???    | 0x0   | *UNDEFINED*                                                          
 *  [16]    | R      | 0x0   | MMC Receive IPV4 Good Octet Counter Interrupt Status                 
 *  [17]    | R      | 0x0   | MMC Receive IPV4 Header Error Octet Counter Interrupt Status         
 *  [18]    | R      | 0x0   | MMC Receive IPV4 No Payload Octet Counter Interrupt Status           
 *  [19]    | R      | 0x0   | MMC Receive IPV4 Fragmented Octet Counter Interrupt Status           
 *  [20]    | R      | 0x0   | MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Status
 *  [21]    | R      | 0x0   | MMC Receive IPV6 Good Octet Counter Interrupt Status                 
 *  [22]    | R      | 0x0   | MMC Receive IPV6 Header Error Octet Counter Interrupt Status         
 *  [23]    | R      | 0x0   | MMC Receive IPV6 No Payload Octet Counter Interrupt Status           
 *  [24]    | R      | 0x0   | MMC Receive UDP Good Octet Counter Interrupt Status                  
 *  [25]    | R      | 0x0   | MMC Receive UDP Error Octet Counter Interrupt Status                 
 *  [26]    | R      | 0x0   | MMC Receive TCP Good Octet Counter Interrupt Status                  
 *  [27]    | R      | 0x0   | MMC Receive TCP Error Octet Counter Interrupt Status                 
 *  [28]    | R      | 0x0   | MMC Receive ICMP Good Octet Counter Interrupt Status                 
 *  [29]    | R      | 0x0   | MMC Receive ICMP Error Octet Counter Interrupt Status                
 *  [31:30] | ???    | 0x0   | *UNDEFINED*                                                          
 * 
 */
/*
 * Field : MMC Receive IPV4 Good Frame Counter Interrupt Status - rxipv4gfis
 * 
 * This bit is set when the rxipv4_gd_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : MMC Receive IPV4 Header Error Frame Counter Interrupt Status - rxipv4herfis
 * 
 * This bit is set when the rxipv4_hdrerr_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_E_NOINTERRUPT   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_E_INTERR        0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : MMC Receive IPV4 No Payload Frame Counter Interrupt Status - rxipv4nopayfis
 * 
 * This bit is set when the rxipv4_nopay_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : MMC Receive IPV4 Fragmented Frame Counter Interrupt Status - rxipv4fragfis
 * 
 * This bit is set when the rxipv4_frag_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_E_NOINTERRUPT  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_E_INTERR       0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Status - rxipv4udsblfis
 * 
 * This bit is set when the rxipv4_udsbl_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : MMC Receive IPV6 Good Frame Counter Interrupt Status - rxipv6gfis
 * 
 * This bit is set when the rxipv6_gd_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : MMC Receive IPV6 Header Error Frame Counter Interrupt Status - rxipv6herfis
 * 
 * This bit is set when the rxipv6_hdrerr_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_E_NOINTERRUPT   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_E_INTERR        0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : MMC Receive IPV6 No Payload Frame Counter Interrupt Status - rxipv6nopayfis
 * 
 * This bit is set when the rxipv6_nopay_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : MMC Receive UDP Good Frame Counter Interrupt Status - rxudpgfis
 * 
 * This bit is set when the rxudp_gd_frms counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_E_NOINTERRUPT  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_E_INTERR       0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : MMC Receive UDP Error Frame Counter Interrupt Status - rxudperfis
 * 
 * This bit is set when the rxudp_err_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : MMC Receive TCP Good Frame Counter Interrupt Status - rxtcpgfis
 * 
 * This bit is set when the rxtcp_gd_frms counter reaches half of the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_E_NOINTERRUPT  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_E_INTERR       0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : MMC Receive TCP Error Frame Counter Interrupt Status - rxtcperfis
 * 
 * This bit is set when the rxtcp_err_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : MMC Receive ICMP Good Frame Counter Interrupt Status - rxicmpgfis
 * 
 * This bit is set when the rxicmp_gd_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : MMC Receive ICMP Error Frame Counter Interrupt Status - rxicmperfis
 * 
 * This bit is set when the rxicmp_err_frms counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_E_NOINTERRUPT    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_E_INTERR         0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : MMC Receive IPV4 Good Octet Counter Interrupt Status - rxipv4gois
 * 
 * This bit is set when the rxipv4_gd_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : MMC Receive IPV4 Header Error Octet Counter Interrupt Status - rxipv4herois
 * 
 * This bit is set when the rxipv4_hdrerr_octets counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_E_NOINTERRUPT   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_E_INTERR        0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : MMC Receive IPV4 No Payload Octet Counter Interrupt Status - rxipv4nopayois
 * 
 * This bit is set when the rxipv4_nopay_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : MMC Receive IPV4 Fragmented Octet Counter Interrupt Status - rxipv4fragois
 * 
 * This bit is set when the rxipv4_frag_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                   | Value | Description
 * :-----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_E_NOINTERRUPT  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_E_INTERR       0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Status - rxipv4udsblois
 * 
 * This bit is set when the rxipv4_udsbl_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : MMC Receive IPV6 Good Octet Counter Interrupt Status - rxipv6gois
 * 
 * This bit is set when the rxipv6_gd_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : MMC Receive IPV6 Header Error Octet Counter Interrupt Status - rxipv6herois
 * 
 * This bit is set when the rxipv6_hdrerr_octets counter reaches half of the
 * maximum value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                  | Value | Description
 * :----------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_E_NOINTERRUPT   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_E_INTERR        0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_MSB        22
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : MMC Receive IPV6 No Payload Octet Counter Interrupt Status - rxipv6nopayois
 * 
 * This bit is set when the rxipv6_nopay_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : MMC Receive UDP Good Octet Counter Interrupt Status - rxudpgois
 * 
 * This bit is set when the rxudp_gd_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_E_NOINTERRUPT  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_E_INTERR       0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : MMC Receive UDP Error Octet Counter Interrupt Status - rxudperois
 * 
 * This bit is set when the rxudp_err_octets counter reaches half the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : MMC Receive TCP Good Octet Counter Interrupt Status - rxtcpgois
 * 
 * This bit is set when the rxtcp_gd_octets counter reaches half the maximum value
 * or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                               | Value | Description
 * :-------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_E_NOINTERRUPT  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_E_INTERR       0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : MMC Receive TCP Error Octet Counter Interrupt Status - rxtcperois
 * 
 * This bit is set when the rxtcp_err_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : MMC Receive ICMP Good Octet Counter Interrupt Status - rxicmpgois
 * 
 * This bit is set when the rxicmp_gd_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                | Value | Description
 * :--------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_E_NOINTERRUPT 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_E_INTERR      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : MMC Receive ICMP Error Octet Counter Interrupt Status - rxicmperois
 * 
 * This bit is set when the rxicmp_err_octets counter reaches half of the maximum
 * value or the maximum value.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_E_NOINTERRUPT | 0x0   |            
 *  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_E_INTERR      | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_E_NOINTERRUPT    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS
 * 
 */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_E_INTERR         0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS register field value. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS register field. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS field value from a register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS_SET(value) (((value) << 29) & 0x20000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT.
 */
struct ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_s
{
    const volatile uint32_t  rxipv4gfis     :  1;  /* MMC Receive IPV4 Good Frame Counter Interrupt Status */
    const volatile uint32_t  rxipv4herfis   :  1;  /* MMC Receive IPV4 Header Error Frame Counter Interrupt Status */
    const volatile uint32_t  rxipv4nopayfis :  1;  /* MMC Receive IPV4 No Payload Frame Counter Interrupt Status */
    const volatile uint32_t  rxipv4fragfis  :  1;  /* MMC Receive IPV4 Fragmented Frame Counter Interrupt Status */
    const volatile uint32_t  rxipv4udsblfis :  1;  /* MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Status */
    const volatile uint32_t  rxipv6gfis     :  1;  /* MMC Receive IPV6 Good Frame Counter Interrupt Status */
    const volatile uint32_t  rxipv6herfis   :  1;  /* MMC Receive IPV6 Header Error Frame Counter Interrupt Status */
    const volatile uint32_t  rxipv6nopayfis :  1;  /* MMC Receive IPV6 No Payload Frame Counter Interrupt Status */
    const volatile uint32_t  rxudpgfis      :  1;  /* MMC Receive UDP Good Frame Counter Interrupt Status */
    const volatile uint32_t  rxudperfis     :  1;  /* MMC Receive UDP Error Frame Counter Interrupt Status */
    const volatile uint32_t  rxtcpgfis      :  1;  /* MMC Receive TCP Good Frame Counter Interrupt Status */
    const volatile uint32_t  rxtcperfis     :  1;  /* MMC Receive TCP Error Frame Counter Interrupt Status */
    const volatile uint32_t  rxicmpgfis     :  1;  /* MMC Receive ICMP Good Frame Counter Interrupt Status */
    const volatile uint32_t  rxicmperfis    :  1;  /* MMC Receive ICMP Error Frame Counter Interrupt Status */
    uint32_t                                :  2;  /* *UNDEFINED* */
    const volatile uint32_t  rxipv4gois     :  1;  /* MMC Receive IPV4 Good Octet Counter Interrupt Status */
    const volatile uint32_t  rxipv4herois   :  1;  /* MMC Receive IPV4 Header Error Octet Counter Interrupt Status */
    const volatile uint32_t  rxipv4nopayois :  1;  /* MMC Receive IPV4 No Payload Octet Counter Interrupt Status */
    const volatile uint32_t  rxipv4fragois  :  1;  /* MMC Receive IPV4 Fragmented Octet Counter Interrupt Status */
    const volatile uint32_t  rxipv4udsblois :  1;  /* MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Status */
    const volatile uint32_t  rxipv6gois     :  1;  /* MMC Receive IPV6 Good Octet Counter Interrupt Status */
    const volatile uint32_t  rxipv6herois   :  1;  /* MMC Receive IPV6 Header Error Octet Counter Interrupt Status */
    const volatile uint32_t  rxipv6nopayois :  1;  /* MMC Receive IPV6 No Payload Octet Counter Interrupt Status */
    const volatile uint32_t  rxudpgois      :  1;  /* MMC Receive UDP Good Octet Counter Interrupt Status */
    const volatile uint32_t  rxudperois     :  1;  /* MMC Receive UDP Error Octet Counter Interrupt Status */
    const volatile uint32_t  rxtcpgois      :  1;  /* MMC Receive TCP Good Octet Counter Interrupt Status */
    const volatile uint32_t  rxtcperois     :  1;  /* MMC Receive TCP Error Octet Counter Interrupt Status */
    const volatile uint32_t  rxicmpgois     :  1;  /* MMC Receive ICMP Good Octet Counter Interrupt Status */
    const volatile uint32_t  rxicmperois    :  1;  /* MMC Receive ICMP Error Octet Counter Interrupt Status */
    uint32_t                                :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT. */
typedef struct ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_s  ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_OFST        0x208
/* The address of the ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT register. */
#define ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_OFST))

/*
 * Register : Register 132 (rxipv4_gd_frms Register) - gmacgrp_rxipv4_gd_frms
 * 
 * Number of good IPv4 datagrams received with the TCP, UDP, or ICMP payload
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description   
 * :-------|:-------|:------|:---------------
 *  [31:0] | R      | 0x0   | rxipv4_gd_frms
 * 
 */
/*
 * Field : rxipv4_gd_frms - cnt
 * 
 * Number of good IPv4 datagrams received with the TCP, UDP, or ICMP payload
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_gd_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_s  ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_OFST        0x210
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_OFST))

/*
 * Register : Register 133 (rxipv4_hdrerr_frms Register) - gmacgrp_rxipv4_hdrerr_frms
 * 
 * Number of IPv4 datagrams received with header (checksum, length, or version
 * mismatch) errors
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description       
 * :-------|:-------|:------|:-------------------
 *  [31:0] | R      | 0x0   | rxipv4_hdrerr_frms
 * 
 */
/*
 * Field : rxipv4_hdrerr_frms - cnt
 * 
 * Number of IPv4 datagrams received with header (checksum, length, or version
 * mismatch) errors
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_hdrerr_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_s  ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_OFST        0x214
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_OFST))

/*
 * Register : Register 134 (rxipv4_nopay_frms Register) - gmacgrp_rxipv4_nopay_frms
 * 
 * Number of IPv4 datagram frames received that did not have a TCP, UDP, or ICMP
 * payload processed by the Checksum engine
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description      
 * :-------|:-------|:------|:------------------
 *  [31:0] | R      | 0x0   | rxipv4_nopay_frms
 * 
 */
/*
 * Field : rxipv4_nopay_frms - cnt
 * 
 * Number of IPv4 datagram frames received that did not have a TCP, UDP, or ICMP
 * payload processed by the Checksum engine
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_nopay_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_s  ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_OFST        0x218
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_OFST))

/*
 * Register : Register 135 (rxipv4_frag_frms Register) - gmacgrp_rxipv4_frag_frms
 * 
 * Number of good IPv4 datagrams with fragmentation
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | R      | 0x0   | rxipv4_frag_frms
 * 
 */
/*
 * Field : rxipv4_frag_frms - cnt
 * 
 * Number of good IPv4 datagrams with fragmentation
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_frag_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_s  ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_OFST        0x21c
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_OFST))

/*
 * Register : Register 136 (rxipv4_udsbl_frms Register) - gmacgrp_rxipv4_udsbl_frms
 * 
 * Number of good IPv4 datagrams received that had a UDP payload with checksum
 * disabled
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description      
 * :-------|:-------|:------|:------------------
 *  [31:0] | R      | 0x0   | rxipv4_udsbl_frms
 * 
 */
/*
 * Field : rxipv4_udsbl_frms - cnt
 * 
 * Number of good IPv4 datagrams received that had a UDP payload with checksum
 * disabled
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_udsbl_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_s  ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_OFST        0x220
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_OFST))

/*
 * Register : Register 137 (rxipv6_gd_frms Register) - gmacgrp_rxipv6_gd_frms
 * 
 * Number of good IPv6 datagrams received with TCP, UDP, or ICMP payloads
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description   
 * :-------|:-------|:------|:---------------
 *  [31:0] | R      | 0x0   | rxipv6_gd_frms
 * 
 */
/*
 * Field : rxipv6_gd_frms - cnt
 * 
 * Number of good IPv6 datagrams received with TCP, UDP, or ICMP payloads
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv6_gd_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_s  ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_OFST        0x224
/* The address of the ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_OFST))

/*
 * Register : Register 138 (rxipv6_hdrerr_frms Register) - gmacgrp_rxipv6_hdrerr_frms
 * 
 * Number of IPv6 datagrams received with header errors (length or version
 * mismatch)
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description       
 * :-------|:-------|:------|:-------------------
 *  [31:0] | R      | 0x0   | rxipv6_hdrerr_frms
 * 
 */
/*
 * Field : rxipv6_hdrerr_frms - cnt
 * 
 * Number of IPv6 datagrams received with header errors (length or version
 * mismatch)
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv6_hdrerr_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_s  ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_OFST        0x228
/* The address of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_OFST))

/*
 * Register : Register 139 (rxipv6_nopay_frms) - gmacgrp_rxipv6_nopay_frms
 * 
 * Number of IPv6 datagram frames received that did not have a TCP, UDP, or ICMP
 * payload. This includes all IPv6 datagrams with fragmentation or security
 * extension headers
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description      
 * :-------|:-------|:------|:------------------
 *  [31:0] | R      | 0x0   | rxipv6_nopay_frms
 * 
 */
/*
 * Field : rxipv6_nopay_frms - cnt
 * 
 * Number of IPv6 datagram frames received that did not have a TCP, UDP, or ICMP
 * payload. This includes all IPv6 datagrams with fragmentation or security
 * extension headers
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv6_nopay_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_s  ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_OFST        0x22c
/* The address of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_OFST))

/*
 * Register : Register 140 (rxudp_gd_frms Register) - gmacgrp_rxudp_gd_frms
 * 
 * Number of good IP datagrams with a good UDP payload. This counter is not updated
 * when the counter is incremented
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description  
 * :-------|:-------|:------|:--------------
 *  [31:0] | R      | 0x0   | rxudp_gd_frms
 * 
 */
/*
 * Field : rxudp_gd_frms - cnt
 * 
 * Number of good IP datagrams with a good UDP payload. This counter is not updated
 * when the counter is incremented
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXUDP_GD_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxudp_gd_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXUDP_GD_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_s  ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_OFST        0x230
/* The address of the ALT_EMAC_GMACGRP_RXUDP_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_OFST))

/*
 * Register : Register 141 (rxudp_err_frms Register) - gmacgrp_rxudp_err_frms
 * 
 * Number of good IP datagrams whose UDP payload has a checksum error
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description   
 * :-------|:-------|:------|:---------------
 *  [31:0] | R      | 0x0   | rxudp_err_frms
 * 
 */
/*
 * Field : rxudp_err_frms - cnt
 * 
 * Number of good IP datagrams whose UDP payload has a checksum error
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxudp_err_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_s  ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_OFST        0x234
/* The address of the ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_OFST))

/*
 * Register : Register 142 (rxtcp_gd_frms Register) - gmacgrp_rxtcp_gd_frms
 * 
 * Number of good IP datagrams with a good TCP payload
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description           
 * :-------|:-------|:------|:-----------------------
 *  [31:0] | R      | 0x0   | rxtcp_gd_frms Register
 * 
 */
/*
 * Field : rxtcp_gd_frms Register - cnt
 * 
 * Number of good IP datagrams with a good TCP payload
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXTCP_GD_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxtcp_gd_frms Register */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXTCP_GD_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_s  ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_OFST        0x238
/* The address of the ALT_EMAC_GMACGRP_RXTCP_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_OFST))

/*
 * Register : Register 143 (rxtcp_err_frms Register) - gmacgrp_rxtcp_err_frms
 * 
 * Number of good IP datagrams whose TCP payload has a checksum error
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description   
 * :-------|:-------|:------|:---------------
 *  [31:0] | R      | 0x0   | rxtcp_err_frms
 * 
 */
/*
 * Field : rxtcp_err_frms - cnt
 * 
 * Number of good IP datagrams whose TCP payload has a checksum error
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxtcp_err_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_s  ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_OFST        0x23c
/* The address of the ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_OFST))

/*
 * Register : Register 144 (rxicmp_gd_frms Register) - gmacgrp_rxicmp_gd_frms
 * 
 * Number of good IP datagrams with a good ICMP payload
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description   
 * :-------|:-------|:------|:---------------
 *  [31:0] | R      | 0x0   | rxicmp_gd_frms
 * 
 */
/*
 * Field : rxicmp_gd_frms - cnt
 * 
 * Number of good IP datagrams with a good ICMP payload
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXICMP_GD_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxicmp_gd_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXICMP_GD_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_s  ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_OFST        0x240
/* The address of the ALT_EMAC_GMACGRP_RXICMP_GD_FRMS register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_OFST))

/*
 * Register : Register 145 (rxicmp_err_frms Register) - gmacgrp_rxicmp_err_frms
 * 
 * Number of good IP datagrams whose ICMP payload has a checksum error
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description    
 * :-------|:-------|:------|:----------------
 *  [31:0] | R      | 0x0   | rxicmp_err_frms
 * 
 */
/*
 * Field : rxicmp_err_frms - cnt
 * 
 * Number of good IP datagrams whose ICMP payload has a checksum error
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS.
 */
struct ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_s
{
    const volatile uint32_t  cnt : 32;  /* rxicmp_err_frms */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS. */
typedef struct ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_s  ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_OFST        0x244
/* The address of the ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_OFST))

/*
 * Register : Register 148 (rxipv4_gd_octets Register) - gmacgrp_rxipv4_gd_octets
 * 
 * Number of bytes received in good IPv4 datagrams encapsulating TCP, UDP, or ICMP
 * data
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | R      | 0x0   | rxipv4_gd_octets
 * 
 */
/*
 * Field : rxipv4_gd_octets - cnt
 * 
 * Number of bytes received in good IPv4 datagrams encapsulating TCP, UDP, or ICMP
 * data
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_gd_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_OFST        0x250
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_OFST))

/*
 * Register : Register 149 (rxipv4_hdrerr_octets) - gmacgrp_rxipv4_hdrerr_octets
 * 
 * Number of bytes received in IPv4 datagrams with header errors (checksum, length,
 * version mismatch). The value in the Length field of IPv4 header is used to
 * update this counter
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                  
 * :-------|:-------|:------|:------------------------------
 *  [31:0] | R      | 0x0   | rxipv4_hdrerr_octets Register
 * 
 */
/*
 * Field : rxipv4_hdrerr_octets Register - cnt
 * 
 * Number of bytes received in IPv4 datagrams with header errors (checksum, length,
 * version mismatch). The value in the Length field of IPv4 header is used to
 * update this counter
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_hdrerr_octets Register */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_OFST        0x254
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_OFST))

/*
 * Register : Register 150 (rxipv4_nopay_octets Register) - gmacgrp_rxipv4_nopay_octets
 * 
 * Number of bytes received in IPv4 datagrams that did not have a TCP, UDP, or ICMP
 * payload. The value in the IPv4 headers Length field is used to update this
 * counter
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description        
 * :-------|:-------|:------|:--------------------
 *  [31:0] | R      | 0x0   | rxipv4_nopay_octets
 * 
 */
/*
 * Field : rxipv4_nopay_octets - cnt
 * 
 * Number of bytes received in IPv4 datagrams that did not have a TCP, UDP, or ICMP
 * payload. The value in the IPv4 headers Length field is used to update this
 * counter
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_nopay_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_OFST        0x258
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_OFST))

/*
 * Register : Register 151 (rxipv4_frag_octets Register) - gmacgrp_rxipv4_frag_octets
 * 
 * Number of bytes received in fragmented IPv4 datagrams. The value in the IPv4
 * headers Length field is used to update this counter
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description       
 * :-------|:-------|:------|:-------------------
 *  [31:0] | R      | 0x0   | rxipv4_frag_octets
 * 
 */
/*
 * Field : rxipv4_frag_octets - cnt
 * 
 * Number of bytes received in fragmented IPv4 datagrams. The value in the IPv4
 * headers Length field is used to update this counter
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_frag_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_OFST        0x25c
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_OFST))

/*
 * Register : Register 152 (rxipv4_udsbl_octets Register) - gmacgrp_rxipv4_udsbl_octets
 * 
 * Number of bytes received in a UDP segment that had the UDP checksum disabled.
 * This counter does not count IP Header bytes
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description        
 * :-------|:-------|:------|:--------------------
 *  [31:0] | R      | 0x0   | rxipv4_udsbl_octets
 * 
 */
/*
 * Field : rxipv4_udsbl_octets - cnt
 * 
 * Number of bytes received in a UDP segment that had the UDP checksum disabled.
 * This counter does not count IP Header bytes
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv4_udsbl_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_OFST        0x260
/* The address of the ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_OFST))

/*
 * Register : Register 153 (rxipv6_gd_octets Register) - gmacgrp_rxipv6_gd_octets
 * 
 * Number of bytes received in good IPv6 datagrams encapsulating TCP, UDP or ICMPv6
 * data
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | R      | 0x0   | rxipv6_gd_octets
 * 
 */
/*
 * Field : rxipv6_gd_octets - cnt
 * 
 * Number of bytes received in good IPv6 datagrams encapsulating TCP, UDP or ICMPv6
 * data
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv6_gd_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_OFST        0x264
/* The address of the ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_OFST))

/*
 * Register : Register 154 (rxipv6_hdrerr_octets Register) - gmacgrp_rxipv6_hdrerr_octets
 * 
 * Number of bytes received in IPv6 datagrams with header errors (length, version
 * mismatch). The value in the IPv6 headers Length field is used to update this
 * counter
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description         
 * :-------|:-------|:------|:---------------------
 *  [31:0] | R      | 0x0   | rxipv6_hdrerr_octets
 * 
 */
/*
 * Field : rxipv6_hdrerr_octets - cnt
 * 
 * Number of bytes received in IPv6 datagrams with header errors (length, version
 * mismatch). The value in the IPv6 headers Length field is used to update this
 * counter
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv6_hdrerr_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_OFST        0x268
/* The address of the ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_OFST))

/*
 * Register : Register 155 (rxipv6_nopay_octets Register) - gmacgrp_rxipv6_nopay_octets
 * 
 * Number of bytes received in IPv6 datagrams that did not have a TCP, UDP, or ICMP
 * payload. The value in the IPv6 headers Length field is used to update this
 * counter
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description        
 * :-------|:-------|:------|:--------------------
 *  [31:0] | R      | 0x0   | rxipv6_nopay_octets
 * 
 */
/*
 * Field : rxipv6_nopay_octets - cnt
 * 
 * Number of bytes received in IPv6 datagrams that did not have a TCP, UDP, or ICMP
 * payload. The value in the IPv6 headers Length field is used to update this
 * counter
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxipv6_nopay_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_s  ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_OFST        0x26c
/* The address of the ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_OFST))

/*
 * Register : Register 156 (rxudp_gd_octets Register) - gmacgrp_rxudp_gd_octets
 * 
 * Number of bytes received in a good UDP segment. This counter does not count IP
 * header bytes
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description    
 * :-------|:-------|:------|:----------------
 *  [31:0] | R      | 0x0   | rxudp_gd_octets
 * 
 */
/*
 * Field : rxudp_gd_octets - cnt
 * 
 * Number of bytes received in a good UDP segment. This counter does not count IP
 * header bytes
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxudp_gd_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_s  ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_OFST        0x270
/* The address of the ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_OFST))

/*
 * Register : Register 157 (rxudp_err_octets Register) - gmacgrp_rxudp_err_octets
 * 
 * Number of bytes received in a UDP segment that had checksum errors
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | R      | 0x0   | rxudp_err_octets
 * 
 */
/*
 * Field : rxudp_err_octets - cnt
 * 
 * Number of bytes received in a UDP segment that had checksum errors
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxudp_err_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_s  ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_OFST        0x274
/* The address of the ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_OFST))

/*
 * Register : Register 158 (rxtcp_gd_octets Register) - gmacgrp_rxtcp_gd_octets
 * 
 * Number of bytes received in a good TCP segment
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description    
 * :-------|:-------|:------|:----------------
 *  [31:0] | R      | 0x0   | rxtcp_gd_octets
 * 
 */
/*
 * Field : rxtcp_gd_octets - cnt
 * 
 * Number of bytes received in a good TCP segment
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxtcp_gd_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_s  ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_OFST        0x278
/* The address of the ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_OFST))

/*
 * Register : Register 159 (rxtcp_err_octets Register) - gmacgrp_rxtcperroctets
 * 
 * Number of bytes received in a TCP segment with checksum errors
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | R      | 0x0   | rxtcp_err_octets
 * 
 */
/*
 * Field : rxtcp_err_octets - rxtcp_err_octets
 * 
 * Number of bytes received in a TCP segment with checksum errors
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS register field. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS register field. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS register field. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS register field value. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS register field value. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS register field. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS field value from a register. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RXTCP_ERR_OCTETS_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXTCPERROCTETS.
 */
struct ALT_EMAC_GMACGRP_RXTCPERROCTETS_s
{
    const volatile uint32_t  rxtcp_err_octets : 32;  /* rxtcp_err_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXTCPERROCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXTCPERROCTETS_s  ALT_EMAC_GMACGRP_RXTCPERROCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXTCPERROCTETS register. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXTCPERROCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_OFST        0x27c
/* The address of the ALT_EMAC_GMACGRP_RXTCPERROCTETS register. */
#define ALT_EMAC_GMACGRP_RXTCPERROCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXTCPERROCTETS_OFST))

/*
 * Register : Register 160 (rxicmp_gd_octets Register) - gmacgrp_rxicmp_gd_octets
 * 
 * Number of bytes received in a good ICMP segment
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | R      | 0x0   | rxicmp_gd_octets
 * 
 */
/*
 * Field : rxicmp_gd_octets - cnt
 * 
 * Number of bytes received in a good ICMP segment
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxicmp_gd_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_s  ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_OFST        0x280
/* The address of the ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_OFST))

/*
 * Register : Register 161 (rxicmp_err_octets Register) - gmacgrp_rxicmp_err_octets
 * 
 * Number of bytes received in an ICMP segment with checksum errors
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description      
 * :-------|:-------|:------|:------------------
 *  [31:0] | R      | 0x0   | rxicmp_err_octets
 * 
 */
/*
 * Field : rxicmp_err_octets - cnt
 * 
 * Number of bytes received in an ICMP segment with checksum errors
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT register field value. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT register field. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT field value from a register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_CNT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS.
 */
struct ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_s
{
    const volatile uint32_t  cnt : 32;  /* rxicmp_err_octets */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS. */
typedef struct ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_s  ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_OFST        0x284
/* The address of the ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS register. */
#define ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_OFST))

/*
 * Register : gmacgrp_l3_l4_control0
 * 
 * <b> Register 256 (Layer 3 and Layer 4 Control Register 0) </b>
 * 
 * This register controls the operations of the filter 0 of Layer 3 and Layer 4.
 * This register is reserved if the Layer 3 and Layer 4 Filtering feature is not
 * selected during core configuration.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                   
 * :--------|:-------|:------|:-----------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0        
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1    
 *  [2]     | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0        
 *  [3]     | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0       
 *  [4]     | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0        
 *  [5]     | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0       
 *  [10:6]  | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0       
 *  [15:11] | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0       
 *  [16]    | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0        
 *  [17]    | R      | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17   
 *  [18]    | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0        
 *  [19]    | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0       
 *  [20]    | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0        
 *  [21]    | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0       
 *  [31:22] | R      | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22
 * 
 */
/*
 * Field : l3pen0
 * 
 * Layer 3 Protocol Enable
 * 
 * When set, this bit indicates that the Layer 3 IP Source or Destination Address
 * matching is enabled for the IPv6 frames. When reset, this bit indicates that the
 * Layer 3 IP Source or Destination Address matching is enabled for the IPv4
 * frames.
 * 
 * The Layer 3 matching is done only when either L3SAM0 or L3DAM0 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : reserved_1
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : l3sam0
 * 
 * Layer 3 IP SA Match Enable
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for matching. When reset, the MAC ignores the Layer 3 IP Source Address field
 * for matching.
 * 
 * Note: When Bit 0 (L3PEN0) is set, you should set either this bit or Bit 4
 * (L3DAM0) because either IPv6 SA or DA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : l3saim0
 * 
 * Layer 3 IP SA Inverse Match Enable
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for inverse matching. When reset, this bit indicates that the Layer 3 IP Source
 * Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 2 (L3SAM0) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : l3dam0
 * 
 * Layer 3 IP DA Match Enable
 * 
 * When set, this bit indicates that Layer 3 IP Destination Address field is
 * enabled for matching. When reset, the MAC ignores the Layer 3 IP Destination
 * Address field for matching.
 * 
 * Note: When Bit 0 (L3PEN0) is set, you should set either this bit or Bit 2
 * (L3SAM0) because either IPv6 DA or SA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : l3daim0
 * 
 * Layer 3 IP DA Inverse Match Enable
 * 
 * When set, this bit indicates that the Layer 3 IP Destination Address field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 3 IP
 * Destination Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 4 (L3DAM0) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : l3hsbm0
 * 
 * Layer 3 IP SA Higher Bits Match
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of lower bits of IP Source Address that are
 * masked for matching in the IPv4 frames. The following list describes the values
 * of this field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * This field contains Bits [4:0] of the field that indicates the number of higher
 * bits of IP Source or Destination Address matched in the IPv6 frames.
 * 
 * This field is valid and applicable only if L3DAM0 or L3SAM0 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_SET_MSK    0x000007c0
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_CLR_MSK    0xfffff83f
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_GET(value) (((value) & 0x000007c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0_SET(value) (((value) << 6) & 0x000007c0)

/*
 * Field : l3hdbm0
 * 
 * Layer 3 IP DA Higher Bits Match
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of higher bits of IP Destination Address that are
 * matched in the IPv4 frames. The following list describes the values of this
 * field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * Bits [12:11] of this field correspond to Bits [6:5] of L3HSBM0, which indicate
 * the number of lower bits of IP Source or Destination Address that are masked in
 * the IPv6 frames. The following list describes the concatenated values of the
 * L3HDBM0[1:0] and L3HSBM0 bits:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 127: All bits except MSb are masked.
 * 
 * This field is valid and applicable only if L3DAM0 or L3SAM0 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_SET_MSK    0x0000f800
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_CLR_MSK    0xffff07ff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_GET(value) (((value) & 0x0000f800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0_SET(value) (((value) << 11) & 0x0000f800)

/*
 * Field : l4pen0
 * 
 * Layer 4 Protocol Enable
 * 
 * When set, this bit indicates that the Source and Destination Port number fields
 * for UDP frames are used for matching. When reset, this bit indicates that the
 * Source and Destination Port number fields for TCP frames are used for matching.
 * 
 * The Layer 4 matching is done only when either L4SPM0 or L4DPM0 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : reserved_17
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : l4spm0
 * 
 * Layer 4 Source Port Match Enable
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for matching. When reset, the MAC ignores the Layer 4 Source Port number
 * field for matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : l4spim0
 * 
 * Layer 4 Source Port Inverse Match Enable
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 4
 * Source Port number field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 18 (L4SPM0) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : l4dpm0
 * 
 * Layer 4 Destination Port Match Enable
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for matching. When reset, the MAC ignores the Layer 4 Destination Port
 * number field for matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : l4dpim0
 * 
 * Layer 4 Destination Port Inverse Match Enable
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 4
 * Destination Port number field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 20 (L4DPM0) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : reserved_31_22
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_WIDTH      10
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_SET_MSK    0xffc00000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_CLR_MSK    0x003fffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_GET(value) (((value) & 0xffc00000) >> 22)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22_SET(value) (((value) << 22) & 0xffc00000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL0.
 */
struct ALT_EMAC_GMACGRP_L3_L4_CONTROL0_s
{
    volatile uint32_t        l3pen0         :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3PEN0 */
    const volatile uint32_t  reserved_1     :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_1 */
    volatile uint32_t        l3sam0         :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAM0 */
    volatile uint32_t        l3saim0        :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3SAIM0 */
    volatile uint32_t        l3dam0         :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAM0 */
    volatile uint32_t        l3daim0        :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3DAIM0 */
    volatile uint32_t        l3hsbm0        :  5;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HSBM0 */
    volatile uint32_t        l3hdbm0        :  5;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L3HDBM0 */
    volatile uint32_t        l4pen0         :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4PEN0 */
    const volatile uint32_t  reserved_17    :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_17 */
    volatile uint32_t        l4spm0         :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPM0 */
    volatile uint32_t        l4spim0        :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4SPIM0 */
    volatile uint32_t        l4dpm0         :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPM0 */
    volatile uint32_t        l4dpim0        :  1;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_L4DPIM0 */
    const volatile uint32_t  reserved_31_22 : 10;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESERVED_31_22 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL0. */
typedef struct ALT_EMAC_GMACGRP_L3_L4_CONTROL0_s  ALT_EMAC_GMACGRP_L3_L4_CONTROL0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_OFST        0x400
/* The address of the ALT_EMAC_GMACGRP_L3_L4_CONTROL0 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_L3_L4_CONTROL0_OFST))

/*
 * Register : gmacgrp_layer4_address0
 * 
 * <b> Register 257 (Layer 4 Address Register 0)
 * 
 * </b>
 * 
 * You can configure the Layer 3 and Layer 4 Address Registers to be double-
 * synchronized by selecting the Synchronize Layer 3 and Layer 4 Address Registers
 * to Rx Clock Domain option in coreConsultant. If the Layer 3 and Layer 4 Address
 * Registers are configured to be double-synchronized to the Rx clock domains, then
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the Layer 3 and Layer 4 Address Registers
 * are written. For proper synchronization updates, you should perform the
 * consecutive writes to the same Layer 3 and Layer 4 Address Registers after at
 * least four clock cycles delay of the destination clock.
 * 
 * If the Layer 3 and Layer 4 Filtering feature is not selected during core
 * configuration, this register and registers 260 through 299 are reserved (RO with
 * default value).
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                           
 * :--------|:-------|:------|:---------------------------------------
 *  [15:0]  | RW     | 0x0   | ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0
 *  [31:16] | RW     | 0x0   | ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0
 * 
 */
/*
 * Field : l4sp0
 * 
 * Layer 4 Source Port Number Field
 * 
 * Layer 4 Source Port Number Field
 * 
 * When Bit 16 (L4PEN0) is reset and Bit 20 (L4DPM0) is set in Register 256 (Layer
 * 3 and Layer 4 Control Register 0), this field contains the value to be matched
 * with the TCP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN0) and Bit 20 (L4DPM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * the UDP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : l4dp0
 * 
 * Layer 4 Destination Port Number Field
 * 
 * When Bit 16 (L4PEN0) is reset and Bit 20 (L4DPM0) is set in Register 256 (Layer
 * 3 and Layer 4 Control Register 0), this field contains the value to be matched
 * with the TCP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN0) and Bit 20 (L4DPM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * the UDP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS0.
 */
struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_s
{
    volatile uint32_t  l4sp0 : 16;  /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4SP0 */
    volatile uint32_t  l4dp0 : 16;  /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_L4DP0 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS0. */
typedef struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_s  ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_OFST        0x404
/* The address of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS0 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_OFST))

/*
 * Register : gmacgrp_layer3_addr0_reg0
 * 
 * <b> Register 260 (Layer 3 Address 0 Register 0) </b>
 * 
 * For IPv4 frames, the Layer 3 Address 0 Register 0 contains the 32-bit IP Source
 * Address field. For IPv6 frames, it contains Bits[31:0] of the 128-bit IP Source
 * Address or Destination Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00
 * 
 */
/*
 * Field : l3a00
 * 
 * Layer 3 Address 0 Field
 * 
 * When Bit 0 (L3PEN0) and Bit 2 (L3SAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * Bits[31:0] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) and Bit 4 (L3DAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * Bits [31:0] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) is reset and Bit 2 (L3SAM0) is set in Register 256 (Layer 3
 * and Layer 4 Control Register 0), this field contains the value to be matched
 * with the IP Source Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_s
{
    volatile uint32_t  l3a00 : 32;  /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_L3A00 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_s  ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_OFST        0x410
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_OFST))

/*
 * Register : gmacgrp_layer3_addr1_reg0
 * 
 * <b> Register 261 (Layer 3 Address 1 Register 0) </b>
 * 
 * For IPv4 frames, the Layer 3 Address 1 Register 0 contains the 32-bit IP
 * Destination Address field. For IPv6 frames, it contains Bits[63:32] of the
 * 128-bit IP Source Address or Destination Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10
 * 
 */
/*
 * Field : l3a10
 * 
 * Layer 3 Address 1 Field
 * 
 * When Bit 0 (L3PEN0) and Bit 2 (L3SAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * Bits [63:32] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) and Bit 4 (L3DAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * Bits [63:32] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) is reset and Bit 4 (L3DAM0) is set in Register 256 (Layer 3
 * and Layer 4 Control Register 0), this field contains the value to be matched
 * with the IP Destination Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_s
{
    volatile uint32_t  l3a10 : 32;  /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_L3A10 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_s  ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_OFST        0x414
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_OFST))

/*
 * Register : gmacgrp_layer3_addr2_reg0
 * 
 * <b> Register 262 (Layer 3 Address 2 Register 0) </b>
 * 
 * For IPv4 frames, the Layer 3 Address 2 Register 0 is reserved. For IPv6 frames,
 * it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address
 * field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20
 * 
 */
/*
 * Field : l3a20
 * 
 * Layer 3 Address 2 Field
 * 
 * When Bit 0 (L3PEN0) and Bit 2 (L3SAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * Bits [95:64] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) and Bit 4 (L3DAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains value to be matched with Bits
 * [95:64] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) is reset in Register 256 (Layer 3 and Layer 4 Control
 * Register 0), this register is not used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_s
{
    volatile uint32_t  l3a20 : 32;  /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_L3A20 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_s  ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_OFST        0x418
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_OFST))

/*
 * Register : gmacgrp_layer3_addr3_reg0
 * 
 * <b> Register 263 (Layer 3 Address 3 Register 0) </b>
 * 
 * For IPv4 frames, the Layer 3 Address 3 Register 0 is reserved. For IPv6 frames,
 * it contains Bits [127:96] of the 128-bit IP Source Address or Destination
 * Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30
 * 
 */
/*
 * Field : l3a30
 * 
 * Layer 3 Address 3 Field
 * 
 * When Bit 0 (L3PEN0) and Bit 2 (L3SAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * Bits [127:96] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) and Bit 4 (L3DAM0) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 0), this field contains the value to be matched with
 * Bits [127:96] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN0) is reset in Register 256 (Layer 3 and Layer 4 Control
 * Register 0), this register is not used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_s
{
    volatile uint32_t  l3a30 : 32;  /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_L3A30 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_s  ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_OFST        0x41c
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_OFST))

/*
 * Register : Register 268 (Layer 3 and Layer 4 Control Register 1) - gmacgrp_l3_l4_control1
 * 
 * This register controls the operations of the filter 0 of Layer 3 and Layer 4.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                  
 * :--------|:-------|:------|:----------------------------------------------
 *  [0]     | RW     | 0x0   | Layer 3 Protocol Enable                      
 *  [1]     | ???    | 0x0   | *UNDEFINED*                                  
 *  [2]     | RW     | 0x0   | Layer 3 IP SA Match Enable                   
 *  [3]     | RW     | 0x0   | Layer 3 IP SA Inverse Match Enable           
 *  [4]     | RW     | 0x0   | Layer 3 IP DA Match Enable                   
 *  [5]     | RW     | 0x0   | Layer 3 IP DA Inverse Match Enable           
 *  [10:6]  | RW     | 0x0   | Layer 3 IP SA Higher Bits Match              
 *  [15:11] | RW     | 0x0   | Layer 3 IP DA Higher Bits Match              
 *  [16]    | RW     | 0x0   | Layer 4 Protocol Enable                      
 *  [17]    | ???    | 0x0   | *UNDEFINED*                                  
 *  [18]    | RW     | 0x0   | Layer 4 Source Port Match Enable             
 *  [19]    | RW     | 0x0   | Layer 4 Source Port Inverse Match Enable     
 *  [20]    | RW     | 0x0   | Layer 4 Destination Port Match Enable        
 *  [21]    | RW     | 0x0   | Layer 4 Destination Port Inverse Match Enable
 *  [31:22] | ???    | 0x0   | *UNDEFINED*                                  
 * 
 */
/*
 * Field : Layer 3 Protocol Enable - l3pen1
 * 
 * When set, this bit indicates that the Layer 3 IP Source or Destination Address
 * matching is enabled for the IPv6 frames. When reset, this bit indicates that the
 * Layer 3 IP Source or Destination Address matching is enabled for the IPv4
 * frames.
 * 
 * The Layer 3 matching is done only when either L3SAM1 or L3DAM1 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3PEN1_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : Layer 3 IP SA Match Enable - l3sam1
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for matching. When reset, the MAC ignores the Layer 3 IP Source Address field
 * for matching.
 * 
 * Note: When Bit 0 (L3PEN1) is set, you should set either this bit or Bit 4
 * (L3DAM1) because either IPv6 SA or DA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAM1_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : Layer 3 IP SA Inverse Match Enable - l3saim1
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for inverse matching. When reset, this bit indicates that the Layer 3 IP Source
 * Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 2 (L3SAM1) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3SAIM1_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : Layer 3 IP DA Match Enable - l3dam1
 * 
 * When set, this bit indicates that Layer 3 IP Destination Address field is
 * enabled for matching. When reset, the MAC ignores the Layer 3 IP Destination
 * Address field for matching.
 * 
 * Note: When Bit 1 (L3PEN1) is set, you should set either this bit or Bit 2
 * (L3SAM1) because either IPv6 DA or SA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAM1_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : Layer 3 IP DA Inverse Match Enable - l3daim1
 * 
 * When set, this bit indicates that the Layer 3 IP Destination Address field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 3 IP
 * Destination Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 4 (L3DAM1) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3DAIM1_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : Layer 3 IP SA Higher Bits Match - l3hsbm1
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of lower bits of IP Source Address that are
 * masked for matching in the IPv4 frames. The following list describes the values
 * of this field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * This field contains Bits [4:0] of the field that indicates the number of higher
 * bits of IP Source or Destination Address matched in the IPv6 frames.
 * 
 * This field is valid and applicable only if L3DAM1 or L3SAM1 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_SET_MSK    0x000007c0
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_CLR_MSK    0xfffff83f
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_GET(value) (((value) & 0x000007c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HSBM1_SET(value) (((value) << 6) & 0x000007c0)

/*
 * Field : Layer 3 IP DA Higher Bits Match - l3hdbm1
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of higher bits of IP Destination Address that are
 * matched in the IPv4 frames. The following list describes the values of this
 * field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * Bits [12:11] of this field correspond to Bits [6:5] of L3HSBM1, which indicate
 * the number of lower bits of IP Source or Destination Address that are masked in
 * the IPv6 frames. The following list describes the concatenated values of the
 * L3HDBM1[1:0] and L3HSBM1 bits:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 127: All bits except MSb are masked.
 * 
 * This field is valid and applicable only if L3DAM1 or L3SAM1 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_SET_MSK    0x0000f800
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_CLR_MSK    0xffff07ff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_GET(value) (((value) & 0x0000f800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L3HDBM1_SET(value) (((value) << 11) & 0x0000f800)

/*
 * Field : Layer 4 Protocol Enable - l4pen1
 * 
 * When set, this bit indicates that the Source and Destination Port number fields
 * for UDP frames are used for matching. When reset, this bit indicates that the
 * Source and Destination Port number fields for TCP frames are used for matching.
 * 
 * The Layer 4 matching is done only when either L4SPM1 or L4DPM1 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4PEN1_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : Layer 4 Source Port Match Enable - l4spm1
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for matching.
 * 
 * When reset, the MAC ignores the Layer 4 Source Port number field for matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPM1_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : Layer 4 Source Port Inverse Match Enable - l4spim1
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for inverse matching.
 * 
 * When reset, this bit indicates that the Layer 4 Source Port number field is
 * enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 18 (L4SPM1) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4SPIM1_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : Layer 4 Destination Port Match Enable - l4dpm1
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for matching.
 * 
 * When reset, the MAC ignores the Layer 4 Destination Port number field for
 * matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPM1_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : Layer 4 Destination Port Inverse Match Enable - l4dpim1
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for inverse matching.
 * 
 * When reset, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 20 (L4DPM1) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_L4DPIM1_SET(value) (((value) << 21) & 0x00200000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL1.
 */
struct ALT_EMAC_GMACGRP_L3_L4_CONTROL1_s
{
    volatile uint32_t  l3pen1  :  1;  /* Layer 3 Protocol Enable */
    uint32_t                   :  1;  /* *UNDEFINED* */
    volatile uint32_t  l3sam1  :  1;  /* Layer 3 IP SA Match Enable */
    volatile uint32_t  l3saim1 :  1;  /* Layer 3 IP SA Inverse Match Enable */
    volatile uint32_t  l3dam1  :  1;  /* Layer 3 IP DA Match Enable */
    volatile uint32_t  l3daim1 :  1;  /* Layer 3 IP DA Inverse Match Enable */
    volatile uint32_t  l3hsbm1 :  5;  /* Layer 3 IP SA Higher Bits Match */
    volatile uint32_t  l3hdbm1 :  5;  /* Layer 3 IP DA Higher Bits Match */
    volatile uint32_t  l4pen1  :  1;  /* Layer 4 Protocol Enable */
    uint32_t                   :  1;  /* *UNDEFINED* */
    volatile uint32_t  l4spm1  :  1;  /* Layer 4 Source Port Match Enable */
    volatile uint32_t  l4spim1 :  1;  /* Layer 4 Source Port Inverse Match Enable */
    volatile uint32_t  l4dpm1  :  1;  /* Layer 4 Destination Port Match Enable */
    volatile uint32_t  l4dpim1 :  1;  /* Layer 4 Destination Port Inverse Match Enable */
    uint32_t                   : 10;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL1. */
typedef struct ALT_EMAC_GMACGRP_L3_L4_CONTROL1_s  ALT_EMAC_GMACGRP_L3_L4_CONTROL1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_OFST        0x430
/* The address of the ALT_EMAC_GMACGRP_L3_L4_CONTROL1 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_L3_L4_CONTROL1_OFST))

/*
 * Register : Register 269 (Layer 4 Address Register 1) - gmacgrp_layer4_address1
 * 
 * Because the Layer 3 and Layer 4 Address Registers are double-synchronized to the
 * Rx clock domains, then the synchronization is triggered only when Bits[31:24]
 * (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Layer 3 and
 * Layer 4 Address Registers are written. For proper synchronization updates, you
 * should perform the consecutive writes to the same Layer 3 and Layer 4 Address
 * Registers after at least four clock cycles delay of the destination clock.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [15:0]  | RW     | 0x0   | Layer 4 Source Port Number Field     
 *  [31:16] | RW     | 0x0   | Layer 4 Destination Port Number Field
 * 
 */
/*
 * Field : Layer 4 Source Port Number Field - l4sp1
 * 
 * When Bit 16 (L4PEN1) is reset and Bit 20 (L4DPM1) is set in Register 268 (Layer
 * 3 and Layer 4 Control Register 1), this field contains the value to be matched
 * with the TCP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN1) and Bit 20 (L4DPM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * the UDP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4SP1_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : Layer 4 Destination Port Number Field - l4dp1
 * 
 * When Bit 16 (L4PEN1) is reset and Bit 20 (L4DPM1) is set in Register 268 (Layer
 * 3 and Layer 4 Control Register 0), this field contains the value to be matched
 * with the TCP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN1) and Bit 20 (L4DPM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * the UDP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_L4DP1_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS1.
 */
struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_s
{
    volatile uint32_t  l4sp1 : 16;  /* Layer 4 Source Port Number Field */
    volatile uint32_t  l4dp1 : 16;  /* Layer 4 Destination Port Number Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS1. */
typedef struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_s  ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_OFST        0x434
/* The address of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS1 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_OFST))

/*
 * Register : Register 272 (Layer 3 Address 0 Register 1) - gmacgrp_layer3_addr0_reg1
 * 
 * For IPv4 frames, the Layer 3 Address 0 Register 1 contains the 32-bit IP Source
 * Address field. For IPv6 frames, it contains Bits[31:0] of the 128-bit IP Source
 * Address or Destination Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 0 Field
 * 
 */
/*
 * Field : Layer 3 Address 0 Field - l3a01
 * 
 * When Bit 0 (L3PEN1) and Bit 2 (L3SAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * Bits[31:0] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN1) and Bit 4 (L3DAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * Bits [31:0] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN1) is reset and Bit 2 (L3SAM1) is set in Register 268 (Layer 3
 * and Layer 4 Control Register 1), this field contains the value to be matched
 * with the IP Source Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_L3A01_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_s
{
    volatile uint32_t  l3a01 : 32;  /* Layer 3 Address 0 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_s  ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_OFST        0x440
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_OFST))

/*
 * Register : Register 273 (Layer 3 Address 1 Register 1) - gmacgrp_layer3_addr1_reg1
 * 
 * For IPv4 frames, the Layer 3 Address 1 Register 1 contains the 32-bit IP
 * Destination Address field. For IPv6 frames, it contains Bits[63:32] of the
 * 128-bit IP Source Address or Destination Address field
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 1 Field
 * 
 */
/*
 * Field : Layer 3 Address 1 Field - l3a11
 * 
 * When Bit 0 (L3PEN1) and Bit 2 (L3SAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * Bits [63:32] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN1) and Bit 4 (L3DAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * Bits [63:32] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN1) is reset and Bit 4 (L3DAM1) is set in Register 268 (Layer 3
 * and Layer 4 Control Register 1), this field contains the value to be matched
 * with the IP Destination Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_L3A11_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_s
{
    volatile uint32_t  l3a11 : 32;  /* Layer 3 Address 1 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_s  ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_OFST        0x444
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_OFST))

/*
 * Register : Register 274 (Layer 3 Address 2 Register 1) - gmacgrp_layer3_addr2_reg1
 * 
 * For IPv4 frames, the Layer 3 Address 2 Register 1 is reserved. For IPv6 frames,
 * it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address
 * field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 2 Field
 * 
 */
/*
 * Field : Layer 3 Address 2 Field - l3a21
 * 
 * When Bit 0 (L3PEN1) and Bit 2 (L3SAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * Bits [95:64] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN1) and Bit 4 (L3DAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains value to be matched with Bits
 * [95:64] of the IP Destination Address field in the IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_L3A21_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_s
{
    volatile uint32_t  l3a21 : 32;  /* Layer 3 Address 2 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_s  ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_OFST        0x448
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_OFST))

/*
 * Register : Register 275 (Layer 3 Address 3 Register 1) - gmacgrp_layer3_addr3_reg1
 * 
 * For IPv4 frames, the Layer 3 Address 3 Register 1 is reserved. For IPv6 frames,
 * it contains Bits [127:96] of the 128-bit IP Source Address or Destination
 * Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 3 Field
 * 
 */
/*
 * Field : Layer 3 Address 3 Field - l3a31
 * 
 * When Bit 1 (L3PEN1) and Bit 2 (L3SAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * Bits [127:96] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN1) and Bit 4 (L3DAM1) are set in Register 268 (Layer 3 and
 * Layer 4 Control Register 1), this field contains the value to be matched with
 * Bits [127:96] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN1) is reset in Register 268 (Layer 3 and Layer 4 Control
 * Register 1), this register is not used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_L3A31_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_s
{
    volatile uint32_t  l3a31 : 32;  /* Layer 3 Address 3 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_s  ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_OFST        0x44c
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_OFST))

/*
 * Register : Register 280 (Layer 3 and Layer 4 Control Register 2) - gmacgrp_l3_l4_control2
 * 
 * This register controls the operations of the filter 2 of Layer 3 and Layer 4.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                  
 * :--------|:-------|:------|:----------------------------------------------
 *  [0]     | RW     | 0x0   | Layer 3 Protocol Enable                      
 *  [1]     | ???    | 0x0   | *UNDEFINED*                                  
 *  [2]     | RW     | 0x0   | Layer 3 IP SA Match Enable                   
 *  [3]     | RW     | 0x0   | Layer 3 IP SA Inverse Match Enable           
 *  [4]     | RW     | 0x0   | Layer 3 IP DA Match Enable                   
 *  [5]     | RW     | 0x0   | Layer 3 IP DA Inverse Match Enable           
 *  [10:6]  | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2      
 *  [15:11] | RW     | 0x0   | Layer 3 IP DA Higher Bits Match              
 *  [16]    | RW     | 0x0   | Layer 4 Protocol Enable                      
 *  [17]    | ???    | 0x0   | *UNDEFINED*                                  
 *  [18]    | RW     | 0x0   | Layer 4 Source Port Match Enable             
 *  [19]    | RW     | 0x0   | Layer 4 Source Port Inverse Match Enable     
 *  [20]    | RW     | 0x0   | Layer 4 Destination Port Match Enable        
 *  [21]    | RW     | 0x0   | Layer 4 Destination Port Inverse Match Enable
 *  [31:22] | ???    | 0x0   | *UNDEFINED*                                  
 * 
 */
/*
 * Field : Layer 3 Protocol Enable - l3pen2
 * 
 * When set, this bit indicates that the Layer 3 IP Source or Destination Address
 * matching is enabled for the IPv6 frames. When reset, this bit indicates that the
 * Layer 3 IP Source or Destination Address matching is enabled for the IPv4
 * frames.
 * 
 * The Layer 3 matching is done only when either L3SAM2 or L3DAM2 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3PEN2_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : Layer 3 IP SA Match Enable - l3sam2
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for matching. When reset, the MAC ignores the Layer 3 IP Source Address field
 * for matching.
 * 
 * Note: When Bit 0 (L3PEN2) is set, you should set either this bit or Bit 4
 * (L3DAM2) because either IPv6 SA or DA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAM2_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : Layer 3 IP SA Inverse Match Enable - l3saim2
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for inverse matching. When reset, this bit indicates that the Layer 3 IP Source
 * Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 2 (L3SAM2) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3SAIM2_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : Layer 3 IP DA Match Enable - l3dam2
 * 
 * When set, this bit indicates that Layer 3 IP Destination Address field is
 * enabled for matching. When reset, the MAC ignores the Layer 3 IP Destination
 * Address field for matching.
 * 
 * Note: When Bit 0 (L3PEN2) is set, you should set either this bit or Bit 2
 * (L3SAM2) because either IPv6 DA or SA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAM2_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : Layer 3 IP DA Inverse Match Enable - l3daim2
 * 
 * When set, this bit indicates that the Layer 3 IP Destination Address field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 3 IP
 * Destination Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 4 (L3DAM2) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3DAIM2_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : l3hsbm2
 * 
 * Layer 3 IP SA Higher Bits Match
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of lower bits of IP Source Address that are
 * masked for matching in the IPv4 frames. The following list describes the values
 * of this field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * This field contains Bits [4:0] of the field that indicates the number of higher
 * bits of IP Source or Destination Address matched in the IPv6 frames.
 * 
 * This field is valid and applicable only if L3DAM2 or L3SAM2 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_SET_MSK    0x000007c0
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_CLR_MSK    0xfffff83f
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_GET(value) (((value) & 0x000007c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2_SET(value) (((value) << 6) & 0x000007c0)

/*
 * Field : Layer 3 IP DA Higher Bits Match - l3hdbm2
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of higher bits of IP Destination Address that are
 * matched in the IPv4 frames. The following list describes the values of this
 * field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * Bits [12:11] of this field correspond to Bits [6:5] of L3HSBM2, which indicate
 * the number of lower bits of IP Source or Destination Address that are masked in
 * the IPv6 frames. The following list describes the concatenated values of the
 * L3HDBM2[1:0] and L3HSBM2 bits:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 127: All bits except MSb are masked.
 * 
 * This field is valid and applicable only if L3DAM2 or L3SAM2 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_SET_MSK    0x0000f800
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_CLR_MSK    0xffff07ff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_GET(value) (((value) & 0x0000f800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HDBM2_SET(value) (((value) << 11) & 0x0000f800)

/*
 * Field : Layer 4 Protocol Enable - l4pen2
 * 
 * When set, this bit indicates that the Source and Destination Port number fields
 * for UDP frames are used for matching. When reset, this bit indicates that the
 * Source and Destination Port number fields for TCP frames are used for matching.
 * 
 * The Layer 4 matching is done only when either L4SPM2 or L4DPM2 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4PEN2_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : Layer 4 Source Port Match Enable - l4spm2
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for matching. When reset, the MAC ignores the Layer 4 Source Port number
 * field for matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPM2_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : Layer 4 Source Port Inverse Match Enable - l4spim2
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 4
 * Source Port number field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 18 (L4SPM2) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4SPIM2_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : Layer 4 Destination Port Match Enable - l4dpm2
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for matching. When reset, the MAC ignores the Layer 4 Destination Port
 * number field for matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPM2_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : Layer 4 Destination Port Inverse Match Enable - l4dpim2
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 4
 * Destination Port number field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 20 (L4DPM0) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L4DPIM2_SET(value) (((value) << 21) & 0x00200000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL2.
 */
struct ALT_EMAC_GMACGRP_L3_L4_CONTROL2_s
{
    volatile uint32_t  l3pen2  :  1;  /* Layer 3 Protocol Enable */
    uint32_t                   :  1;  /* *UNDEFINED* */
    volatile uint32_t  l3sam2  :  1;  /* Layer 3 IP SA Match Enable */
    volatile uint32_t  l3saim2 :  1;  /* Layer 3 IP SA Inverse Match Enable */
    volatile uint32_t  l3dam2  :  1;  /* Layer 3 IP DA Match Enable */
    volatile uint32_t  l3daim2 :  1;  /* Layer 3 IP DA Inverse Match Enable */
    volatile uint32_t  l3hsbm2 :  5;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL2_L3HSBM2 */
    volatile uint32_t  l3hdbm2 :  5;  /* Layer 3 IP DA Higher Bits Match */
    volatile uint32_t  l4pen2  :  1;  /* Layer 4 Protocol Enable */
    uint32_t                   :  1;  /* *UNDEFINED* */
    volatile uint32_t  l4spm2  :  1;  /* Layer 4 Source Port Match Enable */
    volatile uint32_t  l4spim2 :  1;  /* Layer 4 Source Port Inverse Match Enable */
    volatile uint32_t  l4dpm2  :  1;  /* Layer 4 Destination Port Match Enable */
    volatile uint32_t  l4dpim2 :  1;  /* Layer 4 Destination Port Inverse Match Enable */
    uint32_t                   : 10;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL2. */
typedef struct ALT_EMAC_GMACGRP_L3_L4_CONTROL2_s  ALT_EMAC_GMACGRP_L3_L4_CONTROL2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_OFST        0x460
/* The address of the ALT_EMAC_GMACGRP_L3_L4_CONTROL2 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_L3_L4_CONTROL2_OFST))

/*
 * Register : Register 281 (Layer 4 Address Register 2) - gmacgrp_layer4_address2
 * 
 * Because the Layer 3 and Layer 4 Address Registers are double-synchronized to the
 * Rx clock domains, then the synchronization is triggered only when Bits[31:24]
 * (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Layer 3 and
 * Layer 4 Address Registers are written. For proper synchronization updates, you
 * should perform the consecutive writes to the same Layer 3 and Layer 4 Address
 * Registers after at least four clock cycles delay of the destination clock.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [15:0]  | RW     | 0x0   | Layer 4 Source Port Number Field     
 *  [31:16] | RW     | 0x0   | Layer 4 Destination Port Number Field
 * 
 */
/*
 * Field : Layer 4 Source Port Number Field - l4sp2
 * 
 * When Bit 16 (L4PEN2) is reset and Bit 20 (L4DPM2) is set in Register 280 (Layer
 * 3 and Layer 4 Control Register 2), this field contains the value to be matched
 * with the TCP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN2) and Bit 20 (L4DPM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * the UDP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4SP2_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : Layer 4 Destination Port Number Field - l4dp2
 * 
 * When Bit 16 (L4PEN2) is reset and Bit 20 (L4DPM2) is set in Register 280 (Layer
 * 3 and Layer 4 Control Register 2), this field contains the value to be matched
 * with the TCP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN2) and Bit 20 (L4DPM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * the UDP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_L4DP2_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS2.
 */
struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_s
{
    volatile uint32_t  l4sp2 : 16;  /* Layer 4 Source Port Number Field */
    volatile uint32_t  l4dp2 : 16;  /* Layer 4 Destination Port Number Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS2. */
typedef struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_s  ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_OFST        0x464
/* The address of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS2 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_OFST))

/*
 * Register : Register 284 (Layer 3 Address 0 Register 2) - gmacgrp_layer3_addr0_reg2
 * 
 * For IPv4 frames, the Layer 3 Address 0 Register 2 contains the 32-bit IP Source
 * Address field. For IPv6 frames, it contains Bits [31:0] of the 128-bit IP Source
 * Address or Destination Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 0 Field
 * 
 */
/*
 * Field : Layer 3 Address 0 Field - l3a02
 * 
 * When Bit 0 (L3PEN2) and Bit 2 (L3SAM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * Bits [31:0] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) and Bit 4 (L3DAM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * Bits [31:0] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) is reset and Bit 2 (L3SAM2) is set in Register 280 (Layer 3
 * and Layer 4 Control Register 2), this field contains the value to be matched
 * with the IP Source Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_L3A02_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_s
{
    volatile uint32_t  l3a02 : 32;  /* Layer 3 Address 0 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_s  ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_OFST        0x470
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_OFST))

/*
 * Register : Register 285 (Layer 3 Address 1 Register 2) - gmacgrp_layer3_addr1_reg2
 * 
 * For IPv4 frames, the Layer 3 Address 1 Register 2 contains the 32-bit IP
 * Destination Address field. For IPv6 frames, it contains Bits [63:32] of the
 * 128-bit IP Source Address or Destination Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 1 Field
 * 
 */
/*
 * Field : Layer 3 Address 1 Field - l3a12
 * 
 * Layer 3 Address 1 Field
 * 
 * When Bit 0 (L3PEN2) and Bit 2 (L3SAM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * Bits [63:32] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) and Bit 4 (L3DAM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * Bits [63:32] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) is reset and Bit 4 (L3DAM2) is set in Register 280 (Layer 3
 * and Layer 4 Control Register 2), this field contains the value to be matched
 * with the IP Destination Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_L3A12_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_s
{
    volatile uint32_t  l3a12 : 32;  /* Layer 3 Address 1 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_s  ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_OFST        0x474
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_OFST))

/*
 * Register : Register 286 (Layer 3 Address 2 Register 2) - gmacgrp_layer3_addr2_reg2
 * 
 * For IPv4 frames, the Layer 3 Address 2 Register 2 is reserved. For IPv6 frames,
 * it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address
 * field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 2 Field
 * 
 */
/*
 * Field : Layer 3 Address 2 Field - l3a22
 * 
 * When Bit 0 (L3PEN2) and Bit 2 (L3SAM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * Bits [95:64] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) and Bit 4 (L3DAM2) are set in Register 256 (Layer 3 and
 * Layer 4 Control Register 2), this field contains value to be matched with Bits
 * [95:64] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) is reset in Register 280 (Layer 3 and Layer 4 Control
 * Register 2), this register is not used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_L3A22_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_s
{
    volatile uint32_t  l3a22 : 32;  /* Layer 3 Address 2 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_s  ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_OFST        0x478
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_OFST))

/*
 * Register : Register 287 (Layer 3 Address 3 Register 2) - gmacgrp_layer3_addr3_reg2
 * 
 * For IPv4 frames, the Layer 3 Address 3 Register 2 is reserved. For IPv6 frames,
 * it contains Bits [127:96] of the 128-bit IP Source Address or Destination
 * Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 3 Field
 * 
 */
/*
 * Field : Layer 3 Address 3 Field - l3a32
 * 
 * When Bit 0 (L3PEN2) and Bit 2 (L3SAM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * Bits [127:96] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) and Bit 4 (L3DAM2) are set in Register 280 (Layer 3 and
 * Layer 4 Control Register 2), this field contains the value to be matched with
 * Bits [127:96] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN2) is reset in Register 280 (Layer 3 and Layer 4 Control
 * Register 2), this register is not used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_L3A32_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_s
{
    volatile uint32_t  l3a32 : 32;  /* Layer 3 Address 3 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_s  ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_OFST        0x47c
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_OFST))

/*
 * Register : Register 292 (Layer 3 and Layer 4 Control Register 3) - gmacgrp_l3_l4_control3
 * 
 * This register controls the operations of the filter 0 of Layer 3 and Layer 4.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                  
 * :--------|:-------|:------|:----------------------------------------------
 *  [0]     | RW     | 0x0   | Layer 3 Protocol Enable                      
 *  [1]     | ???    | 0x0   | *UNDEFINED*                                  
 *  [2]     | RW     | 0x0   | Layer 3 IP SA Match Enable                   
 *  [3]     | RW     | 0x0   | Layer 3 IP SA Inverse Match Enable           
 *  [4]     | RW     | 0x0   | Layer 3 IP DA Match Enable                   
 *  [5]     | RW     | 0x0   | Layer 3 IP DA Inverse Match Enable           
 *  [10:6]  | RW     | 0x0   | Layer 3 IP SA Higher Bits Match              
 *  [15:11] | RW     | 0x0   | ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3      
 *  [16]    | RW     | 0x0   | Layer 4 Protocol Enable                      
 *  [17]    | ???    | 0x0   | *UNDEFINED*                                  
 *  [18]    | RW     | 0x0   | Layer 4 Source Port Match Enable             
 *  [19]    | RW     | 0x0   | Layer 4 Source Port Inverse Match Enable     
 *  [20]    | RW     | 0x0   | Layer 4 Destination Port Match Enable        
 *  [21]    | RW     | 0x0   | Layer 4 Destination Port Inverse Match Enable
 *  [31:22] | ???    | 0x0   | *UNDEFINED*                                  
 * 
 */
/*
 * Field : Layer 3 Protocol Enable - l3pen3
 * 
 * When set, this bit indicates that the Layer 3 IP Source or Destination Address
 * matching is enabled for the IPv6 frames. When reset, this bit indicates that the
 * Layer 3 IP Source or Destination Address matching is enabled for the IPv4
 * frames.
 * 
 * The Layer 3 matching is done only when either L3SAM3 or L3DAM3 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3PEN3_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : Layer 3 IP SA Match Enable - l3sam3
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for matching. When reset, the MAC ignores the Layer 3 IP Source Address field
 * for matching.
 * 
 * Note: When Bit 0 (L3PEN3) is set, you should set either this bit or Bit 4
 * (L3DAM3) because either IPv6 SA or DA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAM3_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : Layer 3 IP SA Inverse Match Enable - l3saim3
 * 
 * When set, this bit indicates that the Layer 3 IP Source Address field is enabled
 * for inverse matching. When reset, this bit indicates that the Layer 3 IP Source
 * Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 2 (L3SAM3) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3SAIM3_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : Layer 3 IP DA Match Enable - l3dam3
 * 
 * When set, this bit indicates that Layer 3 IP Destination Address field is
 * enabled for matching. When reset, the MAC ignores the Layer 3 IP Destination
 * Address field for matching.
 * 
 * Note: When Bit 0 (L3PEN3) is set, you should set either this bit or Bit 2
 * (L3SAM3) because either IPv6 DA or SA can be checked for filtering.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAM3_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : Layer 3 IP DA Inverse Match Enable - l3daim3
 * 
 * When set, this bit indicates that the Layer 3 IP Destination Address field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 3 IP
 * Destination Address field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 4 (L3DAM3) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3DAIM3_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : Layer 3 IP SA Higher Bits Match - l3hsbm3
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of lower bits of IP Source Address that are
 * masked for matching in the IPv4 frames. The following list describes the values
 * of this field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * This field contains Bits [4:0] of the field that indicates the number of higher
 * bits of IP Source or Destination Address matched in the IPv6 frames.
 * 
 * This field is valid and applicable only if L3DAM3 or L3SAM3 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_SET_MSK    0x000007c0
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_CLR_MSK    0xfffff83f
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_GET(value) (((value) & 0x000007c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HSBM3_SET(value) (((value) << 6) & 0x000007c0)

/*
 * Field : l3hdbm3
 * 
 * Layer 3 IP DA Higher Bits Match
 * 
 * IPv4 Frames:
 * 
 * This field contains the number of higher bits of IP Destination Address that are
 * matched in the IPv4 frames. The following list describes the values of this
 * field:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 31: All bits except MSb are masked.
 * 
 * IPv6 Frames:
 * 
 * Bits [12:11] of this field correspond to Bits [6:5] of L3HSBM3, which indicate
 * the number of lower bits of IP Source or Destination Address that are masked in
 * the IPv6 frames. The following list describes the concatenated values of the
 * L3HDBM3[1:0] and L3HSBM3 bits:
 * 
 * * 0: No bits are masked.
 * 
 * * 1: LSb[0] is masked.
 * 
 * * 2: Two LSbs [1:0] are masked.
 * 
 * * ...
 * 
 * * 127: All bits except MSb are masked.
 * 
 * This field is valid and applicable only if L3DAM3 or L3SAM3 is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_SET_MSK    0x0000f800
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_CLR_MSK    0xffff07ff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_GET(value) (((value) & 0x0000f800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3_SET(value) (((value) << 11) & 0x0000f800)

/*
 * Field : Layer 4 Protocol Enable - l4pen3
 * 
 * When set, this bit indicates that the Source and Destination Port number fields
 * for UDP frames are used for matching. When reset, this bit indicates that the
 * Source and Destination Port number fields for TCP frames are used for matching.
 * 
 * The Layer 4 matching is done only when either L4SPM3 or L4DPM3 bit is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_MSB        16
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4PEN3_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : Layer 4 Source Port Match Enable - l4spm3
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for matching. When reset, the MAC ignores the Layer 4 Source Port number
 * field for matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPM3_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : Layer 4 Source Port Inverse Match Enable - l4spim3
 * 
 * When set, this bit indicates that the Layer 4 Source Port number field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 4
 * Source Port number field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 18 (L4SPM3) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4SPIM3_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : Layer 4 Destination Port Match Enable - l4dpm3
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for matching. When reset, the MAC ignores the Layer 4 Destination Port
 * number field for matching.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_MSB        20
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPM3_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : Layer 4 Destination Port Inverse Match Enable - l4dpim3
 * 
 * When set, this bit indicates that the Layer 4 Destination Port number field is
 * enabled for inverse matching. When reset, this bit indicates that the Layer 4
 * Destination Port number field is enabled for perfect matching.
 * 
 * This bit is valid and applicable only when Bit 20 (L4DPM3) is set high.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_MSB        21
/* The width in bits of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 register field value. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 register field. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 field value from a register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L4DPIM3_SET(value) (((value) << 21) & 0x00200000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL3.
 */
struct ALT_EMAC_GMACGRP_L3_L4_CONTROL3_s
{
    volatile uint32_t  l3pen3  :  1;  /* Layer 3 Protocol Enable */
    uint32_t                   :  1;  /* *UNDEFINED* */
    volatile uint32_t  l3sam3  :  1;  /* Layer 3 IP SA Match Enable */
    volatile uint32_t  l3saim3 :  1;  /* Layer 3 IP SA Inverse Match Enable */
    volatile uint32_t  l3dam3  :  1;  /* Layer 3 IP DA Match Enable */
    volatile uint32_t  l3daim3 :  1;  /* Layer 3 IP DA Inverse Match Enable */
    volatile uint32_t  l3hsbm3 :  5;  /* Layer 3 IP SA Higher Bits Match */
    volatile uint32_t  l3hdbm3 :  5;  /* ALT_EMAC_GMACGRP_L3_L4_CONTROL3_L3HDBM3 */
    volatile uint32_t  l4pen3  :  1;  /* Layer 4 Protocol Enable */
    uint32_t                   :  1;  /* *UNDEFINED* */
    volatile uint32_t  l4spm3  :  1;  /* Layer 4 Source Port Match Enable */
    volatile uint32_t  l4spim3 :  1;  /* Layer 4 Source Port Inverse Match Enable */
    volatile uint32_t  l4dpm3  :  1;  /* Layer 4 Destination Port Match Enable */
    volatile uint32_t  l4dpim3 :  1;  /* Layer 4 Destination Port Inverse Match Enable */
    uint32_t                   : 10;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_L3_L4_CONTROL3. */
typedef struct ALT_EMAC_GMACGRP_L3_L4_CONTROL3_s  ALT_EMAC_GMACGRP_L3_L4_CONTROL3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_OFST        0x490
/* The address of the ALT_EMAC_GMACGRP_L3_L4_CONTROL3 register. */
#define ALT_EMAC_GMACGRP_L3_L4_CONTROL3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_L3_L4_CONTROL3_OFST))

/*
 * Register : Register 293 (Layer 4 Address Register 3) - gmacgrp_layer4_address3
 * 
 * Because the Layer 3 and Layer 4 Address Registers are double-synchronized to the
 * Rx clock domains, then the synchronization is triggered only when Bits[31:24]
 * (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Layer 3 and
 * Layer 4 Address Registers are written. For proper synchronization updates, you
 * should perform the consecutive writes to the same Layer 3 and Layer 4 Address
 * Registers after at least four clock cycles delay of the destination clock.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [15:0]  | RW     | 0x0   | Layer 4 Source Port Number Field     
 *  [31:16] | RW     | 0x0   | Layer 4 Destination Port Number Field
 * 
 */
/*
 * Field : Layer 4 Source Port Number Field - l4sp3
 * 
 * When Bit 16 (L4PEN3) is reset and Bit 20 (L4DPM3) is set in Register 292 (Layer
 * 3 and Layer 4 Control Register 3), this field contains the value to be matched
 * with the TCP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN3) and Bit 20 (L4DPM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * the UDP Source Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4SP3_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : Layer 4 Destination Port Number Field - l4dp3
 * 
 * When Bit 16 (L4PEN3) is reset and Bit 20 (L4DPM3) is set in Register 292 (Layer
 * 3 and Layer 4 Control Register 3), this field contains the value to be matched
 * with the TCP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * When Bit 16 (L4PEN3) and Bit 20 (L4DPM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * the UDP Destination Port Number field in the IPv4 or IPv6 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_SET_MSK    0xffff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 register field value. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_CLR_MSK    0x0000ffff
/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 register field. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_GET(value) (((value) & 0xffff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_L4DP3_SET(value) (((value) << 16) & 0xffff0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS3.
 */
struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_s
{
    volatile uint32_t  l4sp3 : 16;  /* Layer 4 Source Port Number Field */
    volatile uint32_t  l4dp3 : 16;  /* Layer 4 Destination Port Number Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER4_ADDRESS3. */
typedef struct ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_s  ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_OFST        0x494
/* The address of the ALT_EMAC_GMACGRP_LAYER4_ADDRESS3 register. */
#define ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_OFST))

/*
 * Register : Register 296 (Layer 3 Address 0 Register 3) - gmacgrp_layer3_addr0_reg3
 * 
 * For IPv4 frames, the Layer 3 Address 0 Register 3 contains the 32-bit IP Source
 * Address field. For IPv6 frames, it contains Bits [31:0] of the 128-bit IP Source
 * Address or Destination Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 0 Field
 * 
 */
/*
 * Field : Layer 3 Address 0 Field - l3a03
 * 
 * When Bit 0 (L3PEN3) and Bit 2 (L3SAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * Bits [31:0] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) and Bit 4 (L3DAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * Bits [31:0] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) is reset and Bit 2 (L3SAM3) is set in Register 292 (Layer 3
 * and Layer 4 Control Register 3), this field contains the value to be matched
 * with the IP Source Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_L3A03_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_s
{
    volatile uint32_t  l3a03 : 32;  /* Layer 3 Address 0 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_s  ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_OFST        0x4a0
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_OFST))

/*
 * Register : Register 297 (Layer 3 Address 1 Register 3) - gmacgrp_layer3_addr1_reg3
 * 
 * For IPv4 frames, the Layer 3 Address 1 Register 3 contains the 32-bit IP
 * Destination Address field. For IPv6 frames, it contains Bits [63:32] of the
 * 128-bit IP Source Address or Destination Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 1 Field
 * 
 */
/*
 * Field : Layer 3 Address 1 Field - l3a13
 * 
 * When Bit 0 (L3PEN3) and Bit 2 (L3SAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * Bits [63:32] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) and Bit 4 (L3DAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * Bits [63:32] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) is reset and Bit 4 (L3DAM3) is set in Register 292 (Layer 3
 * and Layer 4 Control Register 3), this field contains the value to be matched
 * with the IP Destination Address field in the IPv4 frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_L3A13_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_s
{
    volatile uint32_t  l3a13 : 32;  /* Layer 3 Address 1 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_s  ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_OFST        0x4a4
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_OFST))

/*
 * Register : Register 298 (Layer 3 Address 2 Register 3) - gmacgrp_layer3_addr2_reg3
 * 
 * For IPv4 frames, the Layer 3 Address 2 Register 3 is reserved. For IPv6 frames,
 * it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address
 * field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 2 Field
 * 
 */
/*
 * Field : Layer 3 Address 2 Field - l3a23
 * 
 * When Bit 0 (L3PEN3) and Bit 2 (L3SAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * Bits [95:64] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) and Bit 4 (L3DAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains value to be matched with Bits
 * [95:64] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) is reset in Register 292 (Layer 3 and Layer 4 Control
 * Register 3), this register is not used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_L3A23_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_s
{
    volatile uint32_t  l3a23 : 32;  /* Layer 3 Address 2 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_s  ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_OFST        0x4a8
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_OFST))

/*
 * Register : Register 299 (Layer 3 Address 3 Register 3) - gmacgrp_layer3_addr3_reg3
 * 
 * For IPv4 frames, the Layer 3 Address 3 Register 3 is reserved. For IPv6 frames,
 * it contains Bits [127:96] of the 128-bit IP Source Address or Destination
 * Address field.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description            
 * :-------|:-------|:------|:------------------------
 *  [31:0] | RW     | 0x0   | Layer 3 Address 3 Field
 * 
 */
/*
 * Field : Layer 3 Address 3 Field - l3a33
 * 
 * When Bit 0 (L3PEN3) and Bit 2 (L3SAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * Bits [127:96] of the IP Source Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) and Bit 4 (L3DAM3) are set in Register 292 (Layer 3 and
 * Layer 4 Control Register 3), this field contains the value to be matched with
 * Bits [127:96] of the IP Destination Address field in the IPv6 frames.
 * 
 * When Bit 0 (L3PEN3) is reset in Register 292 (Layer 3 and Layer 4 Control
 * Register 3), this register is not used.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 register field value. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 register field. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 field value from a register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_L3A33_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3.
 */
struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_s
{
    volatile uint32_t  l3a33 : 32;  /* Layer 3 Address 3 Field */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3. */
typedef struct ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_s  ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_OFST        0x4ac
/* The address of the ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3 register. */
#define ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_OFST))

/*
 * Register : Register 320 (Hash Table Register 0) - gmacgrp_hash_table_reg0
 * 
 * This register contains the first 32 bits of the hash table.
 * 
 * The 256-bit Hash table is used for group address filtering. For hash filtering,
 * the content of the destination address in the incoming frame is passed through
 * the CRC logic and the upper eight bits of the CRC register are used to index the
 * content of the Hash table. The most significant bits determines the register to
 * be used (Hash Table Register X), and the least significant five bits determine
 * the bit within the register. For example, a hash value of 8b'10111111 selects
 * Bit 31 of the Hash Table Register 5.
 * 
 * The hash value of the destination address is calculated in the following way:
 * 
 * 1. Calculate the 32-bit CRC for the DA (See IEEE 802.3, Section 3.2.8 for the
 * steps to calculate CRC32).
 * 
 * 2. Perform bitwise reversal for the value obtained in Step 1.
 * 
 * 3. Take the upper 8 bits from the value obtained in Step 2.
 * 
 * If the corresponding bit value of the register is 1'b1, the frame is accepted.
 * Otherwise, it is rejected. If the Bit 1 (Pass All Multicast) is set in Register
 * 1 (MAC Frame Filter), then all multicast frames are accepted regardless of the
 * multicast hash values.
 * 
 * Because the Hash Table register is double-synchronized to the (G)MII clock
 * domain, the synchronization is triggered only when Bits[31:24] (in little-endian
 * mode) or Bits[7:0] (in big-endian mode) of the Hash Table Register X registers
 * are written.
 * 
 * Note: Because of double-synchronization, consecutive writes to this register
 * should be performed after at least four clock cycles in the destination clock
 * domain.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                
 * :-------|:-------|:------|:----------------------------
 *  [31:0] | RW     | 0x0   | First 32 bits of Hash Table
 * 
 */
/*
 * Field : First 32 bits of Hash Table - ht31t0
 * 
 * This field contains the first 32 Bits (31:0) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_HT31T0_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG0.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG0_s
{
    volatile uint32_t  ht31t0 : 32;  /* First 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG0. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG0_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG0_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG0 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG0 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_OFST        0x500
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG0 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG0_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG0_OFST))

/*
 * Register : Register 321 (Hash Table Register 1) - gmacgrp_hash_table_reg1
 * 
 * This register contains the second 32 bits of the hash table.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                 
 * :-------|:-------|:------|:-----------------------------
 *  [31:0] | RW     | 0x0   | Second 32 bits of Hash Table
 * 
 */
/*
 * Field : Second 32 bits of Hash Table - ht63t32
 * 
 * This field contains the second 32 Bits (63:32) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_HT63T32_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG1.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG1_s
{
    volatile uint32_t  ht63t32 : 32;  /* Second 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG1. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG1_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG1_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG1 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG1 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_OFST        0x504
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG1 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG1_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG1_OFST))

/*
 * Register : Register 322 (Hash Table Register 2) - gmacgrp_hash_table_reg2
 * 
 * This register contains the third 32 bits of the hash table.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                
 * :-------|:-------|:------|:----------------------------
 *  [31:0] | RW     | 0x0   | Third 32 bits of Hash Table
 * 
 */
/*
 * Field : Third 32 bits of Hash Table - ht95t64
 * 
 * This field contains the third 32 Bits (95:64) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_HT95T64_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG2.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG2_s
{
    volatile uint32_t  ht95t64 : 32;  /* Third 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG2. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG2_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG2_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG2 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG2 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_OFST        0x508
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG2 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG2_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG2_OFST))

/*
 * Register : Register 323 (Hash Table Register 3) - gmacgrp_hash_table_reg3
 * 
 * This register contains the fourth 32 bits of the hash table.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                 
 * :-------|:-------|:------|:-----------------------------
 *  [31:0] | RW     | 0x0   | Fourth 32 bits of Hash Table
 * 
 */
/*
 * Field : Fourth 32 bits of Hash Table - ht127t96
 * 
 * This field contains the fourth 32 Bits (127:96) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_HT127T96_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG3.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG3_s
{
    volatile uint32_t  ht127t96 : 32;  /* Fourth 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG3. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG3_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG3_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG3 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG3 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_OFST        0x50c
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG3 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG3_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG3_OFST))

/*
 * Register : Register 324 (Hash Table Register 4) - gmacgrp_hash_table_reg4
 * 
 * This register contains the fifth 32 bits of the hash table.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                
 * :-------|:-------|:------|:----------------------------
 *  [31:0] | RW     | 0x0   | Fifth 32 bits of Hash Table
 * 
 */
/*
 * Field : Fifth 32 bits of Hash Table - ht159t128
 * 
 * This field contains the fifth 32 Bits (159:128) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_HT159T128_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG4.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG4_s
{
    volatile uint32_t  ht159t128 : 32;  /* Fifth 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG4. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG4_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG4_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG4 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG4 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_OFST        0x510
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG4 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG4_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG4_OFST))

/*
 * Register : Register 325 (Hash Table Register 5) - gmacgrp_hash_table_reg5
 * 
 * This register contains the sixth 32 bits of the hash table.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                
 * :-------|:-------|:------|:----------------------------
 *  [31:0] | RW     | 0x0   | Sixth 32 bits of Hash Table
 * 
 */
/*
 * Field : Sixth 32 bits of Hash Table - ht191t160
 * 
 * This field contains the sixth 32 Bits (191:160) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_HT191T160_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG5.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG5_s
{
    volatile uint32_t  ht191t160 : 32;  /* Sixth 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG5. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG5_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG5_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG5 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG5 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_OFST        0x514
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG5 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG5_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG5_OFST))

/*
 * Register : Register 326 (Hash Table Register 6) - gmacgrp_hash_table_reg6
 * 
 * This register contains the seventh 32 bits of the hash table.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                  
 * :-------|:-------|:------|:------------------------------
 *  [31:0] | RW     | 0x0   | Seventh 32 bits of Hash Table
 * 
 */
/*
 * Field : Seventh 32 bits of Hash Table - ht223t196
 * 
 * This field contains the seventh 32 Bits (223:196) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_HT223T196_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG6.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG6_s
{
    volatile uint32_t  ht223t196 : 32;  /* Seventh 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG6. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG6_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG6_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG6 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG6 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_OFST        0x518
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG6 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG6_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG6_OFST))

/*
 * Register : Register 327 (Hash Table Register 7) - gmacgrp_hash_table_reg7
 * 
 * This register contains the eighth 32 bits of the hash table.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                 
 * :-------|:-------|:------|:-----------------------------
 *  [31:0] | RW     | 0x0   | Eighth 32 bits of Hash Table
 * 
 */
/*
 * Field : Eighth 32 bits of Hash Table - ht255t224
 * 
 * This field contains the eighth 32 Bits (255:224) of the Hash table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 register field value. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 register field. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 field value from a register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_HT255T224_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG7.
 */
struct ALT_EMAC_GMACGRP_HASH_TABLE_REG7_s
{
    volatile uint32_t  ht255t224 : 32;  /* Eighth 32 bits of Hash Table */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_HASH_TABLE_REG7. */
typedef struct ALT_EMAC_GMACGRP_HASH_TABLE_REG7_s  ALT_EMAC_GMACGRP_HASH_TABLE_REG7_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_HASH_TABLE_REG7 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_HASH_TABLE_REG7 register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_OFST        0x51c
/* The address of the ALT_EMAC_GMACGRP_HASH_TABLE_REG7 register. */
#define ALT_EMAC_GMACGRP_HASH_TABLE_REG7_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_HASH_TABLE_REG7_OFST))

/*
 * Register : gmacgrp_vlan_incl_reg
 * 
 * <b> Register 353 (VLAN Tag Inclusion or Replacement Register)  </b>
 * 
 * The VLAN Tag Inclusion or Replacement register contains the VLAN tag for
 * insertion or replacement in the transmit frames. This register is present only
 * when the Enable SA, VLAN, and CRC Insertion on TX option is selected during core
 * configuration.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset   | Description                                  
 * :--------|:-------|:--------|:----------------------------------------------
 *  [15:0]  | RW     | Unknown | ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT           
 *  [17:16] | RW     | Unknown | ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC           
 *  [18]    | RW     | Unknown | ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP           
 *  [19]    | RW     | Unknown | ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL          
 *  [31:20] | R      | Unknown | ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20
 * 
 */
/*
 * Field : vlt
 * 
 * VLAN Tag for Transmit Frames
 * 
 * This field contains the value of the VLAN tag to be inserted or replaced. The
 * value must only be changed when the transmit lines are inactive or during the
 * initialization phase. Bits[15:13] are the User Priority, Bit 12 is the CFI/DEI,
 * and Bits[11:0] are the VLAN tag's VID field.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT register field is UNKNOWN. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : vlc
 * 
 * VLAN Tag Control in Transmit Frames
 * 
 * * 2'b00: No VLAN tag deletion, insertion, or replacement
 * 
 * * 2'b01: VLAN tag deletion
 * 
 * The MAC removes the VLAN type (bytes 13 and 14) and VLAN tag (bytes 15 and 16)
 * of all transmitted frames with VLAN tags.
 * 
 * * 2'b10: VLAN tag insertion
 * 
 * The MAC inserts VLT in bytes 15 and 16 of the frame after inserting the Type
 * value (0x8100/0x88a8) in bytes 13 and 14. This operation is performed on all
 * transmitted frames, irrespective of whether they already have a VLAN tag.
 * 
 * * 2'b11: VLAN tag replacement
 * 
 * The MAC replaces VLT in bytes 15 and 16 of all VLAN-type transmitted frames
 * (Bytes 13 and 14 are 0x8100/0x88a8).
 * 
 * Note: Changes to this field take effect only on the start of a frame. If you
 * write this register field when a frame is being transmitted, only the subsequent
 * frame can use the updated value, that is, the current frame does not use the
 * updated value.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_SET_MSK    0x00030000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_CLR_MSK    0xfffcffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC register field is UNKNOWN. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_GET(value) (((value) & 0x00030000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC_SET(value) (((value) << 16) & 0x00030000)

/*
 * Field : vlp
 * 
 * VLAN Priority Control
 * 
 * When this bit is set, the control Bits [17:16] are used for VLAN deletion,
 * insertion, or replacement. When this bit is reset, the mti_vlan_ctrl_i control
 * input is used, and Bits [17:16] are ignored.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP register field is UNKNOWN. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : csvl
 * 
 * C-VLAN or S-VLAN
 * 
 * When this bit is set, S-VLAN type (0x88A8) is inserted or replaced in the 13th
 * and 14th bytes of transmitted frames. When this bit is reset, C-VLAN type
 * (0x8100) is inserted or replaced in the transmitted frames.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL register field is UNKNOWN. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : reserved_31_20
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 register field. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_WIDTH      12
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_SET_MSK    0xfff00000
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 register field value. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_CLR_MSK    0x000fffff
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 register field is UNKNOWN. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_GET(value) (((value) & 0xfff00000) >> 20)
/* Produces a ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20_SET(value) (((value) << 20) & 0xfff00000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_VLAN_INCL_REG.
 */
struct ALT_EMAC_GMACGRP_VLAN_INCL_REG_s
{
    volatile uint32_t        vlt            : 16;  /* ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLT */
    volatile uint32_t        vlc            :  2;  /* ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLC */
    volatile uint32_t        vlp            :  1;  /* ALT_EMAC_GMACGRP_VLAN_INCL_REG_VLP */
    volatile uint32_t        csvl           :  1;  /* ALT_EMAC_GMACGRP_VLAN_INCL_REG_CSVL */
    const volatile uint32_t  reserved_31_20 : 12;  /* ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESERVED_31_20 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_VLAN_INCL_REG. */
typedef struct ALT_EMAC_GMACGRP_VLAN_INCL_REG_s  ALT_EMAC_GMACGRP_VLAN_INCL_REG_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_VLAN_INCL_REG register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_VLAN_INCL_REG register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_OFST        0x584
/* The address of the ALT_EMAC_GMACGRP_VLAN_INCL_REG register. */
#define ALT_EMAC_GMACGRP_VLAN_INCL_REG_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_VLAN_INCL_REG_OFST))

/*
 * Register : Register 354 (VLAN Hash Table Register) - gmacgrp_vlan_hash_table_reg
 * 
 * The 16-bit Hash table is used for group address filtering based on VLAN tag when
 * Bit 18 (VTHM) of Register 7 (VLAN Tag Register) is set. For hash filtering, the
 * content of the 16-bit VLAN tag or 12-bit VLAN ID (based on Bit 16 (ETV) of VLAN
 * Tag Register) in the incoming frame is passed through the CRC logic and the
 * upper four bits of the calculated CRC are used to index the contents of the VLAN
 * Hash table. For example, a hash value of 4b'1000 selects Bit 8 of the VLAN Hash
 * table.
 * 
 * The hash value of the destination address is calculated in the following way:
 * 
 * 1. Calculate the 32-bit CRC for the VLAN tag or ID (See IEEE 802.3, Section
 * 3.2.8 for the steps to calculate CRC32).
 * 
 * 2. Perform bitwise reversal for the value obtained in Step 1.
 * 
 * 3. Take the upper four bits from the value obtained in Step 2.
 * 
 * If the corresponding bit value of the register is 1'b1, the frame is accepted.
 * Otherwise, it is rejected. Because the Hash Table register is double-
 * synchronized to the (G)MII clock domain, the synchronization is triggered only
 * when Bits[15:8] (in little-endian mode) or Bits[7:0] (in big-endian mode) of
 * this register are written.
 * 
 * Notes:
 * 
 * * Because of double-synchronization, consecutive writes to this register should
 *   be performed after at least four clock cycles in the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description    
 * :--------|:-------|:------|:----------------
 *  [15:0]  | RW     | 0x0   | VLAN Hash Table
 *  [31:16] | ???    | 0x0   | *UNDEFINED*    
 * 
 */
/*
 * Field : VLAN Hash Table - vlht
 * 
 * This field contains the 16-bit VLAN Hash Table.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT register field. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT register field. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT register field. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT register field value. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT register field value. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT register field. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT field value from a register. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_VLHT_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG.
 */
struct ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_s
{
    volatile uint32_t  vlht : 16;  /* VLAN Hash Table */
    uint32_t                : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG. */
typedef struct ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_s  ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG register. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_OFST        0x588
/* The address of the ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG register. */
#define ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_OFST))

/*
 * Register : gmacgrp_timestamp_control
 * 
 * <b> Register 448 (Timestamp Control Register) </b>
 * 
 * This register controls the operation of the System Time generator and the
 * processing of PTP packets for timestamping in the Receiver.
 * 
 * Note:
 * 
 * * Bits[5:1] are reserved when External Timestamp Input feature is enabled.
 * 
 * * Bits[19:8] are reserved and read-only when Advanced Timestamp feature is not
 *   enabled.
 * 
 * * Bits[28:24] are reserved and read-only when Auxiliary Snapshot feature is not
 *   enabled.
 * 
 * * Release 3.60a onwards, the functions of Bits 17 and 16 (SNAPTYPSEL) have
 *   changed. These functions are not backward compatible with the functions
 *   described in release 3.50a.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                      
 * :--------|:-------|:------|:--------------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA         
 *  [1]     | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT      
 *  [2]     | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT        
 *  [3]     | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT        
 *  [4]     | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG        
 *  [5]     | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG      
 *  [7:6]   | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6  
 *  [8]     | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL       
 *  [9]     | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR     
 *  [10]    | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA     
 *  [11]    | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA       
 *  [12]    | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA     
 *  [13]    | RW     | 0x1   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA     
 *  [14]    | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA     
 *  [15]    | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA     
 *  [17:16] | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL    
 *  [18]    | RW     | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR   
 *  [23:19] | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19
 *  [24]    | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC         
 *  [25]    | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0        
 *  [26]    | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1        
 *  [27]    | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2        
 *  [28]    | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3        
 *  [31:29] | R      | 0x0   | ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29
 * 
 */
/*
 * Field : tsena
 * 
 * Timestamp Enable
 * 
 * When set, the timestamp is added for the transmit and receive frames. When
 * disabled, timestamp is not added for the transmit and receive frames and the
 * Timestamp Generator is also suspended. You need to initialize the Timestamp
 * (system time) after enabling this mode.
 * 
 * On the receive side, the MAC processes the 1588 frames only if this bit is set.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                   | Value | Description
 * :-------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_E_NOTIMESTAMP | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_E_TIMESTAMP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_E_NOTIMESTAMP  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_E_TIMESTAMP    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : tscfupdt
 * 
 * Timestamp Fine or Coarse Update
 * 
 * When set, this bit indicates that the system times update should be done using
 * the fine update method. When reset, it indicates the system timestamp update
 * should be done using the Coarse method.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                           | Value | Description
 * :---------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_E_TIMESTAMP_COARSE | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_E_TIMESTAMP_FINE   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_E_TIMESTAMP_COARSE  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_E_TIMESTAMP_FINE    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : tsinit
 * 
 * Timestamp Initialize
 * 
 * When set, the system time is initialized (overwritten) with the value specified
 * in the Register 452 (System Time - Seconds Update Register) and Register 453
 * (System Time - Nanoseconds Update Register).
 * 
 * This bit should be read zero before updating it. This bit is reset when the
 * initialization is complete. The Timestamp Higher Word register (if enabled
 * during core configuration) can only be initialized.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_E_NOTIMESTAMP_INIT | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_E_TIMESTAMP_INIT   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_E_NOTIMESTAMP_INIT    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_E_TIMESTAMP_INIT      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : tsupdt
 * 
 * Timestamp Update
 * 
 * When set, the system time is updated (added or subtracted) with the value
 * specified in Register 452 (System Time - Seconds Update Register) and Register
 * 453 (System Time - Nanoseconds Update Register).
 * 
 * This bit should be read zero before updating it. This bit is reset when the
 * update is completed in hardware. The Timestamp Higher Word register (if enabled
 * during core configuration) is not updated.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                            | Value | Description
 * :----------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_E_NOTIMESTAMP_UPDATED | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_E_TIMESTAMP_UPDATED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_E_NOTIMESTAMP_UPDATED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_E_TIMESTAMP_UPDATED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : tstrig
 * 
 * Timestamp Interrupt Trigger Enable
 * 
 * When set, the timestamp interrupt is generated when the System Time becomes
 * greater than the value written in the Target Time register. This bit is reset
 * after the generation of the Timestamp Trigger Interrupt.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                 | Value | Description
 * :---------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_E_NOTIMESTAMP_INTR_TRIG_EN | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_E_TIMESTAMP_INTR_TRIG_EN   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_E_NOTIMESTAMP_INTR_TRIG_EN    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_E_TIMESTAMP_INTR_TRIG_EN      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : tsaddreg
 * 
 * Addend Reg Update
 * 
 * When set, the content of the Timestamp Addend register is updated in the PTP
 * block for fine correction. This is cleared when the update is completed. This
 * register bit should be zero before setting it.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                     | Value | Description
 * :-------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_E_NOTIMESTAMP_ADDEND_UPDATED | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_E_TIMESTAMP_ADDEND_UPDATED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_E_NOTIMESTAMP_ADDEND_UPDATED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_E_TIMESTAMP_ADDEND_UPDATED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_MSB        5
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : reserved_7_6
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_SET_MSK    0x000000c0
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_CLR_MSK    0xffffff3f
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_GET(value) (((value) & 0x000000c0) >> 6)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6_SET(value) (((value) << 6) & 0x000000c0)

/*
 * Field : tsenall
 * 
 * Enable Timestamp for All Frames
 * 
 * When set, the timestamp snapshot is enabled for all frames received by the MAC.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_MSB        8
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : tsctrlssr
 * 
 * Timestamp Digital or Binary Rollover Control
 * 
 * When set, the Timestamp Low register rolls over after 0x3B9A_C9FF value (that
 * is, 1 nanosecond accuracy) and increments the timestamp (High) seconds. When
 * reset, the rollover value of sub-second register is 0x7FFF_FFFF. The sub-second
 * increment has to be programmed correctly depending on the PTP reference clock
 * frequency and the value of this bit.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                                    | Value | Description
 * :------------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_E_NOTIMESTAMP_LOW_ROLL_MAX | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_E_TIMESTAMP_LOW_ROLL_1NS   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_E_NOTIMESTAMP_LOW_ROLL_MAX 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_E_TIMESTAMP_LOW_ROLL_1NS   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_MSB        9
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : tsver2ena
 * 
 * Enable PTP packet Processing for Version 2 Format
 * 
 * When set, the PTP packets are processed using the 1588 version 2 format.
 * Otherwise, the PTP packets are processed using the version 1 format.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                         | Value | Description
 * :-------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_E_PTP_1588_VER1 | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_E_PTP_1588_VER2 | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_E_PTP_1588_VER1    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_E_PTP_1588_VER2    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_MSB        10
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : tsipena
 * 
 * Enable Processing of PTP over Ethernet Frames
 * 
 * When set, the MAC receiver processes the PTP packets encapsulated directly in
 * the Ethernet frames. When this bit is clear, the MAC ignores the PTP over
 * Ethernet packets.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                        | Value | Description
 * :------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_E_NO_PROCESS_PTP | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_E_PROCESS_PTP    | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_E_NO_PROCESS_PTP 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_E_PROCESS_PTP    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_MSB        11
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : tsipv6ena
 * 
 * Enable Processing of PTP Frames Sent Over IPv6-UDP
 * 
 * When set, the MAC receiver processes PTP packets encapsulated in UDP over IPv6
 * packets. When this bit is clear, the MAC ignores the PTP transported over UDP-
 * IPv6 packets.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_E_NO_PROCESS_PTP | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_E_PROCESS_PTP    | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_E_NO_PROCESS_PTP   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_E_PROCESS_PTP      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_MSB        12
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : tsipv4ena
 * 
 * Enable Processing of PTP Frames Sent over IPv4-UDP
 * 
 * When set, the MAC receiver processes the PTP packets encapsulated in UDP over
 * IPv4 packets. When this bit is clear, the MAC ignores the PTP transported over
 * UDP-IPv4 packets. This bit is set by default.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                          | Value | Description
 * :--------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_E_NO_PROCESS_PTP | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_E_PROCESS_PTP    | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_E_NO_PROCESS_PTP   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_E_PROCESS_PTP      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_MSB        13
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_RESET      0x1
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : tsevntena
 * 
 * Enable Timestamp Snapshot for Event Messages
 * 
 * When set, the timestamp snapshot is taken only for event messages (SYNC,
 * Delay_Req, Pdelay_Req, or Pdelay_Resp). When reset, the snapshot is taken for
 * all messages except Announce, Management, and Signaling.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                    | Value | Description
 * :--------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_MSB        14
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : tsmstrena
 * 
 * Enable Snapshot for Messages Relevant to Master
 * 
 * When set, the snapshot is taken only for the messages relevant to the master
 * node. Otherwise, the snapshot is taken for the messages relevant to the slave
 * node.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                  | Value | Description
 * :------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_E_SLAVE  | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_E_MASTER | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_E_SLAVE    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_E_MASTER   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : snaptypsel
 * 
 * Select PTP packets for Taking Snapshots
 * 
 * These bits along with Bits 15 and 14 decide the set of PTP packet types for
 * which snapshot needs to be taken.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_MSB        17
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_SET_MSK    0x00030000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_CLR_MSK    0xfffcffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_GET(value) (((value) & 0x00030000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL_SET(value) (((value) << 16) & 0x00030000)

/*
 * Field : tsenmacaddr
 * 
 * Enable MAC address for PTP Frame Filtering
 * 
 * When set, the DA MAC address (that matches any MAC Address register) is used to
 * filter the PTP frames when PTP is directly sent over Ethernet.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                      | Value | Description
 * :----------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_MSB        18
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : reserved_23_19
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_SET_MSK    0x00f80000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_CLR_MSK    0xff07ffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_GET(value) (((value) & 0x00f80000) >> 19)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19_SET(value) (((value) << 19) & 0x00f80000)

/*
 * Field : atsfc
 * 
 * Auxiliary Snapshot FIFO Clear
 * 
 * When set, it resets the pointers of the Auxiliary Snapshot FIFO. This bit is
 * cleared when the pointers are reset and the FIFO is empty. When this bit is
 * high, auxiliary snapshots get stored in the FIFO. This bit is reserved when the
 * Add IEEE 1588 Auxiliary Snapshot option is not selected during core
 * configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : atsen0
 * 
 * Auxiliary Snapshot 0 Enable
 * 
 * This field controls capturing the Auxiliary Snapshot Trigger 0. When this bit is
 * set, the Auxiliary snapshot of event on ptp_aux_trig_i[0] input is enabled. When
 * this bit is reset, the events on this input are ignored.
 * 
 * This bit is reserved when the <i>Add IEEE 1588 Auxiliary Snapshot</i> option is
 * not selected during core configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : atsen1
 * 
 * Auxiliary Snapshot 1 Enable
 * 
 * This field controls capturing the Auxiliary Snapshot Trigger 1. When this bit is
 * set, the Auxiliary snapshot of event on ptp_aux_trig_i[1] input is enabled. When
 * this bit is reset, the events on this input are ignored.
 * 
 * This bit is reserved when the <i>Add IEEE 1588 Auxiliary Snapshot</i> option is
 * not selected during core configuration or the selected number in the <i>Number
 * of IEEE 1588 Auxiliary Snapshot Inputs</i> option is less than two.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : atsen2
 * 
 * Auxiliary Snapshot 2 Enable
 * 
 * This field controls capturing the Auxiliary Snapshot Trigger 2. When this bit is
 * set, the Auxiliary snapshot of event on ptp_aux_trig_i[2] input is enabled. When
 * this bit is reset, the events on this input are ignored.
 * 
 * This bit is reserved when the <i>Add IEEE 1588 Auxiliary Snapshot</i> option is
 * not selected during core configuration or the selected number in the <i>Number
 * of IEEE 1588 Auxiliary Snapshot Inputs</i> option is less than three.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : atsen3
 * 
 * Auxiliary Snapshot 3 Enable
 * 
 * This field controls capturing the Auxiliary Snapshot Trigger 3. When this bit is
 * set, the Auxiliary snapshot of event on ptp_aux_trig_i[3] input is enabled. When
 * this bit is reset, the events on this input are ignored.
 * 
 * This bit is reserved when the <i>Add IEEE 1588 Auxiliary Snapshot</i> option is
 * not selected during core configuration or the selected number in the <i>Number
 * of IEEE 1588 Auxiliary Snapshot Inputs</i> option is less than four.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : reserved_31_29
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_WIDTH      3
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_SET_MSK    0xe0000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_CLR_MSK    0x1fffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_GET(value) (((value) & 0xe0000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29_SET(value) (((value) << 29) & 0xe0000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL.
 */
struct ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_s
{
    volatile uint32_t        tsena          :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENA */
    const volatile uint32_t  tscfupdt       :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCFUPDT */
    const volatile uint32_t  tsinit         :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSINIT */
    const volatile uint32_t  tsupdt         :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSUPDT */
    const volatile uint32_t  tstrig         :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSTRIG */
    const volatile uint32_t  tsaddreg       :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSADDREG */
    const volatile uint32_t  reserved_7_6   :  2;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_7_6 */
    volatile uint32_t        tsenall        :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENALL */
    volatile uint32_t        tsctrlssr      :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSCTRLSSR */
    volatile uint32_t        tsver2ena      :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSVER2ENA */
    volatile uint32_t        tsipena        :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPENA */
    volatile uint32_t        tsipv6ena      :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV6ENA */
    volatile uint32_t        tsipv4ena      :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSIPV4ENA */
    volatile uint32_t        tsevntena      :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSEVNTENA */
    volatile uint32_t        tsmstrena      :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSMSTRENA */
    volatile uint32_t        snaptypsel     :  2;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_SNAPTYPSEL */
    volatile uint32_t        tsenmacaddr    :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_TSENMACADDR */
    const volatile uint32_t  reserved_23_19 :  5;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_23_19 */
    const volatile uint32_t  atsfc          :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSFC */
    const volatile uint32_t  atsen0         :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN0 */
    const volatile uint32_t  atsen1         :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN1 */
    const volatile uint32_t  atsen2         :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN2 */
    const volatile uint32_t  atsen3         :  1;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ATSEN3 */
    const volatile uint32_t  reserved_31_29 :  3;  /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESERVED_31_29 */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL. */
typedef struct ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_s  ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_RESET       0x00002000
/* The byte offset of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_OFST        0x700
/* The address of the ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_OFST))

/*
 * Register : Register 449 (Sub-Second Increment Register) - gmacgrp_sub_second_increment
 * 
 * In the Coarse Update mode (TSCFUPDT bit in Register 448), the value in this
 * register is added to the system time every clock cycle of clk_ptp_ref_i. In the
 * Fine Update mode, the value in this register is added to the system time
 * whenever the Accumulator gets an overflow.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description               
 * :-------|:-------|:------|:---------------------------
 *  [7:0]  | RW     | 0x0   | Sub-second Increment Value
 *  [31:8] | ???    | 0x0   | *UNDEFINED*               
 * 
 */
/*
 * Field : Sub-second Increment Value - ssinc
 * 
 * The value programmed in this field is accumulated every clock cycle (of
 * clk_ptp_i) with the contents of the sub-second register. For example, when PTP
 * clock is 50 MHz (period is 20 ns), you should program 20 (0x14) when the System
 * Time-Nanoseconds register has an accuracy of 1 ns (TSCTRLSSR bit is set). When
 * TSCTRLSSR is clear, the Nanoseconds register has a resolution of ~0.465ns. In
 * this case, you should program a value of 43 (0x2B) that is derived by
 * 20ns/0.465.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC register field. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC register field. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_MSB        7
/* The width in bits of the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC register field. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC register field value. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_SET_MSK    0x000000ff
/* The mask used to clear the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC register field value. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_CLR_MSK    0xffffff00
/* The reset value of the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC register field. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC field value from a register. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_SSINC_SET(value) (((value) << 0) & 0x000000ff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT.
 */
struct ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_s
{
    volatile uint32_t  ssinc :  8;  /* Sub-second Increment Value */
    uint32_t                 : 24;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT. */
typedef struct ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_s  ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT register. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_OFST        0x704
/* The address of the ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT register. */
#define ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_OFST))

/*
 * Register : Register 450 (System Time - Seconds Register) - gmacgrp_system_time_seconds
 * 
 * The System Time -Seconds register, along with System-TimeNanoseconds register,
 * indicates the current value of the system time maintained by the MAC. Though it
 * is updated on a continuous basis, there is some delay from the actual time
 * because of clock domain transfer latencies (from clk_ptp_ref_i to l3_sp_clk).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | R      | 0x0   | Timestamp Second
 * 
 */
/*
 * Field : Timestamp Second - tss
 * 
 * The value in this field indicates the current value in seconds of the System
 * Time maintained by the MAC.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS field value from a register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_TSS_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS.
 */
struct ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_s
{
    const volatile uint32_t  tss : 32;  /* Timestamp Second */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS. */
typedef struct ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_s  ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_OFST        0x708
/* The address of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_OFST))

/*
 * Register : Register 451 (System Time - Nanoseconds Register) - gmacgrp_system_time_nanoseconds
 * 
 * The value in this field has the sub second representation of time, with an
 * accuracy of 0.46 ns. When TSCTRLSSR is set, each bit represents 1 ns and the
 * maximum value is 0x3B9A_C9FF, after which it rolls-over to zero.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description          
 * :-------|:-------|:------|:----------------------
 *  [30:0] | R      | 0x0   | Timestamp Sub Seconds
 *  [31]   | ???    | 0x0   | *UNDEFINED*          
 * 
 */
/*
 * Field : Timestamp Sub Seconds - tsss
 * 
 * The value in this field has the sub second representation of time, with an
 * accuracy of 0.46 ns. When bit 9 (TSCTRLSSR) is set in Register 448 (Timestamp
 * Control Register), each bit represents 1 ns and the maximum value is
 * 0x3B9A_C9FF, after which it rolls-over to zero.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_WIDTH      31
/* The mask used to set the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_SET_MSK    0x7fffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_CLR_MSK    0x80000000
/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS field value from a register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_GET(value) (((value) & 0x7fffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_TSSS_SET(value) (((value) << 0) & 0x7fffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS.
 */
struct ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_s
{
    const volatile uint32_t  tsss : 31;  /* Timestamp Sub Seconds */
    uint32_t                      :  1;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS. */
typedef struct ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_s  ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_OFST        0x70c
/* The address of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_OFST))

/*
 * Register : Register 452 (System Time - Seconds Update Register) - gmacgrp_system_time_seconds_update
 * 
 * The System Time - Seconds Update register, along with the System Time -
 * Nanoseconds Update register, initializes or updates the system time maintained
 * by the MAC. You must write both of these registers before setting the TSINIT or
 * TSUPDT bits in the Timestamp Control register.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description     
 * :-------|:-------|:------|:-----------------
 *  [31:0] | RW     | 0x0   | Timestamp Second
 * 
 */
/*
 * Field : Timestamp Second - tss
 * 
 * The value in this field indicates the time in seconds to be initialized or added
 * to the system time.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS field value from a register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_TSS_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE.
 */
struct ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_s
{
    volatile uint32_t  tss : 32;  /* Timestamp Second */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE. */
typedef struct ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_s  ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_OFST        0x710
/* The address of the ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_OFST))

/*
 * Register : Register 453 (System Time - Nanoseconds Update Register) - gmacgrp_system_time_nanoseconds_update
 * 
 * Update system time
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description         
 * :-------|:-------|:------|:---------------------
 *  [30:0] | RW     | 0x0   | Timestamp Sub Second
 *  [31]   | RW     | 0x0   | Add or subtract time
 * 
 */
/*
 * Field : Timestamp Sub Second - tsss
 * 
 * The value in this field has the sub second representation of time, with an
 * accuracy of 0.46 ns. When bit 9 (TSCTRLSSR) is set in Register 448 (Timestamp
 * Control Register), each bit represents 1 ns and the programmed value should not
 * exceed 0x3B9A_C9FF.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_WIDTH      31
/* The mask used to set the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_SET_MSK    0x7fffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_CLR_MSK    0x80000000
/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS field value from a register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_GET(value) (((value) & 0x7fffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS_SET(value) (((value) << 0) & 0x7fffffff)

/*
 * Field : Add or subtract time - addsub
 * 
 * When this bit is set, the time value is subtracted with the contents of the
 * update register. When this bit is reset, the time value is added with the
 * contents of the update register.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                              | Value | Description
 * :------------------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB
 * 
 */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB
 * 
 */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB field value from a register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE.
 */
struct ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_s
{
    volatile uint32_t  tsss   : 31;  /* Timestamp Sub Second */
    volatile uint32_t  addsub :  1;  /* Add or subtract time */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE. */
typedef struct ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_s  ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_OFST        0x714
/* The address of the ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_OFST))

/*
 * Register : Register 454 (Timestamp Addend Register) - gmacgrp_timestamp_addend
 * 
 * This register value is used only when the system time is configured for Fine
 * Update mode (TSCFUPDT bit in Register 448). This register content is added to a
 * 32-bit accumulator in every clock cycle (of clk_ptp_ref_i) and the system time
 * is updated whenever the accumulator overflows.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description              
 * :-------|:-------|:------|:--------------------------
 *  [31:0] | RW     | 0x0   | Timestamp Addend Register
 * 
 */
/*
 * Field : Timestamp Addend Register - tsar
 * 
 * This field indicates the 32-bit time value to be added to the Accumulator
 * register to achieve time synchronization.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_TSAR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND.
 */
struct ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_s
{
    volatile uint32_t  tsar : 32;  /* Timestamp Addend Register */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND. */
typedef struct ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_s  ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_OFST        0x718
/* The address of the ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_OFST))

/*
 * Register : Register 455 (Target Time Seconds Register) - gmacgrp_target_time_seconds
 * 
 * The Target Time Seconds register, along with Target Time Nanoseconds register,
 * is used to schedule an interrupt event (Register 458[1] when Advanced
 * Timestamping is enabled; otherwise, TS interrupt bit in Register14[9]) when the
 * system time exceeds the value programmed in these registers.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                 
 * :-------|:-------|:------|:-----------------------------
 *  [31:0] | RW     | 0x0   | Target Time Seconds Register
 * 
 */
/*
 * Field : Target Time Seconds Register - tstr
 * 
 * This register stores the time in seconds. When the timestamp value matches or
 * exceeds both Target Timestamp registers, then based on Bits [6:5] of Register
 * 459 (PPS Control Register), the MAC starts or stops the PPS signal output and
 * generates an interrupt (if enabled).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR register field value. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR register field value. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR field value from a register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_TSTR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS.
 */
struct ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_s
{
    volatile uint32_t  tstr : 32;  /* Target Time Seconds Register */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS. */
typedef struct ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_s  ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_OFST        0x71c
/* The address of the ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_OFST))

/*
 * Register : Register 456 (Target Time Nanoseconds Register) - gmacgrp_target_time_nanoseconds
 * 
 * Target time
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                  
 * :-------|:-------|:------|:------------------------------
 *  [30:0] | RW     | 0x0   | Target Timestamp Low Register
 *  [31]   | R      | 0x0   | Target Time Register Busy    
 * 
 */
/*
 * Field : Target Timestamp Low Register - ttslo
 * 
 * This register stores the time in (signed) nanoseconds. When the value of the
 * timestamp matches the both Target Timestamp registers, then based on the
 * TRGTMODSEL0 field (Bits [6:5]) in Register 459 (PPS Control Register), the MAC
 * starts or stops the PPS signal output and generates an interrupt (if enabled).
 * 
 * This value should not exceed 0x3B9A_C9FF when TSCTRLSSR is set in the Timestamp
 * control register. The actual start or stop time of the PPS signal output may
 * have an error margin up to one unit of sub-second increment value.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_WIDTH      31
/* The mask used to set the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO register field value. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_SET_MSK    0x7fffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO register field value. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_CLR_MSK    0x80000000
/* The reset value of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO field value from a register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_GET(value) (((value) & 0x7fffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TTSLO_SET(value) (((value) << 0) & 0x7fffffff)

/*
 * Field : Target Time Register Busy - trgtbusy
 * 
 * The MAC sets this bit when the PPSCMD field (Bits[3:0]) in Register 459 (PPS
 * Control Register) is programmed to 010 or 011. Programming the PPSCMD field to
 * 010 or 011, instructs the MAC to synchronize the Target Time Registers to the
 * PTP clock domain.
 * 
 * The MAC clears this bit after synchronizing the Target Time Registers to the PTP
 * clock domain The application must not update the Target Time Registers when this
 * bit is read as 1. Otherwise, the synchronization of the previous programmed time
 * gets corrupted. This bit is reserved when the Enable Flexible Pulse-Per-Second
 * Output feature is not selected.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY register field value. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY register field value. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY register field. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY field value from a register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_TRGTBUSY_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS.
 */
struct ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_s
{
    volatile uint32_t        ttslo    : 31;  /* Target Timestamp Low Register */
    const volatile uint32_t  trgtbusy :  1;  /* Target Time Register Busy */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS. */
typedef struct ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_s  ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_OFST        0x720
/* The address of the ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS register. */
#define ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_OFST))

/*
 * Register : Register 457 (System Time - Higher Word Seconds Register) - gmacgrp_system_time_higher_word_seconds
 * 
 * System time higher word
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                   
 * :--------|:-------|:------|:-------------------------------
 *  [15:0]  | RW     | 0x0   | Timestamp Higher Word Register
 *  [31:16] | ???    | 0x0   | *UNDEFINED*                   
 * 
 */
/*
 * Field : Timestamp Higher Word Register - tshwr
 * 
 * This field contains the most significant 16-bits of the timestamp seconds value.
 * The register is directly written to initialize the value. This register is
 * incremented when there is an overflow from the 32-bits of the System Time -
 * Seconds register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR register field value. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR register field. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR field value from a register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR_SET(value) (((value) << 0) & 0x0000ffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS.
 */
struct ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_s
{
    volatile uint32_t  tshwr : 16;  /* Timestamp Higher Word Register */
    uint32_t                 : 16;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS. */
typedef struct ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_s  ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_OFST        0x724
/* The address of the ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS register. */
#define ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_OFST))

/*
 * Register : Register 458 (Timestamp Status Register) - gmacgrp_timestamp_status
 * 
 * Timestamp status. All bits except Bits[27:25] get cleared when the host reads
 * this register.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                    
 * :--------|:-------|:------|:------------------------------------------------
 *  [0]     | R      | 0x0   | Timestamp Seconds Overflow                     
 *  [1]     | R      | 0x0   | Timestamp Target Time Reached                  
 *  [2]     | R      | 0x0   | Auxiliary Timestamp Trigger Snapshot           
 *  [3]     | R      | 0x0   | Timestamp Target Time Error                    
 *  [15:4]  | ???    | 0x0   | *UNDEFINED*                                    
 *  [19:16] | R      | 0x0   | Auxiliary Timestamp Snapshot Trigger Identifier
 *  [23:20] | ???    | 0x0   | *UNDEFINED*                                    
 *  [24]    | R      | 0x0   | Auxiliary Timestamp Snapshot Trigger Missed    
 *  [29:25] | R      | 0x0   | Number of Auxiliary Timestamp Snapshots        
 *  [31:30] | ???    | 0x0   | *UNDEFINED*                                    
 * 
 */
/*
 * Field : Timestamp Seconds Overflow - tssovf
 * 
 * When set, this bit indicates that the seconds value of the timestamp (when
 * supporting version 2 format) has overflowed beyond 32'hFFFF_FFFF.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_E_RESET | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_E_SET   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_E_RESET    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_E_SET      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_MSB        0
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSSOVF_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : Timestamp Target Time Reached - tstargt
 * 
 * When set, this bit indicates that the value of system time is greater or equal
 * to the value specified in the Register 455 (Target Time Seconds Register) and
 * Register 456 (Target Time Nanoseconds Register).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_E_RESET | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_E_SET   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_E_RESET   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_E_SET     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_MSB        1
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTARGT_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : Auxiliary Timestamp Trigger Snapshot - auxtstrig
 * 
 * This bit is set high when the auxiliary snapshot is written to the FIFO.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_E_RESET | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_E_SET   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_E_RESET 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_E_SET   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_MSB        2
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_AUXTSTRIG_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : Timestamp Target Time Error - tstrgterr
 * 
 * This bit is set when the target time, being programmed in Target Time Registers,
 * is already elapsed. This bit is cleared when read by the application.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_E_RESET | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_E_SET   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_E_RESET 0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_E_SET   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_TSTRGTERR_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : Auxiliary Timestamp Snapshot Trigger Identifier - atsstn
 * 
 * These bits identify the Auxiliary trigger inputs for which the timestamp
 * available in the Auxiliary Snapshot Register is applicable. When more than one
 * bit is set at the same time, it means that corresponding auxiliary triggers were
 * sampled at the same clock. These bits are applicable only if the number of
 * Auxiliary snapshots is more than one. One bit is assigned for each trigger as
 * shown in the following list:
 * 
 * * Bit 16: Auxiliary trigger 0
 * 
 * * Bit 17: Auxiliary trigger 1
 * 
 * * Bit 18: Auxiliary trigger 2
 * 
 * * Bit 19: Auxiliary trigger 3
 * 
 * The software can read this register to find the triggers that are set when the
 * timestamp is taken.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_MSB        19
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_WIDTH      4
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_SET_MSK    0x000f0000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_CLR_MSK    0xfff0ffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_GET(value) (((value) & 0x000f0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTN_SET(value) (((value) << 16) & 0x000f0000)

/*
 * Field : Auxiliary Timestamp Snapshot Trigger Missed - atsstm
 * 
 * This bit is set when the Auxiliary timestamp snapshot FIFO is full and external
 * trigger was set. This indicates that the latest snapshot is not stored in the
 * FIFO.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_E_NOTFULL | 0x0   |            
 *  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_E_FULL    | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_E_NOTFULL  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM
 * 
 */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_E_FULL     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSSTM_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Number of Auxiliary Timestamp Snapshots - atsns
 * 
 * This field indicates the number of Snapshots available in the FIFO. A value of
 * 16 (equal to the depth of the FIFO) indicates that the Auxiliary Snapshot FIFO
 * is full. These bits are cleared (to 00000) when the Auxiliary snapshot FIFO
 * clear bit is set.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_WIDTH      5
/* The mask used to set the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_SET_MSK    0x3e000000
/* The mask used to clear the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS register field value. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_CLR_MSK    0xc1ffffff
/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS register field. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS field value from a register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_GET(value) (((value) & 0x3e000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ATSNS_SET(value) (((value) << 25) & 0x3e000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_TIMESTAMP_STATUS.
 */
struct ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_s
{
    const volatile uint32_t  tssovf    :  1;  /* Timestamp Seconds Overflow */
    const volatile uint32_t  tstargt   :  1;  /* Timestamp Target Time Reached */
    const volatile uint32_t  auxtstrig :  1;  /* Auxiliary Timestamp Trigger Snapshot */
    const volatile uint32_t  tstrgterr :  1;  /* Timestamp Target Time Error */
    uint32_t                           : 12;  /* *UNDEFINED* */
    const volatile uint32_t  atsstn    :  4;  /* Auxiliary Timestamp Snapshot Trigger Identifier */
    uint32_t                           :  4;  /* *UNDEFINED* */
    const volatile uint32_t  atsstm    :  1;  /* Auxiliary Timestamp Snapshot Trigger Missed */
    const volatile uint32_t  atsns     :  5;  /* Number of Auxiliary Timestamp Snapshots */
    uint32_t                           :  2;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_TIMESTAMP_STATUS. */
typedef struct ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_s  ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_OFST        0x728
/* The address of the ALT_EMAC_GMACGRP_TIMESTAMP_STATUS register. */
#define ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_OFST))

/*
 * Register : Register 459 (PPS Control Register) - gmacgrp_pps_control
 * 
 * Controls timestamp Pulse-Per-Second output
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                              
 * :-------|:-------|:------|:------------------------------------------
 *  [3:0]  | RW     | 0x0   | PPSCTRL0 or PPSCMD0                      
 *  [4]    | RW     | 0x0   | Flexible PPS Output Mode Enable          
 *  [6:5]  | RW     | 0x0   | Target Time Register Mode for PPS0 Output
 *  [31:7] | ???    | 0x0   | *UNDEFINED*                              
 * 
 */
/*
 * Field : PPSCTRL0 or PPSCMD0 - ppsctrl_ppscmd
 * 
 * PPSCTRL0: PPS0 Output Frequency Control
 * 
 * This field controls the frequency of the PPS0 output (ptp_pps_o[0]) signal. The
 * default value of PPSCTRL is 0000, and the PPS output is 1 pulse (of width
 * clk_ptp_i) every second. For other values of PPSCTRL, the PPS output becomes a
 * generated clock of following frequencies:
 * 
 * * 0001: The binary rollover is 2 Hz, and the digital rollover is 1 Hz.
 * 
 * * 0010: The binary rollover is 4 Hz, and the digital rollover is 2 Hz.
 * 
 * * 0011: The binary rollover is 8 Hz, and the digital rollover is 4 Hz.
 * 
 * * 0100: The binary rollover is 16 Hz, and the digital rollover is 8 Hz.
 * 
 * * ...
 * 
 * * 1111: The binary rollover is 32.768 KHz, and the digital rollover is 16.384
 *   KHz.
 * 
 * Note:
 * 
 * In the binary rollover mode, the PPS output (ptp_pps_o) has a duty cycle of 50
 * percent with these frequencies.
 * 
 * In the digital rollover mode, the PPS output frequency is an average number. The
 * actual clock is of different frequency that gets synchronized every second. For
 * example:
 * 
 *     - When PPSCTRL = 0001, the PPS (1 Hz) has a low period of 537 ms and a high
 *       period of 463 ms
 * 
 *     - When PPSCTRL = 0010, the PPS (2 Hz) is a sequence of:
 * 
 * * One clock of 50 percent duty cycle and 537 ms period
 * 
 * * Second clock of 463 ms period (268 ms low and 195 ms high)
 * 
 *     - When PPSCTRL = 0011, the PPS (4 Hz) is a sequence of:
 * 
 * * Three clocks of 50 percent duty cycle and 268 ms period
 * 
 * * Fourth clock of 195 ms period (134 ms low and 61 ms high)
 * 
 * This behavior is because of the non-linear toggling of bits in the digital
 * rollover mode in Register 451 (System Time - Nanoseconds Register).
 * 
 * Flexible PPS0 Output (ptp_pps_o[0]) Control
 * 
 * Programming these bits with a non-zero value instructs the MAC to initiate an
 * event. Once the command is transferred or synchronized to the PTP clock domain,
 * these bits get cleared automatically. The Software should ensure that these bits
 * are programmed only when they are all-zero. The following list describes the
 * values of PPSCMD0:
 * 
 *     - 0000: No Command
 * 
 *     - 0001: START Single Pulse
 * 
 * This command generates single pulse rising at the start point defined in Target
 * Time Registers (register 455 and 456) and of a duration defined in the PPS0
 * Width Register.
 * 
 *     - 0010: START Pulse Train
 * 
 * This command generates the train of pulses rising at the start point defined in
 * the Target Time Registers and of a duration defined in the PPS0 Width Register
 * and repeated at interval defined in the PPS Interval Register. By default, the
 * PPS pulse train is free-running unless stopped by 'STOP Pulse train at time' or
 * 'STOP Pulse Train immediately' commands.
 * 
 *     - 0011: Cancel START
 * 
 * This command cancels the START Single Pulse and START Pulse Train commands if
 * the system time has not crossed the programmed start time.
 * 
 *     - 0100: STOP Pulse train at time
 * 
 * This command stops the train of pulses initiated by the START Pulse Train
 * command (PPSCMD = 0010) after the time programmed in the Target Time registers
 * elapses.
 * 
 *     - 0101: STOP Pulse Train immediately
 * 
 * This command immediately stops the train of pulses initiated by the START Pulse
 * Train command (PPSCMD = 0010).
 * 
 *     - 0110: Cancel STOP Pulse train
 * 
 * This command cancels the STOP pulse train at time command if the programmed stop
 * time has not elapsed. The PPS pulse train becomes free-running on the successful
 * execution of this command.
 * 
 *     - 0111-1111: Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_MSB        3
/* The width in bits of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_WIDTH      4
/* The mask used to set the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD register field value. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_SET_MSK    0x0000000f
/* The mask used to clear the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD register field value. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_CLR_MSK    0xfffffff0
/* The reset value of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD field value from a register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_GET(value) (((value) & 0x0000000f) >> 0)
/* Produces a ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSCTRL_PPSCMD_SET(value) (((value) << 0) & 0x0000000f)

/*
 * Field : Flexible PPS Output Mode Enable - ppsen0
 * 
 * When set low, Bits[3:0] function as PPSCTRL (backward compatible). When set
 * high, Bits[3:0] function as PPSCMD.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_E_PPSCTRL | 0x0   |            
 *  ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_E_PPSCMD  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0
 * 
 */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_E_PPSCTRL   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0
 * 
 */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_E_PPSCMD    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_MSB        4
/* The width in bits of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 register field value. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 register field value. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 field value from a register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_PPSEN0_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : Target Time Register Mode for PPS0 Output - trgtmodsel0
 * 
 * This field indicates the Target Time registers (register 455 and 456) mode for
 * PPS0 output signal
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                     | Value | Description
 * :---------------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_E_TRGTINTERONLY | 0x0   |            
 *  ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_E_TRGTINTPPS0   | 0x2   |            
 *  ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_E_TRGTNOINTER   | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0
 * 
 */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_E_TRGTINTERONLY    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0
 * 
 */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_E_TRGTINTPPS0      0x2
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0
 * 
 */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_E_TRGTNOINTER      0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_MSB        6
/* The width in bits of the ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_WIDTH      2
/* The mask used to set the ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 register field value. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_SET_MSK    0x00000060
/* The mask used to clear the ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 register field value. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_CLR_MSK    0xffffff9f
/* The reset value of the ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 register field. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 field value from a register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_GET(value) (((value) & 0x00000060) >> 5)
/* Produces a ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_TRGTMODSEL0_SET(value) (((value) << 5) & 0x00000060)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_PPS_CONTROL.
 */
struct ALT_EMAC_GMACGRP_PPS_CONTROL_s
{
    volatile uint32_t  ppsctrl_ppscmd :  4;  /* PPSCTRL0 or PPSCMD0 */
    volatile uint32_t  ppsen0         :  1;  /* Flexible PPS Output Mode Enable */
    volatile uint32_t  trgtmodsel0    :  2;  /* Target Time Register Mode for PPS0 Output */
    uint32_t                          : 25;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_PPS_CONTROL. */
typedef struct ALT_EMAC_GMACGRP_PPS_CONTROL_s  ALT_EMAC_GMACGRP_PPS_CONTROL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_PPS_CONTROL register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_PPS_CONTROL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_OFST        0x72c
/* The address of the ALT_EMAC_GMACGRP_PPS_CONTROL register. */
#define ALT_EMAC_GMACGRP_PPS_CONTROL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_PPS_CONTROL_OFST))

/*
 * Register : Register 460 (Auxiliary Timestamp - Nanoseconds Register) - gmacgrp_auxiliary_timestamp_nanoseconds
 * 
 * This register, along with Register 461 (Auxiliary Timestamp  Seconds Register),
 * gives the 64-bit timestamp stored as auxiliary snapshot. The two registers
 * together form the read port of a 64-bit wide FIFO with a depth of 16. Multiple
 * snapshots can be stored in this FIFO. The ATSNS bits in the Timestamp Status
 * register indicate the fill-level of this FIFO. The top of the FIFO is removed
 * only when the last byte of Register 461 (Auxiliary Timestamp - Seconds Register)
 * is read. In the little-endian mode, this means when Bits[31:24] are read. In
 * big-endian mode, it corresponds to the reading of Bits[7:0] of Register 461
 * (Auxiliary Timestamp - Seconds Register).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                             
 * :-------|:-------|:------|:---------------------------------------------------------
 *  [30:0] | R      | 0x0   | ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO
 *  [31]   | ???    | 0x0   | *UNDEFINED*                                             
 * 
 */
/*
 * Field : auxtslo
 * 
 * Contains the lower 32 bits (nano-seconds field) of the auxiliary timestamp.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_WIDTH      31
/* The mask used to set the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO register field value. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_SET_MSK    0x7fffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO register field value. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_CLR_MSK    0x80000000
/* The reset value of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO field value from a register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_GET(value) (((value) & 0x7fffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO_SET(value) (((value) << 0) & 0x7fffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS.
 */
struct ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_s
{
    const volatile uint32_t  auxtslo : 31;  /* ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_AUXTSLO */
    uint32_t                         :  1;  /* *UNDEFINED* */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS. */
typedef struct ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_s  ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_OFST        0x730
/* The address of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_OFST))

/*
 * Register : Register 461 (Auxiliary Timestamp - Seconds Register) - gmacgrp_auxiliary_timestamp_seconds
 * 
 * Contains the higher 32 bits (Seconds field) of the auxiliary timestamp.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                         
 * :-------|:-------|:------|:-----------------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI
 * 
 */
/*
 * Field : auxtshi
 * 
 * Contains the higher 32 bits (Seconds field) of the auxiliary timestamp.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI register field value. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI register field value. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI register field. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI field value from a register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS.
 */
struct ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_s
{
    const volatile uint32_t  auxtshi : 32;  /* ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_AUXTSHI */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS. */
typedef struct ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_s  ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_OFST        0x734
/* The address of the ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS register. */
#define ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_OFST))

/*
 * Register : Register 472 (PPS0 Interval Register) - gmacgrp_pps0_interval
 * 
 * The PPS0 Interval register contains the number of units of sub-second increment
 * value between the rising edges of PPS0 signal output (ptp_pps_o[0]).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                
 * :-------|:-------|:------|:----------------------------
 *  [31:0] | RW     | 0x0   | PPS0 Output Signal Interval
 * 
 */
/*
 * Field : PPS0 Output Signal Interval - ppsint
 * 
 * These bits store the interval between the rising edges of PPS0 signal output in
 * terms of units of sub-second increment value.
 * 
 * You need to program one value less than the required interval. For example, if
 * the PTP reference clock is 50 MHz (period of 20ns), and desired interval between
 * rising edges of PPS0 signal output is 100ns (that is, five units of sub-second
 * increment value), then you should program value 4 (5 -1) in this register.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT register field. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT register field. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT register field. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT register field value. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT register field value. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT register field. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT field value from a register. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_PPSINT_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_PPS0_INTERVAL.
 */
struct ALT_EMAC_GMACGRP_PPS0_INTERVAL_s
{
    volatile uint32_t  ppsint : 32;  /* PPS0 Output Signal Interval */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_PPS0_INTERVAL. */
typedef struct ALT_EMAC_GMACGRP_PPS0_INTERVAL_s  ALT_EMAC_GMACGRP_PPS0_INTERVAL_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_PPS0_INTERVAL register. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_PPS0_INTERVAL register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_OFST        0x760
/* The address of the ALT_EMAC_GMACGRP_PPS0_INTERVAL register. */
#define ALT_EMAC_GMACGRP_PPS0_INTERVAL_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_PPS0_INTERVAL_OFST))

/*
 * Register : Register 473 (PPS0 Width Register) - gmacgrp_pps0_width
 * 
 * The PPS0 Width register contains the number of units of sub-second increment
 * value between the rising and corresponding falling edges of the PPS0 signal
 * output (ptp_pps_o[0]).
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description             
 * :-------|:-------|:------|:-------------------------
 *  [31:0] | RW     | 0x0   | PPS0 Output Signal Width
 * 
 */
/*
 * Field : PPS0 Output Signal Width - ppswidth
 * 
 * These bits store the width between the rising edge and corresponding falling
 * edge of the PPS0 signal output in terms of units of sub-second increment value.
 * 
 * You need to program one value less than the required interval. For example, if
 * PTP reference clock is 50 MHz (period of 20ns), and desired width between the
 * rising and corresponding falling edges of PPS0 signal output is 80ns (that is,
 * four units of sub-second increment value), then you should program value 3 (4-1)
 * in this register.
 * 
 * Note:
 * 
 * The value programmed in this register must be lesser than the value programmed
 * in Register 472 (PPS0 Interval Register).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH register field. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH register field. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH register field. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH register field value. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH register field value. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH register field. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH field value from a register. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_PPSWIDTH_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_PPS0_WIDTH.
 */
struct ALT_EMAC_GMACGRP_PPS0_WIDTH_s
{
    volatile uint32_t  ppswidth : 32;  /* PPS0 Output Signal Width */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_PPS0_WIDTH. */
typedef struct ALT_EMAC_GMACGRP_PPS0_WIDTH_s  ALT_EMAC_GMACGRP_PPS0_WIDTH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_PPS0_WIDTH register. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_RESET       0x00000000
/* The byte offset of the ALT_EMAC_GMACGRP_PPS0_WIDTH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_OFST        0x764
/* The address of the ALT_EMAC_GMACGRP_PPS0_WIDTH register. */
#define ALT_EMAC_GMACGRP_PPS0_WIDTH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_PPS0_WIDTH_OFST))

/*
 * Register : gmacgrp_mac_address16_high
 * 
 * <b> Register 512 (MAC Address16 High Register) </b>
 * 
 * The MAC Address16 High register holds the upper 16 bits of the 17th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address16 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address16 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address16 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 17th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address16 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address16 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address16 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address16 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address16 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address16 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address16[47:0] is used to compare with the SA
 * fields of the received frame. When this bit is reset, the MAC Address16[47:0] is
 * used to compare with the DA fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 17th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_OFST        0x800
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address16_low
 * 
 * <b> Register 513 (MAC Address16 Low Register) </b>
 * 
 * The MAC Address16 Low register holds the lower 32 bits of the 17th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address16 [31:0]
 * 
 * This field contains the lower 32 bits of the 17th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_OFST        0x804
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_OFST))

/*
 * Register : gmacgrp_mac_address17_high
 * 
 * <b> Register 514 (MAC Address17 High Register) </b>
 * 
 * The MAC Address17 High register holds the upper 16 bits of the 18th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address17 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address17 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address18 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 19th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address17 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address17 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address17 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address17 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address17 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address17 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address17[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address17[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 18th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_OFST        0x808
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address17_low
 * 
 * <b> Register 515 (MAC Address17 Low Register) </b>
 * 
 * The MAC Address17 Low register holds the lower 32 bits of the 18th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address17 [31:0]
 * 
 * This field contains the lower 32 bits of the 18th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_OFST        0x80c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_OFST))

/*
 * Register : gmacgrp_mac_address18_high
 * 
 * <b> Register 516 (MAC Address18 High Register) </b>
 * 
 * The MAC Address18 High register holds the upper 16 bits of the 19th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address18 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address18 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address18 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 19th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address18 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address18 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address18 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address18 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address18 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address18 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address18[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address18[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 19th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_OFST        0x810
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address18_low
 * 
 * <b> Register 517 (MAC Address18 Low Register) </b>
 * 
 * The MAC Address18 Low register holds the lower 32 bits of the 19th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address18 [31:0]
 * 
 * This field contains the lower 32 bits of the 19th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_OFST        0x814
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_OFST))

/*
 * Register : gmacgrp_mac_address19_high
 * 
 * <b> Register 518 (MAC Address19 High Register) </b>
 * 
 * The MAC Address19 High register holds the upper 16 bits of the 20th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address19 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address19 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address19 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 20th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address19 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address19 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address19 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address19 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address19 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address19 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address19[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address19[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 20th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_OFST        0x818
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address19_low
 * 
 * <b> Register 519 (MAC Address19 Low Register) </b>
 * 
 * The MAC Address19 Low register holds the lower 32 bits of the 20th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address19 [31:0]
 * 
 * This field contains the lower 32 bits of the 20th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_OFST        0x81c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_OFST))

/*
 * Register : gmacgrp_mac_address20_high
 * 
 * <b> Register 520 (MAC Address20 High Register) </b>
 * 
 * The MAC Address20 High register holds the upper 16 bits of the 21st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address20 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address20 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address20 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 20th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address20 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address20 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address20 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address20 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address20 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address20 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address20[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address20[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 21st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_OFST        0x820
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address20_low
 * 
 * <b> Register 521 (MAC Address20 Low Register) </b>
 * 
 * The MAC Address20 Low register holds the lower 32 bits of the 21st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address20 [31:0]
 * 
 * This field contains the lower 32 bits of the 21st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_OFST        0x824
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_OFST))

/*
 * Register : gmacgrp_mac_address21_high
 * 
 * <b> Register 522 (MAC Address21 High Register) </b>
 * 
 * The MAC Address21 High register holds the upper 16 bits of the 22nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address21 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address21 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address21 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 6-byte 22nd MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address21 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address21 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address21 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address21 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address21 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address21 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address21[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address21[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 22nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_OFST        0x828
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address21_low
 * 
 * <b> Register 523 (MAC Address21 Low Register) </b>
 * 
 * The MAC Address21 Low register holds the lower 32 bits of the 22nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address21 [31:0]
 * 
 * This field contains the lower 32 bits of the 22nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_OFST        0x82c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_OFST))

/*
 * Register : gmacgrp_mac_address22_high
 * 
 * <b> Register 524 (MAC Address22 High Register) </b>
 * 
 * The MAC Address22 High register holds the upper 16 bits of the 23rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address22 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address22 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address22 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 23rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address22 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address22 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address22 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address22 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address22 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address22 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address22[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address22[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 23rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_OFST        0x830
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address22_low
 * 
 * <b> Register 525 (MAC Address22 Low Register) </b>
 * 
 * The MAC Address22 Low register holds the lower 32 bits of the 23rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address22 [31:0]
 * 
 * This field contains the lower 32 bits of the 23rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_OFST        0x834
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_OFST))

/*
 * Register : gmacgrp_mac_address23_high
 * 
 * <b> Register 526 (MAC Address23 High Register   </b>
 * 
 * The MAC Address23 High register holds the upper 16 bits of the 24th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address23 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address23 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address23 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 24th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address23 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address23 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address23 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address23 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address23 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address23 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address23[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address23[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 24th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_OFST        0x838
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address23_low
 * 
 * <b> Register 527 (MAC Address23 Low Register) </b>
 * 
 * The MAC Address23 Low register holds the lower 32 bits of the 24th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address23 [31:0]
 * 
 * This field contains the lower 32 bits of the 24th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_OFST        0x83c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_OFST))

/*
 * Register : gmacgrp_mac_address24_high
 * 
 * <b> Register 528 (MAC Address24 High Register) </b>
 * 
 * The MAC Address24 High register holds the upper 16 bits of the 25th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address24 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address24 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address1 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 25th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address24 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address24 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address24 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address24 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address24 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address24 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address24[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address24[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 25th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_OFST        0x840
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address24_low
 * 
 * <b> Register 529 (MAC Address24 Low Register) </b>
 * 
 * The MAC Address24 Low register holds the lower 32 bits of the 25th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address24 [31:0]
 * 
 * This field contains the lower 32 bits of the 25th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_OFST        0x844
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_OFST))

/*
 * Register : gmacgrp_mac_address25_high
 * 
 * <b> Register 530 (MAC Address25 High Register) </b>
 * 
 * The MAC Address25 High register holds the upper 16 bits of the 6-byte 26th MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address25 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address25 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address25 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 26th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address25 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address25 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address25 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address25 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address25 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address25 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address25[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address25[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 26th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_OFST        0x848
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address25_low
 * 
 * <b> Register 531 (MAC Address25 Low Register) </b>
 * 
 * The MAC Address25 Low register holds the lower 32 bits of the 26th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address25 [31:0]
 * 
 * This field contains the lower 32 bits of the 26th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_OFST        0x84c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_OFST))

/*
 * Register : gmacgrp_mac_address26_high
 * 
 * <b> Register 532 (MAC Address26 High Register) </b>
 * 
 * The MAC Address26 High register holds the upper 16 bits of the 27th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address26 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address26 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address26 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 27th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address26 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address26 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address26 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address26 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address26 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address26 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address26[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address26[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 27th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_OFST        0x850
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address26_low
 * 
 * <b> Register 533 (MAC Address26 Low Register) </b>
 * 
 * The MAC Address26 Low register holds the lower 32 bits of the 27th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address26 [31:0]
 * 
 * This field contains the lower 32 bits of the 27th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_OFST        0x854
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_OFST))

/*
 * Register : gmacgrp_mac_address27_high
 * 
 * <b> Register 534 (MAC Address27 High Register) </b>
 * 
 * The MAC Address27 High register holds the upper 16 bits of the 28th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address27 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address27 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address27 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 28th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address27 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address27 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address27 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address27 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address27 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address27 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address27[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address27[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 28th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_OFST        0x858
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address27_low
 * 
 * <b> Register 535 (MAC Address27 Low Register) </b>
 * 
 * The MAC Address27 Low register holds the lower 32 bits of the 28th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address27 [31:0]
 * 
 * This field contains the lower 32 bits of the 28th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_OFST        0x85c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_OFST))

/*
 * Register : gmacgrp_mac_address28_high
 * 
 * <b> Register 536 (MAC Address28 High Register) </b>
 * 
 * The MAC Address28 High register holds the upper 16 bits of the 29th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address28 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address28 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address28 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 29th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address28 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address28 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address28 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address28 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address28 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address28 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address28[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address28[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 29th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_OFST        0x860
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address28_low
 * 
 * <b> Register 537 (MAC Address28 Low Register) </b>
 * 
 * The MAC Address28 Low register holds the lower 32 bits of the 29th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address28 [31:0]
 * 
 * This field contains the lower 32 bits of the 29th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_OFST        0x864
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_OFST))

/*
 * Register : gmacgrp_mac_address29_high
 * 
 * <b> Register 538 (MAC Address29 High Register) </b>
 * 
 * The MAC Address29 High register holds the upper 16 bits of the 6-byte 30th MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address29 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address29 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address29 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 30th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address29 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address29 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address29 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address29 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address29 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address29 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address29[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address29[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 30th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_OFST        0x868
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address29_low
 * 
 * <b> Register 539 (MAC Address29 Low Register) </b>
 * 
 * The MAC Address29 Low register holds the lower 32 bits of the 30th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address29 [31:0]
 * 
 * This field contains the lower 32 bits of the 30th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_OFST        0x86c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_OFST))

/*
 * Register : gmacgrp_mac_address30_high
 * 
 * <b> Register 540 (MAC Address30 High Register) </b>
 * 
 * The MAC Address30 High register holds the upper 16 bits of the 31st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address30 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address30 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address30 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 31st 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address30 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address30 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address30 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address30 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address30 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address30 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address30[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address30[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 31st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_OFST        0x870
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address30_low
 * 
 * <b> Register 541 (MAC Address30 Low Register) </b>
 * 
 * The MAC Address30 Low register holds the lower 32 bits of the 31st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address30 [31:0]
 * 
 * This field contains the lower 32 bits of the 31st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_OFST        0x874
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_OFST))

/*
 * Register : gmacgrp_mac_address31_high
 * 
 * <b> Register 542 (MAC Address31 High Register) </b>
 * 
 * The MAC Address31 High register holds the upper 16 bits of the 32nd 6-byte MAC
 * address of the station. If the MAC address registers are configured to be
 * double-synchronized to the (G)MII clock domains, then the synchronization is
 * triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-
 * endian mode) of the MAC Address31 Low Register are written. For proper
 * synchronization updates, consecutive writes to this MAC Address31 Low Register
 * must be performed after at least four clock cycles in the destination clock
 * domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI        
 *  [23:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16
 *  [24]    | RW     | 0x0    | Mask Byte Control                                 
 *  [25]    | RW     | 0x0    | Mask Byte Control                                 
 *  [26]    | RW     | 0x0    | Mask Byte Control                                 
 *  [27]    | RW     | 0x0    | Mask Byte Control                                 
 *  [28]    | RW     | 0x0    | Mask Byte Control                                 
 *  [29]    | RW     | 0x0    | Mask Byte Control                                 
 *  [30]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA            
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address31 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 32nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_23_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_MSB        23
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_WIDTH      8
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_SET_MSK    0x00ff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_CLR_MSK    0xff00ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_GET(value) (((value) & 0x00ff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16_SET(value) (((value) << 16) & 0x00ff0000)

/*
 * Field : Mask Byte Control - mbc_0
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address31 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_MSB        24
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_0_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : Mask Byte Control - mbc_1
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address31 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_MSB        25
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_1_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : Mask Byte Control - mbc_2
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address31 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_MSB        26
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_2_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : Mask Byte Control - mbc_3
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address31 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_MSB        27
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_3_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : Mask Byte Control - mbc_4
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address31 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_MSB        28
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_4_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : Mask Byte Control - mbc_5
 * 
 * This array of bits are mask control bits for comparison of each of the MAC
 * Address bytes. When masked, the MAC does not compare the corresponding byte of
 * received DA or SA with the contents of MAC Address31 high and low registers.
 * Each bit controls the masking of the bytes. You can filter a group of addresses
 * (known as group address filtering) by masking one or more bytes of the address.
 * 
 * The array index corresponds to the byte (e.g. index 0 is for bits 7:0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                 | Value | Description
 * :-----------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_E_UNMASKED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_E_MASKED   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_E_UNMASKED    0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_E_MASKED      0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_MSB        29
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_MBC_5_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : sa
 * 
 * Source Address
 * 
 * When this bit is set, the MAC Address31[47:0] is used to compare with the SA
 * fields of the received frame.
 * 
 * When this bit is reset, the MAC Address31[47:0] is used to compare with the DA
 * fields of the received frame.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 32nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDRHI */
    const volatile uint32_t  reserved_23_16 :  8;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESERVED_23_16 */
    volatile uint32_t        mbc_0          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_1          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_2          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_3          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_4          :  1;  /* Mask Byte Control */
    volatile uint32_t        mbc_5          :  1;  /* Mask Byte Control */
    volatile uint32_t        sa             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_SA */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_OFST        0x878
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address31_low
 * 
 * <b> Register 543 (MAC Address31 Low Register) </b>
 * 
 * The MAC Address31 Low register holds the lower 32 bits of the 32nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address31 [31:0]
 * 
 * This field contains the lower 32 bits of the 32nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_OFST        0x87c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_OFST))

/*
 * Register : gmacgrp_mac_address32_high
 * 
 * <b> Register 544 (MAC Address32 High Register) </b>
 * 
 * The MAC Address32 High register holds the upper 16 bits of the 33rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address32 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address32 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address32 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 33rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 33rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_OFST        0x880
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address32_low
 * 
 * <b> Register 545 (MAC Address32 Low Register) </b>
 * 
 * The MAC Address32 Low register holds the lower 32 bits of the 33rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address32 [31:0]
 * 
 * This field contains the lower 32 bits of the 33rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_OFST        0x884
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_OFST))

/*
 * Register : gmacgrp_mac_address33_high
 * 
 * <b> Register 546 (MAC Address33 High Register) </b>
 * 
 * The MAC Address33 High register holds the upper 16 bits of the 34th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address33 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address33 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address33 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 34th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 34th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_OFST        0x888
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address33_low
 * 
 * <b> Register 547 (MAC Address33 Low Register) </b>
 * 
 * The MAC Address33 Low register holds the lower 32 bits of the 34th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address33 [31:0]
 * 
 * This field contains the lower 32 bits of the 34th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_OFST        0x88c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_OFST))

/*
 * Register : gmacgrp_mac_address34_high
 * 
 * <b> Register 548 (MAC Address34 High Register) </b>
 * 
 * The MAC Address34 High register holds the upper 16 bits of the 35th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address34 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address34 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address34 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 35th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 35th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_OFST        0x890
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address34_low
 * 
 * <b> Register 549 (MAC Address34 Low Register) </b>
 * 
 * The MAC Address34 Low register holds the lower 32 bits of the 35th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address34 [31:0]
 * 
 * This field contains the lower 32 bits of the 35th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_OFST        0x894
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_OFST))

/*
 * Register : gmacgrp_mac_address35_high
 * 
 * <b> Register 550 (MAC Address35 High Register) </b>
 * 
 * The MAC Address35 High register holds the upper 16 bits of the 36th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address35 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address35 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address35 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 36th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 36th MAC address for
 * perfect filtering. When this bit is reset, the address filter module ignores the
 * address for filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_OFST        0x898
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address35_low
 * 
 * <b> Register 551 (MAC Address35 Low Register) </b>
 * 
 * The MAC Address35 Low register holds the lower 32 bits of the 36th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address35 [31:0]
 * 
 * This field contains the lower 32 bits of the 36th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_OFST        0x89c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_OFST))

/*
 * Register : gmacgrp_mac_address36_high
 * 
 * <b> Register 552 (MAC Address36 High Register) </b>
 * 
 * The MAC Address36 High register holds the upper 16 bits of the 37th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address36 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address36 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address36 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 37th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 37th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_OFST        0x8a0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address36_low
 * 
 * <b> Register 553 (MAC Address36 Low Register) </b>
 * 
 * The MAC Address36 Low register holds the lower 32 bits of the 34th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address36 [31:0]
 * 
 * This field contains the lower 32 bits of the 37th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_OFST        0x8a4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_OFST))

/*
 * Register : gmacgrp_mac_address37_high
 * 
 * <b> Register 554 (MAC Address37 High Register) </b>
 * 
 * The MAC Address37 High register holds the upper 16 bits of the 38th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address37 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address37 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address37 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 38th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 38th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_OFST        0x8a8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address37_low
 * 
 * <b> Register 555 (MAC Address37 Low Register) </b>
 * 
 * The MAC Address37 Low register holds the lower 32 bits of the 37th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address37 [31:0]
 * 
 * This field contains the lower 32 bits of the 38th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_OFST        0x8ac
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_OFST))

/*
 * Register : gmacgrp_mac_address38_high
 * 
 * <b> Register 556 (MAC Address38 High Register) </b>
 * 
 * The MAC Address38 High register holds the upper 16 bits of the 39th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address38 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address38 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address38 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 39th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 39th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_OFST        0x8b0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address38_low
 * 
 * <b> Register 557 (MAC Address38 Low Register) </b>
 * 
 * The MAC Address38 Low register holds the lower 32 bits of the 39th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address38 [31:0]
 * 
 * This field contains the lower 32 bits of the 39th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_OFST        0x8b4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_OFST))

/*
 * Register : gmacgrp_mac_address39_high
 * 
 * <b> Register 558 (MAC Address39 High Register) </b>
 * 
 * The MAC Address39 High register holds the upper 16 bits of the 40th 6-byte MAC
 * address of the station. If the MAC address registers are configured to be
 * double-synchronized to the (G)MII clock domains, then the synchronization is
 * triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-
 * endian mode) of the MAC Address40 Low Register are written. For proper
 * synchronization updates, consecutive writes to this MAC Address40 Low Register
 * must be performed after at least four clock cycles in the destination clock
 * domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address39 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 40th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 40th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_OFST        0x8b8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address39_low
 * 
 * <b> Register 559 (MAC Address39 Low Register) </b>
 * 
 * The MAC Address39 Low register holds the lower 32 bits of the 40th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address39 [31:0]
 * 
 * This field contains the lower 32 bits of the 40th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_OFST        0x8bc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_OFST))

/*
 * Register : gmacgrp_mac_address40_high
 * 
 * <b> Register 560 (MAC Address40 High Register) </b>
 * 
 * The MAC Address40 High register holds the upper 16 bits of the 41st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address40 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address40 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address40 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 41st 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 41st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_OFST        0x8c0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address40_low
 * 
 * <b> Register 561 (MAC Address40 Low Register) </b>
 * 
 * The MAC Address40 Low register holds the lower 32 bits of the 41st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address40 [31:0]
 * 
 * This field contains the lower 32 bits of the 41st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_OFST        0x8c4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_OFST))

/*
 * Register : gmacgrp_mac_address41_high
 * 
 * <b> Register 562 (MAC Address41 High Register) </b>
 * 
 * The MAC Address41 High register holds the upper 16 bits of the 42nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address41 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address41 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address41 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 42nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 42nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_OFST        0x8c8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address41_low
 * 
 * <b> Register 563 (MAC Address41 Low Register) </b>
 * 
 * The MAC Address41 Low register holds the lower 32 bits of the 42nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address41 [31:0]
 * 
 * This field contains the lower 32 bits of the 42nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_OFST        0x8cc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_OFST))

/*
 * Register : gmacgrp_mac_address42_high
 * 
 * <b> Register 564 (MAC Address42 High Register) </b>
 * 
 * The MAC Address42 High register holds the upper 16 bits of the 43rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address42 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address42 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address42 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 43rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 43rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_OFST        0x8d0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address42_low
 * 
 * <b> Register 565 (MAC Address42 Low Register) </b>
 * 
 * The MAC Address42 Low register holds the lower 32 bits of the 43rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address42 [31:0]
 * 
 * This field contains the lower 32 bits of the 43rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_OFST        0x8d4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_OFST))

/*
 * Register : gmacgrp_mac_address43_high
 * 
 * <b> Register 566 (MAC Address43 High Register) </b>
 * 
 * The MAC Address43 High register holds the upper 16 bits of the 44th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address43 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address43 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address43 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 44th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 44th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_OFST        0x8d8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address43_low
 * 
 * <b> Register 567 (MAC Address43 Low Register) </b>
 * 
 * The MAC Address43 Low register holds the lower 32 bits of the 44th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address43 [31:0]
 * 
 * This field contains the lower 32 bits of the 44th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_OFST        0x8dc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_OFST))

/*
 * Register : gmacgrp_mac_address44_high
 * 
 * <b> Register 568 (MAC Address44 High Register) </b>
 * 
 * The MAC Address44 High register holds the upper 16 bits of the 45th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address44 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address44 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address44 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 45th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 45th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_OFST        0x8e0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address44_low
 * 
 * <b> Register 569 (MAC Address44 Low Register) </b>
 * 
 * The MAC Address44 Low register holds the lower 32 bits of the 45th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address44 [31:0]
 * 
 * This field contains the lower 32 bits of the 45th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_OFST        0x8e4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_OFST))

/*
 * Register : gmacgrp_mac_address45_high
 * 
 * <b> Register 570 (MAC Address45 High Register) </b>
 * 
 * The MAC Address45 High register holds the upper 16 bits of the 46th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address45 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address45 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address45 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 46th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 46th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_OFST        0x8e8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address45_low
 * 
 * <b> Register 571 (MAC Address45 Low Register) </b>
 * 
 * The MAC Address45 Low register holds the lower 32 bits of the 46th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address45 [31:0]
 * 
 * This field contains the lower 32 bits of the 46th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_OFST        0x8ec
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_OFST))

/*
 * Register : gmacgrp_mac_address46_high
 * 
 * <b> Register 572 (MAC Address46 High Register) </b>
 * 
 * The MAC Address46 High register holds the upper 16 bits of the 47th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address46 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address46 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address46 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 47th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 47th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_OFST        0x8f0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address46_low
 * 
 * <b> Register 573 (MAC Address46 Low Register) </b>
 * 
 * The MAC Address46 Low register holds the lower 32 bits of the 47th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address46 [31:0]
 * 
 * This field contains the lower 32 bits of the 47th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_OFST        0x8f4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_OFST))

/*
 * Register : gmacgrp_mac_address47_high
 * 
 * <b> Register 574 (MAC Address47 High Register) </b>
 * 
 * The MAC Address47 High register holds the upper 16 bits of the 48th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address47 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address47 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address47 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 48th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 48th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_OFST        0x8f8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address47_low
 * 
 * <b> Register 575 (MAC Address47 Low Register) </b>
 * 
 * The MAC Address47 Low register holds the lower 32 bits of the 48th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address47 [31:0]
 * 
 * This field contains the lower 32 bits of the 48th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_OFST        0x8fc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_OFST))

/*
 * Register : gmacgrp_mac_address48_high
 * 
 * <b> Register 576 (MAC Address48 High Register) </b>
 * 
 * The MAC Address48 High register holds the upper 16 bits of the 49th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address48 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address48 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address48 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 49th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 49th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_OFST        0x900
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address48_low
 * 
 * <b> Register 577 (MAC Address48 Low Register) </b>
 * 
 * The MAC Address48 Low register holds the lower 32 bits of the 49th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address48 [31:0]
 * 
 * This field contains the lower 32 bits of the 49th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_OFST        0x904
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_OFST))

/*
 * Register : gmacgrp_mac_address49_high
 * 
 * <b> Register 578 (MAC Address49 High Register) </b>
 * 
 * The MAC Address49 High register holds the upper 16 bits of the 50th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address49 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address49 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address49 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 50th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 50th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_OFST        0x908
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address49_low
 * 
 * <b> Register 579 (MAC Address49 Low Register) </b>
 * 
 * The MAC Address49 Low register holds the lower 32 bits of the 50th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address49 [31:0]
 * 
 * This field contains the lower 32 bits of the 50th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_OFST        0x90c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_OFST))

/*
 * Register : gmacgrp_mac_address50_high
 * 
 * <b> Register 580 (MAC Address50 High Register) </b>
 * 
 * The MAC Address50 High register holds the upper 16 bits of the 51st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address50 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address50 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address50 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 51st 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 51st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_OFST        0x910
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address50_low
 * 
 * <b> Register 581 (MAC Address50 Low Register) </b>
 * 
 * The MAC Address50 Low register holds the lower 32 bits of the 51st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address50 [31:0]
 * 
 * This field contains the lower 32 bits of the 51st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_OFST        0x914
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_OFST))

/*
 * Register : gmacgrp_mac_address51_high
 * 
 * <b> Register 582 (MAC Address51 High Register) </b>
 * 
 * The MAC Address51 High register holds the upper 16 bits of the 52nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address51 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address51 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address51 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 52nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 52nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_OFST        0x918
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address51_low
 * 
 * <b> Register 583 (MAC Address51 Low Register) </b>
 * 
 * The MAC Address51 Low register holds the lower 32 bits of the 52nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address51 [31:0]
 * 
 * This field contains the lower 32 bits of the 52nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_OFST        0x91c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_OFST))

/*
 * Register : gmacgrp_mac_address52_high
 * 
 * <b> Register 584 (MAC Address52 High Register) </b>
 * 
 * The MAC Address52 High register holds the upper 16 bits of the 53rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address52 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address52 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address52 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 53rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 53rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_OFST        0x920
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address52_low
 * 
 * <b> Register 585 (MAC Address52 Low Register) </b>
 * 
 * The MAC Address52 Low register holds the lower 32 bits of the 53rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address52 [31:0]
 * 
 * This field contains the lower 32 bits of the 53rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_OFST        0x924
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_OFST))

/*
 * Register : gmacgrp_mac_address53_high
 * 
 * <b> Register 586 (MAC Address53 High Register)</b>
 * 
 * The MAC Address53 High register holds the upper 16 bits of the 54th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address53 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address53 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address53 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 54th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 54th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_OFST        0x928
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address53_low
 * 
 * <b> Register 587 (MAC Address53 Low Register)</b>
 * 
 * The MAC Address53 Low register holds the lower 32 bits of the 54th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address53 [31:0]
 * 
 * This field contains the lower 32 bits of the 54th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_OFST        0x92c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_OFST))

/*
 * Register : gmacgrp_mac_address54_high
 * 
 * <b> Register 588 (MAC Address54 High Register)</b>
 * 
 * The MAC Address54 High register holds the upper 16 bits of the 55th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address54 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address54 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address54 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 55th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 55th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_OFST        0x930
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address54_low
 * 
 * <b> Register 589 (MAC Address54 Low Register)</b>
 * 
 * The MAC Address54 Low register holds the lower 32 bits of the 55th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address54 [31:0]
 * 
 * This field contains the lower 32 bits of the 55th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_OFST        0x934
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_OFST))

/*
 * Register : gmacgrp_mac_address55_high
 * 
 * <b> Register 590 (MAC Address55 High Register) </b>
 * 
 * The MAC Address55 High register holds the upper 16 bits of the 56th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address55 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address55 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address55 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 56th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 56th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_OFST        0x938
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address55_low
 * 
 * <b> Register 591 (MAC Address55 Low Register) </b>
 * 
 * The MAC Address55 Low register holds the lower 32 bits of the 56th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address55 [31:0]
 * 
 * This field contains the lower 32 bits of the 56th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_OFST        0x93c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_OFST))

/*
 * Register : gmacgrp_mac_address56_high
 * 
 * <b> Register 592 (MAC Address56 High Register) </b>
 * 
 * The MAC Address56 High register holds the upper 16 bits of the 57th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address56 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address56 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address56 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 57th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 57th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_OFST        0x940
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address56_low
 * 
 * <b> Register 593 (MAC Address56 Low Register) </b>
 * 
 * The MAC Address56 Low register holds the lower 32 bits of the 57th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address56 [31:0]
 * 
 * This field contains the lower 32 bits of the 57th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_OFST        0x944
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_OFST))

/*
 * Register : gmacgrp_mac_address57_high
 * 
 * <b> Register 594 (MAC Address57 High Register) </b>
 * 
 * The MAC Address57 High register holds the upper 16 bits of the 58th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address57 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address57 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address57 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 58th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 58th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_OFST        0x948
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address57_low
 * 
 * <b> Register 595 (MAC Address57 Low Register)</b>
 * 
 * The MAC Address57 Low register holds the lower 32 bits of the 58th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address57 [31:0]
 * 
 * This field contains the lower 32 bits of the 58th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_OFST        0x94c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_OFST))

/*
 * Register : gmacgrp_mac_address58_high
 * 
 * <b> Register 596 (MAC Address58 High Register)</b>
 * 
 * The MAC Address58 High register holds the upper 16 bits of the 59th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address58 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address58 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address58 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 59th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 59th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_OFST        0x950
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address58_low
 * 
 * <b> Register 597 (MAC Address58 Low Register)</b>
 * 
 * The MAC Address58 Low register holds the lower 32 bits of the 59th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address58 [31:0]
 * 
 * This field contains the lower 32 bits of the 59th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_OFST        0x954
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_OFST))

/*
 * Register : gmacgrp_mac_address59_high
 * 
 * <b> Register 598 (MAC Address59 High Register) </b>
 * 
 * The MAC Address59 High register holds the upper 16 bits of the 60th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address59 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address59 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address59 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 60th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 60th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_OFST        0x958
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address59_low
 * 
 * <b> Register 599 (MAC Address59 Low Register) </b>
 * 
 * The MAC Address59 Low register holds the lower 32 bits of the 60th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address59 [31:0]
 * 
 * This field contains the lower 32 bits of the 60th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_OFST        0x95c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_OFST))

/*
 * Register : gmacgrp_mac_address60_high
 * 
 * <b> Register 600 (MAC Address60 High Register) </b>
 * 
 * The MAC Address60 High register holds the upper 16 bits of the 61st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address60 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address60 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address60 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 61st 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 61st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_OFST        0x960
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address60_low
 * 
 * <b> Register 601 (MAC Address60 Low Register) </b>
 * 
 * The MAC Address60 Low register holds the lower 32 bits of the 61st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address60 [31:0]
 * 
 * This field contains the lower 32 bits of the 61st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_OFST        0x964
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_OFST))

/*
 * Register : gmacgrp_mac_address61_high
 * 
 * <b> Register 602 (MAC Address61 High Register) </b>
 * 
 * The MAC Address61 High register holds the upper 16 bits of the 62nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address61 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address61 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address61 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 62nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 62nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_OFST        0x968
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address61_low
 * 
 * <b> Register 603 (MAC Address61 Low Register)</b>
 * 
 * The MAC Address61 Low register holds the lower 32 bits of the 62nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address61 [31:0]
 * 
 * This field contains the lower 32 bits of the 62nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_OFST        0x96c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_OFST))

/*
 * Register : gmacgrp_mac_address62_high
 * 
 * <b> Register 604 (MAC Address62 High Register)</b>
 * 
 * The MAC Address62 High register holds the upper 16 bits of the 63rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address62 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address62 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address62 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 63rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 63rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_OFST        0x970
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address62_low
 * 
 * <b> Register 605 (MAC Address62 Low Register)</b>
 * 
 * The MAC Address62 Low register holds the lower 32 bits of the 63rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address62 [31:0]
 * 
 * This field contains the lower 32 bits of the 63rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_OFST        0x974
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_OFST))

/*
 * Register : gmacgrp_mac_address63_high
 * 
 * <b> Register 606 (MAC Address63 High Register) </b>
 * 
 * The MAC Address63 High register holds the upper 16 bits of the 64th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address63 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address63 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address63 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 64th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 64th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_OFST        0x978
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address63_low
 * 
 * <b> Register 607 (MAC Address63 Low Register) </b>
 * 
 * The MAC Address63 Low register holds the lower 32 bits of the 64th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address63 [31:0]
 * 
 * This field contains the lower 32 bits of the 64th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_OFST        0x97c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_OFST))

/*
 * Register : gmacgrp_mac_address64_high
 * 
 * <b> Register 608 (MAC Address64 High Register) </b>
 * 
 * The MAC Address64 High register holds the upper 16 bits of the 65th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address64 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address64 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address64 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 65th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 65th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_OFST        0x980
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address64_low
 * 
 * <b> Register 609 (MAC Address64 Low Register) </b>
 * 
 * The MAC Address64 Low register holds the lower 32 bits of the 65th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address64 [31:0]
 * 
 * This field contains the lower 32 bits of the 65th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_OFST        0x984
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_OFST))

/*
 * Register : gmacgrp_mac_address65_high
 * 
 * <b> Register 610 (MAC Address65 High Register) </b>
 * 
 * The MAC Address65 High register holds the upper 16 bits of the 66th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address65 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address65 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address65 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 66th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 66th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_OFST        0x988
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address65_low
 * 
 * <b> Register 611 (MAC Address65 Low Register)</b>
 * 
 * The MAC Address65 Low register holds the lower 32 bits of the 66th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address65 [31:0]
 * 
 * This field contains the lower 32 bits of the 66th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_OFST        0x98c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_OFST))

/*
 * Register : gmacgrp_mac_address66_high
 * 
 * <b> Register 612 (MAC Address66 High Register)</b>
 * 
 * The MAC Address66 High register holds the upper 16 bits of the 67th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address66 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address66 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address66 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 67th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 67th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_OFST        0x990
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address66_low
 * 
 * <b> Register 613 (MAC Address66 Low Register)</b>
 * 
 * The MAC Address66 Low register holds the lower 32 bits of the 67th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address66 [31:0]
 * 
 * This field contains the lower 32 bits of the 67th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_OFST        0x994
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_OFST))

/*
 * Register : gmacgrp_mac_address67_high
 * 
 * <b> Register 614 (MAC Address67 High Register)</b>
 * 
 * The MAC Address67 High register holds the upper 16 bits of the 68th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address67 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address67 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address67 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 68th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 68th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_OFST        0x998
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address67_low
 * 
 * <b> Register 615 (MAC Address67 Low Register)</b>
 * 
 * The MAC Address67 Low register holds the lower 32 bits of the 68th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address67 [31:0]
 * 
 * This field contains the lower 32 bits of the 68th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_OFST        0x99c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_OFST))

/*
 * Register : gmacgrp_mac_address68_high
 * 
 * <b> Register 616 (MAC Address68 High Register)</b>
 * 
 * The MAC Address68 High register holds the upper 16 bits of the 69th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address68 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address68 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address68 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 69th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 69th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_OFST        0x9a0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address68_low
 * 
 * <b> Register 617 (MAC Address68 Low Register)</b>
 * 
 * The MAC Address68 Low register holds the lower 32 bits of the 69th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address68 [31:0]
 * 
 * This field contains the lower 32 bits of the 69th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_OFST        0x9a4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_OFST))

/*
 * Register : gmacgrp_mac_address69_high
 * 
 * <b> Register 618 (MAC Address69 High Register) </b>
 * 
 * The MAC Address69 High register holds the upper 16 bits of the 70th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address69 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address70 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address69 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 70th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 70th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_OFST        0x9a8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address69_low
 * 
 * <b> Register 619 (MAC Address69 Low Register) </b>
 * 
 * The MAC Address69 Low register holds the lower 32 bits of the 70th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address69 [31:0]
 * 
 * This field contains the lower 32 bits of the 70th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_OFST        0x9ac
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_OFST))

/*
 * Register : gmacgrp_mac_address70_high
 * 
 * <b> Register 620 (MAC Address70 High Register) </b>
 * 
 * The MAC Address70 High register holds the upper 16 bits of the 71st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address70 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address70 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address70 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 71st 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 71st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_OFST        0x9b0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address70_low
 * 
 * <b> Register 621 (MAC Address70 Low Register) </b>
 * 
 * The MAC Address70 Low register holds the lower 32 bits of the 71st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address70 [31:0]
 * 
 * This field contains the lower 32 bits of the 71st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_OFST        0x9b4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_OFST))

/*
 * Register : gmacgrp_mac_address71_high
 * 
 * <b> Register 622 (MAC Address71 High Register) </b>
 * 
 * The MAC Address71 High register holds the upper 16 bits of the 72nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address71 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address71 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address71 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 72nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 72nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_OFST        0x9b8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address71_low
 * 
 * <b> Register 623 (MAC Address71 Low Register)</b>
 * 
 * The MAC Address71 Low register holds the lower 32 bits of the 72nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address71 [31:0]
 * 
 * This field contains the lower 32 bits of the 72nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_OFST        0x9bc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_OFST))

/*
 * Register : gmacgrp_mac_address72_high
 * 
 * <b> Register 624 (MAC Address72 High Register)</b>
 * 
 * The MAC Address72 High register holds the upper 16 bits of the 73rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address72 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address72 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address72 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 73rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 73rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_OFST        0x9c0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address72_low
 * 
 * <b> Register 625 (MAC Address72 Low Register)</b>
 * 
 * The MAC Address72 Low register holds the lower 32 bits of the 73rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address72 [31:0]
 * 
 * This field contains the lower 32 bits of the 73rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_OFST        0x9c4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_OFST))

/*
 * Register : gmacgrp_mac_address73_high
 * 
 * <b> Register 626 (MAC Address73 High Register)</b>
 * 
 * The MAC Address73 High register holds the upper 16 bits of the 74th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address73 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address73 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address73 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 74th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 74th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_OFST        0x9c8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address73_low
 * 
 * <b> Register 627 (MAC Address73 Low Register)</b>
 * 
 * The MAC Address73 Low register holds the lower 32 bits of the 74th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address73 [31:0]
 * 
 * This field contains the lower 32 bits of the 74th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_OFST        0x9cc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_OFST))

/*
 * Register : gmacgrp_mac_address74_high
 * 
 * <b> Register 628 (MAC Address74 High Register)</b>
 * 
 * The MAC Address74 High register holds the upper 16 bits of the 75th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address74 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address74 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address74 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 75th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 75th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_OFST        0x9d0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address74_low
 * 
 * <b> Register 629 (MAC Address74 Low Register)</b>
 * 
 * The MAC Address74 Low register holds the lower 32 bits of the 75th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address74 [31:0]
 * 
 * This field contains the lower 32 bits of the 75th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_OFST        0x9d4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_OFST))

/*
 * Register : gmacgrp_mac_address75_high
 * 
 * <b> Register 630 (MAC Address75 High Register) </b>
 * 
 * The MAC Address75 High register holds the upper 16 bits of the 76th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address75 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address75 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address75 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 76th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 76th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_OFST        0x9d8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address75_low
 * 
 * <b> Register 631 (MAC Address75 Low Register) </b>
 * 
 * The MAC Address75 Low register holds the lower 32 bits of the 76th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address75 [31:0]
 * 
 * This field contains the lower 32 bits of the 76th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_OFST        0x9dc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_OFST))

/*
 * Register : gmacgrp_mac_address76_high
 * 
 * <b> Register 632 (MAC Address76 High Register) </b>
 * 
 * The MAC Address76 High register holds the upper 16 bits of the 77th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address76 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address76 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address76 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 77th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 77th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_OFST        0x9e0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address76_low
 * 
 * <b> Register 633 (MAC Address76 Low Register) </b>
 * 
 * The MAC Address76 Low register holds the lower 32 bits of the 77th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address76 [31:0]
 * 
 * This field contains the lower 32 bits of the 77th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_OFST        0x9e4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_OFST))

/*
 * Register : gmacgrp_mac_address77_high
 * 
 * <b> Register 634 (MAC Address77 High Register) </b>
 * 
 * The MAC Address77 High register holds the upper 16 bits of the 78th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address77 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address77 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address77 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 78th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 78th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_OFST        0x9e8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address77_low
 * 
 * <b> Register 635 (MAC Address77 Low Register)</b>
 * 
 * The MAC Address77 Low register holds the lower 32 bits of the 78th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address77 [31:0]
 * 
 * This field contains the lower 32 bits of the 78th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_OFST        0x9ec
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_OFST))

/*
 * Register : gmacgrp_mac_address78_high
 * 
 * <b> Register 636 (MAC Address78 High Register)</b>
 * 
 * The MAC Address78 High register holds the upper 16 bits of the 79th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address78 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address78 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address78 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 79th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 79th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_OFST        0x9f0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address78_low
 * 
 * <b> Register 637 (MAC Address78 Low Register)</b>
 * 
 * The MAC Address78 Low register holds the lower 32 bits of the 79th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address78 [31:0]
 * 
 * This field contains the lower 32 bits of the 79th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_OFST        0x9f4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_OFST))

/*
 * Register : gmacgrp_mac_address79_high
 * 
 * <b> Register 638 (MAC Address79 High Register)</b>
 * 
 * The MAC Address79 High register holds the upper 16 bits of the 80th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address79 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address79 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address79 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 80th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 80th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_OFST        0x9f8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address79_low
 * 
 * <b> Register 639 (MAC Address79 Low Register)</b>
 * 
 * The MAC Address79 Low register holds the lower 32 bits of the 80th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address79 [31:0]
 * 
 * This field contains the lower 32 bits of the 80th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_OFST        0x9fc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_OFST))

/*
 * Register : gmacgrp_mac_address80_high
 * 
 * <b> Register 640 (MAC Address80 High Register)</b>
 * 
 * The MAC Address80 High register holds the upper 16 bits of the 81st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address80 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address80 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address80 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 81st 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 81st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_OFST        0xa00
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address80_low
 * 
 * <b> Register 641 (MAC Address80 Low Register) </b>
 * 
 * The MAC Address80 Low register holds the lower 32 bits of the 81st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address80 [31:0]
 * 
 * This field contains the lower 32 bits of the 81st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_OFST        0xa04
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_OFST))

/*
 * Register : gmacgrp_mac_address81_high
 * 
 * <b> Register 642 (MAC Address81 High Register) </b>
 * 
 * The MAC Address81 High register holds the upper 16 bits of the 82nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address81 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address81 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address81 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 82nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 82nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_OFST        0xa08
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address81_low
 * 
 * <b> Register 643 (MAC Address81 Low Register) </b>
 * 
 * The MAC Address81 Low register holds the lower 32 bits of the 82nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address81 [31:0]
 * 
 * This field contains the lower 32 bits of the 82nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_OFST        0xa0c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_OFST))

/*
 * Register : gmacgrp_mac_address82_high
 * 
 * <b> Register 644 (MAC Address82 High Register) </b>
 * 
 * The MAC Address82 High register holds the upper 16 bits of the 83rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address82 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address82 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address82 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 83rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the MAC address for perfect
 * filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_OFST        0xa10
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address82_low
 * 
 * <b> Register 645 (MAC Address82 Low Register) </b>
 * 
 * The MAC Address82 Low register holds the lower 32 bits of the 83rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address82 [31:0]
 * 
 * This field contains the lower 32 bits of the 83rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_OFST        0xa14
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_OFST))

/*
 * Register : gmacgrp_mac_address83_high
 * 
 * <b> Register 646 (MAC Address83 High Register) </b>
 * 
 * The MAC Address83 High register holds the upper 16 bits of the 84th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address83 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address83 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address83 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 84th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 84th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_OFST        0xa18
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address83_low
 * 
 * <b> Register 647 (MAC Address83 Low Register)</b>
 * 
 * The MAC Address83 Low register holds the lower 32 bits of the 84th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address83 [31:0]
 * 
 * This field contains the lower 32 bits of the 84th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_OFST        0xa1c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_OFST))

/*
 * Register : gmacgrp_mac_address84_high
 * 
 * <b> Register 648 (MAC Address84 High Register)</b>
 * 
 * The MAC Address84 High register holds the upper 16 bits of the 85th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address84 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address84 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address84 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 85th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 85th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_OFST        0xa20
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address84_low
 * 
 * <b> Register 649 (MAC Address84 Low Register)</b>
 * 
 * The MAC Address84 Low register holds the lower 32 bits of the 85th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address84 [31:0]
 * 
 * This field contains the lower 32 bits of the 85th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_OFST        0xa24
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_OFST))

/*
 * Register : gmacgrp_mac_address85_high
 * 
 * <b> Register 650 (MAC Address85 High Register)</b>
 * 
 * The MAC Address85 High register holds the upper 16 bits of the 86th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address85 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address85 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address85 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 86th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 86th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_OFST        0xa28
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address85_low
 * 
 * <b> Register 651 (MAC Address85 Low Register)</b>
 * 
 * The MAC Address85 Low register holds the lower 32 bits of the 86th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address85 [31:0]
 * 
 * This field contains the lower 32 bits of the 86th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_OFST        0xa2c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_OFST))

/*
 * Register : gmacgrp_mac_address86_high
 * 
 * <b> Register 652 (MAC Address86 High Register)</b>
 * 
 * The MAC Address86 High register holds the upper 16 bits of the 87th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address86 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address86 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address86 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 87th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 87th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_OFST        0xa30
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address86_low
 * 
 * <b> Register 653 (MAC Address86 Low Register)</b>
 * 
 * The MAC Address86 Low register holds the lower 32 bits of the 87th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address86 [31:0]
 * 
 * This field contains the lower 32 bits of the 87th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_OFST        0xa34
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_OFST))

/*
 * Register : gmacgrp_mac_address87_high
 * 
 * <b> Register 654 (MAC Address87 High Register)</b>
 * 
 * The MAC Address87 High register holds the upper 16 bits of the 88th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address87 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address87 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address87 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 88th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 88th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_OFST        0xa38
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address87_low
 * 
 * <b> Register 655 (MAC Address87 Low Register)</b>
 * 
 * The MAC Address87 Low register holds the lower 32 bits of the 88th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address87 [31:0]
 * 
 * This field contains the lower 32 bits of the 88th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_OFST        0xa3c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_OFST))

/*
 * Register : gmacgrp_mac_address88_high
 * 
 * <b> Register 656 (MAC Address88 High Register)</b>
 * 
 * The MAC Address88 High register holds the upper 16 bits of the 89th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address88 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address88 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address88 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 89th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 89th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_OFST        0xa40
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address88_low
 * 
 * <b> Register 657 (MAC Address88 Low Register)</b>
 * 
 * The MAC Address88 Low register holds the lower 32 bits of the 89th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address88 [31:0]
 * 
 * This field contains the lower 32 bits of the 89th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_OFST        0xa44
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_OFST))

/*
 * Register : gmacgrp_mac_address89_high
 * 
 * <b> Register 658 (MAC Address89 High Register)</b>
 * 
 * The MAC Address89 High register holds the upper 16 bits of the 90th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address89 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address89 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address89 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 90th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 90th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_OFST        0xa48
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address89_low
 * 
 * <b> Register 659 (MAC Address89 Low Register)</b>
 * 
 * The MAC Address89 Low register holds the lower 32 bits of the 90th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address89 [31:0]
 * 
 * This field contains the lower 32 bits of the 90th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_OFST        0xa4c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_OFST))

/*
 * Register : gmacgrp_mac_address90_high
 * 
 * <b> Register 660 (MAC Address90 High Register)</b>
 * 
 * The MAC Address90 High register holds the upper 16 bits of the 91st 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address90 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address90 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address90 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 91st 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 91st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_OFST        0xa50
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address90_low
 * 
 * <b> Register 661 (MAC Address90 Low Register)</b>
 * 
 * The MAC Address90 Low register holds the lower 32 bits of the 91st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address90 [31:0]
 * 
 * This field contains the lower 32 bits of the 91st 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_OFST        0xa54
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_OFST))

/*
 * Register : gmacgrp_mac_address91_high
 * 
 * <b> Register 662 (MAC Address91 High Register)</b>
 * 
 * The MAC Address91 High register holds the upper 16 bits of the 92nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address32 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address91 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address91 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 92nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 92nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_OFST        0xa58
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address91_low
 * 
 * <b> Register 663 (MAC Address91 Low Register)</b>
 * 
 * The MAC Address91 Low register holds the lower 32 bits of the 92nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address91 [31:0]
 * 
 * This field contains the lower 32 bits of the 92nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_OFST        0xa5c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_OFST))

/*
 * Register : gmacgrp_mac_address92_high
 * 
 * <b> Register 664 (MAC Address92 High Register)</b>
 * 
 * The MAC Address92 High register holds the upper 16 bits of the 93rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address92 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address92 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address92 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 93rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 93rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_OFST        0xa60
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address92_low
 * 
 * <b> Register 665 (MAC Address92 Low Register)</b>
 * 
 * The MAC Address92 Low register holds the lower 32 bits of the 93rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address92 [31:0]
 * 
 * This field contains the lower 32 bits of the 93rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_OFST        0xa64
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_OFST))

/*
 * Register : gmacgrp_mac_address93_high
 * 
 * <b> Register 666 (MAC Address93 High Register)</b>
 * 
 * The MAC Address93 High register holds the upper 16 bits of the 94th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address93 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address93 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address93 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 94th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 94th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_OFST        0xa68
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address93_low
 * 
 * <b> Register 667 (MAC Address93 Low Register)</b>
 * 
 * The MAC Address93 Low register holds the lower 32 bits of the 94th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address93 [31:0]
 * 
 * This field contains the lower 32 bits of the 94th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_OFST        0xa6c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_OFST))

/*
 * Register : gmacgrp_mac_address94_high
 * 
 * <b> Register 668 (MAC Address94 High Register)</b>
 * 
 * The MAC Address94 High register holds the upper 16 bits of the 95th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address94 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address94 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address94 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 95th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 95th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_OFST        0xa70
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address94_low
 * 
 * <b> Register 669 (MAC Address94 Low Register)</b>
 * 
 * The MAC Address94 Low register holds the lower 32 bits of the 95th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address94 [31:0]
 * 
 * This field contains the lower 32 bits of the 95th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_OFST        0xa74
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_OFST))

/*
 * Register : gmacgrp_mac_address95_high
 * 
 * <b> Register 670 (MAC Address95 High Register)</b>
 * 
 * The MAC Address95 High register holds the upper 16 bits of the 96th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address95 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address95 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address95 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 96th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 96th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_OFST        0xa78
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address95_low
 * 
 * <b> Register 671 (MAC Address95 Low Register)</b>
 * 
 * The MAC Address95 Low register holds the lower 32 bits of the 96th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address95 [31:0]
 * 
 * This field contains the lower 32 bits of the 96th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_OFST        0xa7c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_OFST))

/*
 * Register : gmacgrp_mac_address96_high
 * 
 * <b> Register 672 (MAC Address96 High Register)</b>
 * 
 * The MAC Address96 High register holds the upper 16 bits of the 97th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address96 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address96 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address96 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 97th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 97th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_OFST        0xa80
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address96_low
 * 
 * <b> Register 673 (MAC Address96 Low Register)</b>
 * 
 * The MAC Address96 Low register holds the lower 32 bits of the 97th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address96 [31:0]
 * 
 * This field contains the lower 32 bits of the 97th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_OFST        0xa84
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_OFST))

/*
 * Register : gmacgrp_mac_address97_high
 * 
 * <b> Register 674 (MAC Address97 High Register)</b>
 * 
 * The MAC Address97 High register holds the upper 16 bits of the 98th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address97 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address97 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address97 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 98th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 98th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_OFST        0xa88
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address97_low
 * 
 * <b> Register 675 (MAC Address97 Low Register)</b>
 * 
 * The MAC Address97 Low register holds the lower 32 bits of the 98th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address97 [31:0]
 * 
 * This field contains the lower 32 bits of the 98th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_OFST        0xa8c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_OFST))

/*
 * Register : gmacgrp_mac_address98_high
 * 
 * <b> Register 676 (MAC Address98 High Register)</b>
 * 
 * The MAC Address99 High register holds the upper 16 bits of the 100th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address99 Low Register are written.
 * For proper synchronization updates, consecutive writes to this MAC Address99 Low
 * Register must be performed after at least four clock cycles in the destination
 * clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address98 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 99th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 99th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_OFST        0xa90
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address98_low
 * 
 * <b> Register 677 (MAC Address98 Low Register)</b>
 * 
 * The MAC Address98 Low register holds the lower 32 bits of the 99th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address98 [31:0]
 * 
 * This field contains the lower 32 bits of the 99th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_OFST        0xa94
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_OFST))

/*
 * Register : gmacgrp_mac_address99_high
 * 
 * <b> Register 678 (MAC Address99 High Register)</b>
 * 
 * The MAC Address99 High register holds the upper 16 bits of the 6-byte 100th MAC
 * address of the station. If the MAC address registers are configured to be
 * double-synchronized to the (G)MII clock domains, then the synchronization is
 * triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-
 * endian mode) of the MAC Address99 Low Register are written. For proper
 * synchronization updates, consecutive writes to this MAC Address99 Low Register
 * must be performed after at least four clock cycles in the destination clock
 * domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                       
 * :--------|:-------|:-------|:---------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address99 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 100th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 100th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_OFST        0xa98
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address99_low
 * 
 * <b> Register 679 (MAC Address99 Low Register)</b>
 * 
 * The MAC Address99 Low register holds the lower 32 bits of the 100th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                              
 * :-------|:-------|:-----------|:------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address99 [31:0]
 * 
 * This field contains the lower 32 bits of the 100th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_OFST        0xa9c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_OFST))

/*
 * Register : gmacgrp_mac_address100_high
 * 
 * <b> Register 680 (MAC Address100 High Register)</b>
 * 
 * The MAC Address100 High register holds the upper 16 bits of the 101th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address100 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address100 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address100 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 101th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 101th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_OFST        0xaa0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address100_low
 * 
 * <b> Register 681 (MAC Address100 Low Register)</b>
 * 
 * The MAC Address100 Low register holds the lower 32 bits of the 101th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address100 [31:0]
 * 
 * This field contains the lower 32 bits of the 101th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_OFST        0xaa4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_OFST))

/*
 * Register : gmacgrp_mac_address101_high
 * 
 * <b> Register 682 (MAC Address101 High Register)</b>
 * 
 * The MAC Address101 High register holds the upper 16 bits of the 102nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address101 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address101 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address101 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 102nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 102nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_OFST        0xaa8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address101_low
 * 
 * <b> Register 683 (MAC Address101 Low Register)</b>
 * 
 * The MAC Address101 Low register holds the lower 32 bits of the 102nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address101 [31:0]
 * 
 * This field contains the lower 32 bits of the 102nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_OFST        0xaac
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_OFST))

/*
 * Register : gmacgrp_mac_address102_high
 * 
 * <b> Register 684 (MAC Address102 High Register)</b>
 * 
 * The MAC Address102 High register holds the upper 16 bits of the 6-byte 103rd MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address102 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address102 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address102 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 103rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 103rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_OFST        0xab0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address102_low
 * 
 * <b> Register 685 (MAC Address102 Low Register)</b>
 * 
 * The MAC Address102 Low register holds the lower 32 bits of the 103rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address102 [31:0]
 * 
 * This field contains the lower 32 bits of the 103rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_OFST        0xab4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_OFST))

/*
 * Register : gmacgrp_mac_address103_high
 * 
 * <b> Register 686 (MAC Address103 High Register)</b>
 * 
 * The MAC Address103 High register holds the upper 16 bits of the 6-byte 104th MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address103 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address103 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address103 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 104th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 104th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_OFST        0xab8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address103_low
 * 
 * <b> Register 687 (MAC Address103 Low Register)</b>
 * 
 * The MAC Address103 Low register holds the lower 32 bits of the 104th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address103 [31:0]
 * 
 * This field contains the lower 32 bits of the 104th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_OFST        0xabc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_OFST))

/*
 * Register : gmacgrp_mac_address104_high
 * 
 * <b> Register 688 (MAC Address104 High Register)</b>
 * 
 * The MAC Address104 High register holds the upper 16 bits of the 105th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address104 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address104 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address104 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 105th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 105th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_OFST        0xac0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address104_low
 * 
 * <b> Register 689 (MAC Address104 Low Register)</b>
 * 
 * The MAC Address104 Low register holds the lower 32 bits of the 105th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address104 [31:0]
 * 
 * This field contains the lower 32 bits of the 105th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_OFST        0xac4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_OFST))

/*
 * Register : gmacgrp_mac_address105_high
 * 
 * <b> Register 690 (MAC Address105 High Register)</b>
 * 
 * The MAC Address105 High register holds the upper 16 bits of the 106th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address105 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address105 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address105 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 106th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 106th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_OFST        0xac8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address105_low
 * 
 * <b> Register 691 (MAC Address105 Low Register)</b>
 * 
 * The MAC Address105 Low register holds the lower 32 bits of the 106th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address105 [31:0]
 * 
 * This field contains the lower 32 bits of the 106th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_OFST        0xacc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_OFST))

/*
 * Register : gmacgrp_mac_address106_high
 * 
 * <b> Register 692 (MAC Address106 High Register)</b>
 * 
 * The MAC Address106 High register holds the upper 16 bits of the 107th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address106 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address106 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address106 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 107th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 107th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_OFST        0xad0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address106_low
 * 
 * <b> Register 693 (MAC Address106 Low Register)</b>
 * 
 * The MAC Address106 Low register holds the lower 32 bits of the 107th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address106 [31:0]
 * 
 * This field contains the lower 32 bits of the 107th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_OFST        0xad4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_OFST))

/*
 * Register : gmacgrp_mac_address107_high
 * 
 * <b> Register 694 (MAC Address107 High Register)</b>
 * 
 * The MAC Address107 High register holds the upper 16 bits of the 108th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address107 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address107 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address107 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 108th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 108th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_OFST        0xad8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address107_low
 * 
 * <b> Register 695 (MAC Address107 Low Register)</b>
 * 
 * The MAC Address107 Low register holds the lower 32 bits of the 108th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address107 [31:0]
 * 
 * This field contains the lower 32 bits of the 108th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_OFST        0xadc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_OFST))

/*
 * Register : gmacgrp_mac_address108_high
 * 
 * <b> Register 696 (MAC Address108 High Register)</b>
 * 
 * The MAC Address108 High register holds the upper 16 bits of the 109th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address108 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address108 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address108 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 109th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 109th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_OFST        0xae0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address108_low
 * 
 * <b> Register 697 (MAC Address108 Low Register)</b>
 * 
 * The MAC Address108 Low register holds the lower 32 bits of the 109th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address108 [31:0]
 * 
 * This field contains the lower 32 bits of the 109th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_OFST        0xae4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_OFST))

/*
 * Register : gmacgrp_mac_address109_high
 * 
 * <b> Register 698 (MAC Address109 High Register)</b>
 * 
 * The MAC Address109 High register holds the upper 16 bits of the 110th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address109 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address109 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address109 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 110th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 110th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_OFST        0xae8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address109_low
 * 
 * <b> Register 699 (MAC Address109 Low Register)</b>
 * 
 * The MAC Address109 Low register holds the lower 32 bits of the 110th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address109 [31:0]
 * 
 * This field contains the lower 32 bits of the 110th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_OFST        0xaec
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_OFST))

/*
 * Register : gmacgrp_mac_address110_high
 * 
 * <b> Register XXX (MAC AddressXX High Register)</b>
 * 
 * The MAC Address110 High register holds the upper 16 bits of the 111th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address110 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address110 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address110 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 111th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 111th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_OFST        0xaf0
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address110_low
 * 
 * <b> Register 700 (MAC Address110 Low Register)</b>
 * 
 * The MAC Address110 Low register holds the lower 32 bits of the 111th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address110 [31:0]
 * 
 * This field contains the lower 32 bits of the 111th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_OFST        0xaf4
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_OFST))

/*
 * Register : gmacgrp_mac_address111_high
 * 
 * <b> Register 701 (MAC Address111 High Register)</b>
 * 
 * The MAC Address111 High register holds the upper 16 bits of the 6-byte 112th MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address111 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address111 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address111 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 112th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 112th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_OFST        0xaf8
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address111_low
 * 
 * <b> Register 702 (MAC Address111 Low Register)</b>
 * 
 * The MAC Address111 Low register holds the lower 32 bits of the 112th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address111 [31:0]
 * 
 * This field contains the lower 32 bits of the 112th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_OFST        0xafc
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_OFST))

/*
 * Register : gmacgrp_mac_address112_high
 * 
 * <b> Register 703 (MAC Address112 High Register)</b>
 * 
 * The MAC Address112 High register holds the upper 16 bits of the 113th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address112 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address112 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address112 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 113th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 113th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_OFST        0xb00
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address112_low
 * 
 * <b> Register 704 (MAC Address112 Low Register)</b>
 * 
 * The MAC Address112 Low register holds the lower 32 bits of the 113th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address112 [31:0]
 * 
 * This field contains the lower 32 bits of the 113th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_OFST        0xb04
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_OFST))

/*
 * Register : gmacgrp_mac_address113_high
 * 
 * <b> Register 705 (MAC Address113 High Register)</b>
 * 
 * The MAC Address113 High register holds the upper 16 bits of the 114th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address113 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address113 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address113 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 114th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 114th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_OFST        0xb08
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address113_low
 * 
 * <b> Register 706 (MAC Address113 Low Register)</b>
 * 
 * The MAC Address113 Low register holds the lower 32 bits of the 114th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address113 [31:0]
 * 
 * This field contains the lower 32 bits of the 114th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_OFST        0xb0c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_OFST))

/*
 * Register : gmacgrp_mac_address114_high
 * 
 * <b> Register 707 (MAC Address114 High Register)</b>
 * 
 * The MAC Address114 High register holds the upper 16 bits of the 115th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address114 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address114 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address114 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 115th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 115th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_OFST        0xb10
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address114_low
 * 
 * <b> Register 708 (MAC Address114 Low Register)</b>
 * 
 * The MAC Address114 Low register holds the lower 32 bits of the 115th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address114 [31:0]
 * 
 * This field contains the lower 32 bits of the 115th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_OFST        0xb14
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_OFST))

/*
 * Register : gmacgrp_mac_address115_high
 * 
 * <b> Register 709 (MAC Address115 High Register)</b>
 * 
 * The MAC Address115 High register holds the upper 16 bits of the 116th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address115 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address115 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address115 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 116th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 116th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_OFST        0xb18
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address115_low
 * 
 * <b> Register 710 (MAC Address115 Low Register)</b>
 * 
 * The MAC Address115 Low register holds the lower 32 bits of the 116th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address115 [31:0]
 * 
 * This field contains the lower 32 bits of the 116th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_OFST        0xb1c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_OFST))

/*
 * Register : gmacgrp_mac_address116_high
 * 
 * <b> Register 711 (MAC Address116 High Register)</b>
 * 
 * The MAC Address116 High register holds the upper 16 bits of the 117th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address116 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address116 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address116 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 117th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 117th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_OFST        0xb20
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address116_low
 * 
 * <b> Register 712 (MAC Address116 Low Register)</b>
 * 
 * The MAC Address116 Low register holds the lower 32 bits of the 117th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address116 [31:0]
 * 
 * This field contains the lower 32 bits of the 117th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_OFST        0xb24
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_OFST))

/*
 * Register : gmacgrp_mac_address117_high
 * 
 * <b> Register 713 (MAC Address117 High Register)</b>
 * 
 * The MAC Address117 High register holds the upper 16 bits of the 118th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address117 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address117 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address117 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 118th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 118th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_OFST        0xb28
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address117_low
 * 
 * <b> Register 714 (MAC Address117 Low Register)</b>
 * 
 * The MAC Address117 Low register holds the lower 32 bits of the 118th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address117 [31:0]
 * 
 * This field contains the lower 32 bits of the 118t118thh 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_OFST        0xb2c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_OFST))

/*
 * Register : gmacgrp_mac_address118_high
 * 
 * <b> Register 715 (MAC Address118 High Register)</b>
 * 
 * The MAC Address118 High register holds the upper 16 bits of the 119th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address118 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address118 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address118 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 119th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 119th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_OFST        0xb30
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address118_low
 * 
 * <b> Register 716 (MAC Address118 Low Register)</b>
 * 
 * The MAC Address118 Low register holds the lower 32 bits of the 119th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address118 [31:0]
 * 
 * This field contains the lower 32 bits of the 119th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_OFST        0xb34
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_OFST))

/*
 * Register : gmacgrp_mac_address119_high
 * 
 * <b> Register 717 (MAC Address119 High Register)</b>
 * 
 * The MAC Address119 High register holds the upper 16 bits of the 120th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address119 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address119 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address119 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 120th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 120th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_OFST        0xb38
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address119_low
 * 
 * <b> Register 718 (MAC Address119 Low Register)</b>
 * 
 * The MAC Address119 Low register holds the lower 32 bits of the 120th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address119 [31:0]
 * 
 * This field contains the lower 32 bits of the 120th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_OFST        0xb3c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_OFST))

/*
 * Register : gmacgrp_mac_address120_high
 * 
 * <b> Register 719 (MAC Address120 High Register)</b>
 * 
 * The MAC Address120 High register holds the upper 16 bits of the 6-byte 121st MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address120 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address120 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address120 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 6-byte 121st MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 121st MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_OFST        0xb40
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address120_low
 * 
 * <b> Register 720 (MAC Address120 Low Register)</b>
 * 
 * The MAC Address120 Low register holds the lower 32 bits of the 121st 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address120 [31:0]
 * 
 * This field contains the lower 32 bits of the 122nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_OFST        0xb44
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_OFST))

/*
 * Register : gmacgrp_mac_address121_high
 * 
 * <b> Register 721 (MAC Address121 High Register)</b>
 * 
 * The MAC Address121 High register holds the upper 16 bits of the 122nd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address121 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address121 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address121 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 122nd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 122nd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_OFST        0xb48
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address121_low
 * 
 * <b> Register 722 (MAC Address121 Low Register)</b>
 * 
 * The MAC Address121 Low register holds the lower 32 bits of the 122nd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address121 [31:0]
 * 
 * This field contains the lower 32 bits of the 122nd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_OFST        0xb4c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_OFST))

/*
 * Register : gmacgrp_mac_address122_high
 * 
 * <b> Register 723 (MAC Address122 High Register)</b>
 * 
 * The MAC Address122 High register holds the upper 16 bits of the 123rd 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address122 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address122 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address122 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 123rd 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 123rd MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_OFST        0xb50
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address122_low
 * 
 * <b> Register 724 (MAC Address122 Low Register)</b>
 * 
 * The MAC Address122 Low register holds the lower 32 bits of the 123rd 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address122 [31:0]
 * 
 * This field contains the lower 32 bits of the 123rd 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_OFST        0xb54
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_OFST))

/*
 * Register : gmacgrp_mac_address123_high
 * 
 * <b> Register 725 (MAC Address123 High Register)</b>
 * 
 * The MAC Address123 High register holds the upper 16 bits of the 124th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address123 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address123 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address123 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 124th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 124th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_OFST        0xb58
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address123_low
 * 
 * <b> Register 726 (MAC AddressXX 123 Register)</b>
 * 
 * The MAC Address123 Low register holds the lower 32 bits of the 124th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address123 [31:0]
 * 
 * This field contains the lower 32 bits of the 124th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_OFST        0xb5c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_OFST))

/*
 * Register : gmacgrp_mac_address124_high
 * 
 * <b> Register 727 (MAC Address124 High Register)</b>
 * 
 * The MAC Address124 High register holds the upper 16 bits of the 125th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address124 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address124 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address124 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 125th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 125th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_OFST        0xb60
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address124_low
 * 
 * <b> Register 728 (MAC Address124 Low Register)</b>
 * 
 * The MAC Address124 Low register holds the lower 32 bits of the 125th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address124 [31:0]
 * 
 * This field contains the lower 32 bits of the 125th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_OFST        0xb64
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_OFST))

/*
 * Register : gmacgrp_mac_address125_high
 * 
 * <b> Register 729 (MAC Address125 High Register)</b>
 * 
 * The MAC Address125 High register holds the upper 16 bits of the 126th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address125 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address125 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address125 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 126th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 126th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_OFST        0xb68
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address125_low
 * 
 * <b> Register 730 (MAC Address125 Low Register)</b>
 * 
 * The MAC Address125 Low register holds the lower 32 bits of the 126th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address125 [31:0]
 * 
 * This field contains the lower 32 bits of the 126th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_OFST        0xb6c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_OFST))

/*
 * Register : gmacgrp_mac_address126_high
 * 
 * <b> Register 731 (MAC Address126 High Register)</b>
 * 
 * The MAC Address126 High register holds the upper 16 bits of the 127th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address126 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address126 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address126 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 127th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 127th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_OFST        0xb70
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address126_low
 * 
 * <b> Register 732 (MAC Address126 Low Register)</b>
 * 
 * The MAC Address126 Low register holds the lower 32 bits of the 127th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address126 [31:0]
 * 
 * This field contains the lower 32 bits of the 127th 6-byte MAC address. The
 * content of this field is undefined until loaded by the Application after the
 * initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_OFST        0xb74
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_OFST))

/*
 * Register : gmacgrp_mac_address127_high
 * 
 * <b> Register 733 (MAC Address127 High Register)</b>
 * 
 * The MAC Address127 High register holds the upper 16 bits of the 128th 6-byte MAC
 * address of the station.
 * 
 * If the MAC address registers are configured to be double-synchronized to the
 * (G)MII clock domains, then
 * 
 * the synchronization is triggered only when Bits[31:24] (in little-endian mode)
 * or Bits[7:0] (in big-endian mode) of the MAC Address127 Low Register are
 * written. For proper synchronization updates, consecutive writes to this MAC
 * Address127 Low Register must be performed after at least four clock cycles in
 * the destination clock domain.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset  | Description                                        
 * :--------|:-------|:-------|:----------------------------------------------------
 *  [15:0]  | RW     | 0xffff | ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI        
 *  [30:16] | R      | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16
 *  [31]    | RW     | 0x0    | ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE            
 * 
 */
/*
 * Field : addrhi
 * 
 * MAC Address127 [47:32]
 * 
 * This field contains the upper 16 bits (47:32) of the 128th 6-byte MAC address.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_MSB        15
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_WIDTH      16
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_RESET      0xffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : reserved_30_16
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_MSB        30
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_WIDTH      15
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_SET_MSK    0x7fff0000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_CLR_MSK    0x8000ffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_GET(value) (((value) & 0x7fff0000) >> 16)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16_SET(value) (((value) << 16) & 0x7fff0000)

/*
 * Field : ae
 * 
 * Address Enable
 * 
 * When this bit is set, the address filter module uses the 128th MAC address for
 * perfect filtering.
 * 
 * When this bit is reset, the address filter module ignores the address for
 * filtering.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE
 * 
 */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_WIDTH      1
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_RESET      0x0
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_s
{
    volatile uint32_t        addrhi         : 16;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDRHI */
    const volatile uint32_t  reserved_30_16 : 15;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESERVED_30_16 */
    volatile uint32_t        ae             :  1;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_AE */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_s  ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_RESET       0x0000ffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_OFST        0xb78
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_OFST))

/*
 * Register : gmacgrp_mac_address127_low
 * 
 * <b> Register 734 (MAC Address127 Low Register)</b>
 * 
 * The MAC Address127 Low register holds the lower 32 bits of the 128th 6-byte MAC
 * address of the station.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset      | Description                               
 * :-------|:-------|:-----------|:-------------------------------------------
 *  [31:0] | RW     | 0xffffffff | ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO
 * 
 */
/*
 * Field : addrlo
 * 
 * MAC Address127 [31:0]
 * 
 * This field contains the lower 32 bits of the 128th 6-byte MAC address.  The
 * content of this field is undefined
 * 
 * until loaded by the Application after the initialization process.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_MSB        31
/* The width in bits of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_WIDTH      32
/* The mask used to set the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO register field value. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO register field. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_RESET      0xffffffff
/* Extracts the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO field value from a register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO register field value suitable for setting the register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW.
 */
struct ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_s
{
    volatile uint32_t  addrlo : 32;  /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDRLO */
};

/* The typedef declaration for register ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW. */
typedef struct ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_s  ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_RESET       0xffffffff
/* The byte offset of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW register from the beginning of the component. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_OFST        0xb7c
/* The address of the ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW register. */
#define ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_OFST))

/*
 * Register : dmagrp_bus_mode
 * 
 * <b> Register 0 (Bus Mode Register) </b>
 * 
 * The Bus Mode register establishes the bus operating modes for the DMA.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                         
 * :--------|:-------|:------|:-------------------------------------
 *  [0]     | RW     | 0x1   | ALT_EMAC_DMAGRP_BUS_MODE_SWR        
 *  [1]     | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_DA         
 *  [6:2]   | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_DSL        
 *  [7]     | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_ATDS       
 *  [13:8]  | RW     | 0x1   | ALT_EMAC_DMAGRP_BUS_MODE_PBL        
 *  [15:14] | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_PR         
 *  [16]    | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_FB         
 *  [22:17] | RW     | 0x1   | ALT_EMAC_DMAGRP_BUS_MODE_RPBL       
 *  [23]    | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_USP        
 *  [24]    | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL  
 *  [25]    | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_AAL        
 *  [26]    | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_MB         
 *  [27]    | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_TXPR       
 *  [29:28] | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_PRWG       
 *  [30]    | R      | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30
 *  [31]    | RW     | 0x0   | ALT_EMAC_DMAGRP_BUS_MODE_RIB        
 * 
 */
/*
 * Field : swr
 * 
 * Software Reset
 * 
 * When this bit is set, the MAC DMA Controller resets the logic and all internal
 * registers of the MAC. It is cleared automatically after the reset operation has
 * completed in all of the DWC_gmac clock domains. Before reprogramming any
 * register of the DWC_gmac, you should read a zero (0) value in this bit .
 * 
 * <b> Note: </b><br>
 * 
 * * The Software reset function is driven only by this bit. Bit 0 of Register 64
 *   (Channel 1 Bus Mode Register) or Register 128 (Channel 2 Bus Mode Register)
 *   has no impact on the Software reset function.
 * 
 * * The reset operation is completed only when all resets in all active clock
 *   domains are de-asserted. Therefore, it is essential that all the PHY inputs
 *   clocks (applicable for the selected PHY interface) are present for the
 *   software reset completion.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                    | Value | Description
 * :----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_BUS_MODE_SWR_E_CLEARRST | 0x0   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_SWR_E_RESET    | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_SWR
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_E_CLEARRST 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_SWR
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_E_RESET    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_SWR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_SWR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_MSB        0
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_SWR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_SWR register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_SWR register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_SWR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_SWR field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_SWR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_SWR_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : da
 * 
 * DMA Arbitration Scheme
 * 
 * This bit specifies the arbitration scheme between the transmit and receive paths
 * of Channel 0.
 * 
 * * 0: Weighted round-robin with Rx:Tx or Tx:Rx
 * 
 * The priority between the paths is according to the priority specified in bits
 * 15:14 (PR) and priority weights specified in Bit 27 (TXPR).
 * 
 * * 1: Fixed priority
 * 
 * The transmit path has priority over receive path when Bit 27 (TXPR) is set.
 * Otherwise, receive path has priority over the transmit path.
 * 
 * In the GMAC-AXI configuration, these bits are reserved and read-only (RO).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_DA register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_DA register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_MSB        1
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_DA register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_DA register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_DA register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_DA register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_DA field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_DA register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DA_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : dsl
 * 
 * Descriptor Skip Length
 * 
 * This bit specifies the number of Word, Dword, or Lword (depending on the 32-bit,
 * 64-bit, or 128-bit bus) to skip between two unchained descriptors. The address
 * skipping starts from the end of current descriptor to the start of next
 * descriptor. When the DSL value is equal to zero, the descriptor table is taken
 * as contiguous by the DMA in Ring mode.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_DSL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_DSL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_MSB        6
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_DSL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_WIDTH      5
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_DSL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_SET_MSK    0x0000007c
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_DSL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_CLR_MSK    0xffffff83
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_DSL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_DSL field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_GET(value) (((value) & 0x0000007c) >> 2)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_DSL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_DSL_SET(value) (((value) << 2) & 0x0000007c)

/*
 * Field : atds
 * 
 * Alternate Descriptor Size
 * 
 * When set, the size of the alternate descriptor increases to 32 bytes (8 DWORDS).
 * This is required when the Advanced Timestamp feature or the IPC Full Offload
 * Engine (Type 2) is enabled in the receiver. The enhanced descriptor is not
 * required if the Advanced Timestamp and IPC Full Checksum Offload (Type 2)
 * features are not enabled. In such cases, you can use the 16 bytes descriptor to
 * save 4 bytes of memory.
 * 
 * This bit is present only when you select the Alternate Descriptor feature and
 * any one of the following features during core configuration:
 * 
 * * Advanced Timestamp feature
 * 
 * * IPC Full Checksum Offload Engine (Type 2) feature
 * 
 * Otherwise, this bit is reserved and read-only.
 * 
 * When reset, the descriptor size reverts back to 4 DWORDs (16 bytes).
 * 
 * This bit preserves the backward compatibility for the descriptor size. In
 * versions prior to 3.50a, the descriptor size is 16 bytes for both normal and
 * enhanced descriptor. In version 3.50a, descriptor size is increased to 32 bytes
 * because of the Advanced Timestamp and IPC Full Checksum Offload Engine (Type 2)
 * features.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_BUS_MODE_ATDS_E_CLEARRST | 0x0   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_ATDS_E_RESET    | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_ATDS
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_E_CLEARRST    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_ATDS
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_E_RESET       0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_ATDS register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_ATDS register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_MSB        7
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_ATDS register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_ATDS register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_ATDS register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_ATDS register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_ATDS field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_ATDS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ATDS_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : pbl
 * 
 * Programmable Burst Length
 * 
 * These bits indicate the maximum number of beats to be transferred in one DMA
 * transaction. This is the maximum value that is used in a single block Read or
 * Write. The DMA always attempts to burst as specified in PBL each time it starts
 * a Burst transfer on the host bus. PBL can be programmed with permissible values
 * of 1, 2, 4, 8, 16, and 32. Any other value results in undefined behavior. When
 * USP is set high, this PBL value is applicable only for Tx DMA transactions.
 * 
 * If the number of beats to be transferred is more than 32, then perform the
 * following steps:
 * 
 * 1. Set the PBLx8 mode. <br>
 * 
 * 2. Set the PBL. <br>
 * 
 * For example, if the maximum number of beats to be transferred is 64, then first
 * set PBLx8 to 1 and then set PBL to 8. The PBL values have the following
 * limitation: The maximum number of possible beats (PBL) is limited by the size of
 * the Tx FIFO and Rx FIFO in the MTL layer and the data bus width on the DMA. The
 * FIFO has a constraint that the maximum beat supported is half the depth of the
 * FIFO, except when specified.
 * 
 * For different data bus widths and FIFO sizes, the valid PBL range (including x8
 * mode) is provided in the following list. If the PBL is common for both transmit
 * and receive DMA, the minimum Rx FIFO and Tx FIFO depths must be considered.
 * 
 * Note: In the half-duplex mode, the valid PBL range specified in the following
 * list is applicable only for Tx FIFO.
 * 
 * * 32-Bit Data Bus Width
 * 
 *     - 128 Bytes FIFO Depth: In the full-duplex mode, the valid PBL range is 16
 *       or less. In the half-duplex mode, the valid PBL range is 8 or less for the
 *       10 or 100 Mbps mode.
 * 
 *     - 256 Bytes FIFO Depth: In the full-duplex mode and the half-duplex (10 or
 *       100 Mbps) modes, the valid PBL range is 32 or less.
 * 
 *     - 512 Bytes FIFO Depth: In the full-duplex mode and the half-duplex (10 or
 *       100 Mbps) modes, the valid PBL range is 64 or less.
 * 
 *     - 1 KB FIFO Depth: In the full-duplex mode, the valid PBL range is 128 or
 *       less. In the half-duplex mode, the valid PBL range is 128 or less in the
 *       10 or 100 Mbps mode and 64 or less in the 1000 Mbps mode.
 * 
 *     - 2 KB and Higher FIFO Depth: All PBL values are supported in the full-
 *       duplex mode and half-duplex modes.
 * 
 * * 64-Bit Data Bus Width
 * 
 *     - 128 Bytes FIFO Depth: In the full-duplex mode, the valid PBL range is 8 or
 *       less. In the half-duplex mode, the valid PBL range is 4 or less for the 10
 *       or 100 Mbps mode.
 * 
 *     - 256 Bytes FIFO Depth: In the full-duplex mode and the half-duplex (10 or
 *       100 Mbps) modes, the valid PBL range is 16 or less.
 * 
 *     - 512 Bytes FIFO Depth: In the full-duplex mode and the half-duplex (10 or
 *       100 Mbps) modes, the valid PBL range is 32 or less.
 * 
 *     - 1 KB FIFO Depth: In the full-duplex mode, the valid PBL range is 64 or
 *       less. In the half-duplex mode, the valid PBL range is 64 or less in the 10
 *       or 100 Mbps mode and 32 or less in the 1000-Mbps mode.
 * 
 *     - 2 KB FIFO Depth: In the full-duplex mode and the half-duplex (10 or 100
 *       Mbps) modes, the valid PBL range is 128 or less.
 * 
 *     - 4 KB and Higher FIFO Depth: All PBL values are supported in the full-
 *       duplex and half-duplex modes.
 * 
 * * 128-Bit Data Bus Width
 * 
 *     - 128 Bytes FIFO Depth: In the full-duplex mode, the valid PBL range is 4 or
 *       less. In the half-duplex mode, the valid PBL range is 2 or less for the 10
 *       or 100 Mbps mode.
 * 
 *     - 256 Bytes FIFO Depth: In the full-duplex mode and the half-duplex (10 or
 *       100 Mbps) modes, the valid PBL range is 8 or less.
 * 
 *     - 512 Bytes FIFO Depth: In the full-duplex mode and the half-duplex (10 or
 *       100 Mbps) modes, the valid PBL range is 16 or less.
 * 
 *     - 1 KB FIFO Depth: In the full-duplex mode, the valid PBL range is 32 or
 *       less. In the half-duplex mode, the valid PBL range is 32 or less in the 10
 *       or 100 Mbps mode and 16 or less in the 1000-Mbps mode.
 * 
 *     - 2 KB FIFO Depth: In the full-duplex mode and the half-duplex (10 or 100
 *       Mbps) modes, the valid PBL range is 64 or less.
 * 
 *     - 4 KB FIFO Depth: In the full-duplex mode and the half-duplex (10 or 100
 *       Mbps) modes, the valid PBL range is 128 or less.
 * 
 *     - 8 KB and Higher FIFO Depth: All PBL values are supported in the full-
 *       duplex and half-duplex modes.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_PBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_PBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_MSB        13
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_PBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_WIDTH      6
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_PBL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_SET_MSK    0x00003f00
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_PBL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_CLR_MSK    0xffffc0ff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_PBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_PBL field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_GET(value) (((value) & 0x00003f00) >> 8)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_PBL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PBL_SET(value) (((value) << 8) & 0x00003f00)

/*
 * Field : pr
 * 
 * Priority Ratio
 * 
 * These bits control the priority ratio in the weighted round-robin arbitration
 * between the Rx DMA and Tx DMA. These bits are valid only when Bit 1 (DA) is
 * reset. The priority ratio is Rx:Tx or Tx:Rx depending on whether Bit 27 (TXPR)
 * is reset or set.
 * 
 * * 00: The Priority Ratio is 1:1.
 * 
 * * 01: The Priority Ratio is 2:1.
 * 
 * * 10: The Priority Ratio is 3:1.
 * 
 * * 11: The Priority Ratio is 4:1.
 * 
 * In the GMAC-AXI configuration, these bits are reserved and  read-only (RO).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_PR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_PR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_MSB        15
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_PR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_PR register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_SET_MSK    0x0000c000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_PR register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_CLR_MSK    0xffff3fff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_PR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_PR field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_GET(value) (((value) & 0x0000c000) >> 14)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_PR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PR_SET(value) (((value) << 14) & 0x0000c000)

/*
 * Field : fb
 * 
 * Fixed Burst
 * 
 * This bit controls whether the AHB or AXI Master interface performs fixed burst
 * transfers or not. When set, the AHB interface uses only SINGLE, INCR4, INCR8, or
 * INCR16 during start of the normal burst transfers. When reset, the AHB or AXI
 * interface uses SINGLE and INCR burst transfer operations.
 * 
 * For more information, see Bit 0 (UNDEF) of the AXI Bus Mode register in the
 * GMAC-AXI configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                     | Value | Description
 * :-----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_BUS_MODE_FB_E_NONFB      | 0x0   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_FB_E_FB1_4_8_16 | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_FB
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_E_NONFB         0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_FB
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_E_FB1_4_8_16    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_FB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_FB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_MSB        16
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_FB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_FB register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_FB register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_FB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_FB field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_FB register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_FB_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : rpbl
 * 
 * Rx DMA PBL
 * 
 * This field indicates the maximum number of beats to be transferred in one Rx DMA
 * transaction. This is the maximum value that is used in a single block Read or
 * Write.
 * 
 * The Rx DMA always attempts to burst as specified in the RPBL bit each time it
 * starts a Burst transfer on the host bus. You can program RPBL with values of 1,
 * 2, 4, 8, 16, and 32. Any other value results in undefined behavior.
 * 
 * This field is valid and applicable only when USP is set high.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                       | Value | Description
 * :-------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL1  | 0x1   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL2  | 0x2   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL4  | 0x4   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL8  | 0x8   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL6  | 0x10  |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL32 | 0x20  |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_RPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL1   0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_RPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL2   0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_RPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL4   0x4
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_RPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL8   0x8
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_RPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL6   0x10
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_RPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_E_RXDMAPBL32  0x20

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_RPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_RPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_MSB        22
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_RPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_WIDTH      6
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_RPBL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_SET_MSK    0x007e0000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_RPBL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_CLR_MSK    0xff81ffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_RPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_RPBL field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_GET(value) (((value) & 0x007e0000) >> 17)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_RPBL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RPBL_SET(value) (((value) << 17) & 0x007e0000)

/*
 * Field : usp
 * 
 * Use Seperate PBL
 * 
 * When set high, this bit configures the Rx DMA to use the value configured in
 * Bits[22:17] as PBL. The PBL value in Bits[13:8] is applicable only to the Tx DMA
 * operations.
 * 
 * When reset to low, the PBL value in Bits[13:8] is applicable for both DMA
 * engines.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                    | Value | Description
 * :----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_BUS_MODE_USP_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_USP_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_USP
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_USP
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_USP register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_USP register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_MSB        23
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_USP register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_USP register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_USP register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_USP register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_USP field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_USP register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_USP_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : eightxpbl
 * 
 * PBLx8 Mode
 * 
 * When set high, this bit multiplies the programmed PBL value (Bits[22:17] and
 * Bits[13:8]) eight times. Therefore, the DMA transfers the data in 8, 16, 32, 64,
 * 128, and 256 beats depending on the PBL value.
 * 
 * Note: This bit function is not backward compatible. Before release 3.50a, this
 * bit was 4xPBL.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_MSB        24
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : aal
 * 
 * Address Aligned Beats
 * 
 * When this bit is set high and the FB bit is equal to 1, the AHB or AXI interface
 * generates all bursts aligned to the start address LS bits. If the FB bit is
 * equal to 0, the first burst (accessing the data buffer's start address) is not
 * aligned, but subsequent bursts are aligned to the address.
 * 
 * This bit is valid only in the GMAC-AHB and GMAC-AXI configuration and is
 * reserved (RO with default value 0) in all other configurations.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                    | Value | Description
 * :----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_BUS_MODE_AAL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_BUS_MODE_AAL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_AAL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_BUS_MODE_AAL
 * 
 */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_AAL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_AAL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_MSB        25
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_AAL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_AAL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_AAL register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_AAL register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_AAL field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_AAL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_AAL_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : mb
 * 
 * Mixed Burst
 * 
 * When this bit is set high and the FB bit is low, the AHB Master interface starts
 * all bursts of length more than 16 with INCR (undefined burst) whereas it reverts
 * to fixed burst transfers (INCRx and SINGLE) for burst length of 16 and less.
 * 
 * This bit is valid only in the GMAC-AHB configuration and reserved in all other
 * configuration.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_MB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_MB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_MSB        26
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_MB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_MB register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_MB register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_MB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_MB field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_MB register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_MB_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : txpr
 * 
 * Transmit Priority
 * 
 * When set, this bit indicates that the transmit DMA has higher priority than the
 * receive DMA during arbitration for the system-side bus. In the GMAC-AXI
 * configuration, this bit is reserved and read-only (RO).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_TXPR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_TXPR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_MSB        27
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_TXPR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_TXPR register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_TXPR register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_TXPR register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_TXPR field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_TXPR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_TXPR_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : prwg
 * 
 * Channel Priority Weights
 * 
 * This field sets the priority weights for Channel 0 during the round-robin
 * arbitration between the DMA channels for the system bus.
 * 
 * * 00: The priority weight is 1.
 * 
 * * 01: The priority weight is 2.
 * 
 * * 10: The priority weight is 3.
 * 
 * * 11: The priority weight is 4.
 * 
 * This field is present in all DWC_gmac configurations except GMAC-AXI when you
 * select the AV feature. Otherwise, this field is reserved and read-only (RO).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_PRWG register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_PRWG register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_MSB        29
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_PRWG register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_PRWG register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_SET_MSK    0x30000000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_PRWG register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_CLR_MSK    0xcfffffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_PRWG register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_PRWG field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_GET(value) (((value) & 0x30000000) >> 28)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_PRWG register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_PRWG_SET(value) (((value) << 28) & 0x30000000)

/*
 * Field : reserved_30
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_MSB        30
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : rib
 * 
 * Rebuild INCRx Burst
 * 
 * When this bit is set high and the AHB master gets an EBT (Retry, Split, or
 * Losing bus grant), the AHB master interface rebuilds the pending beats of any
 * burst transfer initiated with INCRx. The AHB master interface rebuilds the beats
 * with a combination of specified bursts with INCRx and SINGLE. By default, the
 * AHB master interface rebuilds pending beats of an EBT with an unspecified (INCR)
 * burst.
 * 
 * This bit is valid only in the GMAC-AHB configuration. It is reserved in all
 * other configuration.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_RIB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_BUS_MODE_RIB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_BUS_MODE_RIB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_BUS_MODE_RIB register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_DMAGRP_BUS_MODE_RIB register field value. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE_RIB register field. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_BUS_MODE_RIB field value from a register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_DMAGRP_BUS_MODE_RIB register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RIB_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_BUS_MODE.
 */
struct ALT_EMAC_DMAGRP_BUS_MODE_s
{
    volatile uint32_t        swr         :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_SWR */
    volatile uint32_t        da          :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_DA */
    volatile uint32_t        dsl         :  5;  /* ALT_EMAC_DMAGRP_BUS_MODE_DSL */
    volatile uint32_t        atds        :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_ATDS */
    volatile uint32_t        pbl         :  6;  /* ALT_EMAC_DMAGRP_BUS_MODE_PBL */
    volatile uint32_t        pr          :  2;  /* ALT_EMAC_DMAGRP_BUS_MODE_PR */
    volatile uint32_t        fb          :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_FB */
    volatile uint32_t        rpbl        :  6;  /* ALT_EMAC_DMAGRP_BUS_MODE_RPBL */
    volatile uint32_t        usp         :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_USP */
    volatile uint32_t        eightxpbl   :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_EIGHTXPBL */
    volatile uint32_t        aal         :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_AAL */
    volatile uint32_t        mb          :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_MB */
    volatile uint32_t        txpr        :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_TXPR */
    volatile uint32_t        prwg        :  2;  /* ALT_EMAC_DMAGRP_BUS_MODE_PRWG */
    const volatile uint32_t  reserved_30 :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_RESERVED_30 */
    volatile uint32_t        rib         :  1;  /* ALT_EMAC_DMAGRP_BUS_MODE_RIB */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_BUS_MODE. */
typedef struct ALT_EMAC_DMAGRP_BUS_MODE_s  ALT_EMAC_DMAGRP_BUS_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_BUS_MODE register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_RESET       0x00020101
/* The byte offset of the ALT_EMAC_DMAGRP_BUS_MODE register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_BUS_MODE_OFST        0x1000
/* The address of the ALT_EMAC_DMAGRP_BUS_MODE register. */
#define ALT_EMAC_DMAGRP_BUS_MODE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_BUS_MODE_OFST))

/*
 * Register : dmagrp_transmit_poll_demand
 * 
 * <b> Register 1 (Transmit Poll Demand Register) </b>
 * 
 * The Transmit Poll Demand register enables the Tx DMA to check whether or not the
 * DMA owns the current descriptor. The Transmit Poll Demand command is given to
 * wake up the Tx DMA if it is in the Suspend mode. The Tx DMA can go into the
 * Suspend mode because of an Underflow error in a transmitted frame or the
 * unavailability of descriptors owned by it. You can give this command anytime and
 * the Tx DMA resets this command when it again starts fetching the current
 * descriptor from host memory. When this register is read, it always returns zero.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                             
 * :-------|:-------|:------|:-----------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD
 * 
 */
/*
 * Field : tpd
 * 
 * Transmit Poll Demand
 * 
 * When these bits are written with any value, the DMA reads the current descriptor
 * pointed to by Register 18 (Current Host Transmit Descriptor Register). If that
 * descriptor is not available (owned by the Host), the transmission returns to the
 * Suspend state and the Bit 2 (TU) of Register 5 (Status Register) is asserted. If
 * the descriptor is available, the transmission resumes.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_WIDTH      32
/* The mask used to set the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD register field value. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD register field value. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD field value from a register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND.
 */
struct ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_s
{
    volatile uint32_t  tpd : 32;  /* ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_TPD */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND. */
typedef struct ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_s  ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_OFST        0x1004
/* The address of the ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_OFST))

/*
 * Register : dmagrp_receive_poll_demand
 * 
 * <b>Register 2 (Receive Poll Demand Register) </b>
 * 
 * The Receive Poll Demand register enables the receive DMA to check for new
 * descriptors. This command is used to wake up the Rx DMA from the SUSPEND state.
 * The RxDMA can go into the SUSPEND state only because of the unavailability of
 * descriptors it owns. When this register is read, it always returns zero.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                            
 * :-------|:-------|:------|:----------------------------------------
 *  [31:0] | RW     | 0x0   | ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD
 * 
 */
/*
 * Field : rpd
 * 
 * Receive Poll Demand
 * 
 * When these bits are written with any value, the DMA reads the current descriptor
 * pointed to by Register 19 (Current Host Receive Descriptor Register). If that
 * descriptor is not available (owned by the Host), the reception returns to the
 * Suspended state and the Bit 7 (RU) of Register 5 (Status Register) is not
 * asserted. If the descriptor is available, the Rx DMA returns to the active
 * state.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_WIDTH      32
/* The mask used to set the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD field value from a register. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND.
 */
struct ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_s
{
    volatile uint32_t  rpd : 32;  /* ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RPD */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND. */
typedef struct ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_s  ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND register. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_OFST        0x1008
/* The address of the ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND register. */
#define ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_OFST))

/*
 * Register : dmagrp_receive_descriptor_list_address
 * 
 * <b>Register 3 (Receive Descriptor List Address Register) </b>
 * 
 * The Receive Descriptor List Address register points to the start of the Receive
 * Descriptor List. The descriptor lists reside in the host's physical memory space
 * and must be Word, Dword, or Lword-aligned (for 32-bit, 64-bit, or 128-bit data
 * bus). The DMA internally converts it to bus width aligned address by making the
 * corresponding LS bits low. Writing to this register is permitted only when
 * reception is stopped. When stopped, this register must be written to before the
 * receive Start command is given.
 * 
 * You can write to this register only when Rx DMA has stopped, that is, Bit 1 (SR)
 * is set to zero in Register 6 (Operation Mode Register). When stopped, this
 * register can be written with a new descriptor list address. When you set the SR
 * bit to 1, the DMA takes the newly programmed descriptor base address.
 * 
 * If this register is not changed when the SR bit is set to 0, then the DMA takes
 * the descriptor address where it was stopped earlier.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description          
 * :-------|:-------|:------|:----------------------
 *  [1:0]  | ???    | 0x0   | *UNDEFINED*          
 *  [31:2] | RW     | 0x0   | Start of Receive List
 * 
 */
/*
 * Field : Start of Receive List - rdesla_32bit
 * 
 * This field contains the base address of the first descriptor in the Receive
 * Descriptor list. The LSB bits (1:0) are ignored (32-bit wide bus) and internally
 * taken as all-zero by the DMA. Therefore, these LSB bits are read-only (RO).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_WIDTH      30
/* The mask used to set the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_SET_MSK    0xfffffffc
/* The mask used to clear the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_CLR_MSK    0x00000003
/* The reset value of the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT field value from a register. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_GET(value) (((value) & 0xfffffffc) >> 2)
/* Produces a ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32BIT_SET(value) (((value) << 2) & 0xfffffffc)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS.
 */
struct ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_s
{
    uint32_t                        :  2;  /* *UNDEFINED* */
    volatile uint32_t  rdesla_32bit : 30;  /* Start of Receive List */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS. */
typedef struct ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_s  ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS register. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_OFST        0x100c
/* The address of the ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS register. */
#define ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_OFST))

/*
 * Register : dmagrp_transmit_descriptor_list_address
 * 
 * <b>Register 4 (Transmit Descriptor List Address Register)</b>
 * 
 * The Transmit Descriptor List Address register points to the start of the
 * Transmit Descriptor List. The descriptor lists reside in the host's physical
 * memory space and must be Word, Dword, or Lword-aligned (for 32-bit, 64-bit, or
 * 128-bit data bus). The DMA internally converts it to bus width aligned address
 * by making the corresponding LSB to low.
 * 
 * You can write to this register only when the Tx DMA has stopped, that is, Bit 13
 * (ST) is set to zero in Register 6 (Operation Mode Register). When stopped, this
 * register can be written with a new descriptor list address. When you set the ST
 * bit to 1, the DMA takes the newly programmed descriptor base address.
 * 
 * If this register is not changed when the ST bit is set to 0, then the DMA takes
 * the descriptor address where it was stopped earlier.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description           
 * :-------|:-------|:------|:-----------------------
 *  [1:0]  | ???    | 0x0   | *UNDEFINED*           
 *  [31:2] | RW     | 0x0   | Start of Transmit List
 * 
 */
/*
 * Field : Start of Transmit List - tdesla_32bit
 * 
 * This field contains the base address of the first descriptor in the Transmit
 * Descriptor list. The LSB bits (1:0) are ignored (32-bit wide bus) and are
 * internally taken as all-zero by the DMA. Therefore, these LSB bits are read-only
 * (RO).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_WIDTH      30
/* The mask used to set the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT register field value. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_SET_MSK    0xfffffffc
/* The mask used to clear the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT register field value. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_CLR_MSK    0x00000003
/* The reset value of the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT register field. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT field value from a register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_GET(value) (((value) & 0xfffffffc) >> 2)
/* Produces a ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32BIT_SET(value) (((value) << 2) & 0xfffffffc)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS.
 */
struct ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_s
{
    uint32_t                        :  2;  /* *UNDEFINED* */
    volatile uint32_t  tdesla_32bit : 30;  /* Start of Transmit List */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS. */
typedef struct ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_s  ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_OFST        0x1010
/* The address of the ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS register. */
#define ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_OFST))

/*
 * Register : dmagrp_status
 * 
 * <b>Register 5 (Status Register) </b>
 * 
 * The Status register contains all status bits that the DMA reports to the host.
 * The Software driver reads this register during an interrupt service routine or
 * polling. Most of the fields in this register cause the host to be interrupted.
 * The bits of this register are not cleared when read. Writing 1'b1 to
 * (unreserved) Bits[16:0] of this register clears these bits and writing 1'b0 has
 * no effect. Each field (Bits[16:0]) can be masked by masking the appropriate bit
 * in Register 7 (Interrupt Enable Register).
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                          
 * :--------|:-------|:------|:--------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_TI            
 *  [1]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_TPS           
 *  [2]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_TU            
 *  [3]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_TJT           
 *  [4]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_OVF           
 *  [5]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_UNF           
 *  [6]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_RI            
 *  [7]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_RU            
 *  [8]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_RPS           
 *  [9]     | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_RWT           
 *  [10]    | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_ETI           
 *  [12:11] | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11
 *  [13]    | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_FBI           
 *  [14]    | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_ERI           
 *  [15]    | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_AIS           
 *  [16]    | RW     | 0x0   | ALT_EMAC_DMAGRP_STATUS_NIS           
 *  [19:17] | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_RS            
 *  [22:20] | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_TS            
 *  [25:23] | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_EB            
 *  [26]    | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_GLI           
 *  [27]    | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_GMI           
 *  [28]    | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_GPI           
 *  [29]    | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_TTI           
 *  [30]    | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_GLPII         
 *  [31]    | R      | 0x0   | ALT_EMAC_DMAGRP_STATUS_RESERVED_31   
 * 
 */
/*
 * Field : ti
 * 
 * Transmit Interrupt
 * 
 * This bit indicates that the frame transmission is complete. When transmission is
 * complete, Bit 31 (OWN) of TDES0 is reset, and the specific frame status
 * information is updated in the descriptor.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_TI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TI_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_TI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TI_MSB        0
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_TI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_TI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TI_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_TI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TI_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_TI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_TI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_TI_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_DMAGRP_STATUS_TI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_TI_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : tps
 * 
 * Transmit Process Stopped
 * 
 * This bit is set when the transmission is stopped.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_TPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_TPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_MSB        1
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_TPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_TPS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_TPS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_TPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_TPS field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_DMAGRP_STATUS_TPS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_TPS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : tu
 * 
 * Transmit Buffer Unavailable
 * 
 * This bit indicates that the host owns the Next Descriptor in the Transmit List
 * and the DMA cannot acquire it. Transmission is suspended. Bits[22:20] explain
 * the Transmit Process state transitions.
 * 
 * To resume processing Transmit descriptors, the host should change the ownership
 * of the descriptor by setting TDES0[31] and then issue a Transmit Poll Demand
 * command.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_TU register field. */
#define ALT_EMAC_DMAGRP_STATUS_TU_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_TU register field. */
#define ALT_EMAC_DMAGRP_STATUS_TU_MSB        2
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_TU register field. */
#define ALT_EMAC_DMAGRP_STATUS_TU_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_TU register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TU_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_TU register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TU_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_TU register field. */
#define ALT_EMAC_DMAGRP_STATUS_TU_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_TU field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_TU_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_DMAGRP_STATUS_TU register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_TU_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : tjt
 * 
 * Transmit Jabber Timeout
 * 
 * This bit indicates that the Transmit Jabber Timer expired, which happens when
 * the frame size exceeds 2,048 (10,240 bytes when the Jumbo frame is enabled).
 * When the Jabber Timeout occurs, the transmission process is aborted and placed
 * in the Stopped state. This causes the Transmit Jabber Timeout TDES0[14] flag to
 * assert.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_TJT register field. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_TJT register field. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_MSB        3
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_TJT register field. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_TJT register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_TJT register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_TJT register field. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_TJT field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_DMAGRP_STATUS_TJT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_TJT_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : ovf
 * 
 * Receive Overflow
 * 
 * This bit indicates that the Receive Buffer had an Overflow during frame
 * reception. If the partial frame is transferred to the application, the overflow
 * status is set in RDES0[11].
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_OVF register field. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_OVF register field. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_MSB        4
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_OVF register field. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_OVF register field value. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_OVF register field value. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_OVF register field. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_OVF field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_DMAGRP_STATUS_OVF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_OVF_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : unf
 * 
 * Transmit Underflow
 * 
 * This bit indicates that the Transmit Buffer had an Underflow during frame
 * transmission. Transmission is suspended and an Underflow Error TDES0[1] is set.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_UNF register field. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_UNF register field. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_MSB        5
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_UNF register field. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_UNF register field value. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_UNF register field value. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_UNF register field. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_UNF field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_DMAGRP_STATUS_UNF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_UNF_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : ri
 * 
 * Receive Interrupt
 * 
 * This bit indicates that the frame reception is complete. When reception is
 * complete, the Bit 31 of RDES1 (Disable Interrupt on Completion) is reset in the
 * last Descriptor, and the specific frame status information is updated in the
 * descriptor.
 * 
 * The reception remains in the Running state.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_RI register field. */
#define ALT_EMAC_DMAGRP_STATUS_RI_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_RI register field. */
#define ALT_EMAC_DMAGRP_STATUS_RI_MSB        6
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_RI register field. */
#define ALT_EMAC_DMAGRP_STATUS_RI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_RI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RI_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_RI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RI_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_RI register field. */
#define ALT_EMAC_DMAGRP_STATUS_RI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_RI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_RI_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_DMAGRP_STATUS_RI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_RI_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : ru
 * 
 * Receive Buffer Unavailable
 * 
 * This bit indicates that the host owns the Next Descriptor in the Receive List
 * and the DMA cannot acquire it. The Receive Process is suspended. To resume
 * processing Receive descriptors, the host should change the ownership of the
 * descriptor and issue a Receive Poll Demand command. If no Receive Poll Demand is
 * issued, the Receive Process resumes when the next recognized incoming frame is
 * received. This bit is set only when the previous Receive Descriptor is owned by
 * the DMA.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_RU register field. */
#define ALT_EMAC_DMAGRP_STATUS_RU_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_RU register field. */
#define ALT_EMAC_DMAGRP_STATUS_RU_MSB        7
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_RU register field. */
#define ALT_EMAC_DMAGRP_STATUS_RU_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_RU register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RU_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_RU register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RU_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_RU register field. */
#define ALT_EMAC_DMAGRP_STATUS_RU_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_RU field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_RU_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_DMAGRP_STATUS_RU register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_RU_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : rps
 * 
 * Receive Process Stopped
 * 
 * This bit is asserted when the Receive Process enters the Stopped state.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_RPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_RPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_MSB        8
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_RPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_RPS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_RPS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_RPS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_RPS field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_DMAGRP_STATUS_RPS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_RPS_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : rwt
 * 
 * Receive Watchdog Timeout
 * 
 * When set, this bit indicates that the Receive Watchdog Timer expired while
 * receiving the current frame and the current frame is truncated after the
 * watchdog timeout.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_RWT register field. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_RWT register field. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_MSB        9
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_RWT register field. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_RWT register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_RWT register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_RWT register field. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_RWT field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_DMAGRP_STATUS_RWT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_RWT_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : eti
 * 
 * Early Transmit Interrupt
 * 
 * This bit indicates that the frame to be transmitted is fully transferred to the
 * MTL Transmit FIFO.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_ETI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_ETI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_MSB        10
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_ETI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_ETI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_ETI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_ETI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_ETI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_DMAGRP_STATUS_ETI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_ETI_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : reserved_12_11
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_MSB        12
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_SET_MSK    0x00001800
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_CLR_MSK    0xffffe7ff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_GET(value) (((value) & 0x00001800) >> 11)
/* Produces a ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11_SET(value) (((value) << 11) & 0x00001800)

/*
 * Field : fbi
 * 
 * Fatal Bus Error Interrupt
 * 
 * This bit indicates that a bus error occurred, as described in Bits[25:23]. When
 * this bit is set, the corresponding DMA engine disables all of its bus accesses.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_FBI register field. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_FBI register field. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_MSB        13
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_FBI register field. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_FBI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_FBI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_FBI register field. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_FBI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_DMAGRP_STATUS_FBI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_FBI_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : eri
 * 
 * Early Receive Interrupt
 * 
 * This bit indicates that the DMA filled the first data buffer of the packet. This
 * bit is cleared when the software writes 1 to this bit or Bit 6 (RI) of this
 * register is set (whichever occurs earlier).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_ERI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_ERI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_MSB        14
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_ERI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_ERI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_ERI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_ERI register field. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_ERI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_DMAGRP_STATUS_ERI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_ERI_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : ais
 * 
 * Abnormal Interrupt Summary
 * 
 * Abnormal Interrupt Summary bit value is the logical OR of the following when the
 * corresponding interrupt bits are enabled in Register 7 (Interrupt Enable
 * Register):
 * 
 * * Register 5[1]: Transmit Process Stopped
 * 
 * * Register 5[3]: Transmit Jabber Timeout
 * 
 * * Register 5[4]: Receive FIFO Overflow
 * 
 * * Register 5[5]: Transmit Underflow
 * 
 * * Register 5[7]: Receive Buffer Unavailable
 * 
 * * Register 5[8]: Receive Process Stopped
 * 
 * * Register 5[9]: Receive Watchdog Timeout
 * 
 * * Register 5[10]: Early Transmit Interrupt
 * 
 * * Register 5[13]: Fatal Bus Error
 * 
 * Only unmasked bits affect the Abnormal Interrupt Summary bit.
 * 
 * This is a sticky bit and must be cleared each time a corresponding bit, which
 * causes AIS to be set, is cleared.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_AIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_AIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_MSB        15
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_AIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_AIS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_AIS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_AIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_AIS field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_DMAGRP_STATUS_AIS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_AIS_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : nis
 * 
 * Normal Interrupt Summary
 * 
 * Normal Interrupt Summary bit value is the logical OR of the following when the
 * corresponding interrupt bits are enabled in Register 7 (Interrupt Enable
 * Register):
 * 
 * * Register 5[0]: Transmit Interrupt
 * 
 * * Register 5[2]: Transmit Buffer Unavailable
 * 
 * * Register 5[6]: Receive Interrupt
 * 
 * * Register 5[14]: Early Receive Interrupt
 * 
 * Only unmasked bits (interrupts for which interrupt enable is set in Register 7)
 * affect the Normal Interrupt Summary bit.
 * 
 * This is a sticky bit and must be cleared (by writing 1 to this bit) each time a
 * corresponding bit, which causes NIS to be set, is cleared.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_NIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_NIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_MSB        16
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_NIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_NIS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_NIS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_NIS register field. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_NIS field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_DMAGRP_STATUS_NIS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_NIS_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : rs
 * 
 * Received Process State
 * 
 * This field indicates the Receive DMA FSM state. This field does not generate an
 * interrupt.
 * 
 * * 3'b000: Stopped: Reset or Stop Receive Command issued
 * 
 * * 3'b001: Running: Fetching Receive Transfer Descriptor
 * 
 * * 3'b010: Reserved for future use
 * 
 * * 3'b011: Running: Waiting for receive packet
 * 
 * * 3'b100: Suspended: Receive Descriptor Unavailable
 * 
 * * 3'b101: Running: Closing Receive Descriptor
 * 
 * * 3'b110: TIME_STAMP write state
 * 
 * * 3'b111: Running: Transferring the receive packet data from receive buffer to
 *   host memory
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                 | Value | Description
 * :-------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_STOPPED  | 0x0   |            
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_RUNFETCH | 0x1   |            
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_RESERVE  | 0x2   |            
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_RUNWAIT  | 0x3   |            
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_SUSPEND  | 0x4   |            
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_RUNCLOSE | 0x5   |            
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_TIMESTMP | 0x6   |            
 *  ALT_EMAC_DMAGRP_STATUS_RS_E_RUNTRANS | 0x7   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_STOPPED     0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_RUNFETCH    0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_RESERVE     0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_RUNWAIT     0x3
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_SUSPEND     0x4
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_RUNCLOSE    0x5
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_TIMESTMP    0x6
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_RS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_RS_E_RUNTRANS    0x7

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_RS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RS_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_RS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RS_MSB        19
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_RS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RS_WIDTH      3
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_RS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RS_SET_MSK    0x000e0000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_RS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RS_CLR_MSK    0xfff1ffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_RS register field. */
#define ALT_EMAC_DMAGRP_STATUS_RS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_RS field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_RS_GET(value) (((value) & 0x000e0000) >> 17)
/* Produces a ALT_EMAC_DMAGRP_STATUS_RS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_RS_SET(value) (((value) << 17) & 0x000e0000)

/*
 * Field : ts
 * 
 * Transmit Process State
 * 
 * This field indicates the Transmit DMA FSM state. This field does not generate an
 * interrupt.
 * 
 * * 3'b000: Stopped; Reset or Stop Transmit Command issued
 * 
 * * 3'b001: Running; Fetching Transmit Transfer Descriptor
 * 
 * * 3'b010: Running; Waiting for status
 * 
 * * 3'b011: Running; Reading Data from host memory buffer and queuing it to
 *   transmit buffer (Tx FIFO)
 * 
 * * 3'b100: TIME_STAMP write state
 * 
 * * 3'b101: Reserved for future use
 * 
 * * 3'b110: Suspended; Transmit Descriptor Unavailable or Transmit Buffer
 *   Underflow
 * 
 * * 3'b111: Running; Closing Transmit Descriptor
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                 | Value | Description
 * :-------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_STOPPED  | 0x0   |            
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_RUNFETCH | 0x1   |            
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_RUNWAIT  | 0x2   |            
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_RUNREAD  | 0x3   |            
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_TIMESTMP | 0x4   |            
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_RESERVE  | 0x5   |            
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_SUSPTX   | 0x6   |            
 *  ALT_EMAC_DMAGRP_STATUS_TS_E_RUNCLOSE | 0x7   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_STOPPED     0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_RUNFETCH    0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_RUNWAIT     0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_RUNREAD     0x3
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_TIMESTMP    0x4
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_RESERVE     0x5
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_SUSPTX      0x6
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TS
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TS_E_RUNCLOSE    0x7

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_TS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TS_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_TS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TS_MSB        22
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_TS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TS_WIDTH      3
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_TS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TS_SET_MSK    0x00700000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_TS register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TS_CLR_MSK    0xff8fffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_TS register field. */
#define ALT_EMAC_DMAGRP_STATUS_TS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_TS field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_TS_GET(value) (((value) & 0x00700000) >> 20)
/* Produces a ALT_EMAC_DMAGRP_STATUS_TS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_TS_SET(value) (((value) << 20) & 0x00700000)

/*
 * Field : eb
 * 
 * Error Bits
 * 
 * This field indicates the type of error that caused a Bus Error, for example,
 * error response on the AHB or AXI interface. This field is valid only when Bit 13
 * (FBI) is set. This field does not generate an interrupt.
 * 
 * * 0 0 0: Error during Rx DMA Write Data Transfer
 * 
 * * 0 1 1: Error during Tx DMA Read Data Transfer
 * 
 * * 1 0 0: Error during Rx DMA Descriptor Write Access
 * 
 * * 1 0 1: Error during Tx DMA Descriptor Write Access
 * 
 * * 1 1 0: Error during Rx DMA Descriptor Read Access
 * 
 * * 1 1 1: Error during Tx DMA Descriptor Read Access
 * 
 * Note: 001 and 010 are reserved.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_EB register field. */
#define ALT_EMAC_DMAGRP_STATUS_EB_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_EB register field. */
#define ALT_EMAC_DMAGRP_STATUS_EB_MSB        25
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_EB register field. */
#define ALT_EMAC_DMAGRP_STATUS_EB_WIDTH      3
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_EB register field value. */
#define ALT_EMAC_DMAGRP_STATUS_EB_SET_MSK    0x03800000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_EB register field value. */
#define ALT_EMAC_DMAGRP_STATUS_EB_CLR_MSK    0xfc7fffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_EB register field. */
#define ALT_EMAC_DMAGRP_STATUS_EB_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_EB field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_EB_GET(value) (((value) & 0x03800000) >> 23)
/* Produces a ALT_EMAC_DMAGRP_STATUS_EB register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_EB_SET(value) (((value) << 23) & 0x03800000)

/*
 * Field : gli
 * 
 * GMAC Line interface Interrupt
 * 
 * When set, this bit reflects any of the following interrupt events in the
 * DWC_gmac
 * 
 * interfaces (if present and enabled in your configuration):
 * 
 * * PCS (TBI, RTBI, or SGMII): Link change or auto-negotiation complete event
 * 
 * * SMII or RGMII: Link change event
 * 
 * * General Purpose Input Status (GPIS): Any LL or LH event on the gpi_i input
 *   ports
 * 
 * To identify the exact cause of the interrupt, the software must first read Bit
 * 11 and Bits[2:0] of Register 14 (Interrupt Status Register) and then to clear
 * the source of interrupt (which also clears the GLI interrupt), read any of the
 * following corresponding registers:
 * 
 * * PCS (TBI, RTBI, or SGMII): Register 49 (AN Status Register)
 * 
 * * SMII or RGMII: Register 54 (SGMII/RGMII/SMII Status Register)
 * 
 * * General Purpose Input (GPI): Register 56 (General Purpose IO Register)
 * 
 * The interrupt signal from the DWC_gmac subsystem (sbd_intr_o) is high when this
 * bit is high.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                    | Value | Description
 * :----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_STATUS_GLI_E_NOINTERRUP | 0x0   |            
 *  ALT_EMAC_DMAGRP_STATUS_GLI_E_INTERRUP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_GLI
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_GLI_E_NOINTERRUP 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_GLI
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_GLI_E_INTERRUP   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_GLI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_GLI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_MSB        26
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_GLI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_GLI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_GLI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_GLI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_GLI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_DMAGRP_STATUS_GLI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_GLI_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : gmi
 * 
 * GMAC MMC Interrupt
 * 
 * This bit reflects an interrupt event in the MMC module of the DWC_gmac. The
 * software must read the corresponding registers in the DWC_gmac to get the exact
 * cause of interrupt and clear the source of interrupt to make this bit as 1'b0.
 * The interrupt signal from the DWC_gmac subsystem (sbd_intr_o) is high when this
 * bit is high.
 * 
 * This bit is applicable only when the MAC Management Counters (MMC) are enabled.
 * Otherwise, this bit is reserved.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                    | Value | Description
 * :----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_STATUS_GMI_E_NOINTERRUP | 0x0   |            
 *  ALT_EMAC_DMAGRP_STATUS_GMI_E_INTERRUP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_GMI
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_GMI_E_NOINTERRUP 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_GMI
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_GMI_E_INTERRUP   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_GMI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_GMI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_MSB        27
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_GMI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_GMI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_GMI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_GMI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_GMI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_DMAGRP_STATUS_GMI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_GMI_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : gpi
 * 
 * GMAC PMT Interrupt
 * 
 * This bit indicates an interrupt event in the PMT module of the DWC_gmac. The
 * software must read the PMT Control and Status Register in the MAC to get the
 * exact cause of interrupt and clear its source to reset this bit to 1'b0. The
 * interrupt signal from the DWC_gmac subsystem (sbd_intr_o) is high when this bit
 * is high.
 * 
 * This bit is applicable only when the Power Management feature is enabled.
 * Otherwise, this bit is reserved.
 * 
 * Note: The GPI and pmt_intr_o interrupts are generated in different clock
 * domains.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_GPI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_GPI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_MSB        28
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_GPI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_GPI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_GPI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_GPI register field. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_GPI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_DMAGRP_STATUS_GPI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_GPI_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : tti
 * 
 * Timestamp Trigger Interrupt
 * 
 * This bit indicates an interrupt event in the Timestamp Generator block of
 * DWC_gmac. The software must read the corresponding registers in the DWC_gmac to
 * get the exact cause of interrupt and clear its source to reset this bit to 1'b0.
 * When this bit is high, the interrupt signal from the DWC_gmac subsystem
 * (sbd_intr_o) is high.
 * 
 * This bit is applicable only when the IEEE 1588 Timestamp feature is enabled.
 * Otherwise, this bit is reserved.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                    | Value | Description
 * :----------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_STATUS_TTI_E_NOINTERRUP | 0x0   |            
 *  ALT_EMAC_DMAGRP_STATUS_TTI_E_INTERRUP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TTI
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TTI_E_NOINTERRUP 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_TTI
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_TTI_E_INTERRUP   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_TTI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_TTI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_MSB        29
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_TTI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_TTI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_SET_MSK    0x20000000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_TTI register field value. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_CLR_MSK    0xdfffffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_TTI register field. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_TTI field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_GET(value) (((value) & 0x20000000) >> 29)
/* Produces a ALT_EMAC_DMAGRP_STATUS_TTI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_TTI_SET(value) (((value) << 29) & 0x20000000)

/*
 * Field : glpii
 * 
 * GMAC LPI Interrupt (for Channel 0)
 * 
 * This bit indicates an interrupt event in the LPI logic of the DWC_gmac. To reset
 * this bit to 1'b0, the software must read the corresponding registers in the
 * DWC_gmac to get the exact cause of the interrupt and clear its source.
 * 
 * Note: GLPII status is given only in Channel 0 DMA register and is applicable
 * only when the Energy Efficient Ethernet feature is enabled. Otherwise, this bit
 * is reserved.When this bit is high, the interrupt signal from the MAC
 * (sbd_intr_o) is high.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                      | Value | Description
 * :------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_STATUS_GLPII_E_NOINTERRUP | 0x0   |            
 *  ALT_EMAC_DMAGRP_STATUS_GLPII_E_INTERRUP   | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_GLPII
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_E_NOINTERRUP   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_STATUS_GLPII
 * 
 */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_E_INTERRUP     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_GLPII register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_GLPII register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_MSB        30
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_GLPII register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_GLPII register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_GLPII register field value. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_GLPII register field. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_GLPII field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_DMAGRP_STATUS_GLPII register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_GLPII_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : reserved_31
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_STATUS_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_STATUS_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_STATUS_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_STATUS_RESERVED_31 register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_DMAGRP_STATUS_RESERVED_31 register field value. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_DMAGRP_STATUS_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_STATUS_RESERVED_31 field value from a register. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_DMAGRP_STATUS_RESERVED_31 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_STATUS_RESERVED_31_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_STATUS.
 */
struct ALT_EMAC_DMAGRP_STATUS_s
{
    volatile uint32_t        ti             :  1;  /* ALT_EMAC_DMAGRP_STATUS_TI */
    volatile uint32_t        tps            :  1;  /* ALT_EMAC_DMAGRP_STATUS_TPS */
    volatile uint32_t        tu             :  1;  /* ALT_EMAC_DMAGRP_STATUS_TU */
    volatile uint32_t        tjt            :  1;  /* ALT_EMAC_DMAGRP_STATUS_TJT */
    volatile uint32_t        ovf            :  1;  /* ALT_EMAC_DMAGRP_STATUS_OVF */
    volatile uint32_t        unf            :  1;  /* ALT_EMAC_DMAGRP_STATUS_UNF */
    volatile uint32_t        ri             :  1;  /* ALT_EMAC_DMAGRP_STATUS_RI */
    volatile uint32_t        ru             :  1;  /* ALT_EMAC_DMAGRP_STATUS_RU */
    volatile uint32_t        rps            :  1;  /* ALT_EMAC_DMAGRP_STATUS_RPS */
    volatile uint32_t        rwt            :  1;  /* ALT_EMAC_DMAGRP_STATUS_RWT */
    volatile uint32_t        eti            :  1;  /* ALT_EMAC_DMAGRP_STATUS_ETI */
    const volatile uint32_t  reserved_12_11 :  2;  /* ALT_EMAC_DMAGRP_STATUS_RESERVED_12_11 */
    volatile uint32_t        fbi            :  1;  /* ALT_EMAC_DMAGRP_STATUS_FBI */
    volatile uint32_t        eri            :  1;  /* ALT_EMAC_DMAGRP_STATUS_ERI */
    volatile uint32_t        ais            :  1;  /* ALT_EMAC_DMAGRP_STATUS_AIS */
    volatile uint32_t        nis            :  1;  /* ALT_EMAC_DMAGRP_STATUS_NIS */
    const volatile uint32_t  rs             :  3;  /* ALT_EMAC_DMAGRP_STATUS_RS */
    const volatile uint32_t  ts             :  3;  /* ALT_EMAC_DMAGRP_STATUS_TS */
    const volatile uint32_t  eb             :  3;  /* ALT_EMAC_DMAGRP_STATUS_EB */
    const volatile uint32_t  gli            :  1;  /* ALT_EMAC_DMAGRP_STATUS_GLI */
    const volatile uint32_t  gmi            :  1;  /* ALT_EMAC_DMAGRP_STATUS_GMI */
    const volatile uint32_t  gpi            :  1;  /* ALT_EMAC_DMAGRP_STATUS_GPI */
    const volatile uint32_t  tti            :  1;  /* ALT_EMAC_DMAGRP_STATUS_TTI */
    const volatile uint32_t  glpii          :  1;  /* ALT_EMAC_DMAGRP_STATUS_GLPII */
    const volatile uint32_t  reserved_31    :  1;  /* ALT_EMAC_DMAGRP_STATUS_RESERVED_31 */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_STATUS. */
typedef struct ALT_EMAC_DMAGRP_STATUS_s  ALT_EMAC_DMAGRP_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_STATUS register. */
#define ALT_EMAC_DMAGRP_STATUS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_STATUS register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_STATUS_OFST        0x1014
/* The address of the ALT_EMAC_DMAGRP_STATUS register. */
#define ALT_EMAC_DMAGRP_STATUS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_STATUS_OFST))

/*
 * Register : dmagrp_operation_mode
 * 
 * <b> Register 6 (Operation Mode Register) </b>
 * 
 * The Operation Mode register establishes the Transmit and Receive operating modes
 * and commands. This register should be the last CSR to be written as part of the
 * DMA initialization. This register is also present in the GMAC-MTL configuration
 * with unused and reserved bits 24, 13, 2, and 1.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                  
 * :--------|:-------|:------|:----------------------------------------------
 *  [0]     | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0    
 *  [1]     | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_SR            
 *  [2]     | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_OSF           
 *  [4:3]   | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RTC           
 *  [5]     | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_DGF           
 *  [6]     | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_FUF           
 *  [7]     | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_FEF           
 *  [8]     | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_EFC           
 *  [10:9]  | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RFA           
 *  [12:11] | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RFD           
 *  [13]    | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_ST            
 *  [16:14] | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_TTC           
 *  [19:17] | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17
 *  [20]    | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_FTF           
 *  [21]    | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_TSF           
 *  [22]    | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2         
 *  [23]    | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2         
 *  [24]    | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_DFF           
 *  [25]    | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RSF           
 *  [26]    | RW     | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_DT            
 *  [31:27] | R      | 0x0   | ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27
 * 
 */
/*
 * Field : reserved_0
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_MSB        0
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : sr
 * 
 * Start or Stop Receive
 * 
 * When this bit is set, the Receive process is placed in the Running state. The
 * DMA attempts to acquire the descriptor from the Receive list and processes the
 * incoming frames. The descriptor acquisition is attempted from the current
 * position in the list, which is the address set by Register 3 (Receive Descriptor
 * List Address Register) or the position retained when the Receive process was
 * previously stopped. If the DMA does not own the descriptor, reception is
 * suspended and Bit 7 (Receive Buffer Unavailable) of Register 5 (Status Register)
 * is set. The Start Receive command is effective only when the reception has
 * stopped. If the command is issued before setting Register 3 (Receive Descriptor
 * List Address Register), the DMA behavior is unpredictable.
 * 
 * When this bit is cleared, the Rx DMA operation is stopped after the transfer of
 * the current frame. The next descriptor position in the Receive list is saved and
 * becomes the current position after the Receive process is restarted. The Stop
 * Receive command is effective only when the Receive process is in either the
 * Running (waiting for receive packet) or in the Suspended state.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_SR_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_SR_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_SR
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_SR
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_SR register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_SR register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_MSB        1
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_SR register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_SR register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_SR register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_SR register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_SR field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_SR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_SR_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : osf
 * 
 * Operate on Second Frame
 * 
 * When this bit is set, it instructs the DMA to process the second frame of the
 * Transmit data even before the status for the first frame is obtained.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_OSF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_OSF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_OSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_OSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_MSB        2
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_OSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_OSF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_OSF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_OSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_OSF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_OSF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OSF_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : rtc
 * 
 * Receive Threshold Control
 * 
 * These two bits control the threshold level of the MTL Receive FIFO. Transfer
 * (request) to DMA starts when the frame size within the MTL Receive FIFO is
 * larger than the threshold. In addition, full frames with length less than the
 * threshold are transferred automatically.
 * 
 * The value of 11 is not applicable if the configured Receive FIFO size is 128
 * bytes. These bits are valid only when the RSF bit is zero, and are ignored when
 * the RSF bit is set to 1.
 * 
 * * 00: 64
 * 
 * * 01: 32
 * 
 * * 10: 96
 * 
 * * 11: 128
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO64  | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO32  | 0x1   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO96  | 0x2   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO128 | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO64  0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO32  0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO96  0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_E_THRFIFO128 0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_MSB        4
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RTC register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_SET_MSK    0x00000018
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RTC register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_CLR_MSK    0xffffffe7
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RTC field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_GET(value) (((value) & 0x00000018) >> 3)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RTC register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RTC_SET(value) (((value) << 3) & 0x00000018)

/*
 * Field : dgf
 * 
 * Drop Giant Frames
 * 
 * When set, the MAC drops the received giant frames in the Rx FIFO, that is,
 * frames that are larger than the computed giant frame limit. When reset, the MAC
 * does not drop the giant frames in the Rx FIFO.
 * 
 * Note: This bit is available in the following configurations in which the giant
 * frame status is not provided in Rx status and giant frames are not dropped by
 * default:
 * 
 * * Configurations in which IP Checksum Offload (Type 1) is selected in Rx
 * 
 * * Configurations in which the IPC Full Checksum Offload Engine (Type 2) is
 *   selected in Rx with normal descriptor format
 * 
 * * Configurations in which the Advanced Timestamp feature is selected
 * 
 * In all other configurations, this bit is not used (reserved and always reset).
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_DGF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_DGF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_MSB        5
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_DGF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_DGF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_DGF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_DGF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_DGF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_DGF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DGF_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : fuf
 * 
 * Forward Undersized Good Frames
 * 
 * When set, the Rx FIFO forwards Undersized frames (frames with no Error and
 * length less than 64 bytes) including pad-bytes and CRC.
 * 
 * When reset, the Rx FIFO drops all frames of less than 64 bytes, unless a frame
 * is already transferred because of the lower value of Receive Threshold, for
 * example, RTC = 01.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_FUF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_FUF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_FUF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_FUF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_MSB        6
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_FUF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_FUF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_FUF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_FUF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_FUF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_FUF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FUF_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : fef
 * 
 * Forward Error Frames
 * 
 * When this bit is reset, the Rx FIFO drops frames with error status (CRC error,
 * collision error, GMII_ER, giant frame, watchdog timeout, or overflow). However,
 * if the start byte (write) pointer of a frame is already transferred to the read
 * controller side (in Threshold mode), then the frame is not dropped.
 * 
 * In the GMAC-MTL configuration in which the Frame Length FIFO is also enabled
 * during core configuration, the Rx FIFO drops the error frames if that frame's
 * start byte is not transferred (output) on the ARI bus.
 * 
 * When the FEF bit is set, all frames except runt error frames are forwarded to
 * the DMA. If the Bit 25 (RSF) is set and the Rx FIFO overflows when a partial
 * frame is written, then the frame is dropped irrespective of the FEF bit setting.
 * However, if the Bit 25 (RSF) is reset and the Rx FIFO overflows when a partial
 * frame is
 * 
 * written, then a partial frame may be forwarded to the DMA.
 * 
 * Note: When FEF bit is reset, the giant frames are dropped if the giant frame
 * status is given in Rx Status in the following configurations:
 * 
 * * The IP checksum engine (Type 1) and full checksum offload engine (Type 2) are
 *   not selected.
 * 
 * * The advanced timestamp feature is not selected but the extended status is
 *   selected. The extended status is available with the following features:
 * 
 *     - L3-L4 filter in GMAC-CORE or GMAC-MTL configurations
 * 
 *     - Full checksum offload engine (Type 2) with enhanced descriptor format in
 *       the GMAC-DMA, GMAC-AHB, or GMAC-AXI configurations.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_FEF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_FEF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_FEF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_FEF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_MSB        7
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_FEF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_FEF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_FEF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_FEF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_FEF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_FEF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FEF_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : efc
 * 
 * Reserved
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_EFC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_EFC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_EFC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_EFC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_MSB        8
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_EFC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_EFC register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_EFC register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_EFC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_EFC field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_EFC register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_EFC_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : rfa
 * 
 * Threshold for Activating Flow Control (in half-duplex and full-duplex)
 * 
 * These bits control the threshold (Fill level of Rx FIFO) at which the flow
 * control is activated.
 * 
 * * 00: Full minus 1 KB, that is, FULL - 1KB
 * 
 * * 01: Full minus 2 KB, that is, FULL - 2KB
 * 
 * * 10: Full minus 3 KB, that is, FULL - 3KB
 * 
 * * 11: Full minus 4 KB, that is, FULL - 4KB
 * 
 * These values are applicable only to Rx FIFOs of 4 KB or more and when Bit 8
 * (EFC) is set high. If the Rx FIFO is 8 KB or more, an additional Bit (RFA_2) is
 * used for more threshold levels as described in Bit 23. These bits are reserved
 * and read-only when the depth of Rx FIFO is less than 4 KB.
 * 
 * Note: When FIFO size is exactly 4 KB, although the DWC_gmac allows you to
 * program the value of these bits to 11, the software should not program these
 * bits to 2'b11. The value 2'b11 means flow control on FIFO empty condition.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_1K | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_2K | 0x1   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_3K | 0x2   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_4K | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFA
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_1K    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFA
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_2K    0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFA
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_3K    0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFA
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_E_FIFOFULL_4K    0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_MSB        10
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_SET_MSK    0x00000600
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_CLR_MSK    0xfffff9ff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_GET(value) (((value) & 0x00000600) >> 9)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RFA register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_SET(value) (((value) << 9) & 0x00000600)

/*
 * Field : rfd
 * 
 * Threshold for Deactivating Flow Control (in half-duplex and full-duplex)
 * 
 * These bits control the threshold (Fill-level of Rx FIFO) at which the flow
 * control is de-asserted after activation.
 * 
 * * 00: Full minus 1 KB, that is, FULL - 1KB
 * 
 * * 01: Full minus 2 KB, that is, FULL - 2KB
 * 
 * * 10: Full minus 3 KB, that is, FULL - 3KB
 * 
 * * 11: Full minus 4 KB, that is, FULL - 4KB
 * 
 * The de-assertion is effective only after flow control is asserted. If the Rx
 * FIFO is 8 KB or more, an additional bit (RFD_2) is used for more threshold
 * levels as described in Bit 22. These bits are reserved and read-only when the Rx
 * FIFO depth is less than 4 KB.
 * 
 * Note: For proper flow control, the value programmed in the "RFD_2, RFD" fields
 * should be equal to or more than the value programmed in the "RFA_2, RFA" fields.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_1K | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_2K | 0x1   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_3K | 0x2   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_4K | 0x3   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFD
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_1K    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFD
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_2K    0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFD
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_3K    0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RFD
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_E_FIFOFULL_4K    0x3

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_MSB        12
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_SET_MSK    0x00001800
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_CLR_MSK    0xffffe7ff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_GET(value) (((value) & 0x00001800) >> 11)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RFD register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_SET(value) (((value) << 11) & 0x00001800)

/*
 * Field : st
 * 
 * Start or Stop Transmission Command
 * 
 * When this bit is set, transmission is placed in the Running state, and the DMA
 * checks the Transmit List at the current position for a frame to be transmitted.
 * Descriptor acquisition is attempted either from the current position in the
 * list, which is the Transmit List Base Address set by Register 4 (Transmit
 * Descriptor List Address Register), or from the position retained when
 * transmission was stopped previously. If the DMA does not own the current
 * descriptor, transmission enters the Suspended state and Bit 2 (Transmit Buffer
 * Unavailable) of Register 5 (Status Register) is set. The Start Transmission
 * command is effective only when transmission is stopped. If the command is issued
 * before setting Register 4 (Transmit Descriptor List Address Register), then the
 * DMA behavior is unpredictable.
 * 
 * When this bit is reset, the transmission process is placed in the Stopped state
 * after completing the transmission of the current frame. The Next Descriptor
 * position in the Transmit List is saved, and it becomes the current position when
 * transmission is restarted. To change the list address, you need to program
 * Register 4 (Transmit Descriptor List Address Register) with a new value when
 * this bit is reset. The new value is considered when this bit is set again. The
 * stop transmission command is effective only when the transmission of the current
 * frame is complete or the transmission is in the Suspended state.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_ST_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_ST_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_ST
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_ST
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_ST register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_ST register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_MSB        13
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_ST register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_ST register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_ST register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_ST register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_ST field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_ST register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ST_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : ttc
 * 
 * Transmit Threshold Control
 * 
 * These bits control the threshold level of the MTL Transmit FIFO. Transmission
 * starts when the frame size within the MTL Transmit FIFO is larger than the
 * threshold. In addition, full frames with a length less than the threshold are
 * also transmitted. These bits are used only when Bit 21 (TSF) is reset.
 * 
 * * 000: 64
 * 
 * * 001: 128
 * 
 * * 010: 192
 * 
 * * 011: 256
 * 
 * * 100: 40
 * 
 * * 101: 32
 * 
 * * 110: 24
 * 
 * * 111: 16
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHESH64  | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES128 | 0x1   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES192 | 0x2   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES256 | 0x3   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES40  | 0x4   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES32  | 0x5   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES24  | 0x6   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES16  | 0x7   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHESH64     0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES128    0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES192    0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES256    0x3
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES40     0x4
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES32     0x5
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES24     0x6
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TTC
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_E_TTCTHRES16     0x7

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_TTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_TTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_MSB        16
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_TTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_WIDTH      3
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_TTC register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_SET_MSK    0x0001c000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_TTC register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_CLR_MSK    0xfffe3fff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_TTC register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_TTC field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_GET(value) (((value) & 0x0001c000) >> 14)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_TTC register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TTC_SET(value) (((value) << 14) & 0x0001c000)

/*
 * Field : reserved_19_17
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_MSB        19
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_WIDTH      3
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_SET_MSK    0x000e0000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_CLR_MSK    0xfff1ffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_GET(value) (((value) & 0x000e0000) >> 17)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17_SET(value) (((value) << 17) & 0x000e0000)

/*
 * Field : ftf
 * 
 * Flush Transmit FIFO
 * 
 * When this bit is set, the transmit FIFO controller logic is reset to its default
 * values and thus all data in the Tx FIFO is lost or flushed. This bit is cleared
 * internally when the flushing operation is completed. The Operation Mode register
 * should not be written to until this bit is cleared. The data which is already
 * accepted by the MAC transmitter is not flushed. It is scheduled for transmission
 * and results in underflow and runt frame transmission.
 * 
 * Note: The flush operation is complete only when the Tx FIFO is emptied of its
 * contents and all the pending Transmit Status of the transmitted frames are
 * accepted by the host. To complete this flush operation, the PHY transmit clock
 * (clk_tx_i) is required to be active.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_FTF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_FTF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_FTF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_FTF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_MSB        20
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_FTF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_FTF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_SET_MSK    0x00100000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_FTF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_CLR_MSK    0xffefffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_FTF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_FTF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_GET(value) (((value) & 0x00100000) >> 20)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_FTF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_FTF_SET(value) (((value) << 20) & 0x00100000)

/*
 * Field : tsf
 * 
 * Transmit Store and Forward
 * 
 * When this bit is set, transmission starts when a full frame resides in the MTL
 * Transmit FIFO. When this bit is set, the TTC values specified in Bits[16:14] are
 * ignored. This bit should be changed only when the transmission is stopped.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TSF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_TSF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_TSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_LSB        21
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_TSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_MSB        21
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_TSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_TSF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_SET_MSK    0x00200000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_TSF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_CLR_MSK    0xffdfffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_TSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_TSF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_GET(value) (((value) & 0x00200000) >> 21)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_TSF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_TSF_SET(value) (((value) << 21) & 0x00200000)

/*
 * Field : rfd_2
 * 
 * MSB of Threshold for Deactivating Flow Control
 * 
 * If the DWC_gmac is configured for Rx FIFO size of 8 KB or more, this bit (when
 * set) provides additional threshold levels for deactivating the flow control in
 * both half-duplex and full-duplex modes. This bit (as Most Significant Bit) along
 * with the RFD (Bits[12:11]) gives the following thresholds for deactivating flow
 * control:
 * 
 * * 100: Full minus 5 KB, that is, FULL - 5KB
 * 
 * * 101: Full minus 6 KB, that is, FULL - 6KB
 * 
 * * 110: Full minus 7 KB, that is, FULL - 7KB
 * 
 * * 111: Reserved
 * 
 * This bit is reserved (and RO) if the Rx FIFO is 4 KB or less deep.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_MSB        22
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_SET_MSK    0x00400000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_CLR_MSK    0xffbfffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_GET(value) (((value) & 0x00400000) >> 22)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2_SET(value) (((value) << 22) & 0x00400000)

/*
 * Field : rfa_2
 * 
 * MSB of Threshold for Activating Flow Control
 * 
 * If the DWC_gmac is configured for an Rx FIFO depth of 8 KB or more, this bit
 * (when set) provides additional threshold levels for activating the flow control
 * in both half-duplex and full-duplex modes. This bit (as Most Significant Bit)
 * along with the RFA (Bits[10:9]) gives the following thresholds for activating
 * flow control:
 * 
 * * 100: Full minus 5 KB, that is, FULL - 5KB
 * 
 * * 101: Full minus 6 KB, that is, FULL - 6KB
 * 
 * * 110: Full minus 7 KB, that is, FULL - 7KB
 * 
 * * 111: Reserved
 * 
 * This bit is reserved (and RO) if the Rx FIFO is 4 KB or less deep.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_LSB        23
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_MSB        23
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_SET_MSK    0x00800000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_CLR_MSK    0xff7fffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_GET(value) (((value) & 0x00800000) >> 23)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2_SET(value) (((value) << 23) & 0x00800000)

/*
 * Field : dff
 * 
 * Disable Flushing of Received Frames
 * 
 * When this bit is set, the Rx DMA does not flush any frames because of the
 * unavailability of receive descriptors or buffers as it does normally when this
 * bit is reset.
 * 
 * This bit is reserved (and RO) in the GMAC-MTL configuration.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_DFF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_DFF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_DFF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_DFF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_MSB        24
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_DFF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_DFF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_DFF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_DFF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_DFF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_DFF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DFF_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : rsf
 * 
 * Receive Store and Forward
 * 
 * When this bit is set, the MTL reads a frame from the Rx FIFO only after the
 * complete frame has been written to it, ignoring the RTC bits. When this bit is
 * reset, the Rx FIFO operates in the cut-through mode, subject to the threshold
 * specified by the RTC bits.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RSF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_RSF
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_MSB        25
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RSF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RSF register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RSF register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RSF field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RSF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RSF_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : dt
 * 
 * Disable Dropping of TCP/IP Checksum Error Frames
 * 
 * When this bit is set, the MAC does not drop the frames which only have errors
 * detected by the Receive Checksum Offload engine. Such frames do not have any
 * errors (including FCS error) in the Ethernet frame received by the MAC but have
 * errors only in the encapsulated payload. When this bit is reset, all error
 * frames are dropped if the FEF bit is reset.
 * 
 * If the IPC Full Checksum Offload Engine (Type 2) is disabled, this bit is
 * reserved (RO with value 1'b0).
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_DT_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_OPERATION_MODE_DT_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_DT
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_OPERATION_MODE_DT
 * 
 */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_DT register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_DT register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_MSB        26
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_DT register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_DT register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_DT register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_DT register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_DT field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_DT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_DT_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : reserved_31_27
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_WIDTH      5
/* The mask used to set the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_SET_MSK    0xf8000000
/* The mask used to clear the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 register field value. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_CLR_MSK    0x07ffffff
/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 register field. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 field value from a register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_GET(value) (((value) & 0xf8000000) >> 27)
/* Produces a ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27_SET(value) (((value) << 27) & 0xf8000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_OPERATION_MODE.
 */
struct ALT_EMAC_DMAGRP_OPERATION_MODE_s
{
    const volatile uint32_t  reserved_0     :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_0 */
    volatile uint32_t        sr             :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_SR */
    volatile uint32_t        osf            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_OSF */
    volatile uint32_t        rtc            :  2;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RTC */
    volatile uint32_t        dgf            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_DGF */
    volatile uint32_t        fuf            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_FUF */
    volatile uint32_t        fef            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_FEF */
    const volatile uint32_t  efc            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_EFC */
    const volatile uint32_t  rfa            :  2;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RFA */
    const volatile uint32_t  rfd            :  2;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RFD */
    volatile uint32_t        st             :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_ST */
    volatile uint32_t        ttc            :  3;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_TTC */
    const volatile uint32_t  reserved_19_17 :  3;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_19_17 */
    volatile uint32_t        ftf            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_FTF */
    volatile uint32_t        tsf            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_TSF */
    const volatile uint32_t  rfd_2          :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RFD_2 */
    const volatile uint32_t  rfa_2          :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RFA_2 */
    volatile uint32_t        dff            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_DFF */
    volatile uint32_t        rsf            :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RSF */
    volatile uint32_t        dt             :  1;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_DT */
    const volatile uint32_t  reserved_31_27 :  5;  /* ALT_EMAC_DMAGRP_OPERATION_MODE_RESERVED_31_27 */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_OPERATION_MODE. */
typedef struct ALT_EMAC_DMAGRP_OPERATION_MODE_s  ALT_EMAC_DMAGRP_OPERATION_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_OPERATION_MODE register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_OPERATION_MODE register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_OFST        0x1018
/* The address of the ALT_EMAC_DMAGRP_OPERATION_MODE register. */
#define ALT_EMAC_DMAGRP_OPERATION_MODE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_OPERATION_MODE_OFST))

/*
 * Register : dmagrp_interrupt_enable
 * 
 * <b> Register 7 (Interrupt Enable Register) </b>
 * 
 * The Interrupt Enable register enables the interrupts reported by Register 5
 * (Status Register). Setting a bit to 1'b1 enables a corresponding interrupt.
 * After a hardware or software reset, all interrupts are disabled.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                    
 * :--------|:-------|:------|:------------------------------------------------
 *  [0]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE           
 *  [1]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE           
 *  [2]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE           
 *  [3]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE           
 *  [4]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE           
 *  [5]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE           
 *  [6]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE           
 *  [7]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE           
 *  [8]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE           
 *  [9]     | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE           
 *  [10]    | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE           
 *  [12:11] | R      | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11
 *  [13]    | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE           
 *  [14]    | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE           
 *  [15]    | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE           
 *  [16]    | RW     | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE           
 *  [31:17] | R      | 0x0   | ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17
 * 
 */
/*
 * Field : tie
 * 
 * Transmit Interrupt Enable
 * 
 * When this bit is set with Normal Interrupt Summary Enable (Bit 16), the Transmit
 * Interrupt is enabled. When this bit is reset, the Transmit Interrupt is
 * disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_MSB        0
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : tse
 * 
 * Transmit Stopped Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the
 * Transmission Stopped Interrupt is enabled. When this bit is reset, the
 * Transmission Stopped Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_MSB        1
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : tue
 * 
 * Transmit Buffer Unavailable Enable
 * 
 * When this bit is set with Normal Interrupt Summary Enable (Bit 16), the Transmit
 * Buffer Unavailable Interrupt is enabled. When this bit is reset, the Transmit
 * Buffer Unavailable Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_MSB        2
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : tje
 * 
 * Transmit Jabber Timeout Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the
 * Transmit Jabber Timeout Interrupt is enabled. When this bit is reset, the
 * Transmit Jabber Timeout Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_MSB        3
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : ove
 * 
 * Overflow Interrupt Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the
 * Receive Overflow Interrupt is enabled. When this bit is reset, the Overflow
 * Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_MSB        4
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : une
 * 
 * Underflow Interrupt Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the
 * Transmit Underflow Interrupt is enabled. When this bit is reset, the Underflow
 * Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_MSB        5
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : rie
 * 
 * Receive Interrupt Enable
 * 
 * When this bit is set with Normal Interrupt Summary Enable (Bit 16), the Receive
 * Interrupt is enabled. When this bit is reset, the Receive Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_MSB        6
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : rue
 * 
 * Receive Buffer Unavailable Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the
 * Receive Buffer Unavailable Interrupt is enabled. When this bit is reset, the
 * Receive Buffer Unavailable Interrupt is disabled.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_MSB        7
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : rse
 * 
 * Receive Stopped Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the
 * Receive Stopped Interrupt is enabled. When this bit is reset, the Receive
 * Stopped Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_MSB        8
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : rwe
 * 
 * Receive Watchdog Timeout Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the
 * Receive Watchdog Timeout Interrupt is enabled. When this bit is reset, the
 * Receive Watchdog Timeout Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_MSB        9
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : ete
 * 
 * Early Transmit Interrupt Enable
 * 
 * When this bit is set with an Abnormal Interrupt Summary Enable (Bit 15), the
 * Early Transmit Interrupt is enabled. When this bit is reset, the Early Transmit
 * Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_MSB        10
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : reserved_12_11
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_MSB        12
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_SET_MSK    0x00001800
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_CLR_MSK    0xffffe7ff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_GET(value) (((value) & 0x00001800) >> 11)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11_SET(value) (((value) << 11) & 0x00001800)

/*
 * Field : fbe
 * 
 * Fatal Bus Error Enable
 * 
 * When this bit is set with Abnormal Interrupt Summary Enable (Bit 15), the Fatal
 * Bus Error Interrupt is enabled. When this bit is reset, the Fatal Bus Error
 * Enable Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_MSB        13
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : ere
 * 
 * Early Receive Interrupt Enable
 * 
 * When this bit is set with Normal Interrupt Summary Enable (Bit 16), the Early
 * Receive Interrupt is enabled. When this bit is reset, the Early Receive
 * Interrupt is disabled.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_MSB        14
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : aie
 * 
 * Abnormal Interrupt Summary Enable
 * 
 * When this bit is set, abnormal interrupt summary is enabled. When this bit is
 * reset, the abnormal interrupt summary is disabled. This bit enables the
 * following interrupts in Register 5 (Status Register):
 * 
 * * Register 5[1]: Transmit Process Stopped
 * 
 * * Register 5[3]: Transmit Jabber Timeout
 * 
 * * Register 5[4]: Receive Overflow
 * 
 * * Register 5[5]: Transmit Underflow
 * 
 * * Register 5[7]: Receive Buffer Unavailable
 * 
 * * Register 5[8]: Receive Process Stopped
 * 
 * * Register 5[9]: Receive Watchdog Timeout
 * 
 * * Register 5[10]: Early Transmit Interrupt
 * 
 * * Register 5[13]: Fatal Bus Error
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_MSB        15
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : nie
 * 
 * Normal Interrupt Summary Enable
 * 
 * When this bit is set, normal interrupt summary is enabled. When this bit is
 * reset, normal interrupt summary is disabled. This bit enables the following
 * interrupts in Register 5 (Status Register):
 * 
 * * Register 5[0]: Transmit Interrupt
 * 
 * * Register 5[2]: Transmit Buffer Unavailable
 * 
 * * Register 5[6]: Receive Interrupt
 * 
 * * Register 5[14]: Early Receive Interrupt
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE
 * 
 */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_MSB        16
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : reserved_31_17
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_WIDTH      15
/* The mask used to set the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_SET_MSK    0xfffe0000
/* The mask used to clear the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 register field value. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_CLR_MSK    0x0001ffff
/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 register field. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 field value from a register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_GET(value) (((value) & 0xfffe0000) >> 17)
/* Produces a ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17_SET(value) (((value) << 17) & 0xfffe0000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_INTERRUPT_ENABLE.
 */
struct ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_s
{
    volatile uint32_t        tie            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TIE */
    volatile uint32_t        tse            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TSE */
    volatile uint32_t        tue            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TUE */
    volatile uint32_t        tje            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_TJE */
    volatile uint32_t        ove            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OVE */
    volatile uint32_t        une            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_UNE */
    volatile uint32_t        rie            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RIE */
    volatile uint32_t        rue            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RUE */
    volatile uint32_t        rse            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RSE */
    volatile uint32_t        rwe            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RWE */
    volatile uint32_t        ete            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ETE */
    const volatile uint32_t  reserved_12_11 :  2;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_12_11 */
    volatile uint32_t        fbe            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_FBE */
    volatile uint32_t        ere            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ERE */
    volatile uint32_t        aie            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_AIE */
    volatile uint32_t        nie            :  1;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_NIE */
    const volatile uint32_t  reserved_31_17 : 15;  /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESERVED_31_17 */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_INTERRUPT_ENABLE. */
typedef struct ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_s  ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OFST        0x101c
/* The address of the ALT_EMAC_DMAGRP_INTERRUPT_ENABLE register. */
#define ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_OFST))

/*
 * Register : dmagrp_missed_frame_and_buffer_overflow_counter
 * 
 * <b>Register 8 (Missed Frame and Buffer Overflow Counter Register) </b>
 * 
 * The DMA maintains two counters to track the number of frames missed during
 * reception. This register reports the current value of the counter. The counter
 * is used for diagnostic purposes. Bits[15:0] indicate missed frames because of
 * the host buffer being unavailable. Bits[27:17] indicate missed frames because of
 * buffer overflow conditions (MTL and MAC) and runt frames (good frames of less
 * than 64 bytes) dropped by the MTL.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                                                            
 * :--------|:-------|:------|:------------------------------------------------------------------------
 *  [15:0]  | R      | 0x0   | ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT     
 *  [16]    | R      | 0x0   | ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF     
 *  [27:17] | R      | 0x0   | ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT     
 *  [28]    | R      | 0x0   | ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF     
 *  [31:29] | R      | 0x0   | ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29
 * 
 */
/*
 * Field : misfrmcnt
 * 
 * Missed Frame Counter
 * 
 * This field indicates the number of frames missed by the controller because of
 * the Host Receive Buffer being unavailable. This counter is incremented each time
 * the DMA discards an incoming frame. The counter is cleared when this register is
 * read with mci_be_i[0] at 1'b1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_MSB        15
/* The width in bits of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_WIDTH      16
/* The mask used to set the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_SET_MSK    0x0000ffff
/* The mask used to clear the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_CLR_MSK    0xffff0000
/* The reset value of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT field value from a register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_GET(value) (((value) & 0x0000ffff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT_SET(value) (((value) << 0) & 0x0000ffff)

/*
 * Field : miscntovf
 * 
 * Overflow Bit for Missed Frame Counter
 * 
 * This bit is set every time Missed Frame Counter (Bits[15:0]) overflows, that is,
 * the DMA discards an incoming frame because of the Host Receive Buffer being
 * unavailable with the missed frame counter at maximum value. In such a scenario,
 * the Missed frame counter is reset to all-zeros and this bit indicates that the
 * rollover happened.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_MSB        16
/* The width in bits of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF field value from a register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : ovffrmcnt
 * 
 * Overflow Frame Counter
 * 
 * This field indicates the number of frames missed by the application. This
 * counter is incremented each time the MTL FIFO overflows. The counter is cleared
 * when this register is read with mci_be_i[2] at 1'b1.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_MSB        27
/* The width in bits of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_WIDTH      11
/* The mask used to set the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_SET_MSK    0x0ffe0000
/* The mask used to clear the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_CLR_MSK    0xf001ffff
/* The reset value of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT field value from a register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_GET(value) (((value) & 0x0ffe0000) >> 17)
/* Produces a ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT_SET(value) (((value) << 17) & 0x0ffe0000)

/*
 * Field : ovfcntovf
 * 
 * Overflow Bit for FIFO Overflow Counter
 * 
 * This bit is set every time the Overflow Frame Counter (Bits[27:17]) overflows,
 * that is, the Rx FIFO overflows with the overflow frame counter at maximum value.
 * In such a scenario, the overflow frame counter is reset to all-zeros and this
 * bit indicates that the rollover happened.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_MSB        28
/* The width in bits of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_SET_MSK    0x10000000
/* The mask used to clear the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_CLR_MSK    0xefffffff
/* The reset value of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF field value from a register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_GET(value) (((value) & 0x10000000) >> 28)
/* Produces a ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF_SET(value) (((value) << 28) & 0x10000000)

/*
 * Field : reserved_31_29
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_LSB        29
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_WIDTH      3
/* The mask used to set the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_SET_MSK    0xe0000000
/* The mask used to clear the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 register field value. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_CLR_MSK    0x1fffffff
/* The reset value of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 register field. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 field value from a register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_GET(value) (((value) & 0xe0000000) >> 29)
/* Produces a ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29_SET(value) (((value) << 29) & 0xe0000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER.
 */
struct ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_s
{
    const volatile uint32_t  misfrmcnt      : 16;  /* ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT */
    const volatile uint32_t  miscntovf      :  1;  /* ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF */
    const volatile uint32_t  ovffrmcnt      : 11;  /* ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT */
    const volatile uint32_t  ovfcntovf      :  1;  /* ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF */
    const volatile uint32_t  reserved_31_29 :  3;  /* ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESERVED_31_29 */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER. */
typedef struct ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_s  ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OFST        0x1020
/* The address of the ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER register. */
#define ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OFST))

/*
 * Register : dmagrp_receive_interrupt_watchdog_timer
 * 
 * <b> Register 9 (Receive Interrupt Watchdog Timer Register) </b>
 * 
 * This register, when written with non-zero value, enables the watchdog timer for
 * the Receive Interrupt (Bit 6) of Register 5 (Status Register)
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                   
 * :-------|:-------|:------|:---------------------------------------------------------------
 *  [7:0]  | RW     | 0x0   | ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT         
 *  [31:8] | R      | 0x0   | ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8
 * 
 */
/*
 * Field : riwt
 * 
 * RI Watchdog Timer Count
 * 
 * This bit indicates the number of system clock cycles multiplied by 256 for which
 * the watchdog timer is set. The watchdog timer gets triggered with the programmed
 * value after the Rx DMA completes the transfer of a frame for which the RI status
 * bit is not set because of the setting in the corresponding descriptor RDES1[31].
 * When the watchdog timer runs out, the RI bit is set and the timer is stopped.
 * The watchdog timer is reset when the RI bit is set high because of automatic
 * setting of RI as per RDES1[31] of any received frame.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_MSB        7
/* The width in bits of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_WIDTH      8
/* The mask used to set the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_SET_MSK    0x000000ff
/* The mask used to clear the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_CLR_MSK    0xffffff00
/* The reset value of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT field value from a register. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_GET(value) (((value) & 0x000000ff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT_SET(value) (((value) << 0) & 0x000000ff)

/*
 * Field : reserved_31_8
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_WIDTH      24
/* The mask used to set the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_SET_MSK    0xffffff00
/* The mask used to clear the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 register field value. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_CLR_MSK    0x000000ff
/* The reset value of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 register field. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 field value from a register. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_GET(value) (((value) & 0xffffff00) >> 8)
/* Produces a ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8_SET(value) (((value) << 8) & 0xffffff00)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER.
 */
struct ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_s
{
    volatile uint32_t        riwt          :  8;  /* ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT */
    const volatile uint32_t  reserved_31_8 : 24;  /* ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESERVED_31_8 */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER. */
typedef struct ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_s  ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER register. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_OFST        0x1024
/* The address of the ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER register. */
#define ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_OFST))

/*
 * Register : Register 10 (AXI Bus Mode Register) - dmagrp_axi_bus_mode
 * 
 * The AXI Bus Mode Register controls the behavior of the AXI master. It is mainly
 * used to control the burst splitting and the number of outstanding requests.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                               
 * :--------|:-------|:------|:-------------------------------------------
 *  [0]     | R      | 0x1   | AXI Undefined Burst Length                
 *  [1]     | RW     | 0x0   | AXI Burst Length 4                        
 *  [2]     | RW     | 0x0   | AXI Burst Length 8                        
 *  [3]     | RW     | 0x0   | AXI Burst Length 16                       
 *  [11:4]  | ???    | 0x0   | *UNDEFINED*                               
 *  [12]    | R      | 0x0   | Address-Aligned Beats                     
 *  [13]    | RW     | 0x0   | ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE      
 *  [15:14] | ???    | 0x0   | *UNDEFINED*                               
 *  [19:16] | RW     | 0x1   | AXI Maximum Read OutStanding Request Limit
 *  [23:20] | RW     | 0x1   | ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT   
 *  [29:24] | ???    | 0x0   | *UNDEFINED*                               
 *  [30]    | RW     | 0x0   | ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM  
 *  [31]    | RW     | 0x0   | Enable Low Power Interface (LPI)          
 * 
 */
/*
 * Field : AXI Undefined Burst Length - undefined
 * 
 * This bit is read-only bit and indicates the complement (invert) value of Bit 16
 * (FB) in Register 0 (Bus Mode Register[16]).
 * 
 * * When this bit is set to 1, the GMAC-AXI is allowed to perform any burst length
 *   equal to or below the maximum allowed burst length programmed in Bits[7:1].
 * 
 * * When this bit is set to 0, the GMAC-AXI is allowed to perform only fixed burst
 *   lengths as indicated by BLEN16, BLEN8, or BLEN4, or a burst length of 1.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                              | Value | Description
 * :--------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_MSB        0
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_UNDEFINED_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : AXI Burst Length 4 - blen4
 * 
 * When this bit is set to 1, the GMAC-AXI is allowed to select a burst length of 4
 * on the AXI Master interface.
 * 
 * Setting this bit has no effect when UNDEFINED is set to 1.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_MSB        1
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN4_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : AXI Burst Length 8 - blen8
 * 
 * When this bit is set to 1, the GMAC-AXI is allowed to select a burst length of 8
 * on the AXI Master interface.
 * 
 * Setting this bit has no effect when UNDEFINED is set to 1.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_MSB        2
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN8_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : AXI Burst Length 16 - blen16
 * 
 * When this bit is set to 1 or UNDEFINED is set to 1, the GMAC-AXI is allowed to
 * select a burst length of 16 on the AXI Master interface.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_MSB        3
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_BLEN16_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : Address-Aligned Beats - axi_aal
 * 
 * This bit is read-only bit and reflects the Bit 25 (AAL) of Register 0 (Bus Mode
 * Register).
 * 
 * When this bit is set to 1, the GMAC-AXI performs address-aligned burst transfers
 * on both read and write channels.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_MSB        12
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_AXI_AAL_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : onekbbe
 * 
 * 1 KB Boundary Crossing Enable for the GMAC-AXI Master
 * 
 * When set, the GMAC-AXI Master performs burst transfers that do not cross 1 KB
 * boundary. When reset, the GMAC-AXI Master performs burst transfers that do not
 * cross 4 KB boundary.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                   | Value | Description
 * :-------------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_E_FOUR_K_BOUNDARY | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_E_ONE_K_BOUNDARY  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_E_FOUR_K_BOUNDARY  0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_E_ONE_K_BOUNDARY   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_MSB        13
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : AXI Maximum Read OutStanding Request Limit - rd_osr_lmt
 * 
 * This value limits the maximum outstanding request on the AXI read interface.
 * 
 * Maximum outstanding requests = RD_OSR_LMT+1
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_MSB        19
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_WIDTH      4
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_SET_MSK    0x000f0000
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_CLR_MSK    0xfff0ffff
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_GET(value) (((value) & 0x000f0000) >> 16)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RD_OSR_LMT_SET(value) (((value) << 16) & 0x000f0000)

/*
 * Field : wr_osr_lmt
 * 
 * AXI Maximum Write OutStanding Request Limit
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_MSB        23
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_WIDTH      4
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_SET_MSK    0x00f00000
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_CLR_MSK    0xff0fffff
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_GET(value) (((value) & 0x00f00000) >> 20)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT_SET(value) (((value) << 20) & 0x00f00000)

/*
 * Field : lpi_xit_frm
 * 
 * When set to 1, this bit enables the GMAC-AXI to come out of the LPI mode only
 * when the Magic Packet or Remote Wake Up Packet is received.
 * 
 * When set to 0, this bit enables the GMAC-AXI to come out of LPI mode when any
 * frame is received.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                                | Value | Description
 * :----------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_LSB        30
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_MSB        30
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_SET_MSK    0x40000000
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_CLR_MSK    0xbfffffff
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_GET(value) (((value) & 0x40000000) >> 30)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM_SET(value) (((value) << 30) & 0x40000000)

/*
 * Field : Enable Low Power Interface (LPI) - en_lpi
 * 
 * When set to 1, this bit enables the LPI mode supported by the AXI master and
 * accepts the LPI request from the AXI System Clock controller.
 * 
 * When set to 0, this bit disables the LPI mode and always denies the LPI request
 * from the AXI System Clock controller.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI
 * 
 */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI register field value. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI register field. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI field value from a register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_EN_LPI_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_AXI_BUS_MODE.
 */
struct ALT_EMAC_DMAGRP_AXI_BUS_MODE_s
{
    const volatile uint32_t  undefined   :  1;  /* AXI Undefined Burst Length */
    volatile uint32_t        blen4       :  1;  /* AXI Burst Length 4 */
    volatile uint32_t        blen8       :  1;  /* AXI Burst Length 8 */
    volatile uint32_t        blen16      :  1;  /* AXI Burst Length 16 */
    uint32_t                             :  8;  /* *UNDEFINED* */
    const volatile uint32_t  axi_aal     :  1;  /* Address-Aligned Beats */
    volatile uint32_t        onekbbe     :  1;  /* ALT_EMAC_DMAGRP_AXI_BUS_MODE_ONEKBBE */
    uint32_t                             :  2;  /* *UNDEFINED* */
    volatile uint32_t        rd_osr_lmt  :  4;  /* AXI Maximum Read OutStanding Request Limit */
    volatile uint32_t        wr_osr_lmt  :  4;  /* ALT_EMAC_DMAGRP_AXI_BUS_MODE_WR_OSR_LMT */
    uint32_t                             :  6;  /* *UNDEFINED* */
    volatile uint32_t        lpi_xit_frm :  1;  /* ALT_EMAC_DMAGRP_AXI_BUS_MODE_LPI_XIT_FRM */
    volatile uint32_t        en_lpi      :  1;  /* Enable Low Power Interface (LPI) */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_AXI_BUS_MODE. */
typedef struct ALT_EMAC_DMAGRP_AXI_BUS_MODE_s  ALT_EMAC_DMAGRP_AXI_BUS_MODE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_AXI_BUS_MODE register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_RESET       0x00110001
/* The byte offset of the ALT_EMAC_DMAGRP_AXI_BUS_MODE register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_OFST        0x1028
/* The address of the ALT_EMAC_DMAGRP_AXI_BUS_MODE register. */
#define ALT_EMAC_DMAGRP_AXI_BUS_MODE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_AXI_BUS_MODE_OFST))

/*
 * Register : dmagrp_ahb_or_axi_status
 * 
 * <b> Register 11 (AHB or AXI Status Register) </b>
 * 
 * This register provides the active status of the AHB master interface or AXI
 * interface's read and write channels. This register is present and valid only in
 * the GMAC-AHB and GMAC-AXI configurations. This register is useful for debugging
 * purposes. In addition, this register is valid only in the Channel 0 DMA when
 * multiple channels are present in the AV mode.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                    
 * :-------|:-------|:------|:------------------------------------------------
 *  [0]    | R      | 0x0   | ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS      
 *  [1]    | R      | 0x0   | ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS     
 *  [31:2] | R      | 0x0   | ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2
 * 
 */
/*
 * Field : axwhsts
 * 
 * AXI Master Write Channel or AHB Master Status
 * 
 * When high, it indicates that AXI Master's write channel is active and
 * transferring data in the GMAC-AXI configuration. In the GMAC-AHB configuration,
 * it indicates that the AHB master interface FSMs are in the non-idle state.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_MSB        0
/* The width in bits of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS register field value. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS register field value. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS field value from a register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : axirdsts
 * 
 * AXI Master Read Channel Status
 * 
 * When high, it indicates that AXI Master's read channel is active and
 * transferring data.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_MSB        1
/* The width in bits of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS register field value. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS register field value. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS field value from a register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : reserved_31_2
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_WIDTH      30
/* The mask used to set the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 register field value. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_SET_MSK    0xfffffffc
/* The mask used to clear the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 register field value. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_CLR_MSK    0x00000003
/* The reset value of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 register field. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 field value from a register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_GET(value) (((value) & 0xfffffffc) >> 2)
/* Produces a ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2_SET(value) (((value) << 2) & 0xfffffffc)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS.
 */
struct ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_s
{
    const volatile uint32_t  axwhsts       :  1;  /* ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXWHSTS */
    const volatile uint32_t  axirdsts      :  1;  /* ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_AXIRDSTS */
    const volatile uint32_t  reserved_31_2 : 30;  /* ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESERVED_31_2 */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS. */
typedef struct ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_s  ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_OFST        0x102c
/* The address of the ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS register. */
#define ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_OFST))

/*
 * Register : dmagrp_current_host_transmit_descriptor
 * 
 * <b> Register 18 (Current Host Transmit Descriptor Register) </b>
 * 
 * The Current Host Transmit Descriptor register points to the start address of the
 * current Transmit Descriptor read by the DMA.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                 
 * :-------|:-------|:------|:-------------------------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR
 * 
 */
/*
 * Field : curtdesaptr
 * 
 * Host Transmit Descriptor Address Pointer
 * 
 * Cleared on Reset. Pointer updated by the DMA during operation.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_WIDTH      32
/* The mask used to set the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR field value from a register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR.
 */
struct ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_s
{
    const volatile uint32_t  curtdesaptr : 32;  /* ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR. */
typedef struct ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_s  ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_OFST        0x1048
/* The address of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_OFST))

/*
 * Register : dmagrp_current_host_receive_descriptor
 * 
 * <b> Register 19 (Current Host Receive Descriptor Register) </b>
 * 
 * The Current Host Receive Descriptor register points to the start address of the
 * current Receive Descriptor read by the DMA.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                
 * :-------|:-------|:------|:------------------------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR
 * 
 */
/*
 * Field : currdesaptr
 * 
 * Host Receive Descriptor Address Pointer
 * 
 * Cleared on Reset. Pointer updated by the DMA during operation.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_WIDTH      32
/* The mask used to set the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR field value from a register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR.
 */
struct ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_s
{
    const volatile uint32_t  currdesaptr : 32;  /* ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR. */
typedef struct ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_s  ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_OFST        0x104c
/* The address of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_OFST))

/*
 * Register : dmagrp_current_host_transmit_buffer_address
 * 
 * <b> Register 20 (Current Host Transmit Buffer Address Register) </b>
 * 
 * The Current Host Transmit Buffer Address register points to the current Transmit
 * Buffer Address being read by the DMA.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                     
 * :-------|:-------|:------|:-----------------------------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR
 * 
 */
/*
 * Field : curtbufaptr
 * 
 * Host Transmit Buffer Address Pointer
 * 
 * Cleared on Reset. Pointer updated by the DMA during operation.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_WIDTH      32
/* The mask used to set the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR field value from a register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS.
 */
struct ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_s
{
    const volatile uint32_t  curtbufaptr : 32;  /* ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS. */
typedef struct ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_s  ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_OFST        0x1050
/* The address of the ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_OFST))

/*
 * Register : dmagrp_current_host_receive_buffer_address
 * 
 * <b> Register 21 (Current Host Receive Buffer Address Register) </b>
 * 
 * The Current Host Receive Buffer Address register points to the current Receive
 * Buffer address being read by the DMA.
 * 
 * Register Layout
 * 
 *  Bits   | Access | Reset | Description                                                    
 * :-------|:-------|:------|:----------------------------------------------------------------
 *  [31:0] | R      | 0x0   | ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR
 * 
 */
/*
 * Field : currbufaptr
 * 
 * Host Receive Buffer Address Pointer
 * 
 * Cleared on Reset. Pointer updated by the DMA during operation.
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_WIDTH      32
/* The mask used to set the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_SET_MSK    0xffffffff
/* The mask used to clear the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR register field value. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_CLR_MSK    0x00000000
/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR register field. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR field value from a register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_GET(value) (((value) & 0xffffffff) >> 0)
/* Produces a ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR_SET(value) (((value) << 0) & 0xffffffff)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS.
 */
struct ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_s
{
    const volatile uint32_t  currbufaptr : 32;  /* ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS. */
typedef struct ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_s  ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_RESET       0x00000000
/* The byte offset of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_OFST        0x1054
/* The address of the ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS register. */
#define ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_OFST))

/*
 * Register : dmagrp_hw_feature
 * 
 * <b> Register 22 (HW Feature Register) </b>
 * 
 * This register indicates the presence of the optional features or functions of
 * the DWC_gmac. The software driver can use this register to dynamically enable or
 * disable the programs related to the optional blocks.
 * 
 * Note: All bits are set or reset as per the selection of features during the
 * DWC_gmac configuration.
 * 
 * Register Layout
 * 
 *  Bits    | Access | Reset | Description                            
 * :--------|:-------|:------|:----------------------------------------
 *  [0]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL      
 *  [1]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL     
 *  [2]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL       
 *  [3]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN   
 *  [4]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL     
 *  [5]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL
 *  [6]     | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL      
 *  [7]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN  
 *  [8]     | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL      
 *  [9]     | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL      
 *  [10]    | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL      
 *  [11]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL      
 *  [12]    | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL   
 *  [13]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL   
 *  [14]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL      
 *  [15]    | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL       
 *  [16]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL     
 *  [17]    | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE   
 *  [18]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE   
 *  [19]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE  
 *  [21:20] | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT     
 *  [23:22] | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT     
 *  [24]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL   
 *  [25]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN     
 *  [26]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN  
 *  [27]    | R      | 0x1   | ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS   
 *  [30:28] | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF    
 *  [31]    | R      | 0x0   | ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 
 * 
 */
/*
 * Field : miisel
 * 
 * 10 or 100 Mbps support
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_LSB        0
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_MSB        0
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_SET_MSK    0x00000001
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_CLR_MSK    0xfffffffe
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_GET(value) (((value) & 0x00000001) >> 0)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL_SET(value) (((value) << 0) & 0x00000001)

/*
 * Field : gmiisel
 * 
 * 1000 Mbps support
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_LSB        1
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_MSB        1
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_SET_MSK    0x00000002
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_CLR_MSK    0xfffffffd
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_GET(value) (((value) & 0x00000002) >> 1)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL_SET(value) (((value) << 1) & 0x00000002)

/*
 * Field : hdsel
 * 
 * Half-Duplex support
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_LSB        2
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_MSB        2
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_SET_MSK    0x00000004
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_CLR_MSK    0xfffffffb
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_GET(value) (((value) & 0x00000004) >> 2)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL_SET(value) (((value) << 2) & 0x00000004)

/*
 * Field : exthashen
 * 
 * Expanded DA Hash Filter
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_LSB        3
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_MSB        3
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_SET_MSK    0x00000008
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_CLR_MSK    0xfffffff7
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_GET(value) (((value) & 0x00000008) >> 3)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN_SET(value) (((value) << 3) & 0x00000008)

/*
 * Field : hashsel
 * 
 * HASH Filter
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_LSB        4
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_MSB        4
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_SET_MSK    0x00000010
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_CLR_MSK    0xffffffef
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_GET(value) (((value) & 0x00000010) >> 4)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL_SET(value) (((value) << 4) & 0x00000010)

/*
 * Field : addmacadrsel
 * 
 * Multiple MAC Address Registers
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                               | Value | Description
 * :---------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_E_DISABLED  0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_E_ENABLED   0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_LSB        5
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_MSB        5
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_SET_MSK    0x00000020
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_CLR_MSK    0xffffffdf
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_GET(value) (((value) & 0x00000020) >> 5)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL_SET(value) (((value) << 5) & 0x00000020)

/*
 * Field : pcssel
 * 
 * PCS registers (TBI, SGMII, or RTBI PHY interface)
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_LSB        6
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_MSB        6
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_SET_MSK    0x00000040
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_CLR_MSK    0xffffffbf
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_GET(value) (((value) & 0x00000040) >> 6)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL_SET(value) (((value) << 6) & 0x00000040)

/*
 * Field : l3l4fltren
 * 
 * Layer 3 and Layer 4 Filter Feature
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_LSB        7
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_MSB        7
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_SET_MSK    0x00000080
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_CLR_MSK    0xffffff7f
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_GET(value) (((value) & 0x00000080) >> 7)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN_SET(value) (((value) << 7) & 0x00000080)

/*
 * Field : smasel
 * 
 * SMA (MDIO) Interface
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_LSB        8
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_MSB        8
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_SET_MSK    0x00000100
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_CLR_MSK    0xfffffeff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_GET(value) (((value) & 0x00000100) >> 8)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL_SET(value) (((value) << 8) & 0x00000100)

/*
 * Field : rwksel
 * 
 * PMT Remote Wakeup
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_LSB        9
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_MSB        9
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_SET_MSK    0x00000200
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_CLR_MSK    0xfffffdff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_GET(value) (((value) & 0x00000200) >> 9)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL_SET(value) (((value) << 9) & 0x00000200)

/*
 * Field : mgksel
 * 
 * PMT Magic Packet
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_LSB        10
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_MSB        10
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_SET_MSK    0x00000400
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_CLR_MSK    0xfffffbff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_GET(value) (((value) & 0x00000400) >> 10)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL_SET(value) (((value) << 10) & 0x00000400)

/*
 * Field : mmcsel
 * 
 * RMON Module
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_LSB        11
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_MSB        11
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_SET_MSK    0x00000800
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_CLR_MSK    0xfffff7ff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_GET(value) (((value) & 0x00000800) >> 11)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL_SET(value) (((value) << 11) & 0x00000800)

/*
 * Field : tsver1sel
 * 
 * Only IEEE 1588-2002 Timestamp
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_LSB        12
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_MSB        12
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_SET_MSK    0x00001000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_CLR_MSK    0xffffefff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_GET(value) (((value) & 0x00001000) >> 12)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL_SET(value) (((value) << 12) & 0x00001000)

/*
 * Field : tsver2sel
 * 
 * IEEE 1588-2008 Advanced Timestamp
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_LSB        13
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_MSB        13
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_SET_MSK    0x00002000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_CLR_MSK    0xffffdfff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_GET(value) (((value) & 0x00002000) >> 13)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL_SET(value) (((value) << 13) & 0x00002000)

/*
 * Field : eeesel
 * 
 * Energy Efficient Ethernet
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                         | Value | Description
 * :---------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_LSB        14
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_MSB        14
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_SET_MSK    0x00004000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_CLR_MSK    0xffffbfff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_GET(value) (((value) & 0x00004000) >> 14)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL_SET(value) (((value) << 14) & 0x00004000)

/*
 * Field : avsel
 * 
 * AV Feature
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                        | Value | Description
 * :--------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_LSB        15
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_MSB        15
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_SET_MSK    0x00008000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_CLR_MSK    0xffff7fff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_GET(value) (((value) & 0x00008000) >> 15)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL_SET(value) (((value) << 15) & 0x00008000)

/*
 * Field : txoesel
 * 
 * Checksum Offload in Tx
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_LSB        16
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_MSB        16
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_SET_MSK    0x00010000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_CLR_MSK    0xfffeffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_GET(value) (((value) & 0x00010000) >> 16)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL_SET(value) (((value) << 16) & 0x00010000)

/*
 * Field : rxtyp1coe
 * 
 * IP Checksum Offload (Type 1) in Rx
 * 
 * Note: If IPCHKSUM_EN = Enabled and IPC_FULL_OFFLOAD = Enabled, then RXTYP1COE =
 * 0 and RXTYP2COE =1.
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_LSB        17
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_MSB        17
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_SET_MSK    0x00020000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_CLR_MSK    0xfffdffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_GET(value) (((value) & 0x00020000) >> 17)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE_SET(value) (((value) << 17) & 0x00020000)

/*
 * Field : rxtyp2coe
 * 
 * IP Checksum Offload (Type 2) in Rx
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_LSB        18
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_MSB        18
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_SET_MSK    0x00040000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_CLR_MSK    0xfffbffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_GET(value) (((value) & 0x00040000) >> 18)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE_SET(value) (((value) << 18) & 0x00040000)

/*
 * Field : rxfifosize
 * 
 * Rx FIFO > 2,048 Bytes
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                             | Value | Description
 * :-------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_E_DISABLED    0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_E_ENABLED     0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_LSB        19
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_MSB        19
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_SET_MSK    0x00080000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_CLR_MSK    0xfff7ffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_GET(value) (((value) & 0x00080000) >> 19)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE_SET(value) (((value) << 19) & 0x00080000)

/*
 * Field : rxchcnt
 * 
 * Number of additional Rx channels
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_LSB        20
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_MSB        21
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_SET_MSK    0x00300000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_CLR_MSK    0xffcfffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_GET(value) (((value) & 0x00300000) >> 20)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT_SET(value) (((value) << 20) & 0x00300000)

/*
 * Field : txchcnt
 * 
 * Number of additional Tx channels
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                          | Value | Description
 * :----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_E_DISABLED   0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_E_ENABLED    0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_LSB        22
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_MSB        23
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_WIDTH      2
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_SET_MSK    0x00c00000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_CLR_MSK    0xff3fffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_GET(value) (((value) & 0x00c00000) >> 22)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT_SET(value) (((value) << 22) & 0x00c00000)

/*
 * Field : enhdessel
 * 
 * Alternate (Enhanced Descriptor)
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                            | Value | Description
 * :------------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_E_DISABLED | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_E_ENABLED  | 0x1   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_E_DISABLED 0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_E_ENABLED  0x1

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_LSB        24
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_MSB        24
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_SET_MSK    0x01000000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_CLR_MSK    0xfeffffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_GET(value) (((value) & 0x01000000) >> 24)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL_SET(value) (((value) << 24) & 0x01000000)

/*
 * Field : INTTSEN
 * 
 * Timestamping with Internal System Time
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_LSB        25
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_MSB        25
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_SET_MSK    0x02000000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_CLR_MSK    0xfdffffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_GET(value) (((value) & 0x02000000) >> 25)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN_SET(value) (((value) << 25) & 0x02000000)

/*
 * Field : FLEXIPPSEN
 * 
 * Flexible Pulse-Per-Second Output
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_LSB        26
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_MSB        26
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_SET_MSK    0x04000000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_CLR_MSK    0xfbffffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_GET(value) (((value) & 0x04000000) >> 26)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN_SET(value) (((value) << 26) & 0x04000000)

/*
 * Field : SAVLANINS
 * 
 * Source Address or VLAN Insertion
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_LSB        27
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_MSB        27
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_SET_MSK    0x08000000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_CLR_MSK    0xf7ffffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_RESET      0x1
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_GET(value) (((value) & 0x08000000) >> 27)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS_SET(value) (((value) << 27) & 0x08000000)

/*
 * Field : actphyif
 * 
 * Active or Selected PHY interface
 * 
 * When you have multiple PHY interfaces in your configuration, this field
 * indicates the sampled value of phy_intf_sel_i during reset de-assertion
 * 
 * * 0000: GMII or MII
 * 
 * * 0001: RGMII
 * 
 * * 0010: SGMII
 * 
 * * 0011: TBI
 * 
 * * 0100: RMII
 * 
 * * 0101: RTBI
 * 
 * * 0110: SMII
 * 
 * * 0111: RevMII
 * 
 * * All Others: Reserved
 * 
 * Field Enumeration Values:
 * 
 *  Enum                                           | Value | Description
 * :-----------------------------------------------|:------|:------------
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_GMIIMII0 | 0x0   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_RGMII1   | 0x1   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_SGMII2   | 0x2   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_TBI3     | 0x3   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_RMII4    | 0x4   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_RTBI5    | 0x5   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_SMII6    | 0x6   |            
 *  ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_REVMII7  | 0x7   |            
 * 
 * Field Access Macros:
 * 
 */
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_GMIIMII0  0x0
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_RGMII1    0x1
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_SGMII2    0x2
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_TBI3      0x3
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_RMII4     0x4
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_RTBI5     0x5
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_SMII6     0x6
/*
 * Enumerated value for register field ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF
 * 
 */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_E_REVMII7   0x7

/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_LSB        28
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_MSB        30
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_WIDTH      3
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_SET_MSK    0x70000000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_CLR_MSK    0x8fffffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_GET(value) (((value) & 0x70000000) >> 28)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF_SET(value) (((value) << 28) & 0x70000000)

/*
 * Field : reserved_31
 * 
 * Reserved
 * 
 * Field Access Macros:
 * 
 */
/* The Least Significant Bit (LSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_LSB        31
/* The Most Significant Bit (MSB) position of the ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_MSB        31
/* The width in bits of the ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_WIDTH      1
/* The mask used to set the ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_SET_MSK    0x80000000
/* The mask used to clear the ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 register field value. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_CLR_MSK    0x7fffffff
/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 register field. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_RESET      0x0
/* Extracts the ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 field value from a register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_GET(value) (((value) & 0x80000000) >> 31)
/* Produces a ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 register field value suitable for setting the register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31_SET(value) (((value) << 31) & 0x80000000)

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register ALT_EMAC_DMAGRP_HW_FEATURE.
 */
struct ALT_EMAC_DMAGRP_HW_FEATURE_s
{
    const volatile uint32_t  miisel       :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_MIISEL */
    const volatile uint32_t  gmiisel      :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_GMIISEL */
    const volatile uint32_t  hdsel        :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_HDSEL */
    const volatile uint32_t  exthashen    :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_EXTHASHEN */
    const volatile uint32_t  hashsel      :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_HASHSEL */
    const volatile uint32_t  addmacadrsel :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_ADDMACADRSEL */
    const volatile uint32_t  pcssel       :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_PCSSEL */
    const volatile uint32_t  l3l4fltren   :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_L3L4FLTREN */
    const volatile uint32_t  smasel       :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_SMASEL */
    const volatile uint32_t  rwksel       :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_RWKSEL */
    const volatile uint32_t  mgksel       :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_MGKSEL */
    const volatile uint32_t  mmcsel       :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_MMCSEL */
    const volatile uint32_t  tsver1sel    :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_TSVER1SEL */
    const volatile uint32_t  tsver2sel    :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_TSVER2SEL */
    const volatile uint32_t  eeesel       :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_EEESEL */
    const volatile uint32_t  avsel        :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_AVSEL */
    const volatile uint32_t  txoesel      :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_TXOESEL */
    const volatile uint32_t  rxtyp1coe    :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP1COE */
    const volatile uint32_t  rxtyp2coe    :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_RXTYP2COE */
    const volatile uint32_t  rxfifosize   :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_RXFIFOSIZE */
    const volatile uint32_t  rxchcnt      :  2;  /* ALT_EMAC_DMAGRP_HW_FEATURE_RXCHCNT */
    const volatile uint32_t  txchcnt      :  2;  /* ALT_EMAC_DMAGRP_HW_FEATURE_TXCHCNT */
    const volatile uint32_t  enhdessel    :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_ENHDESSEL */
    const volatile uint32_t  INTTSEN      :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_INTTSEN */
    const volatile uint32_t  FLEXIPPSEN   :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_FLEXIPPSEN */
    const volatile uint32_t  SAVLANINS    :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_SAVLANINS */
    const volatile uint32_t  actphyif     :  3;  /* ALT_EMAC_DMAGRP_HW_FEATURE_ACTPHYIF */
    const volatile uint32_t  reserved_31  :  1;  /* ALT_EMAC_DMAGRP_HW_FEATURE_RESERVED_31 */
};

/* The typedef declaration for register ALT_EMAC_DMAGRP_HW_FEATURE. */
typedef struct ALT_EMAC_DMAGRP_HW_FEATURE_s  ALT_EMAC_DMAGRP_HW_FEATURE_t;
#endif  /* __ASSEMBLY__ */

/* The reset value of the ALT_EMAC_DMAGRP_HW_FEATURE register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_RESET       0x0f0d69bf
/* The byte offset of the ALT_EMAC_DMAGRP_HW_FEATURE register from the beginning of the component. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_OFST        0x1058
/* The address of the ALT_EMAC_DMAGRP_HW_FEATURE register. */
#define ALT_EMAC_DMAGRP_HW_FEATURE_ADDR(base)  ALT_CAST(void *, (ALT_CAST(char *, (base)) + ALT_EMAC_DMAGRP_HW_FEATURE_OFST))

#ifndef __ASSEMBLY__
/*
 * WARNING: The C register and register group struct declarations are provided for
 * convenience and illustrative purposes. They should, however, be used with
 * caution as the C language standard provides no guarantees about the alignment or
 * atomicity of device memory accesses. The recommended practice for coding device
 * drivers is to use the SoCAL access macros in conjunction with alt_read_word()
 * and alt_write_word() functions for 32 bit registers and alt_read_dword() and
 * alt_write_dword() functions for 64 bit registers.
 * 
 * The struct declaration for register group ALT_EMAC.
 */
struct ALT_EMAC_s
{
    volatile ALT_EMAC_GMACGRP_MAC_CONFIGURATION_t                        gmacgrp_mac_configuration;                        /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION */
    volatile ALT_EMAC_GMACGRP_MAC_FRAME_FILTER_t                         gmacgrp_mac_frame_filter;                         /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER */
    volatile uint32_t                                                    _pad_0x8_0xf[2];                                  /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_GMII_ADDRESS_t                             gmacgrp_gmii_address;                             /* ALT_EMAC_GMACGRP_GMII_ADDRESS */
    volatile ALT_EMAC_GMACGRP_GMII_DATA_t                                gmacgrp_gmii_data;                                /* ALT_EMAC_GMACGRP_GMII_DATA */
    volatile ALT_EMAC_GMACGRP_FLOW_CONTROL_t                             gmacgrp_flow_control;                             /* ALT_EMAC_GMACGRP_FLOW_CONTROL */
    volatile ALT_EMAC_GMACGRP_VLAN_TAG_t                                 gmacgrp_vlan_tag;                                 /* ALT_EMAC_GMACGRP_VLAN_TAG */
    volatile ALT_EMAC_GMACGRP_VERSION_t                                  gmacgrp_version;                                  /* ALT_EMAC_GMACGRP_VERSION */
    volatile ALT_EMAC_GMACGRP_DEBUG_t                                    gmacgrp_debug;                                    /* ALT_EMAC_GMACGRP_DEBUG */
    volatile uint32_t                                                    _pad_0x28_0x2f[2];                                /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS_t                       gmacgrp_lpi_control_status;                       /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS */
    volatile ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL_t                       gmacgrp_lpi_timers_control;                       /* ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL */
    volatile ALT_EMAC_GMACGRP_INTERRUPT_STATUS_t                         gmacgrp_interrupt_status;                         /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS */
    volatile ALT_EMAC_GMACGRP_INTERRUPT_MASK_t                           gmacgrp_interrupt_mask;                           /* ALT_EMAC_GMACGRP_INTERRUPT_MASK */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH_t                        gmacgrp_mac_address0_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW_t                         gmacgrp_mac_address0_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH_t                        gmacgrp_mac_address1_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW_t                         gmacgrp_mac_address1_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH_t                        gmacgrp_mac_address2_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW_t                         gmacgrp_mac_address2_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH_t                        gmacgrp_mac_address3_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW_t                         gmacgrp_mac_address3_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH_t                        gmacgrp_mac_address4_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW_t                         gmacgrp_mac_address4_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH_t                        gmacgrp_mac_address5_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW_t                         gmacgrp_mac_address5_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH_t                        gmacgrp_mac_address6_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW_t                         gmacgrp_mac_address6_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH_t                        gmacgrp_mac_address7_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW_t                         gmacgrp_mac_address7_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH_t                        gmacgrp_mac_address8_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW_t                         gmacgrp_mac_address8_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH_t                        gmacgrp_mac_address9_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW_t                         gmacgrp_mac_address9_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH_t                       gmacgrp_mac_address10_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW_t                        gmacgrp_mac_address10_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH_t                       gmacgrp_mac_address11_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW_t                        gmacgrp_mac_address11_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH_t                       gmacgrp_mac_address12_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW_t                        gmacgrp_mac_address12_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH_t                       gmacgrp_mac_address13_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW_t                        gmacgrp_mac_address13_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH_t                       gmacgrp_mac_address14_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW_t                        gmacgrp_mac_address14_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH_t                       gmacgrp_mac_address15_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW_t                        gmacgrp_mac_address15_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW */
    volatile uint32_t                                                    _pad_0xc0_0xd7[6];                                /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS_t          gmacgrp_sgmii_rgmii_smii_control_status;          /* ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS */
    volatile ALT_EMAC_GMACGRP_WDOG_TIMEOUT_t                             gmacgrp_wdog_timeout;                             /* ALT_EMAC_GMACGRP_WDOG_TIMEOUT */
    volatile ALT_EMAC_GMACGRP_GENPIO_t                                   gmacgrp_genpio;                                   /* ALT_EMAC_GMACGRP_GENPIO */
    volatile uint32_t                                                    _pad_0xe4_0xff[7];                                /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_MMC_CONTROL_t                              gmacgrp_mmc_control;                              /* ALT_EMAC_GMACGRP_MMC_CONTROL */
    volatile ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_t                    gmacgrp_mmc_receive_interrupt;                    /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT */
    volatile ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_t                   gmacgrp_mmc_transmit_interrupt;                   /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT */
    volatile ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK_t               gmacgrp_mmc_receive_interrupt_mask;               /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK */
    volatile ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK_t              gmacgrp_mmc_transmit_interrupt_mask;              /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK */
    volatile ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB_t                          gmacgrp_txoctetcount_gb;                          /* ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB */
    volatile ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB_t                          gmacgrp_txframecount_gb;                          /* ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB */
    volatile ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G_t                      gmacgrp_txbroadcastframes_g;                      /* ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G */
    volatile ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G_t                      gmacgrp_txmulticastframes_g;                      /* ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G */
    volatile ALT_EMAC_GMACGRP_TX64OCTETS_GB_t                            gmacgrp_tx64octets_gb;                            /* ALT_EMAC_GMACGRP_TX64OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB_t                       gmacgrp_tx65to127octets_gb;                       /* ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB_t                      gmacgrp_tx128to255octets_gb;                      /* ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB_t                      gmacgrp_tx256to511octets_gb;                      /* ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB_t                     gmacgrp_tx512to1023octets_gb;                     /* ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB_t                     gmacgrp_tx1024tomaxoctets_gb;                     /* ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB */
    volatile ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB_t                       gmacgrp_txunicastframes_gb;                       /* ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB */
    volatile ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB_t                     gmacgrp_txmulticastframes_gb;                     /* ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB */
    volatile ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB_t                     gmacgrp_txbroadcastframes_gb;                     /* ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB */
    volatile ALT_EMAC_GMACGRP_TXUNDERFLOWERROR_t                         gmacgrp_txunderflowerror;                         /* ALT_EMAC_GMACGRP_TXUNDERFLOWERROR */
    volatile ALT_EMAC_GMACGRP_TXSINGLECOL_G_t                            gmacgrp_txsinglecol_g;                            /* ALT_EMAC_GMACGRP_TXSINGLECOL_G */
    volatile ALT_EMAC_GMACGRP_TXMULTICOL_G_t                             gmacgrp_txmulticol_g;                             /* ALT_EMAC_GMACGRP_TXMULTICOL_G */
    volatile ALT_EMAC_GMACGRP_TXDEFERRED_t                               gmacgrp_txdeferred;                               /* ALT_EMAC_GMACGRP_TXDEFERRED */
    volatile ALT_EMAC_GMACGRP_TXLATECOL_t                                gmacgrp_txlatecol;                                /* ALT_EMAC_GMACGRP_TXLATECOL */
    volatile ALT_EMAC_GMACGRP_TXEXESSCOL_t                               gmacgrp_txexesscol;                               /* ALT_EMAC_GMACGRP_TXEXESSCOL */
    volatile ALT_EMAC_GMACGRP_TXCARRIERERR_t                             gmacgrp_txcarriererr;                             /* ALT_EMAC_GMACGRP_TXCARRIERERR */
    volatile ALT_EMAC_GMACGRP_TXOCTETCNT_t                               gmacgrp_txoctetcnt;                               /* ALT_EMAC_GMACGRP_TXOCTETCNT */
    volatile ALT_EMAC_GMACGRP_TXFRAMECOUNT_G_t                           gmacgrp_txframecount_g;                           /* ALT_EMAC_GMACGRP_TXFRAMECOUNT_G */
    volatile ALT_EMAC_GMACGRP_TXEXCESSDEF_t                              gmacgrp_txexcessdef;                              /* ALT_EMAC_GMACGRP_TXEXCESSDEF */
    volatile ALT_EMAC_GMACGRP_TXPAUSEFRAMES_t                            gmacgrp_txpauseframes;                            /* ALT_EMAC_GMACGRP_TXPAUSEFRAMES */
    volatile ALT_EMAC_GMACGRP_TXVLANFRAMES_G_t                           gmacgrp_txvlanframes_g;                           /* ALT_EMAC_GMACGRP_TXVLANFRAMES_G */
    volatile ALT_EMAC_GMACGRP_TXOVERSIZE_G_t                             gmacgrp_txoversize_g;                             /* ALT_EMAC_GMACGRP_TXOVERSIZE_G */
    volatile uint32_t                                                    _pad_0x17c_0x17f;                                 /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB_t                          gmacgrp_rxframecount_gb;                          /* ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB */
    volatile ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB_t                          gmacgrp_rxoctetcount_gb;                          /* ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB */
    volatile ALT_EMAC_GMACGRP_RXOCTETCOUNT_G_t                           gmacgrp_rxoctetcount_g;                           /* ALT_EMAC_GMACGRP_RXOCTETCOUNT_G */
    volatile ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G_t                      gmacgrp_rxbroadcastframes_g;                      /* ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G */
    volatile ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G_t                      gmacgrp_rxmulticastframes_g;                      /* ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G */
    volatile ALT_EMAC_GMACGRP_RXCRCERROR_t                               gmacgrp_rxcrcerror;                               /* ALT_EMAC_GMACGRP_RXCRCERROR */
    volatile ALT_EMAC_GMACGRP_RXALIGNMENTERROR_t                         gmacgrp_rxalignmenterror;                         /* ALT_EMAC_GMACGRP_RXALIGNMENTERROR */
    volatile ALT_EMAC_GMACGRP_RXRUNTERROR_t                              gmacgrp_rxrunterror;                              /* ALT_EMAC_GMACGRP_RXRUNTERROR */
    volatile ALT_EMAC_GMACGRP_RXJABBERERROR_t                            gmacgrp_rxjabbererror;                            /* ALT_EMAC_GMACGRP_RXJABBERERROR */
    volatile ALT_EMAC_GMACGRP_RXUNDERSIZE_G_t                            gmacgrp_rxundersize_g;                            /* ALT_EMAC_GMACGRP_RXUNDERSIZE_G */
    volatile ALT_EMAC_GMACGRP_RXOVERSIZE_G_t                             gmacgrp_rxoversize_g;                             /* ALT_EMAC_GMACGRP_RXOVERSIZE_G */
    volatile ALT_EMAC_GMACGRP_RX64OCTETS_GB_t                            gmacgrp_rx64octets_gb;                            /* ALT_EMAC_GMACGRP_RX64OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB_t                       gmacgrp_rx65to127octets_gb;                       /* ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB_t                      gmacgrp_rx128to255octets_gb;                      /* ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB_t                      gmacgrp_rx256to511octets_gb;                      /* ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB_t                     gmacgrp_rx512to1023octets_gb;                     /* ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB */
    volatile ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB_t                     gmacgrp_rx1024tomaxoctets_gb;                     /* ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB */
    volatile ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G_t                        gmacgrp_rxunicastframes_g;                        /* ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G */
    volatile ALT_EMAC_GMACGRP_RXLENGTHERROR_t                            gmacgrp_rxlengtherror;                            /* ALT_EMAC_GMACGRP_RXLENGTHERROR */
    volatile ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE_t                         gmacgrp_rxoutofrangetype;                         /* ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE */
    volatile ALT_EMAC_GMACGRP_RXPAUSEFRAMES_t                            gmacgrp_rxpauseframes;                            /* ALT_EMAC_GMACGRP_RXPAUSEFRAMES */
    volatile ALT_EMAC_GMACGRP_RXFIFOOVERFLOW_t                           gmacgrp_rxfifooverflow;                           /* ALT_EMAC_GMACGRP_RXFIFOOVERFLOW */
    volatile ALT_EMAC_GMACGRP_RXVLANFRAMES_GB_t                          gmacgrp_rxvlanframes_gb;                          /* ALT_EMAC_GMACGRP_RXVLANFRAMES_GB */
    volatile ALT_EMAC_GMACGRP_RXWATCHDOGERROR_t                          gmacgrp_rxwatchdogerror;                          /* ALT_EMAC_GMACGRP_RXWATCHDOGERROR */
    volatile ALT_EMAC_GMACGRP_RXRCVERROR_t                               gmacgrp_rxrcverror;                               /* ALT_EMAC_GMACGRP_RXRCVERROR */
    volatile ALT_EMAC_GMACGRP_RXCTRLFRAMES_G_t                           gmacgrp_rxctrlframes_g;                           /* ALT_EMAC_GMACGRP_RXCTRLFRAMES_G */
    volatile uint32_t                                                    _pad_0x1e8_0x1ff[6];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK_t           gmacgrp_mmc_ipc_receive_interrupt_mask;           /* ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK */
    volatile uint32_t                                                    _pad_0x204_0x207;                                 /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_t                gmacgrp_mmc_ipc_receive_interrupt;                /* ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT */
    volatile uint32_t                                                    _pad_0x20c_0x20f;                                 /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS_t                           gmacgrp_rxipv4_gd_frms;                           /* ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS_t                       gmacgrp_rxipv4_hdrerr_frms;                       /* ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS_t                        gmacgrp_rxipv4_nopay_frms;                        /* ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS_t                         gmacgrp_rxipv4_frag_frms;                         /* ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS_t                        gmacgrp_rxipv4_udsbl_frms;                        /* ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS */
    volatile ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS_t                           gmacgrp_rxipv6_gd_frms;                           /* ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS */
    volatile ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS_t                       gmacgrp_rxipv6_hdrerr_frms;                       /* ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS */
    volatile ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS_t                        gmacgrp_rxipv6_nopay_frms;                        /* ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS */
    volatile ALT_EMAC_GMACGRP_RXUDP_GD_FRMS_t                            gmacgrp_rxudp_gd_frms;                            /* ALT_EMAC_GMACGRP_RXUDP_GD_FRMS */
    volatile ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS_t                           gmacgrp_rxudp_err_frms;                           /* ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS */
    volatile ALT_EMAC_GMACGRP_RXTCP_GD_FRMS_t                            gmacgrp_rxtcp_gd_frms;                            /* ALT_EMAC_GMACGRP_RXTCP_GD_FRMS */
    volatile ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS_t                           gmacgrp_rxtcp_err_frms;                           /* ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS */
    volatile ALT_EMAC_GMACGRP_RXICMP_GD_FRMS_t                           gmacgrp_rxicmp_gd_frms;                           /* ALT_EMAC_GMACGRP_RXICMP_GD_FRMS */
    volatile ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS_t                          gmacgrp_rxicmp_err_frms;                          /* ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS */
    volatile uint32_t                                                    _pad_0x248_0x24f[2];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS_t                         gmacgrp_rxipv4_gd_octets;                         /* ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS_t                     gmacgrp_rxipv4_hdrerr_octets;                     /* ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS_t                      gmacgrp_rxipv4_nopay_octets;                      /* ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS_t                       gmacgrp_rxipv4_frag_octets;                       /* ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS_t                      gmacgrp_rxipv4_udsbl_octets;                      /* ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS_t                         gmacgrp_rxipv6_gd_octets;                         /* ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS_t                     gmacgrp_rxipv6_hdrerr_octets;                     /* ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS_t                      gmacgrp_rxipv6_nopay_octets;                      /* ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS_t                          gmacgrp_rxudp_gd_octets;                          /* ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS_t                         gmacgrp_rxudp_err_octets;                         /* ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS_t                          gmacgrp_rxtcp_gd_octets;                          /* ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXTCPERROCTETS_t                           gmacgrp_rxtcperroctets;                           /* ALT_EMAC_GMACGRP_RXTCPERROCTETS */
    volatile ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS_t                         gmacgrp_rxicmp_gd_octets;                         /* ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS */
    volatile ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS_t                        gmacgrp_rxicmp_err_octets;                        /* ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS */
    volatile uint32_t                                                    _pad_0x288_0x3ff[94];                             /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_L3_L4_CONTROL0_t                           gmacgrp_l3_l4_control0;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0 */
    volatile ALT_EMAC_GMACGRP_LAYER4_ADDRESS0_t                          gmacgrp_layer4_address0;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS0 */
    volatile uint32_t                                                    _pad_0x408_0x40f[2];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0_t                        gmacgrp_layer3_addr0_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0_t                        gmacgrp_layer3_addr1_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0_t                        gmacgrp_layer3_addr2_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0_t                        gmacgrp_layer3_addr3_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0 */
    volatile uint32_t                                                    _pad_0x420_0x42f[4];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_L3_L4_CONTROL1_t                           gmacgrp_l3_l4_control1;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL1 */
    volatile ALT_EMAC_GMACGRP_LAYER4_ADDRESS1_t                          gmacgrp_layer4_address1;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS1 */
    volatile uint32_t                                                    _pad_0x438_0x43f[2];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1_t                        gmacgrp_layer3_addr0_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1_t                        gmacgrp_layer3_addr1_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1_t                        gmacgrp_layer3_addr2_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1_t                        gmacgrp_layer3_addr3_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1 */
    volatile uint32_t                                                    _pad_0x450_0x45f[4];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_L3_L4_CONTROL2_t                           gmacgrp_l3_l4_control2;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL2 */
    volatile ALT_EMAC_GMACGRP_LAYER4_ADDRESS2_t                          gmacgrp_layer4_address2;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS2 */
    volatile uint32_t                                                    _pad_0x468_0x46f[2];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2_t                        gmacgrp_layer3_addr0_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2_t                        gmacgrp_layer3_addr1_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2_t                        gmacgrp_layer3_addr2_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2_t                        gmacgrp_layer3_addr3_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2 */
    volatile uint32_t                                                    _pad_0x480_0x48f[4];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_L3_L4_CONTROL3_t                           gmacgrp_l3_l4_control3;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL3 */
    volatile ALT_EMAC_GMACGRP_LAYER4_ADDRESS3_t                          gmacgrp_layer4_address3;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS3 */
    volatile uint32_t                                                    _pad_0x498_0x49f[2];                              /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3_t                        gmacgrp_layer3_addr0_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3_t                        gmacgrp_layer3_addr1_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3_t                        gmacgrp_layer3_addr2_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3 */
    volatile ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3_t                        gmacgrp_layer3_addr3_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3 */
    volatile uint32_t                                                    _pad_0x4b0_0x4ff[20];                             /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG0_t                          gmacgrp_hash_table_reg0;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG0 */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG1_t                          gmacgrp_hash_table_reg1;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG1 */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG2_t                          gmacgrp_hash_table_reg2;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG2 */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG3_t                          gmacgrp_hash_table_reg3;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG3 */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG4_t                          gmacgrp_hash_table_reg4;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG4 */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG5_t                          gmacgrp_hash_table_reg5;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG5 */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG6_t                          gmacgrp_hash_table_reg6;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG6 */
    volatile ALT_EMAC_GMACGRP_HASH_TABLE_REG7_t                          gmacgrp_hash_table_reg7;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG7 */
    volatile uint32_t                                                    _pad_0x520_0x583[25];                             /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_VLAN_INCL_REG_t                            gmacgrp_vlan_incl_reg;                            /* ALT_EMAC_GMACGRP_VLAN_INCL_REG */
    volatile ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG_t                      gmacgrp_vlan_hash_table_reg;                      /* ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG */
    volatile uint32_t                                                    _pad_0x58c_0x6ff[93];                             /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL_t                        gmacgrp_timestamp_control;                        /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL */
    volatile ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT_t                     gmacgrp_sub_second_increment;                     /* ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT */
    volatile ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_t                      gmacgrp_system_time_seconds;                      /* ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS */
    volatile ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_t                  gmacgrp_system_time_nanoseconds;                  /* ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS */
    volatile ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE_t               gmacgrp_system_time_seconds_update;               /* ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE */
    volatile ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE_t           gmacgrp_system_time_nanoseconds_update;           /* ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE */
    volatile ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND_t                         gmacgrp_timestamp_addend;                         /* ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND */
    volatile ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS_t                      gmacgrp_target_time_seconds;                      /* ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS */
    volatile ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS_t                  gmacgrp_target_time_nanoseconds;                  /* ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS */
    volatile ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS_t          gmacgrp_system_time_higher_word_seconds;          /* ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS */
    volatile ALT_EMAC_GMACGRP_TIMESTAMP_STATUS_t                         gmacgrp_timestamp_status;                         /* ALT_EMAC_GMACGRP_TIMESTAMP_STATUS */
    volatile ALT_EMAC_GMACGRP_PPS_CONTROL_t                              gmacgrp_pps_control;                              /* ALT_EMAC_GMACGRP_PPS_CONTROL */
    volatile ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS_t          gmacgrp_auxiliary_timestamp_nanoseconds;          /* ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS */
    volatile ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS_t              gmacgrp_auxiliary_timestamp_seconds;              /* ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS */
    volatile uint32_t                                                    _pad_0x738_0x75f[10];                             /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_PPS0_INTERVAL_t                            gmacgrp_pps0_interval;                            /* ALT_EMAC_GMACGRP_PPS0_INTERVAL */
    volatile ALT_EMAC_GMACGRP_PPS0_WIDTH_t                               gmacgrp_pps0_width;                               /* ALT_EMAC_GMACGRP_PPS0_WIDTH */
    volatile uint32_t                                                    _pad_0x768_0x7ff[38];                             /* *UNDEFINED* */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH_t                       gmacgrp_mac_address16_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW_t                        gmacgrp_mac_address16_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH_t                       gmacgrp_mac_address17_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW_t                        gmacgrp_mac_address17_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH_t                       gmacgrp_mac_address18_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW_t                        gmacgrp_mac_address18_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH_t                       gmacgrp_mac_address19_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW_t                        gmacgrp_mac_address19_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH_t                       gmacgrp_mac_address20_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW_t                        gmacgrp_mac_address20_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH_t                       gmacgrp_mac_address21_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW_t                        gmacgrp_mac_address21_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH_t                       gmacgrp_mac_address22_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW_t                        gmacgrp_mac_address22_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH_t                       gmacgrp_mac_address23_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW_t                        gmacgrp_mac_address23_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH_t                       gmacgrp_mac_address24_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW_t                        gmacgrp_mac_address24_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH_t                       gmacgrp_mac_address25_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW_t                        gmacgrp_mac_address25_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH_t                       gmacgrp_mac_address26_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW_t                        gmacgrp_mac_address26_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH_t                       gmacgrp_mac_address27_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW_t                        gmacgrp_mac_address27_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH_t                       gmacgrp_mac_address28_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW_t                        gmacgrp_mac_address28_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH_t                       gmacgrp_mac_address29_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW_t                        gmacgrp_mac_address29_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH_t                       gmacgrp_mac_address30_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW_t                        gmacgrp_mac_address30_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH_t                       gmacgrp_mac_address31_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW_t                        gmacgrp_mac_address31_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH_t                       gmacgrp_mac_address32_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW_t                        gmacgrp_mac_address32_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH_t                       gmacgrp_mac_address33_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW_t                        gmacgrp_mac_address33_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH_t                       gmacgrp_mac_address34_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW_t                        gmacgrp_mac_address34_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH_t                       gmacgrp_mac_address35_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW_t                        gmacgrp_mac_address35_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH_t                       gmacgrp_mac_address36_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW_t                        gmacgrp_mac_address36_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH_t                       gmacgrp_mac_address37_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW_t                        gmacgrp_mac_address37_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH_t                       gmacgrp_mac_address38_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW_t                        gmacgrp_mac_address38_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH_t                       gmacgrp_mac_address39_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW_t                        gmacgrp_mac_address39_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH_t                       gmacgrp_mac_address40_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW_t                        gmacgrp_mac_address40_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH_t                       gmacgrp_mac_address41_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW_t                        gmacgrp_mac_address41_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH_t                       gmacgrp_mac_address42_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW_t                        gmacgrp_mac_address42_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH_t                       gmacgrp_mac_address43_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW_t                        gmacgrp_mac_address43_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH_t                       gmacgrp_mac_address44_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW_t                        gmacgrp_mac_address44_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH_t                       gmacgrp_mac_address45_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW_t                        gmacgrp_mac_address45_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH_t                       gmacgrp_mac_address46_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW_t                        gmacgrp_mac_address46_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH_t                       gmacgrp_mac_address47_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW_t                        gmacgrp_mac_address47_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH_t                       gmacgrp_mac_address48_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW_t                        gmacgrp_mac_address48_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH_t                       gmacgrp_mac_address49_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW_t                        gmacgrp_mac_address49_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH_t                       gmacgrp_mac_address50_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW_t                        gmacgrp_mac_address50_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH_t                       gmacgrp_mac_address51_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW_t                        gmacgrp_mac_address51_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH_t                       gmacgrp_mac_address52_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW_t                        gmacgrp_mac_address52_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH_t                       gmacgrp_mac_address53_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW_t                        gmacgrp_mac_address53_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH_t                       gmacgrp_mac_address54_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW_t                        gmacgrp_mac_address54_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH_t                       gmacgrp_mac_address55_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW_t                        gmacgrp_mac_address55_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH_t                       gmacgrp_mac_address56_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW_t                        gmacgrp_mac_address56_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH_t                       gmacgrp_mac_address57_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW_t                        gmacgrp_mac_address57_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH_t                       gmacgrp_mac_address58_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW_t                        gmacgrp_mac_address58_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH_t                       gmacgrp_mac_address59_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW_t                        gmacgrp_mac_address59_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH_t                       gmacgrp_mac_address60_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW_t                        gmacgrp_mac_address60_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH_t                       gmacgrp_mac_address61_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW_t                        gmacgrp_mac_address61_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH_t                       gmacgrp_mac_address62_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW_t                        gmacgrp_mac_address62_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH_t                       gmacgrp_mac_address63_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW_t                        gmacgrp_mac_address63_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH_t                       gmacgrp_mac_address64_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW_t                        gmacgrp_mac_address64_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH_t                       gmacgrp_mac_address65_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW_t                        gmacgrp_mac_address65_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH_t                       gmacgrp_mac_address66_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW_t                        gmacgrp_mac_address66_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH_t                       gmacgrp_mac_address67_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW_t                        gmacgrp_mac_address67_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH_t                       gmacgrp_mac_address68_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW_t                        gmacgrp_mac_address68_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH_t                       gmacgrp_mac_address69_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW_t                        gmacgrp_mac_address69_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH_t                       gmacgrp_mac_address70_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW_t                        gmacgrp_mac_address70_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH_t                       gmacgrp_mac_address71_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW_t                        gmacgrp_mac_address71_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH_t                       gmacgrp_mac_address72_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW_t                        gmacgrp_mac_address72_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH_t                       gmacgrp_mac_address73_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW_t                        gmacgrp_mac_address73_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH_t                       gmacgrp_mac_address74_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW_t                        gmacgrp_mac_address74_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH_t                       gmacgrp_mac_address75_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW_t                        gmacgrp_mac_address75_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH_t                       gmacgrp_mac_address76_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW_t                        gmacgrp_mac_address76_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH_t                       gmacgrp_mac_address77_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW_t                        gmacgrp_mac_address77_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH_t                       gmacgrp_mac_address78_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW_t                        gmacgrp_mac_address78_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH_t                       gmacgrp_mac_address79_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW_t                        gmacgrp_mac_address79_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH_t                       gmacgrp_mac_address80_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW_t                        gmacgrp_mac_address80_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH_t                       gmacgrp_mac_address81_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW_t                        gmacgrp_mac_address81_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH_t                       gmacgrp_mac_address82_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW_t                        gmacgrp_mac_address82_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH_t                       gmacgrp_mac_address83_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW_t                        gmacgrp_mac_address83_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH_t                       gmacgrp_mac_address84_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW_t                        gmacgrp_mac_address84_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH_t                       gmacgrp_mac_address85_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW_t                        gmacgrp_mac_address85_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH_t                       gmacgrp_mac_address86_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW_t                        gmacgrp_mac_address86_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH_t                       gmacgrp_mac_address87_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW_t                        gmacgrp_mac_address87_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH_t                       gmacgrp_mac_address88_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW_t                        gmacgrp_mac_address88_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH_t                       gmacgrp_mac_address89_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW_t                        gmacgrp_mac_address89_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH_t                       gmacgrp_mac_address90_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW_t                        gmacgrp_mac_address90_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH_t                       gmacgrp_mac_address91_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW_t                        gmacgrp_mac_address91_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH_t                       gmacgrp_mac_address92_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW_t                        gmacgrp_mac_address92_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH_t                       gmacgrp_mac_address93_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW_t                        gmacgrp_mac_address93_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH_t                       gmacgrp_mac_address94_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW_t                        gmacgrp_mac_address94_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH_t                       gmacgrp_mac_address95_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW_t                        gmacgrp_mac_address95_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH_t                       gmacgrp_mac_address96_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW_t                        gmacgrp_mac_address96_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH_t                       gmacgrp_mac_address97_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW_t                        gmacgrp_mac_address97_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH_t                       gmacgrp_mac_address98_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW_t                        gmacgrp_mac_address98_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH_t                       gmacgrp_mac_address99_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW_t                        gmacgrp_mac_address99_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH_t                      gmacgrp_mac_address100_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW_t                       gmacgrp_mac_address100_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH_t                      gmacgrp_mac_address101_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW_t                       gmacgrp_mac_address101_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH_t                      gmacgrp_mac_address102_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW_t                       gmacgrp_mac_address102_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH_t                      gmacgrp_mac_address103_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW_t                       gmacgrp_mac_address103_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH_t                      gmacgrp_mac_address104_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW_t                       gmacgrp_mac_address104_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH_t                      gmacgrp_mac_address105_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW_t                       gmacgrp_mac_address105_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH_t                      gmacgrp_mac_address106_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW_t                       gmacgrp_mac_address106_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH_t                      gmacgrp_mac_address107_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW_t                       gmacgrp_mac_address107_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH_t                      gmacgrp_mac_address108_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW_t                       gmacgrp_mac_address108_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH_t                      gmacgrp_mac_address109_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW_t                       gmacgrp_mac_address109_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH_t                      gmacgrp_mac_address110_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW_t                       gmacgrp_mac_address110_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH_t                      gmacgrp_mac_address111_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW_t                       gmacgrp_mac_address111_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH_t                      gmacgrp_mac_address112_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW_t                       gmacgrp_mac_address112_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH_t                      gmacgrp_mac_address113_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW_t                       gmacgrp_mac_address113_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH_t                      gmacgrp_mac_address114_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW_t                       gmacgrp_mac_address114_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH_t                      gmacgrp_mac_address115_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW_t                       gmacgrp_mac_address115_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH_t                      gmacgrp_mac_address116_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW_t                       gmacgrp_mac_address116_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH_t                      gmacgrp_mac_address117_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW_t                       gmacgrp_mac_address117_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH_t                      gmacgrp_mac_address118_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW_t                       gmacgrp_mac_address118_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH_t                      gmacgrp_mac_address119_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW_t                       gmacgrp_mac_address119_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH_t                      gmacgrp_mac_address120_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW_t                       gmacgrp_mac_address120_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH_t                      gmacgrp_mac_address121_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW_t                       gmacgrp_mac_address121_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH_t                      gmacgrp_mac_address122_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW_t                       gmacgrp_mac_address122_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH_t                      gmacgrp_mac_address123_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW_t                       gmacgrp_mac_address123_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH_t                      gmacgrp_mac_address124_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW_t                       gmacgrp_mac_address124_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH_t                      gmacgrp_mac_address125_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW_t                       gmacgrp_mac_address125_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH_t                      gmacgrp_mac_address126_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW_t                       gmacgrp_mac_address126_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH_t                      gmacgrp_mac_address127_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH */
    volatile ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW_t                       gmacgrp_mac_address127_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW */
    volatile uint32_t                                                    _pad_0xb80_0xfff[288];                            /* *UNDEFINED* */
    volatile ALT_EMAC_DMAGRP_BUS_MODE_t                                  dmagrp_bus_mode;                                  /* ALT_EMAC_DMAGRP_BUS_MODE */
    volatile ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND_t                      dmagrp_transmit_poll_demand;                      /* ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND */
    volatile ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND_t                       dmagrp_receive_poll_demand;                       /* ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND */
    volatile ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS_t           dmagrp_receive_descriptor_list_address;           /* ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS */
    volatile ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_t          dmagrp_transmit_descriptor_list_address;          /* ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS */
    volatile ALT_EMAC_DMAGRP_STATUS_t                                    dmagrp_status;                                    /* ALT_EMAC_DMAGRP_STATUS */
    volatile ALT_EMAC_DMAGRP_OPERATION_MODE_t                            dmagrp_operation_mode;                            /* ALT_EMAC_DMAGRP_OPERATION_MODE */
    volatile ALT_EMAC_DMAGRP_INTERRUPT_ENABLE_t                          dmagrp_interrupt_enable;                          /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE */
    volatile ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_t  dmagrp_missed_frame_and_buffer_overflow_counter;  /* ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER */
    volatile ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER_t          dmagrp_receive_interrupt_watchdog_timer;          /* ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER */
    volatile ALT_EMAC_DMAGRP_AXI_BUS_MODE_t                              dmagrp_axi_bus_mode;                              /* ALT_EMAC_DMAGRP_AXI_BUS_MODE */
    volatile ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS_t                         dmagrp_ahb_or_axi_status;                         /* ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS */
    volatile uint32_t                                                    _pad_0x1030_0x1047[6];                            /* *UNDEFINED* */
    volatile ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR_t          dmagrp_current_host_transmit_descriptor;          /* ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR */
    volatile ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR_t           dmagrp_current_host_receive_descriptor;           /* ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR */
    volatile ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_t      dmagrp_current_host_transmit_buffer_address;      /* ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS */
    volatile ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_t       dmagrp_current_host_receive_buffer_address;       /* ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS */
    volatile ALT_EMAC_DMAGRP_HW_FEATURE_t                                dmagrp_hw_feature;                                /* ALT_EMAC_DMAGRP_HW_FEATURE */
};

/* The typedef declaration for register group ALT_EMAC. */
typedef struct ALT_EMAC_s  ALT_EMAC_t;
/* The struct declaration for the raw register contents of register group ALT_EMAC. */
struct ALT_EMAC_raw_s
{
    volatile uint32_t  gmacgrp_mac_configuration;                        /* ALT_EMAC_GMACGRP_MAC_CONFIGURATION */
    volatile uint32_t  gmacgrp_mac_frame_filter;                         /* ALT_EMAC_GMACGRP_MAC_FRAME_FILTER */
    volatile uint32_t  _pad_0x8_0xf[2];                                  /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_gmii_address;                             /* ALT_EMAC_GMACGRP_GMII_ADDRESS */
    volatile uint32_t  gmacgrp_gmii_data;                                /* ALT_EMAC_GMACGRP_GMII_DATA */
    volatile uint32_t  gmacgrp_flow_control;                             /* ALT_EMAC_GMACGRP_FLOW_CONTROL */
    volatile uint32_t  gmacgrp_vlan_tag;                                 /* ALT_EMAC_GMACGRP_VLAN_TAG */
    volatile uint32_t  gmacgrp_version;                                  /* ALT_EMAC_GMACGRP_VERSION */
    volatile uint32_t  gmacgrp_debug;                                    /* ALT_EMAC_GMACGRP_DEBUG */
    volatile uint32_t  _pad_0x28_0x2f[2];                                /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_lpi_control_status;                       /* ALT_EMAC_GMACGRP_LPI_CONTROL_STATUS */
    volatile uint32_t  gmacgrp_lpi_timers_control;                       /* ALT_EMAC_GMACGRP_LPI_TIMERS_CONTROL */
    volatile uint32_t  gmacgrp_interrupt_status;                         /* ALT_EMAC_GMACGRP_INTERRUPT_STATUS */
    volatile uint32_t  gmacgrp_interrupt_mask;                           /* ALT_EMAC_GMACGRP_INTERRUPT_MASK */
    volatile uint32_t  gmacgrp_mac_address0_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_HIGH */
    volatile uint32_t  gmacgrp_mac_address0_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS0_LOW */
    volatile uint32_t  gmacgrp_mac_address1_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_HIGH */
    volatile uint32_t  gmacgrp_mac_address1_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS1_LOW */
    volatile uint32_t  gmacgrp_mac_address2_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_HIGH */
    volatile uint32_t  gmacgrp_mac_address2_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS2_LOW */
    volatile uint32_t  gmacgrp_mac_address3_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_HIGH */
    volatile uint32_t  gmacgrp_mac_address3_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS3_LOW */
    volatile uint32_t  gmacgrp_mac_address4_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_HIGH */
    volatile uint32_t  gmacgrp_mac_address4_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS4_LOW */
    volatile uint32_t  gmacgrp_mac_address5_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_HIGH */
    volatile uint32_t  gmacgrp_mac_address5_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS5_LOW */
    volatile uint32_t  gmacgrp_mac_address6_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_HIGH */
    volatile uint32_t  gmacgrp_mac_address6_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS6_LOW */
    volatile uint32_t  gmacgrp_mac_address7_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_HIGH */
    volatile uint32_t  gmacgrp_mac_address7_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS7_LOW */
    volatile uint32_t  gmacgrp_mac_address8_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_HIGH */
    volatile uint32_t  gmacgrp_mac_address8_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS8_LOW */
    volatile uint32_t  gmacgrp_mac_address9_high;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_HIGH */
    volatile uint32_t  gmacgrp_mac_address9_low;                         /* ALT_EMAC_GMACGRP_MAC_ADDRESS9_LOW */
    volatile uint32_t  gmacgrp_mac_address10_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_HIGH */
    volatile uint32_t  gmacgrp_mac_address10_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS10_LOW */
    volatile uint32_t  gmacgrp_mac_address11_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_HIGH */
    volatile uint32_t  gmacgrp_mac_address11_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS11_LOW */
    volatile uint32_t  gmacgrp_mac_address12_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_HIGH */
    volatile uint32_t  gmacgrp_mac_address12_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS12_LOW */
    volatile uint32_t  gmacgrp_mac_address13_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_HIGH */
    volatile uint32_t  gmacgrp_mac_address13_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS13_LOW */
    volatile uint32_t  gmacgrp_mac_address14_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_HIGH */
    volatile uint32_t  gmacgrp_mac_address14_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS14_LOW */
    volatile uint32_t  gmacgrp_mac_address15_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_HIGH */
    volatile uint32_t  gmacgrp_mac_address15_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS15_LOW */
    volatile uint32_t  _pad_0xc0_0xd7[6];                                /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_sgmii_rgmii_smii_control_status;          /* ALT_EMAC_GMACGRP_SGMII_RGMII_SMII_CONTROL_STATUS */
    volatile uint32_t  gmacgrp_wdog_timeout;                             /* ALT_EMAC_GMACGRP_WDOG_TIMEOUT */
    volatile uint32_t  gmacgrp_genpio;                                   /* ALT_EMAC_GMACGRP_GENPIO */
    volatile uint32_t  _pad_0xe4_0xff[7];                                /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_mmc_control;                              /* ALT_EMAC_GMACGRP_MMC_CONTROL */
    volatile uint32_t  gmacgrp_mmc_receive_interrupt;                    /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT */
    volatile uint32_t  gmacgrp_mmc_transmit_interrupt;                   /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT */
    volatile uint32_t  gmacgrp_mmc_receive_interrupt_mask;               /* ALT_EMAC_GMACGRP_MMC_RECEIVE_INTERRUPT_MASK */
    volatile uint32_t  gmacgrp_mmc_transmit_interrupt_mask;              /* ALT_EMAC_GMACGRP_MMC_TRANSMIT_INTERRUPT_MASK */
    volatile uint32_t  gmacgrp_txoctetcount_gb;                          /* ALT_EMAC_GMACGRP_TXOCTETCOUNT_GB */
    volatile uint32_t  gmacgrp_txframecount_gb;                          /* ALT_EMAC_GMACGRP_TXFRAMECOUNT_GB */
    volatile uint32_t  gmacgrp_txbroadcastframes_g;                      /* ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_G */
    volatile uint32_t  gmacgrp_txmulticastframes_g;                      /* ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_G */
    volatile uint32_t  gmacgrp_tx64octets_gb;                            /* ALT_EMAC_GMACGRP_TX64OCTETS_GB */
    volatile uint32_t  gmacgrp_tx65to127octets_gb;                       /* ALT_EMAC_GMACGRP_TX65TO127OCTETS_GB */
    volatile uint32_t  gmacgrp_tx128to255octets_gb;                      /* ALT_EMAC_GMACGRP_TX128TO255OCTETS_GB */
    volatile uint32_t  gmacgrp_tx256to511octets_gb;                      /* ALT_EMAC_GMACGRP_TX256TO511OCTETS_GB */
    volatile uint32_t  gmacgrp_tx512to1023octets_gb;                     /* ALT_EMAC_GMACGRP_TX512TO1023OCTETS_GB */
    volatile uint32_t  gmacgrp_tx1024tomaxoctets_gb;                     /* ALT_EMAC_GMACGRP_TX1024TOMAXOCTETS_GB */
    volatile uint32_t  gmacgrp_txunicastframes_gb;                       /* ALT_EMAC_GMACGRP_TXUNICASTFRAMES_GB */
    volatile uint32_t  gmacgrp_txmulticastframes_gb;                     /* ALT_EMAC_GMACGRP_TXMULTICASTFRAMES_GB */
    volatile uint32_t  gmacgrp_txbroadcastframes_gb;                     /* ALT_EMAC_GMACGRP_TXBROADCASTFRAMES_GB */
    volatile uint32_t  gmacgrp_txunderflowerror;                         /* ALT_EMAC_GMACGRP_TXUNDERFLOWERROR */
    volatile uint32_t  gmacgrp_txsinglecol_g;                            /* ALT_EMAC_GMACGRP_TXSINGLECOL_G */
    volatile uint32_t  gmacgrp_txmulticol_g;                             /* ALT_EMAC_GMACGRP_TXMULTICOL_G */
    volatile uint32_t  gmacgrp_txdeferred;                               /* ALT_EMAC_GMACGRP_TXDEFERRED */
    volatile uint32_t  gmacgrp_txlatecol;                                /* ALT_EMAC_GMACGRP_TXLATECOL */
    volatile uint32_t  gmacgrp_txexesscol;                               /* ALT_EMAC_GMACGRP_TXEXESSCOL */
    volatile uint32_t  gmacgrp_txcarriererr;                             /* ALT_EMAC_GMACGRP_TXCARRIERERR */
    volatile uint32_t  gmacgrp_txoctetcnt;                               /* ALT_EMAC_GMACGRP_TXOCTETCNT */
    volatile uint32_t  gmacgrp_txframecount_g;                           /* ALT_EMAC_GMACGRP_TXFRAMECOUNT_G */
    volatile uint32_t  gmacgrp_txexcessdef;                              /* ALT_EMAC_GMACGRP_TXEXCESSDEF */
    volatile uint32_t  gmacgrp_txpauseframes;                            /* ALT_EMAC_GMACGRP_TXPAUSEFRAMES */
    volatile uint32_t  gmacgrp_txvlanframes_g;                           /* ALT_EMAC_GMACGRP_TXVLANFRAMES_G */
    volatile uint32_t  gmacgrp_txoversize_g;                             /* ALT_EMAC_GMACGRP_TXOVERSIZE_G */
    volatile uint32_t  _pad_0x17c_0x17f;                                 /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_rxframecount_gb;                          /* ALT_EMAC_GMACGRP_RXFRAMECOUNT_GB */
    volatile uint32_t  gmacgrp_rxoctetcount_gb;                          /* ALT_EMAC_GMACGRP_RXOCTETCOUNT_GB */
    volatile uint32_t  gmacgrp_rxoctetcount_g;                           /* ALT_EMAC_GMACGRP_RXOCTETCOUNT_G */
    volatile uint32_t  gmacgrp_rxbroadcastframes_g;                      /* ALT_EMAC_GMACGRP_RXBROADCASTFRAMES_G */
    volatile uint32_t  gmacgrp_rxmulticastframes_g;                      /* ALT_EMAC_GMACGRP_RXMULTICASTFRAMES_G */
    volatile uint32_t  gmacgrp_rxcrcerror;                               /* ALT_EMAC_GMACGRP_RXCRCERROR */
    volatile uint32_t  gmacgrp_rxalignmenterror;                         /* ALT_EMAC_GMACGRP_RXALIGNMENTERROR */
    volatile uint32_t  gmacgrp_rxrunterror;                              /* ALT_EMAC_GMACGRP_RXRUNTERROR */
    volatile uint32_t  gmacgrp_rxjabbererror;                            /* ALT_EMAC_GMACGRP_RXJABBERERROR */
    volatile uint32_t  gmacgrp_rxundersize_g;                            /* ALT_EMAC_GMACGRP_RXUNDERSIZE_G */
    volatile uint32_t  gmacgrp_rxoversize_g;                             /* ALT_EMAC_GMACGRP_RXOVERSIZE_G */
    volatile uint32_t  gmacgrp_rx64octets_gb;                            /* ALT_EMAC_GMACGRP_RX64OCTETS_GB */
    volatile uint32_t  gmacgrp_rx65to127octets_gb;                       /* ALT_EMAC_GMACGRP_RX65TO127OCTETS_GB */
    volatile uint32_t  gmacgrp_rx128to255octets_gb;                      /* ALT_EMAC_GMACGRP_RX128TO255OCTETS_GB */
    volatile uint32_t  gmacgrp_rx256to511octets_gb;                      /* ALT_EMAC_GMACGRP_RX256TO511OCTETS_GB */
    volatile uint32_t  gmacgrp_rx512to1023octets_gb;                     /* ALT_EMAC_GMACGRP_RX512TO1023OCTETS_GB */
    volatile uint32_t  gmacgrp_rx1024tomaxoctets_gb;                     /* ALT_EMAC_GMACGRP_RX1024TOMAXOCTETS_GB */
    volatile uint32_t  gmacgrp_rxunicastframes_g;                        /* ALT_EMAC_GMACGRP_RXUNICASTFRAMES_G */
    volatile uint32_t  gmacgrp_rxlengtherror;                            /* ALT_EMAC_GMACGRP_RXLENGTHERROR */
    volatile uint32_t  gmacgrp_rxoutofrangetype;                         /* ALT_EMAC_GMACGRP_RXOUTOFRANGETYPE */
    volatile uint32_t  gmacgrp_rxpauseframes;                            /* ALT_EMAC_GMACGRP_RXPAUSEFRAMES */
    volatile uint32_t  gmacgrp_rxfifooverflow;                           /* ALT_EMAC_GMACGRP_RXFIFOOVERFLOW */
    volatile uint32_t  gmacgrp_rxvlanframes_gb;                          /* ALT_EMAC_GMACGRP_RXVLANFRAMES_GB */
    volatile uint32_t  gmacgrp_rxwatchdogerror;                          /* ALT_EMAC_GMACGRP_RXWATCHDOGERROR */
    volatile uint32_t  gmacgrp_rxrcverror;                               /* ALT_EMAC_GMACGRP_RXRCVERROR */
    volatile uint32_t  gmacgrp_rxctrlframes_g;                           /* ALT_EMAC_GMACGRP_RXCTRLFRAMES_G */
    volatile uint32_t  _pad_0x1e8_0x1ff[6];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_mmc_ipc_receive_interrupt_mask;           /* ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT_MASK */
    volatile uint32_t  _pad_0x204_0x207;                                 /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_mmc_ipc_receive_interrupt;                /* ALT_EMAC_GMACGRP_MMC_IPC_RECEIVE_INTERRUPT */
    volatile uint32_t  _pad_0x20c_0x20f;                                 /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_rxipv4_gd_frms;                           /* ALT_EMAC_GMACGRP_RXIPV4_GD_FRMS */
    volatile uint32_t  gmacgrp_rxipv4_hdrerr_frms;                       /* ALT_EMAC_GMACGRP_RXIPV4_HDRERR_FRMS */
    volatile uint32_t  gmacgrp_rxipv4_nopay_frms;                        /* ALT_EMAC_GMACGRP_RXIPV4_NOPAY_FRMS */
    volatile uint32_t  gmacgrp_rxipv4_frag_frms;                         /* ALT_EMAC_GMACGRP_RXIPV4_FRAG_FRMS */
    volatile uint32_t  gmacgrp_rxipv4_udsbl_frms;                        /* ALT_EMAC_GMACGRP_RXIPV4_UDSBL_FRMS */
    volatile uint32_t  gmacgrp_rxipv6_gd_frms;                           /* ALT_EMAC_GMACGRP_RXIPV6_GD_FRMS */
    volatile uint32_t  gmacgrp_rxipv6_hdrerr_frms;                       /* ALT_EMAC_GMACGRP_RXIPV6_HDRERR_FRMS */
    volatile uint32_t  gmacgrp_rxipv6_nopay_frms;                        /* ALT_EMAC_GMACGRP_RXIPV6_NOPAY_FRMS */
    volatile uint32_t  gmacgrp_rxudp_gd_frms;                            /* ALT_EMAC_GMACGRP_RXUDP_GD_FRMS */
    volatile uint32_t  gmacgrp_rxudp_err_frms;                           /* ALT_EMAC_GMACGRP_RXUDP_ERR_FRMS */
    volatile uint32_t  gmacgrp_rxtcp_gd_frms;                            /* ALT_EMAC_GMACGRP_RXTCP_GD_FRMS */
    volatile uint32_t  gmacgrp_rxtcp_err_frms;                           /* ALT_EMAC_GMACGRP_RXTCP_ERR_FRMS */
    volatile uint32_t  gmacgrp_rxicmp_gd_frms;                           /* ALT_EMAC_GMACGRP_RXICMP_GD_FRMS */
    volatile uint32_t  gmacgrp_rxicmp_err_frms;                          /* ALT_EMAC_GMACGRP_RXICMP_ERR_FRMS */
    volatile uint32_t  _pad_0x248_0x24f[2];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_rxipv4_gd_octets;                         /* ALT_EMAC_GMACGRP_RXIPV4_GD_OCTETS */
    volatile uint32_t  gmacgrp_rxipv4_hdrerr_octets;                     /* ALT_EMAC_GMACGRP_RXIPV4_HDRERR_OCTETS */
    volatile uint32_t  gmacgrp_rxipv4_nopay_octets;                      /* ALT_EMAC_GMACGRP_RXIPV4_NOPAY_OCTETS */
    volatile uint32_t  gmacgrp_rxipv4_frag_octets;                       /* ALT_EMAC_GMACGRP_RXIPV4_FRAG_OCTETS */
    volatile uint32_t  gmacgrp_rxipv4_udsbl_octets;                      /* ALT_EMAC_GMACGRP_RXIPV4_UDSBL_OCTETS */
    volatile uint32_t  gmacgrp_rxipv6_gd_octets;                         /* ALT_EMAC_GMACGRP_RXIPV6_GD_OCTETS */
    volatile uint32_t  gmacgrp_rxipv6_hdrerr_octets;                     /* ALT_EMAC_GMACGRP_RXIPV6_HDRERR_OCTETS */
    volatile uint32_t  gmacgrp_rxipv6_nopay_octets;                      /* ALT_EMAC_GMACGRP_RXIPV6_NOPAY_OCTETS */
    volatile uint32_t  gmacgrp_rxudp_gd_octets;                          /* ALT_EMAC_GMACGRP_RXUDP_GD_OCTETS */
    volatile uint32_t  gmacgrp_rxudp_err_octets;                         /* ALT_EMAC_GMACGRP_RXUDP_ERR_OCTETS */
    volatile uint32_t  gmacgrp_rxtcp_gd_octets;                          /* ALT_EMAC_GMACGRP_RXTCP_GD_OCTETS */
    volatile uint32_t  gmacgrp_rxtcperroctets;                           /* ALT_EMAC_GMACGRP_RXTCPERROCTETS */
    volatile uint32_t  gmacgrp_rxicmp_gd_octets;                         /* ALT_EMAC_GMACGRP_RXICMP_GD_OCTETS */
    volatile uint32_t  gmacgrp_rxicmp_err_octets;                        /* ALT_EMAC_GMACGRP_RXICMP_ERR_OCTETS */
    volatile uint32_t  _pad_0x288_0x3ff[94];                             /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_l3_l4_control0;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL0 */
    volatile uint32_t  gmacgrp_layer4_address0;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS0 */
    volatile uint32_t  _pad_0x408_0x40f[2];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_layer3_addr0_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG0 */
    volatile uint32_t  gmacgrp_layer3_addr1_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG0 */
    volatile uint32_t  gmacgrp_layer3_addr2_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG0 */
    volatile uint32_t  gmacgrp_layer3_addr3_reg0;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG0 */
    volatile uint32_t  _pad_0x420_0x42f[4];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_l3_l4_control1;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL1 */
    volatile uint32_t  gmacgrp_layer4_address1;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS1 */
    volatile uint32_t  _pad_0x438_0x43f[2];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_layer3_addr0_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG1 */
    volatile uint32_t  gmacgrp_layer3_addr1_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG1 */
    volatile uint32_t  gmacgrp_layer3_addr2_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG1 */
    volatile uint32_t  gmacgrp_layer3_addr3_reg1;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG1 */
    volatile uint32_t  _pad_0x450_0x45f[4];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_l3_l4_control2;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL2 */
    volatile uint32_t  gmacgrp_layer4_address2;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS2 */
    volatile uint32_t  _pad_0x468_0x46f[2];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_layer3_addr0_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG2 */
    volatile uint32_t  gmacgrp_layer3_addr1_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG2 */
    volatile uint32_t  gmacgrp_layer3_addr2_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG2 */
    volatile uint32_t  gmacgrp_layer3_addr3_reg2;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG2 */
    volatile uint32_t  _pad_0x480_0x48f[4];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_l3_l4_control3;                           /* ALT_EMAC_GMACGRP_L3_L4_CONTROL3 */
    volatile uint32_t  gmacgrp_layer4_address3;                          /* ALT_EMAC_GMACGRP_LAYER4_ADDRESS3 */
    volatile uint32_t  _pad_0x498_0x49f[2];                              /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_layer3_addr0_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR0_REG3 */
    volatile uint32_t  gmacgrp_layer3_addr1_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR1_REG3 */
    volatile uint32_t  gmacgrp_layer3_addr2_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR2_REG3 */
    volatile uint32_t  gmacgrp_layer3_addr3_reg3;                        /* ALT_EMAC_GMACGRP_LAYER3_ADDR3_REG3 */
    volatile uint32_t  _pad_0x4b0_0x4ff[20];                             /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_hash_table_reg0;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG0 */
    volatile uint32_t  gmacgrp_hash_table_reg1;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG1 */
    volatile uint32_t  gmacgrp_hash_table_reg2;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG2 */
    volatile uint32_t  gmacgrp_hash_table_reg3;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG3 */
    volatile uint32_t  gmacgrp_hash_table_reg4;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG4 */
    volatile uint32_t  gmacgrp_hash_table_reg5;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG5 */
    volatile uint32_t  gmacgrp_hash_table_reg6;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG6 */
    volatile uint32_t  gmacgrp_hash_table_reg7;                          /* ALT_EMAC_GMACGRP_HASH_TABLE_REG7 */
    volatile uint32_t  _pad_0x520_0x583[25];                             /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_vlan_incl_reg;                            /* ALT_EMAC_GMACGRP_VLAN_INCL_REG */
    volatile uint32_t  gmacgrp_vlan_hash_table_reg;                      /* ALT_EMAC_GMACGRP_VLAN_HASH_TABLE_REG */
    volatile uint32_t  _pad_0x58c_0x6ff[93];                             /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_timestamp_control;                        /* ALT_EMAC_GMACGRP_TIMESTAMP_CONTROL */
    volatile uint32_t  gmacgrp_sub_second_increment;                     /* ALT_EMAC_GMACGRP_SUB_SECOND_INCREMENT */
    volatile uint32_t  gmacgrp_system_time_seconds;                      /* ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS */
    volatile uint32_t  gmacgrp_system_time_nanoseconds;                  /* ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS */
    volatile uint32_t  gmacgrp_system_time_seconds_update;               /* ALT_EMAC_GMACGRP_SYSTEM_TIME_SECONDS_UPDATE */
    volatile uint32_t  gmacgrp_system_time_nanoseconds_update;           /* ALT_EMAC_GMACGRP_SYSTEM_TIME_NANOSECONDS_UPDATE */
    volatile uint32_t  gmacgrp_timestamp_addend;                         /* ALT_EMAC_GMACGRP_TIMESTAMP_ADDEND */
    volatile uint32_t  gmacgrp_target_time_seconds;                      /* ALT_EMAC_GMACGRP_TARGET_TIME_SECONDS */
    volatile uint32_t  gmacgrp_target_time_nanoseconds;                  /* ALT_EMAC_GMACGRP_TARGET_TIME_NANOSECONDS */
    volatile uint32_t  gmacgrp_system_time_higher_word_seconds;          /* ALT_EMAC_GMACGRP_SYSTEM_TIME_HIGHER_WORD_SECONDS */
    volatile uint32_t  gmacgrp_timestamp_status;                         /* ALT_EMAC_GMACGRP_TIMESTAMP_STATUS */
    volatile uint32_t  gmacgrp_pps_control;                              /* ALT_EMAC_GMACGRP_PPS_CONTROL */
    volatile uint32_t  gmacgrp_auxiliary_timestamp_nanoseconds;          /* ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_NANOSECONDS */
    volatile uint32_t  gmacgrp_auxiliary_timestamp_seconds;              /* ALT_EMAC_GMACGRP_AUXILIARY_TIMESTAMP_SECONDS */
    volatile uint32_t  _pad_0x738_0x75f[10];                             /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_pps0_interval;                            /* ALT_EMAC_GMACGRP_PPS0_INTERVAL */
    volatile uint32_t  gmacgrp_pps0_width;                               /* ALT_EMAC_GMACGRP_PPS0_WIDTH */
    volatile uint32_t  _pad_0x768_0x7ff[38];                             /* *UNDEFINED* */
    volatile uint32_t  gmacgrp_mac_address16_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_HIGH */
    volatile uint32_t  gmacgrp_mac_address16_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS16_LOW */
    volatile uint32_t  gmacgrp_mac_address17_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_HIGH */
    volatile uint32_t  gmacgrp_mac_address17_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS17_LOW */
    volatile uint32_t  gmacgrp_mac_address18_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_HIGH */
    volatile uint32_t  gmacgrp_mac_address18_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS18_LOW */
    volatile uint32_t  gmacgrp_mac_address19_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_HIGH */
    volatile uint32_t  gmacgrp_mac_address19_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS19_LOW */
    volatile uint32_t  gmacgrp_mac_address20_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_HIGH */
    volatile uint32_t  gmacgrp_mac_address20_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS20_LOW */
    volatile uint32_t  gmacgrp_mac_address21_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_HIGH */
    volatile uint32_t  gmacgrp_mac_address21_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS21_LOW */
    volatile uint32_t  gmacgrp_mac_address22_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_HIGH */
    volatile uint32_t  gmacgrp_mac_address22_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS22_LOW */
    volatile uint32_t  gmacgrp_mac_address23_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_HIGH */
    volatile uint32_t  gmacgrp_mac_address23_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS23_LOW */
    volatile uint32_t  gmacgrp_mac_address24_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_HIGH */
    volatile uint32_t  gmacgrp_mac_address24_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS24_LOW */
    volatile uint32_t  gmacgrp_mac_address25_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_HIGH */
    volatile uint32_t  gmacgrp_mac_address25_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS25_LOW */
    volatile uint32_t  gmacgrp_mac_address26_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_HIGH */
    volatile uint32_t  gmacgrp_mac_address26_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS26_LOW */
    volatile uint32_t  gmacgrp_mac_address27_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_HIGH */
    volatile uint32_t  gmacgrp_mac_address27_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS27_LOW */
    volatile uint32_t  gmacgrp_mac_address28_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_HIGH */
    volatile uint32_t  gmacgrp_mac_address28_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS28_LOW */
    volatile uint32_t  gmacgrp_mac_address29_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_HIGH */
    volatile uint32_t  gmacgrp_mac_address29_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS29_LOW */
    volatile uint32_t  gmacgrp_mac_address30_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_HIGH */
    volatile uint32_t  gmacgrp_mac_address30_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS30_LOW */
    volatile uint32_t  gmacgrp_mac_address31_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_HIGH */
    volatile uint32_t  gmacgrp_mac_address31_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS31_LOW */
    volatile uint32_t  gmacgrp_mac_address32_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_HIGH */
    volatile uint32_t  gmacgrp_mac_address32_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS32_LOW */
    volatile uint32_t  gmacgrp_mac_address33_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_HIGH */
    volatile uint32_t  gmacgrp_mac_address33_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS33_LOW */
    volatile uint32_t  gmacgrp_mac_address34_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_HIGH */
    volatile uint32_t  gmacgrp_mac_address34_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS34_LOW */
    volatile uint32_t  gmacgrp_mac_address35_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_HIGH */
    volatile uint32_t  gmacgrp_mac_address35_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS35_LOW */
    volatile uint32_t  gmacgrp_mac_address36_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_HIGH */
    volatile uint32_t  gmacgrp_mac_address36_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS36_LOW */
    volatile uint32_t  gmacgrp_mac_address37_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_HIGH */
    volatile uint32_t  gmacgrp_mac_address37_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS37_LOW */
    volatile uint32_t  gmacgrp_mac_address38_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_HIGH */
    volatile uint32_t  gmacgrp_mac_address38_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS38_LOW */
    volatile uint32_t  gmacgrp_mac_address39_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_HIGH */
    volatile uint32_t  gmacgrp_mac_address39_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS39_LOW */
    volatile uint32_t  gmacgrp_mac_address40_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_HIGH */
    volatile uint32_t  gmacgrp_mac_address40_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS40_LOW */
    volatile uint32_t  gmacgrp_mac_address41_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_HIGH */
    volatile uint32_t  gmacgrp_mac_address41_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS41_LOW */
    volatile uint32_t  gmacgrp_mac_address42_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_HIGH */
    volatile uint32_t  gmacgrp_mac_address42_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS42_LOW */
    volatile uint32_t  gmacgrp_mac_address43_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_HIGH */
    volatile uint32_t  gmacgrp_mac_address43_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS43_LOW */
    volatile uint32_t  gmacgrp_mac_address44_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_HIGH */
    volatile uint32_t  gmacgrp_mac_address44_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS44_LOW */
    volatile uint32_t  gmacgrp_mac_address45_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_HIGH */
    volatile uint32_t  gmacgrp_mac_address45_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS45_LOW */
    volatile uint32_t  gmacgrp_mac_address46_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_HIGH */
    volatile uint32_t  gmacgrp_mac_address46_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS46_LOW */
    volatile uint32_t  gmacgrp_mac_address47_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_HIGH */
    volatile uint32_t  gmacgrp_mac_address47_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS47_LOW */
    volatile uint32_t  gmacgrp_mac_address48_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_HIGH */
    volatile uint32_t  gmacgrp_mac_address48_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS48_LOW */
    volatile uint32_t  gmacgrp_mac_address49_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_HIGH */
    volatile uint32_t  gmacgrp_mac_address49_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS49_LOW */
    volatile uint32_t  gmacgrp_mac_address50_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_HIGH */
    volatile uint32_t  gmacgrp_mac_address50_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS50_LOW */
    volatile uint32_t  gmacgrp_mac_address51_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_HIGH */
    volatile uint32_t  gmacgrp_mac_address51_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS51_LOW */
    volatile uint32_t  gmacgrp_mac_address52_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_HIGH */
    volatile uint32_t  gmacgrp_mac_address52_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS52_LOW */
    volatile uint32_t  gmacgrp_mac_address53_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_HIGH */
    volatile uint32_t  gmacgrp_mac_address53_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS53_LOW */
    volatile uint32_t  gmacgrp_mac_address54_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_HIGH */
    volatile uint32_t  gmacgrp_mac_address54_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS54_LOW */
    volatile uint32_t  gmacgrp_mac_address55_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_HIGH */
    volatile uint32_t  gmacgrp_mac_address55_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS55_LOW */
    volatile uint32_t  gmacgrp_mac_address56_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_HIGH */
    volatile uint32_t  gmacgrp_mac_address56_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS56_LOW */
    volatile uint32_t  gmacgrp_mac_address57_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_HIGH */
    volatile uint32_t  gmacgrp_mac_address57_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS57_LOW */
    volatile uint32_t  gmacgrp_mac_address58_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_HIGH */
    volatile uint32_t  gmacgrp_mac_address58_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS58_LOW */
    volatile uint32_t  gmacgrp_mac_address59_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_HIGH */
    volatile uint32_t  gmacgrp_mac_address59_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS59_LOW */
    volatile uint32_t  gmacgrp_mac_address60_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_HIGH */
    volatile uint32_t  gmacgrp_mac_address60_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS60_LOW */
    volatile uint32_t  gmacgrp_mac_address61_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_HIGH */
    volatile uint32_t  gmacgrp_mac_address61_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS61_LOW */
    volatile uint32_t  gmacgrp_mac_address62_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_HIGH */
    volatile uint32_t  gmacgrp_mac_address62_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS62_LOW */
    volatile uint32_t  gmacgrp_mac_address63_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_HIGH */
    volatile uint32_t  gmacgrp_mac_address63_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS63_LOW */
    volatile uint32_t  gmacgrp_mac_address64_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_HIGH */
    volatile uint32_t  gmacgrp_mac_address64_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS64_LOW */
    volatile uint32_t  gmacgrp_mac_address65_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_HIGH */
    volatile uint32_t  gmacgrp_mac_address65_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS65_LOW */
    volatile uint32_t  gmacgrp_mac_address66_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_HIGH */
    volatile uint32_t  gmacgrp_mac_address66_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS66_LOW */
    volatile uint32_t  gmacgrp_mac_address67_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_HIGH */
    volatile uint32_t  gmacgrp_mac_address67_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS67_LOW */
    volatile uint32_t  gmacgrp_mac_address68_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_HIGH */
    volatile uint32_t  gmacgrp_mac_address68_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS68_LOW */
    volatile uint32_t  gmacgrp_mac_address69_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_HIGH */
    volatile uint32_t  gmacgrp_mac_address69_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS69_LOW */
    volatile uint32_t  gmacgrp_mac_address70_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_HIGH */
    volatile uint32_t  gmacgrp_mac_address70_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS70_LOW */
    volatile uint32_t  gmacgrp_mac_address71_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_HIGH */
    volatile uint32_t  gmacgrp_mac_address71_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS71_LOW */
    volatile uint32_t  gmacgrp_mac_address72_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_HIGH */
    volatile uint32_t  gmacgrp_mac_address72_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS72_LOW */
    volatile uint32_t  gmacgrp_mac_address73_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_HIGH */
    volatile uint32_t  gmacgrp_mac_address73_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS73_LOW */
    volatile uint32_t  gmacgrp_mac_address74_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_HIGH */
    volatile uint32_t  gmacgrp_mac_address74_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS74_LOW */
    volatile uint32_t  gmacgrp_mac_address75_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_HIGH */
    volatile uint32_t  gmacgrp_mac_address75_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS75_LOW */
    volatile uint32_t  gmacgrp_mac_address76_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_HIGH */
    volatile uint32_t  gmacgrp_mac_address76_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS76_LOW */
    volatile uint32_t  gmacgrp_mac_address77_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_HIGH */
    volatile uint32_t  gmacgrp_mac_address77_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS77_LOW */
    volatile uint32_t  gmacgrp_mac_address78_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_HIGH */
    volatile uint32_t  gmacgrp_mac_address78_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS78_LOW */
    volatile uint32_t  gmacgrp_mac_address79_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_HIGH */
    volatile uint32_t  gmacgrp_mac_address79_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS79_LOW */
    volatile uint32_t  gmacgrp_mac_address80_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_HIGH */
    volatile uint32_t  gmacgrp_mac_address80_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS80_LOW */
    volatile uint32_t  gmacgrp_mac_address81_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_HIGH */
    volatile uint32_t  gmacgrp_mac_address81_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS81_LOW */
    volatile uint32_t  gmacgrp_mac_address82_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_HIGH */
    volatile uint32_t  gmacgrp_mac_address82_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS82_LOW */
    volatile uint32_t  gmacgrp_mac_address83_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_HIGH */
    volatile uint32_t  gmacgrp_mac_address83_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS83_LOW */
    volatile uint32_t  gmacgrp_mac_address84_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_HIGH */
    volatile uint32_t  gmacgrp_mac_address84_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS84_LOW */
    volatile uint32_t  gmacgrp_mac_address85_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_HIGH */
    volatile uint32_t  gmacgrp_mac_address85_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS85_LOW */
    volatile uint32_t  gmacgrp_mac_address86_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_HIGH */
    volatile uint32_t  gmacgrp_mac_address86_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS86_LOW */
    volatile uint32_t  gmacgrp_mac_address87_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_HIGH */
    volatile uint32_t  gmacgrp_mac_address87_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS87_LOW */
    volatile uint32_t  gmacgrp_mac_address88_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_HIGH */
    volatile uint32_t  gmacgrp_mac_address88_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS88_LOW */
    volatile uint32_t  gmacgrp_mac_address89_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_HIGH */
    volatile uint32_t  gmacgrp_mac_address89_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS89_LOW */
    volatile uint32_t  gmacgrp_mac_address90_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_HIGH */
    volatile uint32_t  gmacgrp_mac_address90_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS90_LOW */
    volatile uint32_t  gmacgrp_mac_address91_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_HIGH */
    volatile uint32_t  gmacgrp_mac_address91_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS91_LOW */
    volatile uint32_t  gmacgrp_mac_address92_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_HIGH */
    volatile uint32_t  gmacgrp_mac_address92_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS92_LOW */
    volatile uint32_t  gmacgrp_mac_address93_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_HIGH */
    volatile uint32_t  gmacgrp_mac_address93_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS93_LOW */
    volatile uint32_t  gmacgrp_mac_address94_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_HIGH */
    volatile uint32_t  gmacgrp_mac_address94_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS94_LOW */
    volatile uint32_t  gmacgrp_mac_address95_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_HIGH */
    volatile uint32_t  gmacgrp_mac_address95_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS95_LOW */
    volatile uint32_t  gmacgrp_mac_address96_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_HIGH */
    volatile uint32_t  gmacgrp_mac_address96_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS96_LOW */
    volatile uint32_t  gmacgrp_mac_address97_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_HIGH */
    volatile uint32_t  gmacgrp_mac_address97_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS97_LOW */
    volatile uint32_t  gmacgrp_mac_address98_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_HIGH */
    volatile uint32_t  gmacgrp_mac_address98_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS98_LOW */
    volatile uint32_t  gmacgrp_mac_address99_high;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_HIGH */
    volatile uint32_t  gmacgrp_mac_address99_low;                        /* ALT_EMAC_GMACGRP_MAC_ADDRESS99_LOW */
    volatile uint32_t  gmacgrp_mac_address100_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_HIGH */
    volatile uint32_t  gmacgrp_mac_address100_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS100_LOW */
    volatile uint32_t  gmacgrp_mac_address101_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_HIGH */
    volatile uint32_t  gmacgrp_mac_address101_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS101_LOW */
    volatile uint32_t  gmacgrp_mac_address102_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_HIGH */
    volatile uint32_t  gmacgrp_mac_address102_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS102_LOW */
    volatile uint32_t  gmacgrp_mac_address103_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_HIGH */
    volatile uint32_t  gmacgrp_mac_address103_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS103_LOW */
    volatile uint32_t  gmacgrp_mac_address104_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_HIGH */
    volatile uint32_t  gmacgrp_mac_address104_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS104_LOW */
    volatile uint32_t  gmacgrp_mac_address105_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_HIGH */
    volatile uint32_t  gmacgrp_mac_address105_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS105_LOW */
    volatile uint32_t  gmacgrp_mac_address106_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_HIGH */
    volatile uint32_t  gmacgrp_mac_address106_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS106_LOW */
    volatile uint32_t  gmacgrp_mac_address107_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_HIGH */
    volatile uint32_t  gmacgrp_mac_address107_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS107_LOW */
    volatile uint32_t  gmacgrp_mac_address108_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_HIGH */
    volatile uint32_t  gmacgrp_mac_address108_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS108_LOW */
    volatile uint32_t  gmacgrp_mac_address109_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_HIGH */
    volatile uint32_t  gmacgrp_mac_address109_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS109_LOW */
    volatile uint32_t  gmacgrp_mac_address110_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_HIGH */
    volatile uint32_t  gmacgrp_mac_address110_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS110_LOW */
    volatile uint32_t  gmacgrp_mac_address111_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_HIGH */
    volatile uint32_t  gmacgrp_mac_address111_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS111_LOW */
    volatile uint32_t  gmacgrp_mac_address112_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_HIGH */
    volatile uint32_t  gmacgrp_mac_address112_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS112_LOW */
    volatile uint32_t  gmacgrp_mac_address113_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_HIGH */
    volatile uint32_t  gmacgrp_mac_address113_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS113_LOW */
    volatile uint32_t  gmacgrp_mac_address114_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_HIGH */
    volatile uint32_t  gmacgrp_mac_address114_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS114_LOW */
    volatile uint32_t  gmacgrp_mac_address115_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_HIGH */
    volatile uint32_t  gmacgrp_mac_address115_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS115_LOW */
    volatile uint32_t  gmacgrp_mac_address116_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_HIGH */
    volatile uint32_t  gmacgrp_mac_address116_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS116_LOW */
    volatile uint32_t  gmacgrp_mac_address117_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_HIGH */
    volatile uint32_t  gmacgrp_mac_address117_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS117_LOW */
    volatile uint32_t  gmacgrp_mac_address118_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_HIGH */
    volatile uint32_t  gmacgrp_mac_address118_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS118_LOW */
    volatile uint32_t  gmacgrp_mac_address119_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_HIGH */
    volatile uint32_t  gmacgrp_mac_address119_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS119_LOW */
    volatile uint32_t  gmacgrp_mac_address120_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_HIGH */
    volatile uint32_t  gmacgrp_mac_address120_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS120_LOW */
    volatile uint32_t  gmacgrp_mac_address121_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_HIGH */
    volatile uint32_t  gmacgrp_mac_address121_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS121_LOW */
    volatile uint32_t  gmacgrp_mac_address122_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_HIGH */
    volatile uint32_t  gmacgrp_mac_address122_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS122_LOW */
    volatile uint32_t  gmacgrp_mac_address123_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_HIGH */
    volatile uint32_t  gmacgrp_mac_address123_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS123_LOW */
    volatile uint32_t  gmacgrp_mac_address124_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_HIGH */
    volatile uint32_t  gmacgrp_mac_address124_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS124_LOW */
    volatile uint32_t  gmacgrp_mac_address125_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_HIGH */
    volatile uint32_t  gmacgrp_mac_address125_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS125_LOW */
    volatile uint32_t  gmacgrp_mac_address126_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_HIGH */
    volatile uint32_t  gmacgrp_mac_address126_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS126_LOW */
    volatile uint32_t  gmacgrp_mac_address127_high;                      /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_HIGH */
    volatile uint32_t  gmacgrp_mac_address127_low;                       /* ALT_EMAC_GMACGRP_MAC_ADDRESS127_LOW */
    volatile uint32_t  _pad_0xb80_0xfff[288];                            /* *UNDEFINED* */
    volatile uint32_t  dmagrp_bus_mode;                                  /* ALT_EMAC_DMAGRP_BUS_MODE */
    volatile uint32_t  dmagrp_transmit_poll_demand;                      /* ALT_EMAC_DMAGRP_TRANSMIT_POLL_DEMAND */
    volatile uint32_t  dmagrp_receive_poll_demand;                       /* ALT_EMAC_DMAGRP_RECEIVE_POLL_DEMAND */
    volatile uint32_t  dmagrp_receive_descriptor_list_address;           /* ALT_EMAC_DMAGRP_RECEIVE_DESCRIPTOR_LIST_ADDRESS */
    volatile uint32_t  dmagrp_transmit_descriptor_list_address;          /* ALT_EMAC_DMAGRP_TRANSMIT_DESCRIPTOR_LIST_ADDRESS */
    volatile uint32_t  dmagrp_status;                                    /* ALT_EMAC_DMAGRP_STATUS */
    volatile uint32_t  dmagrp_operation_mode;                            /* ALT_EMAC_DMAGRP_OPERATION_MODE */
    volatile uint32_t  dmagrp_interrupt_enable;                          /* ALT_EMAC_DMAGRP_INTERRUPT_ENABLE */
    volatile uint32_t  dmagrp_missed_frame_and_buffer_overflow_counter;  /* ALT_EMAC_DMAGRP_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER */
    volatile uint32_t  dmagrp_receive_interrupt_watchdog_timer;          /* ALT_EMAC_DMAGRP_RECEIVE_INTERRUPT_WATCHDOG_TIMER */
    volatile uint32_t  dmagrp_axi_bus_mode;                              /* ALT_EMAC_DMAGRP_AXI_BUS_MODE */
    volatile uint32_t  dmagrp_ahb_or_axi_status;                         /* ALT_EMAC_DMAGRP_AHB_OR_AXI_STATUS */
    volatile uint32_t  _pad_0x1030_0x1047[6];                            /* *UNDEFINED* */
    volatile uint32_t  dmagrp_current_host_transmit_descriptor;          /* ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_DESCRIPTOR */
    volatile uint32_t  dmagrp_current_host_receive_descriptor;           /* ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_DESCRIPTOR */
    volatile uint32_t  dmagrp_current_host_transmit_buffer_address;      /* ALT_EMAC_DMAGRP_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS */
    volatile uint32_t  dmagrp_current_host_receive_buffer_address;       /* ALT_EMAC_DMAGRP_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS */
    volatile uint32_t  dmagrp_hw_feature;                                /* ALT_EMAC_DMAGRP_HW_FEATURE */
};

/* The typedef declaration for the raw register contents of register group ALT_EMAC. */
typedef struct ALT_EMAC_raw_s  ALT_EMAC_raw_t;
#endif  /* __ASSEMBLY__ */


#ifdef __cplusplus
}
#endif  /* __cplusplus */
#endif  /* __ALT_SOCAL_EMAC_H__ */

